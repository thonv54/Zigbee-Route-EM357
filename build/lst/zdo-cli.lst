###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        10/Sep/2015  09:00:30
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  E:\Zigbee\EmberZNet5.6.0-GA\app\framework\cli\zdo-cli.c
#    Command line =  
#        E:\Zigbee\EmberZNet5.6.0-GA\app\framework\cli\zdo-cli.c -D NULL_BTL -D
#        CORTEXM3 -D CORTEXM3_EMBER_MICRO -D CORTEXM3_EM357 -D PHY_EM3XX -D
#        "APPLICATION_TOKEN_HEADER=\"app/framework/util/tokens.h\"" -D
#        "ATTRIBUTE_STORAGE_CONFIGURATION=\"app/builder/ZigbeeRoute/ZigbeeRoute_endpoint_config.h\""
#        -D "BOARD_HEADER=\"app\builder\ZigbeeRoute\ZigbeeRoute_board.h\"" -D
#        "CONFIGURATION_HEADER=\"app/framework/util/config.h\"" -D
#        "GENERATED_TOKEN_HEADER=\"app/builder/ZigbeeRoute/ZigbeeRoute_tokens.h\""
#        -D "PLATFORM_HEADER=\"hal/micro/cortexm3/compiler/iar.h\"" -D
#        "ZA_GENERATED_HEADER=\"app/builder/ZigbeeRoute/ZigbeeRoute.h\"" -D
#        "__SOURCEFILE__=\"zdo-cli.c\"" -lC
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\build\lst\
#        --diag_suppress Pa050 -o
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\build\obj\ --debug
#        --endian=little --cpu=Cortex-M3 --no_path_in_file_macros
#        --separate_cluster_for_initialized_variables -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\framework\cli\ -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\ -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\ -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\app\framework\include\
#        -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\app\util\
#        -I E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\stack\
#        -I E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\hal\
#        -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\hal\..\
#        -Ohz --use_c++_inline
#    List file    =  
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\build\lst\zdo-cli.lst
#    Object file  =  
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\build\obj\zdo-cli.o
#
###############################################################################

E:\Zigbee\EmberZNet5.6.0-GA\app\framework\cli\zdo-cli.c
      1          // *****************************************************************************
      2          // * zdo-cli.c
      3          // *
      4          // * CLI commands for sending ZDO messages.
      5          // *
      6          // * Copyright 2010 by Ember Corporation. All rights reserved.              *80*
      7          // *****************************************************************************
      8          
      9          // common include file
     10          #include "app/framework/util/common.h"
     11          #include "app/framework/util/af-main.h"
     12          
     13          #include "app/util/serial/command-interpreter2.h"
     14          
     15          #include "app/util/zigbee-framework/zigbee-device-common.h"
     16          
     17          #if defined(EZSP_HOST)
     18            #include "app/util/zigbee-framework/zigbee-device-host.h"
     19          #else // SOC
     20            #include "app/util/zigbee-framework/zigbee-device-library.h"
     21          #endif
     22          
     23          #include "app/framework/cli/option-cli.h"
     24          
     25          //------------------------------------------------------------------------------
     26          // Forward declarations
     27          
     28          void zdoNwkAddressRequestCommand(void);
     29          void zdoIeeeAddressRequestCommand(void);
     30          void zdoSimpleCommand(void);
     31          void zdoNodeCommand(void);
     32          void zdoMatchCommand(void);
     33          void zdoBindCommand(void);
     34          void zdoAddClusterCommand(void);
     35          void zdoClearClusterCommand(void);
     36          void zdoNetworkUpdateChannelCommand(void);
     37          void zdoNetworkUpdateScanCommand(void);
     38          void zdoNetworkUpdateSetCommand(void);
     39          void zdoActiveEpCommand(void);
     40          void zdoMgmtLqiCommand(void);
     41          void zdoMgmtBindCommand(void);
     42          
     43          EmberStatus matchDescriptorsRequest(EmberNodeId target,
     44                                              int16u profile,
     45                                              int8u inCount,
     46                                              int8u outCount,
     47                                              int16u *inClusters,
     48                                              int16u *outClusters,
     49                                              EmberApsOption options);
     50          
     51          //------------------------------------------------------------------------------
     52          // Globals 
     53          
     54          #ifndef EMBER_AF_GENERATE_CLI
     55          
     56          static PGM_P addClusterArguments[] = {
     57            "ZCL Cluster to add.",
     58            NULL,
     59          };
     60          
     61          static EmberCommandEntry zdoClusterCommands[] = {
     62            emberCommandEntryActionWithDetails("add", 
     63                                               zdoAddClusterCommand, 
     64                                               "v",
     65                                               "Add a ZCL cluster to the CLI's list.",
     66                                               addClusterArguments),
     67            emberCommandEntryAction("clear", 
     68                                    zdoClearClusterCommand, 
     69                                    "",
     70                                    "Remove all ZCL clusters from the CLI's list"),
     71            emberCommandEntryTerminator(),
     72          };
     73          
     74          static PGM_P channelChangeArguments[] = {
     75            "Channel to change to.",
     76            NULL,
     77          };
     78          
     79          static PGM_P channelScanArguments[] = {
     80            "Target Node ID",
     81            "Scan Duration",  // see stack/include/zigbee-device-stack.h for enumeration
     82            "Scan count",
     83            NULL,
     84          };
     85          
     86          static PGM_P channelManagerArguments[] = {
     87            "NWK manager node ID",
     88            "Channel mask",
     89            NULL,
     90          };
     91          
     92          static EmberCommandEntry zdoNetworkUpdateCommands[] = {
     93            emberCommandEntryActionWithDetails("chan", 
     94                                               zdoNetworkUpdateChannelCommand, 
     95                                               "u",
     96                                               "Send a channel change command.",
     97                                               channelChangeArguments),
     98            emberCommandEntryActionWithDetails("scan", 
     99                                               zdoNetworkUpdateScanCommand,    
    100                                               "vuv",
    101                                               "Tell a remote node to perform a channel scan",
    102                                               channelScanArguments),
    103            emberCommandEntryActionWithDetails("set",  
    104                                               zdoNetworkUpdateSetCommand,     
    105                                               "vw",
    106                                               "Broadcast a new NWK manager Node ID and channel list.",
    107                                               channelManagerArguments),
    108            emberCommandEntryTerminator(),
    109          };
    110          
    111          
    112          static PGM_P simpleDescriptorArguments[] = {
    113            "The target node ID",
    114            "The target endpoint",
    115            NULL,
    116          };
    117          
    118          static PGM_P zdoMatchCommandArguments[] = {
    119            "Target node ID",
    120            "Profile ID",
    121            NULL,
    122          };
    123          
    124          static PGM_P zdoBindCommandArguments[] = {
    125            "Dest node ID",
    126            "local EP",
    127            "remote EP",
    128            "cluster ID",
    129            "THEIR EUI",
    130            "binding dest EUI",
    131            NULL,
    132          };
    133          
    134          static PGM_P zdoMgmtLqiCommandArguments[] = {
    135            "Dest node ID",
    136            "start index",
    137            NULL,
    138          };
    139          
    140          EmberCommandEntry zdoCommands[] = {
    141            emberCommandEntryAction("active",
    142                                    zdoActiveEpCommand,
    143                                    "v",
    144                                    "Send an Active EP request"),
    145            emberCommandEntryActionWithDetails("bind",
    146                                               zdoBindCommand,                          
    147                                               "vuuvbb",
    148                                               "Sends bind request",
    149                                               zdoBindCommandArguments),
    150            emberCommandEntryAction("ieee",
    151                                    zdoIeeeAddressRequestCommand,
    152                                    "v",
    153                                    "Unicast an IEEE address request to the specified node."),
    154            emberCommandEntrySubMenu("in-cl-list",  
    155                                     zdoClusterCommands, 
    156                                     "Modify input cluster list"),
    157            emberCommandEntryActionWithDetails("match",
    158                                               zdoMatchCommand,
    159                                               "vv",
    160                                               "Send a match descriptor request using CLI configured in/out clusters.",
    161                                               zdoMatchCommandArguments),
    162            emberCommandEntryActionWithDetails("mgmt-lqi",
    163                                               zdoMgmtLqiCommand,
    164                                               "vu",
    165                                               "Send a MGMT-LQI (LQI Table) request to target",
    166                                               zdoMgmtLqiCommandArguments),
    167            emberCommandEntryActionWithDetails("mgmt-bind",
    168                                               zdoMgmtBindCommand,
    169                                               "vu",
    170                                               "Send a MGMT-Bind (Binding Table) request to target",
    171                                               zdoMgmtLqiCommandArguments), // Binding Table Req uses same args as LQI Table Req
    172            emberCommandEntryAction("node",
    173                                    zdoNodeCommand,
    174                                    "v",
    175                                    "Send a node descriptor request to target"),
    176            emberCommandEntryAction("nwk", 
    177                                    zdoNwkAddressRequestCommand,
    178                                    "b",
    179                                    "Broadcast a NWK address request for the specified IEEE."),
    180            emberCommandEntrySubMenu("nwk-upd",     
    181                                     zdoNetworkUpdateCommands,
    182                                     "Frequency Agility Commands"),
    183            emberCommandEntrySubMenu("out-cl-list", 
    184                                     zdoClusterCommands,
    185                                     "Modify output cluster list"),
    186            emberCommandEntryActionWithDetails("simple",      
    187                                               zdoSimpleCommand,                        
    188                                               "vu",
    189                                               "Send a Simple Descriptor request to the target node and endpoint",
    190                                               simpleDescriptorArguments),
    191            emberCommandEntryTerminator(),
    192          };
    193          
    194          #endif // EMBER_AF_GENERATE_CLI
    195          
    196          #define MAX_CLUSTERS_CAN_MATCH 5

   \                                 In section .bss, align 4
    197          static int16u zdoInClusters[MAX_CLUSTERS_CAN_MATCH];
    198          static int16u zdoOutClusters[MAX_CLUSTERS_CAN_MATCH];
    199          static int8u inClCount = 0;
   \                     inClCount:
   \   00000000                      DS8 1
   \   00000001                      DS8 1
   \   00000002                      DS8 2
   \   00000004                      DS8 12
   \   00000010                      DS8 12
    200          static int8u outClCount = 0;
    201          
    202          //------------------------------------------------------------------------------
    203          
    204          // *****************************************
    205          // zdoCommand
    206          //
    207          // zdo nwk <eui64:big-endian>
    208          // zdo ieee <node-id>
    209          // zdo simple <dest> <target ep>
    210          // zdo node <dest>
    211          // zdo match  <dest> <profile>
    212          // zdo bind   <dest> <local ep> <remote ep> <cluster> <THEIR eui> <dest eui>
    213          // zdo in-cl-list add <cluster IDs>
    214          // zdo in-cl-list clear
    215          // zdo out-cl-list add <clusters IDs>
    216          // zdo out-cl-list clear
    217          // zdo nwk-upd chan  <channel>
    218          // zdo nwk-upd set   <nwk mgr id>  <chan mask>
    219          // zdo nwk-upd scan  <target> <duration> <count>
    220          // zdo active <target>
    221          // *****************************************
    222          

   \                                 In section .text, align 2, keep-with-next
    223          void zdoNwkAddressRequestCommand(void)
    224          {
   \                     zdoNwkAddressRequestCommand: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    225            EmberEUI64 eui64;
    226            emberCopyBigEndianEui64Argument(0, eui64);
   \   00000004   0xA900             ADD      R1,SP,#+0
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x.... 0x....      BL       emberCopyBigEndianEui64Argument
    227            emberAfFindNodeId(eui64,
    228                              emAfCliServiceDiscoveryCallback);
   \   0000000C   0x....             LDR.N    R1,??DataTable6
   \   0000000E   0xA800             ADD      R0,SP,#+0
   \   00000010   0x.... 0x....      BL       emberAfFindNodeId
    229          }
   \   00000014   0xBD07             POP      {R0-R2,PC}       ;; return
    230          

   \                                 In section .text, align 2, keep-with-next
    231          void zdoIeeeAddressRequestCommand(void)
    232          {
   \                     zdoIeeeAddressRequestCommand: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    233            EmberNodeId id = (EmberNodeId)emberUnsignedCommandArgument(0);
   \   00000002   0x.... 0x....      BL       ?Subroutine2
    234            emberAfFindIeeeAddress(id,
    235                                   emAfCliServiceDiscoveryCallback);
   \                     ??CrossCallReturnLabel_16: (+1)
   \   00000006   0xE8BD 0x4004      POP      {R2,LR}
   \   0000000A   0x....             LDR.N    R1,??DataTable6
   \   0000000C   0xB280             UXTH     R0,R0
   \   0000000E   0x.... 0x....      B.W      emberAfFindIeeeAddress
    236          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x.... 0x....      B.W      emberUnsignedCommandArgument
    237          

   \                                 In section .text, align 2, keep-with-next
    238          void zdoSimpleCommand(void)
    239          {
   \                     zdoSimpleCommand: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    240            EmberNodeId target = (EmberNodeId)emberUnsignedCommandArgument(0);
   \   00000002   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_15: (+1)
   \   00000006   0x.... 0x....      BL       ?Subroutine3
    241            int8u targetEndpoint = (int8u)emberUnsignedCommandArgument(1);
    242            EmberStatus status = emberSimpleDescriptorRequest(target,
    243                                                              targetEndpoint,
    244                                                              EMBER_AF_DEFAULT_APS_OPTIONS);
   \                     ??CrossCallReturnLabel_25: (+1)
   \   0000000A   0xB2C1             UXTB     R1,R0
   \   0000000C   0xB2A0             UXTH     R0,R4
   \   0000000E   0xE8BD 0x4010      POP      {R4,LR}
   \   00000012   0xF44F 0x528A      MOV      R2,#+4416
   \   00000016   0x.... 0x....      B.W      emberSimpleDescriptorRequest
    245            emberAfAppPrintln("ZDO simple desc req %x", status);
    246          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3: (+1)
   \   00000000   0x4604             MOV      R4,R0
   \   00000002   0x2001             MOVS     R0,#+1
   \   00000004   0x.... 0x....      B.W      emberUnsignedCommandArgument
    247          

   \                                 In section .text, align 2, keep-with-next
    248          void zdoNodeCommand(void)
    249          {
   \                     zdoNodeCommand: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    250            EmberNodeId target = (EmberNodeId)emberUnsignedCommandArgument(0);
   \   00000002   0x.... 0x....      BL       ?Subroutine2
    251            EmberStatus status = emberNodeDescriptorRequest(target,
    252                                                            EMBER_AF_DEFAULT_APS_OPTIONS);
   \                     ??CrossCallReturnLabel_14: (+1)
   \   00000006   0xE8BD 0x4008      POP      {R3,LR}
   \   0000000A   0xF44F 0x528A      MOV      R2,#+4416
   \   0000000E   0x2102             MOVS     R1,#+2
   \   00000010   0x....             B.N      ?Subroutine0
    253            emberAfAppPrintln("ZDO node desc req %x", status);
    254          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0xB280             UXTH     R0,R0
   \   00000002   0x.... 0x....      B.W      emberSendZigDevRequestTarget
    255          

   \                                 In section .text, align 2, keep-with-next
    256          void zdoMatchCommand(void)
    257          {
   \                     zdoMatchCommand: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
    258            EmberNodeId target = (EmberNodeId)emberUnsignedCommandArgument(0);
   \   00000004   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_13: (+1)
   \   00000008   0x.... 0x....      BL       ?Subroutine3
    259            int16u profile = (int16u)emberUnsignedCommandArgument(1);
    260            EmberStatus status = matchDescriptorsRequest(target,
    261                                                         profile,
    262                                                         inClCount,
    263                                                         outClCount,
    264                                                         zdoInClusters, 
    265                                                         zdoOutClusters, 
    266                                                         EMBER_AF_DEFAULT_APS_OPTIONS);
   \                     ??CrossCallReturnLabel_24: (+1)
   \   0000000C   0xF44F 0x528A      MOV      R2,#+4416
   \   00000010   0x9202             STR      R2,[SP, #+8]
   \   00000012   0x....             LDR.N    R1,??DataTable6_1
   \   00000014   0x784B             LDRB     R3,[R1, #+1]
   \   00000016   0xF101 0x0210      ADD      R2,R1,#+16
   \   0000001A   0x9201             STR      R2,[SP, #+4]
   \   0000001C   0x1D0A             ADDS     R2,R1,#+4
   \   0000001E   0x9200             STR      R2,[SP, #+0]
   \   00000020   0x780A             LDRB     R2,[R1, #+0]
   \   00000022   0xB281             UXTH     R1,R0
   \   00000024   0xB2A0             UXTH     R0,R4
   \   00000026   0x.... 0x....      BL       matchDescriptorsRequest
    267            emberAfAppPrintln("ZDO match desc req %x", status);
    268          }
   \   0000002A   0xBD1F             POP      {R0-R4,PC}       ;; return
    269          

   \                                 In section .text, align 2, keep-with-next
    270          static EmberStatus copyOrLookupEui64(int8u argumentNumber,
    271                                               EmberNodeId nodeId,
    272                                               EmberEUI64 returnEui64)
    273          {
   \                     copyOrLookupEui64: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x460C             MOV      R4,R1
   \   00000004   0x4615             MOV      R5,R2
    274            EmberStatus status = EMBER_SUCCESS;
   \   00000006   0x2600             MOVS     R6,#+0
    275            if (0 == emberCopyBigEndianEui64Argument(argumentNumber, returnEui64)) {
   \   00000008   0x4629             MOV      R1,R5
   \   0000000A   0xB240             SXTB     R0,R0
   \   0000000C   0x.... 0x....      BL       emberCopyBigEndianEui64Argument
   \   00000010   0xB920             CBNZ.N   R0,??copyOrLookupEui64_0
    276              status = emberLookupEui64ByNodeId(nodeId, returnEui64);
   \   00000012   0x4629             MOV      R1,R5
   \   00000014   0x4620             MOV      R0,R4
   \   00000016   0x.... 0x....      BL       emberLookupEui64ByNodeId
   \   0000001A   0x4606             MOV      R6,R0
    277              if (status != EMBER_SUCCESS) {
    278                emberAfAppPrintln("Error:  EUI64 argument is empty and lookup by node ID failed.");
    279              }
    280            }
    281            return status;
   \                     ??copyOrLookupEui64_0: (+1)
   \   0000001C   0x4630             MOV      R0,R6
   \   0000001E   0xBD70             POP      {R4-R6,PC}       ;; return
    282          }
    283          
    284          // For simple bind requests, just put {} as the last argument
    285          //   zdo bind <dest> <local ep> <remote ep> <cluster> <THEIR EUI> {}
    286          //
    287          // More complex requests, you can actually specify the dest EUI64 of,
    288          // the binding, which is NOT the same as the EUI64 of the destination
    289          // of the device receiving the binding.  This allows for a user
    290          // to set multiple bindings on the destination for different devices.
    291          //   zdo bind <dest> <local ep> <remote ep> <cluster> <THEIR EUI> <dest EUI64>

   \                                 In section .text, align 2, keep-with-next
    292          void zdoBindCommand(void)
    293          {
   \                     zdoBindCommand: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB08B             SUB      SP,SP,#+44
    294            EmberStatus status;
    295            EmberEUI64 sourceEui, destEui;  // names relative to binding sent over-the-air
    296            EmberNodeId target = (EmberNodeId)emberUnsignedCommandArgument(0);
   \   00000004   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_12: (+1)
   \   00000008   0x.... 0x....      BL       ?Subroutine3
    297            int8u sourceEndpoint = (int8u)emberUnsignedCommandArgument(1);
   \                     ??CrossCallReturnLabel_23: (+1)
   \   0000000C   0x.... 0x....      BL       ?Subroutine4
    298            int8u destinationEndpoint = (int8u)emberUnsignedCommandArgument(2);
   \                     ??CrossCallReturnLabel_29: (+1)
   \   00000010   0x4606             MOV      R6,R0
    299            int16u clusterId = (int16u)emberUnsignedCommandArgument(3);
   \   00000012   0x2003             MOVS     R0,#+3
   \   00000014   0x.... 0x....      BL       emberUnsignedCommandArgument
   \   00000018   0x4607             MOV      R7,R0
    300          
    301            // NOTE:  The source/dest EUI is relative to the context.
    302            // In the case of the syntax of the CLI, we take "THEIR EUI64" to mean
    303            // the recipient of the binding request message.  However, when sending
    304            // the bind request that EUI64 used by the ZDO command is
    305            // actually the source for the binding because we are telling the remote
    306            // device (the destination) to create a binding with a source of itself.
    307            // And the destination for that binding will be this local device.
    308            // This is also not to be confused with the (short) destination of the ZDO
    309            // request itself.  
    310            if (EMBER_SUCCESS != copyOrLookupEui64(4, target, sourceEui)) {
   \   0000001A   0xAA08             ADD      R2,SP,#+32
   \   0000001C   0xB2A1             UXTH     R1,R4
   \   0000001E   0x2004             MOVS     R0,#+4
   \   00000020   0x.... 0x....      BL       copyOrLookupEui64
   \   00000024   0xB9D0             CBNZ.N   R0,??zdoBindCommand_0
    311              return;
    312            }
    313          
    314            // If the last argument is empty, assume an EUI64 of the local device.
    315            // This allows for the simple case.  If an EUI64 is specified, it will
    316            // be used instead of the local EUI.  This is used for setting
    317            // multiple bindings on the same remote device.
    318            if (0 == emberCopyBigEndianEui64Argument(5, destEui)) {
   \   00000026   0xA906             ADD      R1,SP,#+24
   \   00000028   0x2005             MOVS     R0,#+5
   \   0000002A   0x.... 0x....      BL       emberCopyBigEndianEui64Argument
   \   0000002E   0xB910             CBNZ.N   R0,??zdoBindCommand_1
    319              emberAfAppPrintln("Using my local EUI64 for dest EUI64 in binding");
    320              emberAfGetEui64(destEui);
   \   00000030   0xA806             ADD      R0,SP,#+24
   \   00000032   0x.... 0x....      BL       emberAfGetEui64
    321            }
    322          
    323            status = emberBindRequest(target,          // who gets the bind req
    324                                      sourceEui,       // source eui IN the binding
    325                                      sourceEndpoint,
    326                                      clusterId,       
    327                                      UNICAST_BINDING, // binding type
    328                                      destEui,         // destination eui IN the binding
    329                                      0,               // groupId for new binding
    330                                      destinationEndpoint,
    331                                      EMBER_AF_DEFAULT_APS_OPTIONS);
   \                     ??zdoBindCommand_1: (+1)
   \   00000036   0xF44F 0x508A      MOV      R0,#+4416
   \   0000003A   0x9005             STR      R0,[SP, #+20]
   \   0000003C   0xB2F6             UXTB     R6,R6
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0x9003             STR      R0,[SP, #+12]
   \   00000042   0xB2BF             UXTH     R7,R7
   \   00000044   0xA806             ADD      R0,SP,#+24
   \   00000046   0x9002             STR      R0,[SP, #+8]
   \   00000048   0x9604             STR      R6,[SP, #+16]
   \   0000004A   0x2003             MOVS     R0,#+3
   \   0000004C   0x9001             STR      R0,[SP, #+4]
   \   0000004E   0x9700             STR      R7,[SP, #+0]
   \   00000050   0xB2EB             UXTB     R3,R5
   \   00000052   0xAA08             ADD      R2,SP,#+32
   \   00000054   0x2121             MOVS     R1,#+33
   \   00000056   0xB2A0             UXTH     R0,R4
   \   00000058   0x.... 0x....      BL       emberSendZigDevBindRequest
    332            UNUSED_VAR(status);
    333            emberAfAppPrintln("ZDO bind req %x", status);
    334          }
   \                     ??zdoBindCommand_0: (+1)
   \   0000005C   0xB00B             ADD      SP,SP,#+44
   \   0000005E   0xBDF0             POP      {R4-R7,PC}       ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine4: (+1)
   \   00000000   0x4605             MOV      R5,R0
   \   00000002   0x2002             MOVS     R0,#+2
   \   00000004   0x.... 0x....      B.W      emberUnsignedCommandArgument
    335          

   \                                 In section .text, align 2, keep-with-next
    336          void zdoAddClusterCommand(void)
    337          {
   \                     zdoAddClusterCommand: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    338            int16u *clusters;
    339            int8u *clCount;
    340            if (emberStringCommandArgument(-2, NULL)[0]  == 'i') {
   \   00000002   0x.... 0x....      BL       ?Subroutine5
   \                     ??CrossCallReturnLabel_31: (+1)
   \   00000006   0x7800             LDRB     R0,[R0, #+0]
   \   00000008   0x....             LDR.N    R4,??DataTable6_1
   \   0000000A   0x2869             CMP      R0,#+105
   \   0000000C   0xBF0E             ITEE     EQ 
    341              clusters = zdoInClusters;
   \   0000000E   0x1D25             ADDEQ    R5,R4,#+4
    342              clCount = &inClCount;
    343            } else {
    344              clusters = zdoOutClusters;
   \   00000010   0xF104 0x0510      ADDNE    R5,R4,#+16
    345              clCount = &outClCount;
   \   00000014   0x1C64             ADDNE    R4,R4,#+1
    346            }
    347          
    348            if (*clCount < MAX_CLUSTERS_CAN_MATCH) {
   \   00000016   0x7820             LDRB     R0,[R4, #+0]
   \   00000018   0x2805             CMP      R0,#+5
   \   0000001A   0xDA07             BGE.N    ??zdoAddClusterCommand_0
    349              clusters[*clCount] = (int16u)emberUnsignedCommandArgument(0);
   \   0000001C   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_11: (+1)
   \   00000020   0x7821             LDRB     R1,[R4, #+0]
   \   00000022   0xF825 0x0011      STRH     R0,[R5, R1, LSL #+1]
    350              (*clCount)++;
   \   00000026   0x7820             LDRB     R0,[R4, #+0]
   \   00000028   0x1C40             ADDS     R0,R0,#+1
   \   0000002A   0x7020             STRB     R0,[R4, #+0]
    351            } else {
    352              emberAfAppPrintln("cluster limit reached");
    353            }
    354          }
   \                     ??zdoAddClusterCommand_0: (+1)
   \   0000002C   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine5: (+1)
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0xF06F 0x0001      MVN      R0,#+1
   \   00000006   0x.... 0x....      B.W      emberStringCommandArgument
    355          

   \                                 In section .text, align 2, keep-with-next
    356          void zdoClearClusterCommand(void)
    357          {
   \                     zdoClearClusterCommand: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    358            if (emberStringCommandArgument(-2, NULL)[0]  == 'i') {
   \   00000002   0x.... 0x....      BL       ?Subroutine5
   \                     ??CrossCallReturnLabel_30: (+1)
   \   00000006   0x7800             LDRB     R0,[R0, #+0]
   \   00000008   0x....             LDR.N    R1,??DataTable6_1
   \   0000000A   0x2869             CMP      R0,#+105
   \   0000000C   0xBF07             ITTEE    EQ 
    359              inClCount = 0;
   \   0000000E   0x2000             MOVEQ    R0,#+0
   \   00000010   0x7008             STRBEQ   R0,[R1, #+0]
    360            } else {
    361              outClCount = 0;
   \   00000012   0x2000             MOVNE    R0,#+0
   \   00000014   0x7048             STRBNE   R0,[R1, #+1]
   \   00000016   0xBD01             POP      {R0,PC}
    362            }
    363          }
    364          

   \                                 In section .text, align 2, keep-with-next
    365          void zdoNetworkUpdateChannelCommand(void)
    366          {
   \                     zdoNetworkUpdateChannelCommand: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    367            int8u channel = (int8u)emberUnsignedCommandArgument(0);
   \   00000002   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_10: (+1)
   \   00000006   0xB2C0             UXTB     R0,R0
    368            if (channel < EMBER_MIN_802_15_4_CHANNEL_NUMBER
    369                || channel > EMBER_MAX_802_15_4_CHANNEL_NUMBER) {
   \   00000008   0xF1A0 0x010B      SUB      R1,R0,#+11
   \   0000000C   0x2910             CMP      R1,#+16
   \   0000000E   0xD206             BCS.N    ??zdoNetworkUpdateChannelCommand_0
    370              emberAfAppPrintln("invalid channel: %d", channel);
    371            } else {
    372              EmberStatus status = emberChannelChangeRequest(channel);
   \   00000010   0x2101             MOVS     R1,#+1
   \   00000012   0xE8BD 0x5000      POP      {R12,LR}
   \   00000016   0x4081             LSLS     R1,R1,R0
   \   00000018   0x2300             MOVS     R3,#+0
   \   0000001A   0x22FE             MOVS     R2,#+254
   \   0000001C   0x....             B.N      ?Subroutine1
    373              emberAfAppPrint("change channel status 0x%x", status);
    374            }
    375          }
   \                     ??zdoNetworkUpdateChannelCommand_0: (+1)
   \   0000001E   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \   00000000   0xF64F 0x70FF      MOVW     R0,#+65535
   \   00000004   0x.... 0x....      B.W      emberEnergyScanRequest
    376          

   \                                 In section .text, align 2, keep-with-next
    377          void zdoNetworkUpdateScanCommand(void)
    378          {
   \                     zdoNetworkUpdateScanCommand: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    379            EmberNodeId target = (EmberNodeId)emberUnsignedCommandArgument(0);
   \   00000002   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_9: (+1)
   \   00000006   0x.... 0x....      BL       ?Subroutine3
    380            int8u scanDuration = (int8u)emberUnsignedCommandArgument(1);
   \                     ??CrossCallReturnLabel_22: (+1)
   \   0000000A   0x.... 0x....      BL       ?Subroutine4
    381            int16u scanCount = (int16u)emberUnsignedCommandArgument(2);
    382            if (scanDuration > 5 || scanCount == 0 || scanCount > 8) {
   \                     ??CrossCallReturnLabel_28: (+1)
   \   0000000E   0xB2ED             UXTB     R5,R5
   \   00000010   0x2D06             CMP      R5,#+6
   \   00000012   0xDA0C             BGE.N    ??zdoNetworkUpdateScanCommand_0
   \   00000014   0xB280             UXTH     R0,R0
   \   00000016   0xB150             CBZ.N    R0,??zdoNetworkUpdateScanCommand_0
   \   00000018   0x2809             CMP      R0,#+9
   \   0000001A   0xDA08             BGE.N    ??zdoNetworkUpdateScanCommand_0
    383              emberAfAppPrintln("duration must be in range 0 - 5");
    384              emberAfAppPrintln("count must be in range 1 - 8");
    385            } else {
    386              EmberStatus status = emberEnergyScanRequest(target,
    387                                                          EMBER_ALL_802_15_4_CHANNELS_MASK,
    388                                                          scanDuration,
    389                                                          scanCount);
   \   0000001C   0x4603             MOV      R3,R0
   \   0000001E   0x462A             MOV      R2,R5
   \   00000020   0xB2A0             UXTH     R0,R4
   \   00000022   0xB001             ADD      SP,SP,#+4
   \   00000024   0xE8BD 0x4030      POP      {R4,R5,LR}
   \   00000028   0x....             LDR.N    R1,??DataTable6_2  ;; 0x7fff800
   \   0000002A   0x.... 0x....      B.W      emberEnergyScanRequest
    390              emberAfAppPrint("scan status 0x%x", status);
    391            }
    392          }
   \                     ??zdoNetworkUpdateScanCommand_0: (+1)
   \   0000002E   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    393          

   \                                 In section .text, align 2, keep-with-next
    394          void zdoNetworkUpdateSetCommand(void)
    395          {
   \                     zdoNetworkUpdateSetCommand: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    396            EmberNodeId networkManager = (EmberNodeId)emberUnsignedCommandArgument(0);
   \   00000002   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_8: (+1)
   \   00000006   0x.... 0x....      BL       ?Subroutine3
    397            int32u activeChannels = emberUnsignedCommandArgument(1);
    398            EmberStatus status = emberSetNetworkManagerRequest(networkManager,
    399                                                               activeChannels);
   \                     ??CrossCallReturnLabel_21: (+1)
   \   0000000A   0xB2A3             UXTH     R3,R4
   \   0000000C   0xE8BD 0x4010      POP      {R4,LR}
   \   00000010   0x4601             MOV      R1,R0
   \   00000012   0x22FF             MOVS     R2,#+255
   \   00000014                      REQUIRE ?Subroutine1
   \   00000014                      ;; // Fall through to label ?Subroutine1
    400            emberAfAppPrint("network update set status 0x%x", status);  
    401          }
    402          

   \                                 In section .text, align 2, keep-with-next
    403          void zdoActiveEpCommand(void)
    404          {
   \                     zdoActiveEpCommand: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    405            EmberNodeId target = (EmberNodeId)emberUnsignedCommandArgument(0);
   \   00000002   0x.... 0x....      BL       ?Subroutine2
    406            EmberStatus status = emberActiveEndpointsRequest(target,
    407                                                             EMBER_APS_OPTION_RETRY);
   \                     ??CrossCallReturnLabel_7: (+1)
   \   00000006   0xE8BD 0x4008      POP      {R3,LR}
   \   0000000A   0x2240             MOVS     R2,#+64
   \   0000000C   0x2105             MOVS     R1,#+5
   \   0000000E                      REQUIRE ?Subroutine0
   \   0000000E                      ;; // Fall through to label ?Subroutine0
    408            emberAfAppPrint("Active EP request status: 0x%X",
    409                            status);
    410          }
    411          

   \                                 In section .text, align 2, keep-with-next
    412          void zdoMgmtLqiCommand(void)
    413          {
   \                     zdoMgmtLqiCommand: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    414            EmberNodeId target = (EmberNodeId)emberUnsignedCommandArgument(0);
   \   00000002   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_6: (+1)
   \   00000006   0x.... 0x....      BL       ?Subroutine3
    415            int8u index = emberUnsignedCommandArgument(1);
    416            EmberStatus status = emberLqiTableRequest(target,
    417                                                      index,
    418                                                      EMBER_APS_OPTION_RETRY);
   \                     ??CrossCallReturnLabel_20: (+1)
   \   0000000A   0xB2A1             UXTH     R1,R4
   \   0000000C   0xE8BD 0x4010      POP      {R4,LR}
   \   00000010   0xB2C2             UXTB     R2,R0
   \   00000012   0x2340             MOVS     R3,#+64
   \   00000014   0x2031             MOVS     R0,#+49
   \   00000016   0x.... 0x....      B.W      emberTableRequest
    419            emberAfAppPrint("LQI Table request: 0x%X", status);
    420          }
    421          

   \                                 In section .text, align 2, keep-with-next
    422          void zdoMgmtBindCommand(void)
    423          {
   \                     zdoMgmtBindCommand: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    424            EmberNodeId target = (EmberNodeId)emberUnsignedCommandArgument(0);
   \   00000002   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_5: (+1)
   \   00000006   0x.... 0x....      BL       ?Subroutine3
    425            int8u index = emberUnsignedCommandArgument(1);
    426            EmberStatus status = emberBindingTableRequest(target,
    427                                                          index,
    428                                                          EMBER_APS_OPTION_RETRY);
   \                     ??CrossCallReturnLabel_19: (+1)
   \   0000000A   0xB2A1             UXTH     R1,R4
   \   0000000C   0xE8BD 0x4010      POP      {R4,LR}
   \   00000010   0xB2C2             UXTB     R2,R0
   \   00000012   0x2340             MOVS     R3,#+64
   \   00000014   0x2033             MOVS     R0,#+51
   \   00000016   0x.... 0x....      B.W      emberTableRequest
    429            emberAfAppPrint("Binding Table request: 0x%X", status);
    430          }
    431          

   \                                 In section .text, align 2, keep-with-next
    432          void zdoLeaveRequestCommand(void)
    433          {
   \                     zdoLeaveRequestCommand: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    434            EmberNodeId target = (EmberNodeId)emberUnsignedCommandArgument(0);
   \   00000004   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_4: (+1)
   \   00000008   0x.... 0x....      BL       ?Subroutine3
    435            boolean removeChildren = (boolean)emberUnsignedCommandArgument(1);
   \                     ??CrossCallReturnLabel_18: (+1)
   \   0000000C   0x.... 0x....      BL       ?Subroutine4
    436            boolean rejoin = (boolean)emberUnsignedCommandArgument(2);
    437            EmberEUI64 nullEui64 = { 0, 0, 0, 0, 0, 0, 0, 0 };
   \                     ??CrossCallReturnLabel_27: (+1)
   \   00000010   0xA900             ADD      R1,SP,#+0
   \   00000012   0x2200             MOVS     R2,#+0
   \   00000014   0x2300             MOVS     R3,#+0
   \   00000016   0xC10C             STM      R1!,{R2,R3}
    438            EmberStatus status;
                               ^
Warning[Pe550]: variable "status" was set but never used
    439          
    440            int8u options = 0;
    441            if (rejoin) {
   \   00000018   0xB2C0             UXTB     R0,R0
   \   0000001A   0xB100             CBZ.N    R0,??zdoLeaveRequestCommand_0
    442              options |= EMBER_ZIGBEE_LEAVE_AND_REJOIN;
   \   0000001C   0x2280             MOVS     R2,#+128
    443            }
    444            if (removeChildren) {
   \                     ??zdoLeaveRequestCommand_0: (+1)
   \   0000001E   0xB2ED             UXTB     R5,R5
   \   00000020   0xB10D             CBZ.N    R5,??zdoLeaveRequestCommand_1
    445              options |= EMBER_ZIGBEE_LEAVE_AND_REMOVE_CHILDREN;
   \   00000022   0xF042 0x0240      ORR      R2,R2,#0x40
    446            }
    447          
    448            status = emberLeaveRequest(target,
    449                                       nullEui64,
    450                                       options,
    451                                       EMBER_APS_OPTION_RETRY);
   \                     ??zdoLeaveRequestCommand_1: (+1)
   \   00000026   0x2340             MOVS     R3,#+64
   \   00000028   0xA900             ADD      R1,SP,#+0
   \   0000002A   0xB2A0             UXTH     R0,R4
   \   0000002C   0x.... 0x....      BL       emberLeaveRequest
    452          
    453            emberAfAppPrintln("Leave %p0x%X", "Request: ", status);
    454          }
   \   00000030   0xBD37             POP      {R0-R2,R4,R5,PC}  ;; return
    455          

   \                                 In section .text, align 2, keep-with-next
    456          void zdoPowerDescriptorRequestCommand(void)
    457          {
   \                     zdoPowerDescriptorRequestCommand: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    458            EmberNodeId target = (EmberNodeId)emberUnsignedCommandArgument(0);
   \   00000002   0x.... 0x....      BL       ?Subroutine2
    459            EmberStatus status = emberPowerDescriptorRequest(target, 
    460                                                             EMBER_APS_OPTION_RETRY);
   \                     ??CrossCallReturnLabel_3: (+1)
   \   00000006   0xE8BD 0x4008      POP      {R3,LR}
   \   0000000A   0x2240             MOVS     R2,#+64
   \   0000000C   0x2103             MOVS     R1,#+3
   \   0000000E   0x....             B.N      ?Subroutine0
    461            emberAfAppPrintln("Power Descriptor %p0x%X", "Request: ", status);
    462          }
    463          

   \                                 In section .text, align 2, keep-with-next
    464          void zdoEndDeviceBindRequestCommand(void)
    465          {
   \                     zdoEndDeviceBindRequestCommand: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    466            int8u endpoint = (int8u)emberUnsignedCommandArgument(0);
   \   00000002   0x.... 0x....      BL       ?Subroutine2
    467            EmberStatus status = emberAfSendEndDeviceBind(endpoint);
   \                     ??CrossCallReturnLabel_2: (+1)
   \   00000006   0xE8BD 0x4002      POP      {R1,LR}
   \   0000000A   0xB2C0             UXTB     R0,R0
   \   0000000C   0x.... 0x....      B.W      emberAfSendEndDeviceBind
    468            emberAfAppPrintln("End Device Bind %p0x%X", "Request: ", status);
    469          }
    470          

   \                                 In section .text, align 2, keep-with-next
    471          static void unbindRequest(boolean isGroupAddress,
    472                                    void* destination,
    473                                    int8u destinationEndpoint)
    474          {
   \                     unbindRequest: (+1)
   \   00000000   0xE92D 0x43F0      PUSH     {R4-R9,LR}
   \   00000004   0x4606             MOV      R6,R0
   \   00000006   0xB08B             SUB      SP,SP,#+44
   \   00000008   0x4689             MOV      R9,R1
   \   0000000A   0x4614             MOV      R4,R2
    475            EmberNodeId target = (EmberNodeId)emberUnsignedCommandArgument(0);
   \   0000000C   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_1: (+1)
   \   00000010   0x.... 0x....      BL       ?Subroutine4
    476            int8u sourceEndpoint = (int8u)emberUnsignedCommandArgument(2);
   \                     ??CrossCallReturnLabel_26: (+1)
   \   00000014   0x4680             MOV      R8,R0
    477            EmberAfClusterId clusterId = (EmberAfClusterId)emberUnsignedCommandArgument(3);
   \   00000016   0x2003             MOVS     R0,#+3
   \   00000018   0x.... 0x....      BL       emberUnsignedCommandArgument
   \   0000001C   0x4607             MOV      R7,R0
    478            EmberEUI64 sourceEui64;
    479            EmberEUI64 destinationEui64;
    480            EmberStatus status;
    481            EmberNodeId groupAddress = EMBER_NULL_NODE_ID;
    482          
    483            if (EMBER_SUCCESS != copyOrLookupEui64(1, target, sourceEui64)) {
   \   0000001E   0xAA08             ADD      R2,SP,#+32
   \   00000020   0xB2A9             UXTH     R1,R5
   \   00000022   0x2001             MOVS     R0,#+1
   \   00000024   0x.... 0x....      BL       copyOrLookupEui64
   \   00000028   0xB9D0             CBNZ.N   R0,??unbindRequest_0
    484              return;
    485            }
    486          
    487            if (isGroupAddress) {
   \   0000002A   0xB11E             CBZ.N    R6,??unbindRequest_1
    488              groupAddress = *((EmberNodeId*)destination);
   \   0000002C   0xF8B9 0x6000      LDRH     R6,[R9, #+0]
   \   00000030   0x2001             MOVS     R0,#+1
   \   00000032   0xE005             B.N      ??unbindRequest_2
    489            } else {
    490              groupAddress = 0;
    491              MEMMOVE(destinationEui64, destination, EUI64_SIZE);
   \                     ??unbindRequest_1: (+1)
   \   00000034   0x2208             MOVS     R2,#+8
   \   00000036   0x4649             MOV      R1,R9
   \   00000038   0xA806             ADD      R0,SP,#+24
   \   0000003A   0x.... 0x....      BL       halCommonMemMove
   \   0000003E   0x2003             MOVS     R0,#+3
   \                     ??unbindRequest_2: (+1)
   \   00000040   0x2140             MOVS     R1,#+64
   \   00000042   0x9105             STR      R1,[SP, #+20]
   \   00000044   0x9404             STR      R4,[SP, #+16]
   \   00000046   0x9603             STR      R6,[SP, #+12]
   \   00000048   0xA906             ADD      R1,SP,#+24
   \   0000004A   0x9102             STR      R1,[SP, #+8]
   \   0000004C   0x9001             STR      R0,[SP, #+4]
   \   0000004E   0xB2BF             UXTH     R7,R7
   \   00000050   0x9700             STR      R7,[SP, #+0]
   \   00000052   0xFA5F 0xF388      UXTB     R3,R8
   \   00000056   0xAA08             ADD      R2,SP,#+32
   \   00000058   0x2122             MOVS     R1,#+34
   \   0000005A   0xB2A8             UXTH     R0,R5
   \   0000005C   0x.... 0x....      BL       emberSendZigDevBindRequest
    492            }
    493          
    494            status = emberUnbindRequest(target,
    495                                        sourceEui64,
    496                                        sourceEndpoint,
    497                                        clusterId,
    498                                        (isGroupAddress
    499                                         ? MULTICAST_BINDING
    500                                         : UNICAST_BINDING),
    501                                        destinationEui64,
    502                                        groupAddress,
    503                                        destinationEndpoint,
    504                                        EMBER_APS_OPTION_RETRY);
    505            UNUSED_VAR(status);
    506            emberAfAppPrintln("Unbind %p %p0x%X", 
    507                              (isGroupAddress
    508                               ? "Group"
    509                               : "Unicast"),
    510                              "Request: ", 
    511                              status);
    512          }
   \                     ??unbindRequest_0: (+1)
   \   00000060   0xB00B             ADD      SP,SP,#+44
   \   00000062   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return
    513          

   \                                 In section .text, align 2, keep-with-next
    514          void zdoUnbindGroupCommand(void)
    515          {
   \                     zdoUnbindGroupCommand: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    516            EmberNodeId groupAddress = (EmberNodeId)emberUnsignedCommandArgument(4);
   \   00000002   0x2004             MOVS     R0,#+4
   \   00000004   0x.... 0x....      BL       emberUnsignedCommandArgument
   \   00000008   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    517            unbindRequest(TRUE,  // group addressed binding?
    518                          &groupAddress,
    519                          0);   // destination endpoint (unused)
   \   0000000C   0x2200             MOVS     R2,#+0
   \   0000000E   0xA900             ADD      R1,SP,#+0
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0x.... 0x....      BL       unbindRequest
    520          }
   \   00000016   0xBD01             POP      {R0,PC}          ;; return
    521          

   \                                 In section .text, align 2, keep-with-next
    522          void zdoUnbindUnicastCommand(void)
    523          {
   \                     zdoUnbindUnicastCommand: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
    524            EmberEUI64 destinationEui64;
    525            int8u destinationEndpoint = (int8u)emberUnsignedCommandArgument(5);
   \   00000002   0x2005             MOVS     R0,#+5
   \   00000004   0x.... 0x....      BL       emberUnsignedCommandArgument
   \   00000008   0x4604             MOV      R4,R0
    526          
    527            // If the destination EUI64 of the binding (not the destination of the 
    528            // actual message) is empty, use our local EUI64.
    529            if (0 == emberCopyBigEndianEui64Argument(4, destinationEui64)) {
   \   0000000A   0xA900             ADD      R1,SP,#+0
   \   0000000C   0x2004             MOVS     R0,#+4
   \   0000000E   0x.... 0x....      BL       emberCopyBigEndianEui64Argument
   \   00000012   0xB910             CBNZ.N   R0,??zdoUnbindUnicastCommand_0
    530              emberAfAppPrintln("Using my local EUI64 for dest EUI64 in unbinding");
    531              emberAfGetEui64(destinationEui64);
   \   00000014   0xA800             ADD      R0,SP,#+0
   \   00000016   0x.... 0x....      BL       emberAfGetEui64
    532            }
    533          
    534            unbindRequest(FALSE,   // group addressed binding?
    535                          destinationEui64,
    536                          destinationEndpoint);
   \                     ??zdoUnbindUnicastCommand_0: (+1)
   \   0000001A   0xB2E2             UXTB     R2,R4
   \   0000001C   0xA900             ADD      R1,SP,#+0
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x.... 0x....      BL       unbindRequest
    537          }
   \   00000024   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    538          

   \                                 In section .text, align 2, keep-with-next
    539          void zdoRouteRequestCommand(void)
    540          {
   \                     zdoRouteRequestCommand: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    541            EmberNodeId target = (EmberNodeId)emberUnsignedCommandArgument(0);
   \   00000002   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_0: (+1)
   \   00000006   0x.... 0x....      BL       ?Subroutine3
    542            int8u index = (int8u)emberUnsignedCommandArgument(1);
    543            EmberStatus status = emberRoutingTableRequest(target,
    544                                                          index,
    545                                                          EMBER_APS_OPTION_RETRY);
   \                     ??CrossCallReturnLabel_17: (+1)
   \   0000000A   0xB2A1             UXTH     R1,R4
   \   0000000C   0xE8BD 0x4010      POP      {R4,LR}
   \   00000010   0xB2C2             UXTB     R2,R0
   \   00000012   0x2340             MOVS     R3,#+64
   \   00000014   0x2032             MOVS     R0,#+50
   \   00000016   0x.... 0x....      B.W      emberTableRequest
    546            emberAfAppPrintln("Route Table %p0x%X", "Request: ", status);
    547          }
    548          
    549          
    550          //------------------------------------------------------------------------------
    551          // Platform specific code
    552          
    553          #if defined(EZSP_HOST)
    554          EmberStatus matchDescriptorsRequest(EmberNodeId target,
    555                                              int16u profile,
    556                                              int8u inCount,
    557                                              int8u outCount,
    558                                              int16u *inClusters,
    559                                              int16u *outClusters,
    560                                              EmberApsOption options)
    561          {
    562            return ezspMatchDescriptorsRequest(target, 
    563                                               profile,
    564                                               inCount,
    565                                               outCount,
    566                                               inClusters,
    567                                               outClusters,
    568                                               options);
    569          }
    570          
    571          #else
    572          
    573          // Copy the list of int16u input and output cluster lists into
    574          // message buffers.

   \                                 In section .text, align 2, keep-with-next
    575          EmberStatus matchDescriptorsRequest(EmberNodeId target,
    576                                              int16u profile,
    577                                              int8u inCount,
    578                                              int8u outCount,
    579                                              int16u *inClusters,
    580                                              int16u *outClusters,
    581                                              EmberApsOption options)
    582          {
   \                     matchDescriptorsRequest: (+1)
   \   00000000   0xE92D 0x4FF7      PUSH     {R0-R2,R4-R11,LR}
   \   00000004   0xB082             SUB      SP,SP,#+8
    583            int8u i;
    584            int8u output;
    585            EmberMessageBuffer inClusterBuffer = EMBER_NULL_MESSAGE_BUFFER;
   \   00000006   0x20FF             MOVS     R0,#+255
    586            EmberMessageBuffer outClusterBuffer = EMBER_NULL_MESSAGE_BUFFER;
    587            EmberStatus status = EMBER_NO_BUFFERS;
    588            for (output = 0; output < 2; output++) {
   \   00000008   0x9E0F             LDR      R6,[SP, #+60]
   \   0000000A   0xF88D 0x0005      STRB     R0,[SP, #+5]
   \   0000000E   0x4699             MOV      R9,R3
   \   00000010   0xF88D 0x0004      STRB     R0,[SP, #+4]
   \   00000014   0xF04F 0x0B18      MOV      R11,#+24
   \   00000018   0x2500             MOVS     R5,#+0
   \   0000001A   0xE000             B.N      ??matchDescriptorsRequest_0
    589              EmberMessageBuffer* bufferPtr;
    590              int8u count;
    591              int16u* list;
    592              if (output) {
   \                     ??matchDescriptorsRequest_1: (+1)
   \   0000001C   0xB935             CBNZ.N   R5,??matchDescriptorsRequest_2
    593                count = outCount;
    594                list = outClusters;
    595                bufferPtr = &outClusterBuffer;
    596              } else {  // input
    597                count = inCount;
   \                     ??matchDescriptorsRequest_0: (+1)
   \   0000001E   0xF89D 0xA010      LDRB     R10,[SP, #+16]
    598                list = inClusters;
   \   00000022   0xF8DD 0x8038      LDR      R8,[SP, #+56]
    599                bufferPtr = &inClusterBuffer;
   \   00000026   0xF10D 0x0405      ADD      R4,SP,#+5
   \   0000002A   0xE002             B.N      ??matchDescriptorsRequest_3
    600              }
   \                     ??matchDescriptorsRequest_2: (+1)
   \   0000002C   0x46CA             MOV      R10,R9
   \   0000002E   0x46B0             MOV      R8,R6
   \   00000030   0xAC01             ADD      R4,SP,#+4
    601              if (count == 0) {
   \                     ??matchDescriptorsRequest_3: (+1)
   \   00000032   0xF1BA 0x0F00      CMP      R10,#+0
   \   00000036   0xD01C             BEQ.N    ??matchDescriptorsRequest_4
    602                continue;
    603              }
    604          
    605              *bufferPtr = emberAllocateStackBuffer();
   \   00000038   0x2001             MOVS     R0,#+1
   \   0000003A   0x.... 0x....      BL       emberAllocateLinkedBuffers
   \   0000003E   0x7020             STRB     R0,[R4, #+0]
    606              if (*bufferPtr == EMBER_NULL_MESSAGE_BUFFER) {
   \   00000040   0x28FF             CMP      R0,#+255
   \   00000042   0xD027             BEQ.N    ??matchDescriptorsRequest_5
    607                goto cleanup;
    608              }
    609          
    610              for (i = 0; i < count; i++) {
   \   00000044   0x2700             MOVS     R7,#+0
   \   00000046   0xE012             B.N      ??matchDescriptorsRequest_6
    611                int8u cluster[2];
    612                cluster[0] = LOW_BYTE(list[i]);
   \                     ??matchDescriptorsRequest_7: (+1)
   \   00000048   0xF838 0x0017      LDRH     R0,[R8, R7, LSL #+1]
   \   0000004C   0xF88D 0x0000      STRB     R0,[SP, #+0]
    613                cluster[1] = HIGH_BYTE(list[i]);
    614                status = emberAppendToLinkedBuffers(*bufferPtr,
    615                                                    cluster,
    616                                                    2);
   \   00000050   0x2202             MOVS     R2,#+2
   \   00000052   0xF838 0x0017      LDRH     R0,[R8, R7, LSL #+1]
   \   00000056   0x0A00             LSRS     R0,R0,#+8
   \   00000058   0xF88D 0x0001      STRB     R0,[SP, #+1]
   \   0000005C   0xA900             ADD      R1,SP,#+0
   \   0000005E   0x7820             LDRB     R0,[R4, #+0]
   \   00000060   0x.... 0x....      BL       emberAppendToLinkedBuffers
   \   00000064   0xEA5F 0x0B00      MOVS     R11,R0
    617                if (EMBER_SUCCESS != status) {
   \   00000068   0xD114             BNE.N    ??matchDescriptorsRequest_5
    618                  goto cleanup;
    619                }
    620              }
   \   0000006A   0x1C78             ADDS     R0,R7,#+1
   \   0000006C   0xB2C7             UXTB     R7,R0
   \                     ??matchDescriptorsRequest_6: (+1)
   \   0000006E   0x4557             CMP      R7,R10
   \   00000070   0xDBEA             BLT.N    ??matchDescriptorsRequest_7
    621            }
   \                     ??matchDescriptorsRequest_4: (+1)
   \   00000072   0x1C6D             ADDS     R5,R5,#+1
   \   00000074   0xB2ED             UXTB     R5,R5
   \   00000076   0x2D02             CMP      R5,#+2
   \   00000078   0xDBD0             BLT.N    ??matchDescriptorsRequest_1
    622            status = emberMatchDescriptorsRequest(target,
    623                                                  profile,
    624                                                  inClusterBuffer,
    625                                                  outClusterBuffer,
    626                                                  options);
   \   0000007A   0x9810             LDR      R0,[SP, #+64]
   \   0000007C   0xF89D 0x3004      LDRB     R3,[SP, #+4]
   \   00000080   0xF89D 0x2005      LDRB     R2,[SP, #+5]
   \   00000084   0xF8BD 0x100C      LDRH     R1,[SP, #+12]
   \   00000088   0x9000             STR      R0,[SP, #+0]
   \   0000008A   0xF8BD 0x0008      LDRH     R0,[SP, #+8]
   \   0000008E   0x.... 0x....      BL       emberMatchDescriptorsRequest
   \   00000092   0x4683             MOV      R11,R0
    627           cleanup:
    628            if (inClusterBuffer != EMBER_NULL_MESSAGE_BUFFER) {
   \                     ??matchDescriptorsRequest_5: (+1)
   \   00000094   0xF89D 0x0005      LDRB     R0,[SP, #+5]
   \   00000098   0x28FF             CMP      R0,#+255
   \   0000009A   0xBF18             IT       NE 
    629              emberReleaseMessageBuffer(inClusterBuffer);
   \   0000009C   0x.... 0x....      BLNE     emReleaseMessageBuffer
    630            }
    631            if (outClusterBuffer != EMBER_NULL_MESSAGE_BUFFER) {
   \   000000A0   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   000000A4   0x28FF             CMP      R0,#+255
   \   000000A6   0xBF18             IT       NE 
    632              emberReleaseMessageBuffer(outClusterBuffer);
   \   000000A8   0x.... 0x....      BLNE     emReleaseMessageBuffer
    633            }
    634            return status;
   \   000000AC   0x4658             MOV      R0,R11
   \   000000AE   0xB005             ADD      SP,SP,#+20
   \   000000B0   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    635          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x........         DC32     emAfCliServiceDiscoveryCallback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0x........         DC32     inClCount

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   0x07FFF800         DC32     0x7fff800

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant {0, 0, 0, 0, 0, 0, 0, 0}>`:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
    636          
    637          #endif // !defined(EZSP_HOST)

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   copyOrLookupEui64
        16   -> emberCopyBigEndianEui64Argument
        16   -> emberLookupEui64ByNodeId
      56   matchDescriptorsRequest
        56   -> emReleaseMessageBuffer
        56   -> emberAllocateLinkedBuffers
        56   -> emberAppendToLinkedBuffers
        56   -> emberMatchDescriptorsRequest
      72   unbindRequest
        72   -> copyOrLookupEui64
        72   -> emberSendZigDevBindRequest
        72   -> emberUnsignedCommandArgument
        72   -> halCommonMemMove
       8   zdoActiveEpCommand
         0   -> emberSendZigDevRequestTarget
         8   -> emberUnsignedCommandArgument
      16   zdoAddClusterCommand
        16   -> emberStringCommandArgument
        16   -> emberUnsignedCommandArgument
      64   zdoBindCommand
        64   -> copyOrLookupEui64
        64   -> emberAfGetEui64
        64   -> emberCopyBigEndianEui64Argument
        64   -> emberSendZigDevBindRequest
        64   -> emberUnsignedCommandArgument
       8   zdoClearClusterCommand
         8   -> emberStringCommandArgument
       8   zdoEndDeviceBindRequestCommand
         0   -> emberAfSendEndDeviceBind
         8   -> emberUnsignedCommandArgument
       8   zdoIeeeAddressRequestCommand
         0   -> emberAfFindIeeeAddress
         8   -> emberUnsignedCommandArgument
      24   zdoLeaveRequestCommand
        24   -> emberLeaveRequest
        24   -> emberUnsignedCommandArgument
      24   zdoMatchCommand
        24   -> emberUnsignedCommandArgument
        24   -> matchDescriptorsRequest
       8   zdoMgmtBindCommand
         0   -> emberTableRequest
         8   -> emberUnsignedCommandArgument
       8   zdoMgmtLqiCommand
         0   -> emberTableRequest
         8   -> emberUnsignedCommandArgument
       8   zdoNetworkUpdateChannelCommand
         0   -> emberEnergyScanRequest
         8   -> emberUnsignedCommandArgument
      16   zdoNetworkUpdateScanCommand
         0   -> emberEnergyScanRequest
        16   -> emberUnsignedCommandArgument
       8   zdoNetworkUpdateSetCommand
         0   -> emberEnergyScanRequest
         8   -> emberUnsignedCommandArgument
       8   zdoNodeCommand
         0   -> emberSendZigDevRequestTarget
         8   -> emberUnsignedCommandArgument
      16   zdoNwkAddressRequestCommand
        16   -> emberAfFindNodeId
        16   -> emberCopyBigEndianEui64Argument
       8   zdoPowerDescriptorRequestCommand
         0   -> emberSendZigDevRequestTarget
         8   -> emberUnsignedCommandArgument
       8   zdoRouteRequestCommand
         0   -> emberTableRequest
         8   -> emberUnsignedCommandArgument
       8   zdoSimpleCommand
         0   -> emberSimpleDescriptorRequest
         8   -> emberUnsignedCommandArgument
       8   zdoUnbindGroupCommand
         8   -> emberUnsignedCommandArgument
         8   -> unbindRequest
      16   zdoUnbindUnicastCommand
        16   -> emberAfGetEui64
        16   -> emberCopyBigEndianEui64Argument
        16   -> emberUnsignedCommandArgument
        16   -> unbindRequest


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?<Constant {0, 0, 0, 0, 0, 0, 0, 0}>
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_2
       6  ?Subroutine0
       8  ?Subroutine1
       6  ?Subroutine2
       8  ?Subroutine3
       8  ?Subroutine4
      10  ?Subroutine5
      32  copyOrLookupEui64
      28  inClCount
          outClCount
          zdoInClusters
          zdoOutClusters
     180  matchDescriptorsRequest
     102  unbindRequest
      14  zdoActiveEpCommand
      46  zdoAddClusterCommand
      96  zdoBindCommand
      24  zdoClearClusterCommand
      16  zdoEndDeviceBindRequestCommand
      18  zdoIeeeAddressRequestCommand
      50  zdoLeaveRequestCommand
      44  zdoMatchCommand
      26  zdoMgmtBindCommand
      26  zdoMgmtLqiCommand
      32  zdoNetworkUpdateChannelCommand
      48  zdoNetworkUpdateScanCommand
      20  zdoNetworkUpdateSetCommand
      18  zdoNodeCommand
      22  zdoNwkAddressRequestCommand
      16  zdoPowerDescriptorRequestCommand
      26  zdoRouteRequestCommand
      26  zdoSimpleCommand
      24  zdoUnbindGroupCommand
      38  zdoUnbindUnicastCommand

 
    28 bytes in section .bss
     8 bytes in section .rodata
 1 002 bytes in section .text
 
 1 002 bytes of CODE  memory
     8 bytes of CONST memory
    28 bytes of DATA  memory

Errors: none
Warnings: 1
