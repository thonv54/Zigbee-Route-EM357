###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        09/Sep/2015  17:11:59
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\call-command-handler.c
#    Command line =  
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\call-command-handler.c
#        -D NULL_BTL -D CORTEXM3 -D CORTEXM3_EMBER_MICRO -D CORTEXM3_EM357 -D
#        PHY_EM3XX -D
#        "APPLICATION_TOKEN_HEADER=\"app/framework/util/tokens.h\"" -D
#        "ATTRIBUTE_STORAGE_CONFIGURATION=\"app/builder/ZigbeeRoute/ZigbeeRoute_endpoint_config.h\""
#        -D "BOARD_HEADER=\"app\builder\ZigbeeRoute\ZigbeeRoute_board.h\"" -D
#        "CONFIGURATION_HEADER=\"app/framework/util/config.h\"" -D
#        "GENERATED_TOKEN_HEADER=\"app/builder/ZigbeeRoute/ZigbeeRoute_tokens.h\""
#        -D "PLATFORM_HEADER=\"hal/micro/cortexm3/compiler/iar.h\"" -D
#        "ZA_GENERATED_HEADER=\"app/builder/ZigbeeRoute/ZigbeeRoute.h\"" -D
#        "__SOURCEFILE__=\"call-command-handler.c\"" -lC
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\build\lst\
#        --diag_suppress Pa050 -o
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\build\obj\ --debug
#        --endian=little --cpu=Cortex-M3 --no_path_in_file_macros
#        --separate_cluster_for_initialized_variables -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\ -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\ -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\ -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\app\framework\include\
#        -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\app\util\
#        -I E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\stack\
#        -I E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\hal\
#        -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\hal\..\
#        -Ohz --use_c++_inline
#    List file    =  
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\build\lst\call-command-handler.lst
#    Object file  =  
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\build\obj\call-command-handler.o
#
###############################################################################

E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\call-command-handler.c
      1          // This file is generated by Ember Desktop.  Please do not edit manually.
      2          //
      3          //
      4          
      5          // This is a set of generated functions that parse the
      6          // the incomming message, and call appropriate command handler.
      7          
      8          
      9          
     10          #include PLATFORM_HEADER
     11          #ifdef EZSP_HOST
     12          // Includes needed for ember related functions for the EZSP host
     13          #include "stack/include/error.h"
     14          #include "stack/include/ember-types.h"
     15          #include "app/util/ezsp/ezsp-protocol.h"
     16          #include "app/util/ezsp/ezsp.h"
     17          #include "app/util/ezsp/ezsp-utils.h"
     18          #include "app/util/ezsp/serial-interface.h"
     19          #else
     20          // Includes needed for ember related functions for the EM250
     21          #include "stack/include/ember.h"
     22          #endif // EZSP_HOST
     23          
     24          #include "app/framework/util/util.h"
     25          #include "af-structs.h"
     26          #include "call-command-handler.h"
     27          #include "command-id.h"
     28          #include "callback.h"
     29          #include "UART_task.h"

   \                                 In section .text, align 2, keep-with-next
     30          static EmberAfStatus status(boolean wasHandled, boolean mfgSpecific)
     31          {
     32            if (wasHandled) {
   \                     status: (+1)
   \   00000000   0xB108             CBZ.N    R0,??status_0
     33              return EMBER_ZCL_STATUS_SUCCESS;
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x4770             BX       LR
     34            } else if (mfgSpecific) {
   \                     ??status_0: (+1)
   \   00000006   0xB109             CBZ.N    R1,??status_1
     35              return EMBER_ZCL_STATUS_UNSUP_MANUF_CLUSTER_COMMAND;
   \   00000008   0x2083             MOVS     R0,#+131
   \   0000000A   0x4770             BX       LR
     36            } else {
     37              return EMBER_ZCL_STATUS_UNSUP_CLUSTER_COMMAND;
   \                     ??status_1: (+1)
   \   0000000C   0x2081             MOVS     R0,#+129
   \   0000000E   0x4770             BX       LR               ;; return
     38            }
     39          }
     40          
     41          // Main command parsing controller.

   \                                 In section .text, align 2, keep-with-next
     42          EmberAfStatus emberAfClusterSpecificCommandParse(EmberAfClusterCommand *cmd)
     43          {
   \                     emberAfClusterSpecificCommandParse: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
     44            if (cmd->direction == ZCL_DIRECTION_CLIENT_TO_SERVER
     45                && emberAfContainsServer(cmd->apsFrame->destinationEndpoint,
     46                                         cmd->apsFrame->clusterId)) {
   \   00000004   0x7D60             LDRB     R0,[R4, #+21]
   \   00000006   0xBB00             CBNZ.N   R0,??emberAfClusterSpecificCommandParse_0
   \   00000008   0x6820             LDR      R0,[R4, #+0]
   \   0000000A   0x8841             LDRH     R1,[R0, #+2]
   \   0000000C   0x7940             LDRB     R0,[R0, #+5]
   \   0000000E   0x.... 0x....      BL       emberAfContainsServer
   \   00000012   0xB1D0             CBZ.N    R0,??emberAfClusterSpecificCommandParse_0
     47              switch (cmd->apsFrame->clusterId) {
   \   00000014   0x6820             LDR      R0,[R4, #+0]
   \   00000016   0x8840             LDRH     R0,[R0, #+2]
   \   00000018   0x2803             CMP      R0,#+3
   \   0000001A   0xD006             BEQ.N    ??emberAfClusterSpecificCommandParse_1
   \   0000001C   0xD315             BCC.N    ??emberAfClusterSpecificCommandParse_0
   \   0000001E   0x2805             CMP      R0,#+5
   \   00000020   0xD00B             BEQ.N    ??emberAfClusterSpecificCommandParse_2
   \   00000022   0xD306             BCC.N    ??emberAfClusterSpecificCommandParse_3
   \   00000024   0x2806             CMP      R0,#+6
   \   00000026   0xD00C             BEQ.N    ??emberAfClusterSpecificCommandParse_4
   \   00000028   0xE00F             B.N      ??emberAfClusterSpecificCommandParse_0
     48              case ZCL_IDENTIFY_CLUSTER_ID:
     49                return emberAfIdentifyClusterServerCommandParse(cmd);
   \                     ??emberAfClusterSpecificCommandParse_1: (+1)
   \   0000002A   0x4620             MOV      R0,R4
   \   0000002C   0xE8BD 0x4010      POP      {R4,LR}
   \   00000030   0x....             B.N      emberAfIdentifyClusterServerCommandParse
     50              case ZCL_GROUPS_CLUSTER_ID:
     51                return emberAfGroupsClusterServerCommandParse(cmd);
   \                     ??emberAfClusterSpecificCommandParse_3: (+1)
   \   00000032   0x4620             MOV      R0,R4
   \   00000034   0xE8BD 0x4010      POP      {R4,LR}
   \   00000038   0x....             B.N      emberAfGroupsClusterServerCommandParse
     52              case ZCL_SCENES_CLUSTER_ID:
     53                return emberAfScenesClusterServerCommandParse(cmd);
   \                     ??emberAfClusterSpecificCommandParse_2: (+1)
   \   0000003A   0x4620             MOV      R0,R4
   \   0000003C   0xE8BD 0x4010      POP      {R4,LR}
   \   00000040   0x....             B.N      emberAfScenesClusterServerCommandParse
     54              case ZCL_ON_OFF_CLUSTER_ID:
     55                return emberAfOnOffClusterServerCommandParse(cmd);
   \                     ??emberAfClusterSpecificCommandParse_4: (+1)
   \   00000042   0x4620             MOV      R0,R4
   \   00000044   0xE8BD 0x4010      POP      {R4,LR}
   \   00000048   0x....             B.N      emberAfOnOffClusterServerCommandParse
     56              }
     57            }
     58            return status(FALSE, cmd->mfgSpecific);
   \                     ??emberAfClusterSpecificCommandParse_0: (+1)
   \   0000004A   0x7BE1             LDRB     R1,[R4, #+15]
   \   0000004C   0xE8BD 0x4010      POP      {R4,LR}
   \   00000050   0x2000             MOVS     R0,#+0
   \   00000052   0x....             B.N      status
     59          }
     60          
     61          // Cluster: Identify, server

   \                                 In section .text, align 2, keep-with-next
     62          EmberAfStatus emberAfIdentifyClusterServerCommandParse(EmberAfClusterCommand *cmd)
     63          {
   \                     emberAfIdentifyClusterServerCommandParse: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
     64            boolean wasHandled = FALSE;
   \   00000004   0x2000             MOVS     R0,#+0
     65            if (!cmd->mfgSpecific) {
   \   00000006   0x7BE1             LDRB     R1,[R4, #+15]
   \   00000008   0xB989             CBNZ.N   R1,??emberAfIdentifyClusterServerCommandParse_0
     66              switch (cmd->commandId) {
   \   0000000A   0x7CE1             LDRB     R1,[R4, #+19]
   \   0000000C   0xB121             CBZ.N    R1,??emberAfIdentifyClusterServerCommandParse_1
   \   0000000E   0x2901             CMP      R1,#+1
   \   00000010   0xBF08             IT       EQ 
     67              case ZCL_IDENTIFY_COMMAND_ID:
     68                {
     69                  int16u payloadOffset = cmd->payloadStartIndex;
     70                  int16u identifyTime;  // Ver.: always
     71                  // Command is fixed length: 2
     72                  if (cmd->bufLen < payloadOffset + 2) return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
     73                  identifyTime = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
     74                  wasHandled = emberAfIdentifyClusterIdentifyCallback(identifyTime);
     75                  break;
     76                }
     77              case ZCL_IDENTIFY_QUERY_COMMAND_ID:
     78                {
     79                  // Command is fixed length: 0
     80                  wasHandled = emberAfIdentifyClusterIdentifyQueryCallback();
   \   00000012   0x.... 0x....      BLEQ     emberAfIdentifyClusterIdentifyQueryCallback
   \   00000016   0xE00A             B.N      ??emberAfIdentifyClusterServerCommandParse_0
   \                     ??emberAfIdentifyClusterServerCommandParse_1: (+1)
   \   00000018   0x7D21             LDRB     R1,[R4, #+20]
   \   0000001A   0x89A2             LDRH     R2,[R4, #+12]
   \   0000001C   0x1C88             ADDS     R0,R1,#+2
   \   0000001E   0x4282             CMP      R2,R0
   \   00000020   0xDA01             BGE.N    ??emberAfIdentifyClusterServerCommandParse_2
   \   00000022   0x2080             MOVS     R0,#+128
   \   00000024   0xBD10             POP      {R4,PC}
   \                     ??emberAfIdentifyClusterServerCommandParse_2: (+1)
   \   00000026   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_12: (+1)
   \   0000002A   0x.... 0x....      BL       emberAfIdentifyClusterIdentifyCallback
     81                  break;
     82                }
     83              }
     84            }
     85            return status(wasHandled, cmd->mfgSpecific);
   \                     ??emberAfIdentifyClusterServerCommandParse_0: (+1)
   \   0000002E   0x7BE1             LDRB     R1,[R4, #+15]
   \   00000030   0xE8BD 0x4010      POP      {R4,LR}
   \   00000034   0x....             B.N      status
     86          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2: (+1)
   \   00000000   0x68A0             LDR      R0,[R4, #+8]
   \   00000002   0x.... 0x....      B.W      emberAfGetInt16u
     87          
     88          // Cluster: Groups, server

   \                                 In section .text, align 4, keep-with-next
     89          EmberAfStatus emberAfGroupsClusterServerCommandParse(EmberAfClusterCommand *cmd)
     90          {
   \                     emberAfGroupsClusterServerCommandParse: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
     91            boolean wasHandled = FALSE;
   \   00000004   0x2000             MOVS     R0,#+0
     92            if (!cmd->mfgSpecific) {
   \   00000006   0x7BE1             LDRB     R1,[R4, #+15]
   \   00000008   0x2900             CMP      R1,#+0
   \   0000000A   0xD15A             BNE.N    ??emberAfGroupsClusterServerCommandParse_1
     93              switch (cmd->commandId) {
   \   0000000C   0x7CE1             LDRB     R1,[R4, #+19]
   \   0000000E   0x2905             CMP      R1,#+5
   \   00000010   0xD857             BHI.N    ??emberAfGroupsClusterServerCommandParse_1
   \   00000012   0xE8DF 0xF001      TBB      [PC, R1]
   \                     ??emberAfGroupsClusterServerCommandParse_0:
   \   00000016   0x03 0x1A          DC8      0x3,0x1A,0x24,0x31
   \              0x24 0x31    
   \   0000001A   0x3B 0x3E          DC8      0x3B,0x3E
     94              case ZCL_ADD_GROUP_COMMAND_ID:
     95                {
     96                  int16u payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfGroupsClusterServerCommandParse_2: (+1)
   \   0000001C   0x7D25             LDRB     R5,[R4, #+20]
     97                  int16u groupId;  // Ver.: always
     98                  int8u* groupName;  // Ver.: always
     99                  // Command is not a fixed length
    100                  if (cmd->bufLen < payloadOffset + 2) return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
   \   0000001E   0x89A2             LDRH     R2,[R4, #+12]
   \   00000020   0x1CA8             ADDS     R0,R5,#+2
   \   00000022   0x4282             CMP      R2,R0
   \   00000024   0xDB43             BLT.N    ??emberAfGroupsClusterServerCommandParse_3
    101                  groupId = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \   00000026   0x.... 0x....      BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_5: (+1)
   \   0000002A   0x.... 0x....      BL       ?Subroutine1
    102                  payloadOffset += 2;
    103                  if (cmd->bufLen < payloadOffset + emberAfStringLength(cmd->buffer + payloadOffset) + 1) return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
   \                     ??CrossCallReturnLabel_7: (+1)
   \   0000002E   0x89A2             LDRH     R2,[R4, #+12]
   \   00000030   0x1940             ADDS     R0,R0,R5
   \   00000032   0x1C40             ADDS     R0,R0,#+1
   \   00000034   0x4282             CMP      R2,R0
   \   00000036   0xDB3A             BLT.N    ??emberAfGroupsClusterServerCommandParse_3
    104                  groupName = emberAfGetString(cmd->buffer, payloadOffset, cmd->bufLen);
   \   00000038   0x68A0             LDR      R0,[R4, #+8]
   \   0000003A   0x4629             MOV      R1,R5
   \   0000003C   0x.... 0x....      BL       emberAfGetString
   \   00000040   0x4601             MOV      R1,R0
    105                  wasHandled = emberAfGroupsClusterAddGroupCallback(groupId,
    106                                                                    groupName);
   \   00000042   0x4630             MOV      R0,R6
   \   00000044   0x.... 0x....      BL       emberAfGroupsClusterAddGroupCallback
    107                  break;
   \   00000048   0xE03B             B.N      ??emberAfGroupsClusterServerCommandParse_1
    108                }
    109              case ZCL_VIEW_GROUP_COMMAND_ID:
    110                {
    111                  int16u payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfGroupsClusterServerCommandParse_4: (+1)
   \   0000004A   0x7D21             LDRB     R1,[R4, #+20]
    112                  int16u groupId;  // Ver.: always
    113                  // Command is fixed length: 2
    114                  if (cmd->bufLen < payloadOffset + 2) return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
   \   0000004C   0x89A2             LDRH     R2,[R4, #+12]
   \   0000004E   0x1C88             ADDS     R0,R1,#+2
   \   00000050   0x4282             CMP      R2,R0
   \   00000052   0xDB2C             BLT.N    ??emberAfGroupsClusterServerCommandParse_3
    115                  groupId = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \   00000054   0x.... 0x....      BL       ?Subroutine2
    116                  wasHandled = emberAfGroupsClusterViewGroupCallback(groupId);
   \                     ??CrossCallReturnLabel_11: (+1)
   \   00000058   0x.... 0x....      BL       emberAfGroupsClusterViewGroupCallback
    117                  break;
   \   0000005C   0xE031             B.N      ??emberAfGroupsClusterServerCommandParse_1
    118                }
    119              case ZCL_GET_GROUP_MEMBERSHIP_COMMAND_ID:
    120                {
    121                  int16u payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfGroupsClusterServerCommandParse_5: (+1)
   \   0000005E   0x7D20             LDRB     R0,[R4, #+20]
    122                  int8u groupCount;  // Ver.: always
    123                  int8u* groupList;  // Ver.: always
    124                  // Command is fixed length: 1
    125                  if (cmd->bufLen < payloadOffset + 1) return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
   \   00000060   0x89A1             LDRH     R1,[R4, #+12]
   \   00000062   0x1C42             ADDS     R2,R0,#+1
   \   00000064   0x4291             CMP      R1,R2
   \   00000066   0xDB22             BLT.N    ??emberAfGroupsClusterServerCommandParse_3
    126                  groupCount = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
    127                  payloadOffset += 1;
    128                  groupList = cmd->buffer + payloadOffset;
    129                  wasHandled = emberAfGroupsClusterGetGroupMembershipCallback(groupCount,
    130                                                                              groupList);
   \   00000068   0x68A2             LDR      R2,[R4, #+8]
   \   0000006A   0x1C41             ADDS     R1,R0,#+1
   \   0000006C   0xB289             UXTH     R1,R1
   \   0000006E   0x5C80             LDRB     R0,[R0, R2]
   \   00000070   0x1889             ADDS     R1,R1,R2
   \   00000072   0x.... 0x....      BL       emberAfGroupsClusterGetGroupMembershipCallback
    131                  break;
   \   00000076   0xE024             B.N      ??emberAfGroupsClusterServerCommandParse_1
    132                }
    133              case ZCL_REMOVE_GROUP_COMMAND_ID:
    134                {
    135                  int16u payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfGroupsClusterServerCommandParse_6: (+1)
   \   00000078   0x7D21             LDRB     R1,[R4, #+20]
    136                  int16u groupId;  // Ver.: always
    137                  // Command is fixed length: 2
    138                  if (cmd->bufLen < payloadOffset + 2) return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
   \   0000007A   0x89A2             LDRH     R2,[R4, #+12]
   \   0000007C   0x1C88             ADDS     R0,R1,#+2
   \   0000007E   0x4282             CMP      R2,R0
   \   00000080   0xDB15             BLT.N    ??emberAfGroupsClusterServerCommandParse_3
    139                  groupId = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \   00000082   0x.... 0x....      BL       ?Subroutine2
    140                  wasHandled = emberAfGroupsClusterRemoveGroupCallback(groupId);
   \                     ??CrossCallReturnLabel_10: (+1)
   \   00000086   0x.... 0x....      BL       emberAfGroupsClusterRemoveGroupCallback
    141                  break;
   \   0000008A   0xE01A             B.N      ??emberAfGroupsClusterServerCommandParse_1
    142                }
    143              case ZCL_REMOVE_ALL_GROUPS_COMMAND_ID:
    144                {
    145                  // Command is fixed length: 0
    146                  wasHandled = emberAfGroupsClusterRemoveAllGroupsCallback();
   \                     ??emberAfGroupsClusterServerCommandParse_7: (+1)
   \   0000008C   0x.... 0x....      BL       emberAfGroupsClusterRemoveAllGroupsCallback
    147                  break;
   \   00000090   0xE017             B.N      ??emberAfGroupsClusterServerCommandParse_1
    148                }
    149              case ZCL_ADD_GROUP_IF_IDENTIFYING_COMMAND_ID:
    150                {
    151                  int16u payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfGroupsClusterServerCommandParse_8: (+1)
   \   00000092   0x7D25             LDRB     R5,[R4, #+20]
    152                  int16u groupId;  // Ver.: always
    153                  int8u* groupName;  // Ver.: always
    154                  // Command is not a fixed length
    155                  if (cmd->bufLen < payloadOffset + 2) return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
   \   00000094   0x89A2             LDRH     R2,[R4, #+12]
   \   00000096   0x1CA8             ADDS     R0,R5,#+2
   \   00000098   0x4282             CMP      R2,R0
   \   0000009A   0xDB08             BLT.N    ??emberAfGroupsClusterServerCommandParse_3
    156                  groupId = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \   0000009C   0x.... 0x....      BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_4: (+1)
   \   000000A0   0x.... 0x....      BL       ?Subroutine1
    157                  payloadOffset += 2;
    158                  if (cmd->bufLen < payloadOffset + emberAfStringLength(cmd->buffer + payloadOffset) + 1) return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
   \                     ??CrossCallReturnLabel_6: (+1)
   \   000000A4   0x89A2             LDRH     R2,[R4, #+12]
   \   000000A6   0x1940             ADDS     R0,R0,R5
   \   000000A8   0x1C40             ADDS     R0,R0,#+1
   \   000000AA   0x4282             CMP      R2,R0
   \   000000AC   0xDA01             BGE.N    ??emberAfGroupsClusterServerCommandParse_9
   \                     ??emberAfGroupsClusterServerCommandParse_3: (+1)
   \   000000AE   0x2080             MOVS     R0,#+128
   \   000000B0   0xBD70             POP      {R4-R6,PC}
    159                  groupName = emberAfGetString(cmd->buffer, payloadOffset, cmd->bufLen);
   \                     ??emberAfGroupsClusterServerCommandParse_9: (+1)
   \   000000B2   0x68A0             LDR      R0,[R4, #+8]
   \   000000B4   0x4629             MOV      R1,R5
   \   000000B6   0x.... 0x....      BL       emberAfGetString
    160                  wasHandled = emberAfGroupsClusterAddGroupIfIdentifyingCallback(groupId,
    161                                                                                 groupName);
   \   000000BA   0x4601             MOV      R1,R0
   \   000000BC   0x4630             MOV      R0,R6
   \   000000BE   0x.... 0x....      BL       emberAfGroupsClusterAddGroupIfIdentifyingCallback
    162                  break;
    163                }
    164              }
    165            }
    166            return status(wasHandled, cmd->mfgSpecific);
   \                     ??emberAfGroupsClusterServerCommandParse_1: (+1)
   \   000000C2   0x7BE1             LDRB     R1,[R4, #+15]
   \   000000C4   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   000000C8   0x....             B.N      status
    167          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \   00000000   0x4606             MOV      R6,R0
   \   00000002   0x1CAD             ADDS     R5,R5,#+2
   \   00000004   0x68A0             LDR      R0,[R4, #+8]
   \   00000006   0xB2AD             UXTH     R5,R5
   \   00000008   0x1828             ADDS     R0,R5,R0
   \   0000000A   0x.... 0x....      B.W      emberAfStringLength

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0x68A0             LDR      R0,[R4, #+8]
   \   00000002   0x4629             MOV      R1,R5
   \   00000004   0x.... 0x....      B.W      emberAfGetInt16u
    168          
    169          // Cluster: Scenes, server

   \                                 In section .text, align 4, keep-with-next
    170          EmberAfStatus emberAfScenesClusterServerCommandParse(EmberAfClusterCommand *cmd)
    171          {
   \                     emberAfScenesClusterServerCommandParse: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x4604             MOV      R4,R0
    172            boolean wasHandled = FALSE;
   \   00000006   0x2000             MOVS     R0,#+0
    173            if (!cmd->mfgSpecific) {
   \   00000008   0x7BE1             LDRB     R1,[R4, #+15]
   \   0000000A   0x2900             CMP      R1,#+0
   \   0000000C   0xD143             BNE.N    ??emberAfScenesClusterServerCommandParse_1
    174              switch (cmd->commandId) {
   \   0000000E   0x7CE1             LDRB     R1,[R4, #+19]
   \   00000010   0x2906             CMP      R1,#+6
   \   00000012   0xD840             BHI.N    ??emberAfScenesClusterServerCommandParse_1
   \   00000014   0xE8DF 0xF001      TBB      [PC, R1]
   \                     ??emberAfScenesClusterServerCommandParse_0:
   \   00000018   0x04 0x40          DC8      0x4,0x40,0x4C,0x58
   \              0x4C 0x58    
   \   0000001C   0x62 0x6E          DC8      0x62,0x6E,0x7A,0x0
   \              0x7A 0x00    
    175              case ZCL_ADD_SCENE_COMMAND_ID:
    176                {
    177                  int16u payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfScenesClusterServerCommandParse_2: (+1)
   \   00000020   0x7D27             LDRB     R7,[R4, #+20]
    178                  int16u groupId;  // Ver.: always
    179                  int8u sceneId;  // Ver.: always
    180                  int16u transitionTime;  // Ver.: always
    181                  int8u* sceneName;  // Ver.: always
    182                  int8u* extensionFieldSets;  // Ver.: always
    183                  // Command is not a fixed length
    184                  if (cmd->bufLen < payloadOffset + 2) return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
   \   00000022   0x89A2             LDRH     R2,[R4, #+12]
   \   00000024   0x1CB8             ADDS     R0,R7,#+2
   \   00000026   0x4282             CMP      R2,R0
   \   00000028   0xDB75             BLT.N    ??emberAfScenesClusterServerCommandParse_3
    185                  groupId = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \   0000002A   0x68A0             LDR      R0,[R4, #+8]
   \   0000002C   0x4639             MOV      R1,R7
   \   0000002E   0x.... 0x....      BL       emberAfGetInt16u
    186                  payloadOffset += 2;
   \   00000032   0x1CBF             ADDS     R7,R7,#+2
   \   00000034   0x4605             MOV      R5,R0
   \   00000036   0xB2BF             UXTH     R7,R7
    187                  if (cmd->bufLen < payloadOffset + 1) return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
   \   00000038   0x89A2             LDRH     R2,[R4, #+12]
   \   0000003A   0x1C78             ADDS     R0,R7,#+1
   \   0000003C   0x4282             CMP      R2,R0
   \   0000003E   0xDB6A             BLT.N    ??emberAfScenesClusterServerCommandParse_3
    188                  sceneId = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   \   00000040   0x68A0             LDR      R0,[R4, #+8]
   \   00000042   0x5C3E             LDRB     R6,[R7, R0]
    189                  payloadOffset += 1;
   \   00000044   0x1C7F             ADDS     R7,R7,#+1
   \   00000046   0xB2BF             UXTH     R7,R7
    190                  if (cmd->bufLen < payloadOffset + 2) return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
   \   00000048   0x1CBB             ADDS     R3,R7,#+2
   \   0000004A   0x429A             CMP      R2,R3
   \   0000004C   0xDB63             BLT.N    ??emberAfScenesClusterServerCommandParse_3
    191                  transitionTime = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \   0000004E   0x4639             MOV      R1,R7
   \   00000050   0x.... 0x....      BL       emberAfGetInt16u
   \   00000054   0x4680             MOV      R8,R0
    192                  payloadOffset += 2;
   \   00000056   0x1CBF             ADDS     R7,R7,#+2
    193                  if (cmd->bufLen < payloadOffset + emberAfStringLength(cmd->buffer + payloadOffset) + 1) return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
   \   00000058   0x68A0             LDR      R0,[R4, #+8]
   \   0000005A   0xB2BF             UXTH     R7,R7
   \   0000005C   0x1838             ADDS     R0,R7,R0
   \   0000005E   0x.... 0x....      BL       emberAfStringLength
   \   00000062   0x89A2             LDRH     R2,[R4, #+12]
   \   00000064   0x19C0             ADDS     R0,R0,R7
   \   00000066   0x1C40             ADDS     R0,R0,#+1
   \   00000068   0x4282             CMP      R2,R0
   \   0000006A   0xDB54             BLT.N    ??emberAfScenesClusterServerCommandParse_3
    194                  sceneName = emberAfGetString(cmd->buffer, payloadOffset, cmd->bufLen);
   \   0000006C   0x68A0             LDR      R0,[R4, #+8]
   \   0000006E   0x4639             MOV      R1,R7
   \   00000070   0x.... 0x....      BL       emberAfGetString
   \   00000074   0x4681             MOV      R9,R0
    195                  payloadOffset += emberAfStringLength(cmd->buffer + payloadOffset) + 1;
   \   00000076   0x68A0             LDR      R0,[R4, #+8]
   \   00000078   0x1838             ADDS     R0,R7,R0
   \   0000007A   0x.... 0x....      BL       emberAfStringLength
    196                  extensionFieldSets = cmd->buffer + payloadOffset;
    197                  wasHandled = emberAfScenesClusterAddSceneCallback(groupId,
    198                                                                    sceneId,
    199                                                                    transitionTime,
    200                                                                    sceneName,
    201                                                                    extensionFieldSets);
   \   0000007E   0x19C0             ADDS     R0,R0,R7
   \   00000080   0x1C40             ADDS     R0,R0,#+1
   \   00000082   0x68A1             LDR      R1,[R4, #+8]
   \   00000084   0xB280             UXTH     R0,R0
   \   00000086   0x1840             ADDS     R0,R0,R1
   \   00000088   0x9000             STR      R0,[SP, #+0]
   \   0000008A   0x464B             MOV      R3,R9
   \   0000008C   0x4642             MOV      R2,R8
   \   0000008E   0x4631             MOV      R1,R6
   \   00000090   0x4628             MOV      R0,R5
   \   00000092   0x.... 0x....      BL       emberAfScenesClusterAddSceneCallback
    202                  break;
   \                     ??emberAfScenesClusterServerCommandParse_1: (+1)
   \   00000096   0xE044             B.N      ??emberAfScenesClusterServerCommandParse_4
    203                }
    204              case ZCL_VIEW_SCENE_COMMAND_ID:
    205                {
    206                  int16u payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfScenesClusterServerCommandParse_5: (+1)
   \   00000098   0x7D25             LDRB     R5,[R4, #+20]
    207                  int16u groupId;  // Ver.: always
    208                  int8u sceneId;  // Ver.: always
    209                  // Command is fixed length: 3
    210                  if (cmd->bufLen < payloadOffset + 3) return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
   \   0000009A   0x89A2             LDRH     R2,[R4, #+12]
   \   0000009C   0x1CE8             ADDS     R0,R5,#+3
   \   0000009E   0x4282             CMP      R2,R0
   \   000000A0   0xDB39             BLT.N    ??emberAfScenesClusterServerCommandParse_3
    211                  groupId = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \   000000A2   0x.... 0x....      BL       ?Subroutine0
    212                  payloadOffset += 2;
    213                  sceneId = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
    214                  wasHandled = emberAfScenesClusterViewSceneCallback(groupId,
    215                                                                     sceneId);
   \                     ??CrossCallReturnLabel_3: (+1)
   \   000000A6   0x.... 0x....      BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_13: (+1)
   \   000000AA   0x.... 0x....      BL       emberAfScenesClusterViewSceneCallback
    216                  break;
   \   000000AE   0xE038             B.N      ??emberAfScenesClusterServerCommandParse_4
    217                }
    218              case ZCL_REMOVE_SCENE_COMMAND_ID:
    219                {
    220                  int16u payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfScenesClusterServerCommandParse_6: (+1)
   \   000000B0   0x7D25             LDRB     R5,[R4, #+20]
    221                  int16u groupId;  // Ver.: always
    222                  int8u sceneId;  // Ver.: always
    223                  // Command is fixed length: 3
    224                  if (cmd->bufLen < payloadOffset + 3) return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
   \   000000B2   0x89A2             LDRH     R2,[R4, #+12]
   \   000000B4   0x1CE8             ADDS     R0,R5,#+3
   \   000000B6   0x4282             CMP      R2,R0
   \   000000B8   0xDB2D             BLT.N    ??emberAfScenesClusterServerCommandParse_3
    225                  groupId = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \   000000BA   0x.... 0x....      BL       ?Subroutine0
    226                  payloadOffset += 2;
    227                  sceneId = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
    228                  wasHandled = emberAfScenesClusterRemoveSceneCallback(groupId,
    229                                                                       sceneId);
   \                     ??CrossCallReturnLabel_2: (+1)
   \   000000BE   0x.... 0x....      BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_14: (+1)
   \   000000C2   0x.... 0x....      BL       emberAfScenesClusterRemoveSceneCallback
    230                  break;
   \   000000C6   0xE02C             B.N      ??emberAfScenesClusterServerCommandParse_4
    231                }
    232              case ZCL_REMOVE_ALL_SCENES_COMMAND_ID:
    233                {
    234                  int16u payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfScenesClusterServerCommandParse_7: (+1)
   \   000000C8   0x7D21             LDRB     R1,[R4, #+20]
    235                  int16u groupId;  // Ver.: always
    236                  // Command is fixed length: 2
    237                  if (cmd->bufLen < payloadOffset + 2) return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
   \   000000CA   0x89A2             LDRH     R2,[R4, #+12]
   \   000000CC   0x1C88             ADDS     R0,R1,#+2
   \   000000CE   0x4282             CMP      R2,R0
   \   000000D0   0xDB21             BLT.N    ??emberAfScenesClusterServerCommandParse_3
    238                  groupId = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \   000000D2   0x.... 0x....      BL       ?Subroutine2
    239                  wasHandled = emberAfScenesClusterRemoveAllScenesCallback(groupId);
   \                     ??CrossCallReturnLabel_9: (+1)
   \   000000D6   0x.... 0x....      BL       emberAfScenesClusterRemoveAllScenesCallback
    240                  break;
   \   000000DA   0xE022             B.N      ??emberAfScenesClusterServerCommandParse_4
    241                }
    242              case ZCL_STORE_SCENE_COMMAND_ID:
    243                {
    244                  int16u payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfScenesClusterServerCommandParse_8: (+1)
   \   000000DC   0x7D25             LDRB     R5,[R4, #+20]
    245                  int16u groupId;  // Ver.: always
    246                  int8u sceneId;  // Ver.: always
    247                  // Command is fixed length: 3
    248                  if (cmd->bufLen < payloadOffset + 3) return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
   \   000000DE   0x89A2             LDRH     R2,[R4, #+12]
   \   000000E0   0x1CE8             ADDS     R0,R5,#+3
   \   000000E2   0x4282             CMP      R2,R0
   \   000000E4   0xDB17             BLT.N    ??emberAfScenesClusterServerCommandParse_3
    249                  groupId = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \   000000E6   0x.... 0x....      BL       ?Subroutine0
    250                  payloadOffset += 2;
    251                  sceneId = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
    252                  wasHandled = emberAfScenesClusterStoreSceneCallback(groupId,
    253                                                                      sceneId);
   \                     ??CrossCallReturnLabel_1: (+1)
   \   000000EA   0x.... 0x....      BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_15: (+1)
   \   000000EE   0x.... 0x....      BL       emberAfScenesClusterStoreSceneCallback
    254                  break;
   \   000000F2   0xE016             B.N      ??emberAfScenesClusterServerCommandParse_4
    255                }
    256              case ZCL_RECALL_SCENE_COMMAND_ID:
    257                {
    258                  int16u payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfScenesClusterServerCommandParse_9: (+1)
   \   000000F4   0x7D25             LDRB     R5,[R4, #+20]
    259                  int16u groupId;  // Ver.: always
    260                  int8u sceneId;  // Ver.: always
    261                  // Command is fixed length: 3
    262                  if (cmd->bufLen < payloadOffset + 3) return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
   \   000000F6   0x89A2             LDRH     R2,[R4, #+12]
   \   000000F8   0x1CE8             ADDS     R0,R5,#+3
   \   000000FA   0x4282             CMP      R2,R0
   \   000000FC   0xDB0B             BLT.N    ??emberAfScenesClusterServerCommandParse_3
    263                  groupId = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \   000000FE   0x.... 0x....      BL       ?Subroutine0
    264                  payloadOffset += 2;
    265                  sceneId = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
    266                  wasHandled = emberAfScenesClusterRecallSceneCallback(groupId,
    267                                                                       sceneId);
   \                     ??CrossCallReturnLabel_0: (+1)
   \   00000102   0x.... 0x....      BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_16: (+1)
   \   00000106   0x.... 0x....      BL       emberAfScenesClusterRecallSceneCallback
    268                  break;
   \   0000010A   0xE00A             B.N      ??emberAfScenesClusterServerCommandParse_4
    269                }
    270              case ZCL_GET_SCENE_MEMBERSHIP_COMMAND_ID:
    271                {
    272                  int16u payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfScenesClusterServerCommandParse_10: (+1)
   \   0000010C   0x7D21             LDRB     R1,[R4, #+20]
    273                  int16u groupId;  // Ver.: always
    274                  // Command is fixed length: 2
    275                  if (cmd->bufLen < payloadOffset + 2) return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
   \   0000010E   0x89A2             LDRH     R2,[R4, #+12]
   \   00000110   0x1C88             ADDS     R0,R1,#+2
   \   00000112   0x4282             CMP      R2,R0
   \   00000114   0xDA01             BGE.N    ??emberAfScenesClusterServerCommandParse_11
   \                     ??emberAfScenesClusterServerCommandParse_3: (+1)
   \   00000116   0x2080             MOVS     R0,#+128
   \   00000118   0xE007             B.N      ??emberAfScenesClusterServerCommandParse_12
    276                  groupId = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \                     ??emberAfScenesClusterServerCommandParse_11: (+1)
   \   0000011A   0x.... 0x....      BL       ?Subroutine2
    277                  wasHandled = emberAfScenesClusterGetSceneMembershipCallback(groupId);
   \                     ??CrossCallReturnLabel_8: (+1)
   \   0000011E   0x.... 0x....      BL       emberAfScenesClusterGetSceneMembershipCallback
    278                  break;
    279                }
    280              }
    281            }
    282            return status(wasHandled, cmd->mfgSpecific);
   \                     ??emberAfScenesClusterServerCommandParse_4: (+1)
   \   00000122   0x7BE1             LDRB     R1,[R4, #+15]
   \   00000124   0xE8BD 0x43F4      POP      {R2,R4-R9,LR}
   \   00000128   0x....             B.N      status
   \                     ??emberAfScenesClusterServerCommandParse_12: (+1)
   \   0000012A   0xE8BD 0x83F2      POP      {R1,R4-R9,PC}    ;; return
    283          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3: (+1)
   \   00000000   0x1CA9             ADDS     R1,R5,#+2
   \   00000002   0x68A2             LDR      R2,[R4, #+8]
   \   00000004   0xB289             UXTH     R1,R1
   \   00000006   0x5C89             LDRB     R1,[R1, R2]
   \   00000008   0x4770             BX       LR
    284          
    285          // Cluster: On/off, server

   \                                 In section .text, align 2, keep-with-next
    286          EmberAfStatus emberAfOnOffClusterServerCommandParse(EmberAfClusterCommand *cmd)
    287          {
   \                     emberAfOnOffClusterServerCommandParse: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0xB083             SUB      SP,SP,#+12
    288            boolean wasHandled = FALSE;
    289            if (!cmd->mfgSpecific) {
   \   00000006   0x7BE0             LDRB     R0,[R4, #+15]
   \   00000008   0x2500             MOVS     R5,#+0
   \   0000000A   0xB970             CBNZ.N   R0,??emberAfOnOffClusterServerCommandParse_0
    290              switch (cmd->commandId) {
   \   0000000C   0x7CE0             LDRB     R0,[R4, #+19]
   \   0000000E   0xB118             CBZ.N    R0,??emberAfOnOffClusterServerCommandParse_1
   \   00000010   0x2802             CMP      R0,#+2
   \   00000012   0xD007             BEQ.N    ??emberAfOnOffClusterServerCommandParse_2
   \   00000014   0xD303             BCC.N    ??emberAfOnOffClusterServerCommandParse_3
   \   00000016   0xE008             B.N      ??emberAfOnOffClusterServerCommandParse_0
    291              case ZCL_OFF_COMMAND_ID:
    292                {
    293                  // Command is fixed length: 0
    294                  wasHandled = emberAfOnOffClusterOffCallback();
   \                     ??emberAfOnOffClusterServerCommandParse_1: (+1)
   \   00000018   0x.... 0x....      BL       emberAfOnOffClusterOffCallback
   \   0000001C   0xE004             B.N      ??emberAfOnOffClusterServerCommandParse_4
    295                  break;
    296                }
    297              case ZCL_ON_COMMAND_ID:
    298                {
    299                  // Command is fixed length: 0
    300                  wasHandled = emberAfOnOffClusterOnCallback();
   \                     ??emberAfOnOffClusterServerCommandParse_3: (+1)
   \   0000001E   0x.... 0x....      BL       emberAfOnOffClusterOnCallback
   \   00000022   0xE001             B.N      ??emberAfOnOffClusterServerCommandParse_4
    301                  break;
    302                }
    303              case ZCL_TOGGLE_COMMAND_ID:
    304                {
    305                  // Command is fixed length: 0
    306                  wasHandled = emberAfOnOffClusterToggleCallback();
   \                     ??emberAfOnOffClusterServerCommandParse_2: (+1)
   \   00000024   0x.... 0x....      BL       emberAfOnOffClusterToggleCallback
   \                     ??emberAfOnOffClusterServerCommandParse_4: (+1)
   \   00000028   0x4605             MOV      R5,R0
    307                  break;
    308                }
    309              }
    310            }
    311            	int8u CurrentState;
    312          	emberAfReadServerAttribute(cmd->apsFrame->destinationEndpoint, ZCL_ON_OFF_CLUSTER_ID,ZCL_ON_OFF_ATTRIBUTE_ID,
    313          					&CurrentState, sizeof(CurrentState));
   \                     ??emberAfOnOffClusterServerCommandParse_0: (+1)
   \   0000002A   0x2001             MOVS     R0,#+1
   \   0000002C   0x9000             STR      R0,[SP, #+0]
   \   0000002E   0xAB01             ADD      R3,SP,#+4
   \   00000030   0x6820             LDR      R0,[R4, #+0]
   \   00000032   0x7940             LDRB     R0,[R0, #+5]
   \   00000034   0x2200             MOVS     R2,#+0
   \   00000036   0x2106             MOVS     R1,#+6
   \   00000038   0x.... 0x....      BL       emberAfReadServerAttribute
    314            if(status(wasHandled, cmd->mfgSpecific) == EMBER_ZCL_STATUS_SUCCESS){
   \   0000003C   0x7BE1             LDRB     R1,[R4, #+15]
   \   0000003E   0x4628             MOV      R0,R5
   \   00000040   0x.... 0x....      BL       status
   \   00000044   0xB980             CBNZ.N   R0,??emberAfOnOffClusterServerCommandParse_5
   \   00000046   0x6820             LDR      R0,[R4, #+0]
   \   00000048   0xF89D 0x1004      LDRB     R1,[SP, #+4]
   \   0000004C   0x7940             LDRB     R0,[R0, #+5]
   \   0000004E   0x2901             CMP      R1,#+1
   \   00000050   0xD103             BNE.N    ??emberAfOnOffClusterServerCommandParse_6
    315          	if(CurrentState == 1){
    316          		CommonSetLed(cmd->apsFrame->destinationEndpoint);
                 		^
Warning[Pe223]: function "CommonSetLed" declared implicitly
   \   00000052   0x.... 0x....      BL       CommonSetLed
    317          		UartSendSwitchControlNumber(cmd->apsFrame->destinationEndpoint, OnRelay);
   \   00000056   0x2102             MOVS     R1,#+2
   \   00000058   0xE002             B.N      ??emberAfOnOffClusterServerCommandParse_7
    318          	}
    319          	else{
    320          		CommonClearLed(cmd->apsFrame->destinationEndpoint);
                 		^
Warning[Pe223]: function "CommonClearLed" declared implicitly
   \                     ??emberAfOnOffClusterServerCommandParse_6: (+1)
   \   0000005A   0x.... 0x....      BL       CommonClearLed
    321          		UartSendSwitchControlNumber(cmd->apsFrame->destinationEndpoint, OffRelay);
   \   0000005E   0x2101             MOVS     R1,#+1
   \                     ??emberAfOnOffClusterServerCommandParse_7: (+1)
   \   00000060   0x6820             LDR      R0,[R4, #+0]
   \   00000062   0x7940             LDRB     R0,[R0, #+5]
   \   00000064   0x.... 0x....      BL       UartSendSwitchControlNumber
    322          	}
    323            }
    324            return status(wasHandled, cmd->mfgSpecific);
   \                     ??emberAfOnOffClusterServerCommandParse_5: (+1)
   \   00000068   0x7BE1             LDRB     R1,[R4, #+15]
   \   0000006A   0x4628             MOV      R0,R5
   \   0000006C   0x.... 0x....      BL       status
   \   00000070   0xBD3E             POP      {R1-R5,PC}       ;; return
    325          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   emberAfClusterSpecificCommandParse
         8   -> emberAfContainsServer
         0   -> emberAfGroupsClusterServerCommandParse
         0   -> emberAfIdentifyClusterServerCommandParse
         0   -> emberAfOnOffClusterServerCommandParse
         0   -> emberAfScenesClusterServerCommandParse
         0   -> status
      16   emberAfGroupsClusterServerCommandParse
        16   -> emberAfGetInt16u
        16   -> emberAfGetString
        16   -> emberAfGroupsClusterAddGroupCallback
        16   -> emberAfGroupsClusterAddGroupIfIdentifyingCallback
        16   -> emberAfGroupsClusterGetGroupMembershipCallback
        16   -> emberAfGroupsClusterRemoveAllGroupsCallback
        16   -> emberAfGroupsClusterRemoveGroupCallback
        16   -> emberAfGroupsClusterViewGroupCallback
        16   -> emberAfStringLength
         0   -> status
       8   emberAfIdentifyClusterServerCommandParse
         8   -> emberAfGetInt16u
         8   -> emberAfIdentifyClusterIdentifyCallback
         8   -> emberAfIdentifyClusterIdentifyQueryCallback
         0   -> status
      24   emberAfOnOffClusterServerCommandParse
        24   -> CommonClearLed
        24   -> CommonSetLed
        24   -> UartSendSwitchControlNumber
        24   -> emberAfOnOffClusterOffCallback
        24   -> emberAfOnOffClusterOnCallback
        24   -> emberAfOnOffClusterToggleCallback
        24   -> emberAfReadServerAttribute
        24   -> status
      32   emberAfScenesClusterServerCommandParse
        32   -> emberAfGetInt16u
        32   -> emberAfGetString
        32   -> emberAfScenesClusterAddSceneCallback
        32   -> emberAfScenesClusterGetSceneMembershipCallback
        32   -> emberAfScenesClusterRecallSceneCallback
        32   -> emberAfScenesClusterRemoveAllScenesCallback
        32   -> emberAfScenesClusterRemoveSceneCallback
        32   -> emberAfScenesClusterStoreSceneCallback
        32   -> emberAfScenesClusterViewSceneCallback
        32   -> emberAfStringLength
         0   -> status
       0   status


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?Subroutine0
      14  ?Subroutine1
       6  ?Subroutine2
      10  ?Subroutine3
      84  emberAfClusterSpecificCommandParse
     202  emberAfGroupsClusterServerCommandParse
      54  emberAfIdentifyClusterServerCommandParse
     114  emberAfOnOffClusterServerCommandParse
     302  emberAfScenesClusterServerCommandParse
      16  status

 
 810 bytes in section .text
 
 810 bytes of CODE memory

Errors: none
Warnings: 2
