###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        10/Sep/2015  08:59:59
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\Zigbee\EmberZNet5.6.0-GA\app\framework\util\af-main-common.c
#    Command line =  
#        E:\Zigbee\EmberZNet5.6.0-GA\app\framework\util\af-main-common.c -D
#        NULL_BTL -D CORTEXM3 -D CORTEXM3_EMBER_MICRO -D CORTEXM3_EM357 -D
#        PHY_EM3XX -D
#        "APPLICATION_TOKEN_HEADER=\"app/framework/util/tokens.h\"" -D
#        "ATTRIBUTE_STORAGE_CONFIGURATION=\"app/builder/ZigbeeRoute/ZigbeeRoute_endpoint_config.h\""
#        -D "BOARD_HEADER=\"app\builder\ZigbeeRoute\ZigbeeRoute_board.h\"" -D
#        "CONFIGURATION_HEADER=\"app/framework/util/config.h\"" -D
#        "GENERATED_TOKEN_HEADER=\"app/builder/ZigbeeRoute/ZigbeeRoute_tokens.h\""
#        -D "PLATFORM_HEADER=\"hal/micro/cortexm3/compiler/iar.h\"" -D
#        "ZA_GENERATED_HEADER=\"app/builder/ZigbeeRoute/ZigbeeRoute.h\"" -D
#        "__SOURCEFILE__=\"af-main-common.c\"" -lC
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\build\lst\
#        --diag_suppress Pa050 -o
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\build\obj\ --debug
#        --endian=little --cpu=Cortex-M3 --no_path_in_file_macros
#        --separate_cluster_for_initialized_variables -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\framework\util\ -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\ -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\ -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\app\framework\include\
#        -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\app\util\
#        -I E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\stack\
#        -I E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\hal\
#        -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\hal\..\
#        -Ohz --use_c++_inline
#    List file    =  
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\build\lst\af-main-common.lst
#    Object file  =  
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\build\obj\af-main-common.o
#
###############################################################################

E:\Zigbee\EmberZNet5.6.0-GA\app\framework\util\af-main-common.c
      1          // *******************************************************************
      2          // * af-main-common.c
      3          // *
      4          // * Code common to both the Host and SOC (system on a chip) versions
      5          // * of the Application Framework.
      6          // *
      7          // * Copyright 2014 Silicon Laboratories, Inc.                              *80*
      8          // *******************************************************************
      9          
     10          #include PLATFORM_HEADER     // Micro and compiler specific typedefs and macros
     11          
     12          #if defined EZSP_HOST
     13            #include "stack/include/ember-types.h"
     14            #include "stack/include/error.h"
     15            #include "stack/include/library.h"
     16          #else
     17            // Ember stack and related utilities
     18            #include "stack/include/ember.h"         // Main stack definitions
     19            #include "stack/include/cbke-crypto-engine.h"
     20          #endif
     21          
     22          // HAL - hardware abstraction layer
     23          #include "hal/hal.h"
     24          #include "app/util/serial/serial.h"  // Serial utility APIs
     25          
     26          // CLI - command line interface
     27          #include "app/util/serial/command-interpreter2.h"
     28          
     29          #if defined EZSP_HOST
     30            // EZSP - ember serial host protocol
     31            #include "app/util/ezsp/ezsp-protocol.h"
     32            #include "app/util/ezsp/ezsp.h"
     33            #include "app/util/ezsp/serial-interface.h"
     34            #include "app/util/ezsp/ezsp-utils.h"
     35          #endif
     36          
     37          // Fragmentation.
     38          #ifdef EMBER_AF_PLUGIN_FRAGMENTATION
     39          #include "app/framework/plugin/fragmentation/fragmentation.h"
     40          #endif
     41          
     42          // Service discovery library
     43          #include "service-discovery.h"
     44          
     45          // determines the number of in-clusters and out-clusters based on defines
     46          // in config.h
     47          #include "af-main.h"
     48          
     49          #include "attribute-storage.h"
     50          #include "attribute-table.h"
     51          #include "util.h"
     52          #include "callback.h"
     53          #include "print.h"
     54          #include "config.h"
     55          #include "app/framework/security/af-security.h"
     56          #include "app/framework/security/crypto-state.h"
     57          
     58          // Querying the Ember Stack for what libraries are present.
     59          #include "app/util/common/library.h"
     60          
     61          // ZDO - ZigBee Device Object
     62          #include "app/util/zigbee-framework/zigbee-device-common.h"
     63          
     64          #include "app/framework/plugin/partner-link-key-exchange/partner-link-key-exchange.h"
     65          #include "app/framework/plugin/ota-storage-common/ota-storage.h"
     66          
     67          //------------------------------------------------------------------------------
     68          
     69          #define INVALID_MESSAGE_TAG 0xFF
     70          
     71          #if defined(EMBER_AF_HAS_COORDINATOR_NETWORK)
     72            #if !defined(EMBER_AF_PLUGIN_CONCENTRATOR)
     73              #error "A Coordinator device (Trust Center) MUST enable the concentrator plugin to function correctly."
     74            #endif
     75          #endif
     76          
     77          #ifdef EMBER_AF_GENERATED_PLUGIN_STACK_STATUS_FUNCTION_DECLARATIONS
     78            EMBER_AF_GENERATED_PLUGIN_STACK_STATUS_FUNCTION_DECLARATIONS
     79          #endif
     80          
     81          #ifdef EMBER_AF_GENERATED_PLUGIN_MESSAGE_SENT_FUNCTION_DECLARATIONS
     82            EMBER_AF_GENERATED_PLUGIN_MESSAGE_SENT_FUNCTION_DECLARATIONS
     83          #endif
     84          
     85          #ifdef EMBER_AF_GENERATED_PLUGIN_ZDO_MESSAGE_RECEIVED_FUNCTION_DECLARATIONS
     86            EMBER_AF_GENERATED_PLUGIN_ZDO_MESSAGE_RECEIVED_FUNCTION_DECLARATIONS
     87          #endif
     88          
     89          // flags the user can turn on or off to make the printing behave differently

   \                                 In section .data, align 1
     90          boolean emberAfPrintReceivedMessages = TRUE;
   \                     emberAfPrintReceivedMessages:
   \   00000000   0x01               DC8 1
     91          

   \                                 In section .rodata, align 4, keep-with-next
     92          PGM EmberAfOtaImageId emberAfInvalidImageId = INVALID_OTA_IMAGE_ID;
   \                     emberAfInvalidImageId:
   \   00000000   0xFFFF 0xFFFF      DC16 65535, 65535
   \   00000004   0xFFFFFFFF         DC32 4294967295
   \   00000008   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
     93          

   \                                 In section .bss, align 4
     94          static CallbackTableEntry messageSentCallbacks[EMBER_AF_MESSAGE_SENT_CALLBACK_TABLE_SIZE];
   \                     messageSentCallbacks:
   \   00000000                      DS8 24
     95          
     96          
     97          // We declare this variable 'const' but NOT PGM.  Those functions that we may use
     98          // this variable would also have to declare it PGM in order to function
     99          // correctly, which is not the case (e.g. emberFindKeyTableEntry()).

   \                                 In section .rodata, align 4, keep-with-next
    100          const EmberEUI64 emberAfNullEui64 = {0,0,0,0,0,0,0,0};
   \                     emberAfNullEui64:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
    101          
    102          //------------------------------------------------------------------------------
    103          // Forward declarations
    104          static int8u getMessageSentCallbackIndex(void);
    105          static void invalidateMessageSentCallbackEntry(int8u messageTag);
    106          static EmberAfMessageSentFunction getMessageSentCallback(int8u tag);
    107          
    108          static int8u getMessageSentCallbackIndex(void) 
    109          {
    110            int8u i;
    111            for (i = 0; i < EMBER_AF_MESSAGE_SENT_CALLBACK_TABLE_SIZE; i++) {
    112              if (messageSentCallbacks[i].tag == INVALID_MESSAGE_TAG) {
    113                return i;
    114              }
    115            }
    116          
    117            return INVALID_MESSAGE_TAG;
    118          }
    119          
    120          static void invalidateMessageSentCallbackEntry(int8u tag)
    121          {
    122            int8u i;
    123            for (i = 0; i < EMBER_AF_MESSAGE_SENT_CALLBACK_TABLE_SIZE; i++) {
    124              if (messageSentCallbacks[i].tag == tag) {
    125                messageSentCallbacks[i].tag = INVALID_MESSAGE_TAG;
    126                messageSentCallbacks[i].callback = NULL;
    127                return;
    128              }
    129            }
    130          }
    131          
    132          static EmberAfMessageSentFunction getMessageSentCallback(int8u tag) 
    133          {
    134            int8u i;
    135            for (i = 0; i < EMBER_AF_MESSAGE_SENT_CALLBACK_TABLE_SIZE; i++) {
    136              if (messageSentCallbacks[i].tag == tag) {
    137                return messageSentCallbacks[i].callback;
    138              }
    139            }
    140          
    141            return NULL;
    142          }
    143          

   \                                 In section .text, align 2, keep-with-next
    144          void emAfInitializeMessageSentCallbackArray(void)
    145          {
    146            int8u i;
    147            for (i = 0; i < EMBER_AF_MESSAGE_SENT_CALLBACK_TABLE_SIZE; i++) {
   \                     emAfInitializeMessageSentCallbackArray: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x.... 0x....      LDR.W    R1,??DataTable22
    148              messageSentCallbacks[i].tag = INVALID_MESSAGE_TAG;
   \                     ??emAfInitializeMessageSentCallbackArray_0: (+1)
   \   00000006   0xEB01 0x03C0      ADD      R3,R1,R0, LSL #+3
   \   0000000A   0x22FF             MOVS     R2,#+255
   \   0000000C   0x711A             STRB     R2,[R3, #+4]
    149              messageSentCallbacks[i].callback = NULL;
   \   0000000E   0x2200             MOVS     R2,#+0
   \   00000010   0xF841 0x2030      STR      R2,[R1, R0, LSL #+3]
    150            }
   \   00000014   0x1C40             ADDS     R0,R0,#+1
   \   00000016   0x2803             CMP      R0,#+3
   \   00000018   0xDBF5             BLT.N    ??emAfInitializeMessageSentCallbackArray_0
    151          }
   \   0000001A   0x4770             BX       LR               ;; return
    152          

   \                                 In section .text, align 2, keep-with-next
    153          EmberAfCbkeKeyEstablishmentSuite emberAfIsFullSmartEnergySecurityPresent(void)
    154          {
    155            EmberAfCbkeKeyEstablishmentSuite cbkeKeyEstablishmentSuite = EMBER_AF_INVALID_KEY_ESTABLISHMENT_SUITE;
    156          
    157          #if defined EMBER_AF_HAS_SECURITY_PROFILE_SE
    158            EmberCertificateData cert;
    159            EmberCertificate283k1Data cert283k1;
    160          
    161            if ((emberGetLibraryStatus(EMBER_ECC_LIBRARY_ID)
    162                 & EMBER_LIBRARY_PRESENT_MASK)
    163                && (EMBER_SUCCESS == emberGetCertificate(&cert)) ) {
    164              cbkeKeyEstablishmentSuite |= EMBER_AF_CBKE_KEY_ESTABLISHMENT_SUITE_163K1;
    165            }
    166            
    167            if((emberGetLibraryStatus(EMBER_ECC_LIBRARY_283K1_ID)
    168                 & EMBER_LIBRARY_PRESENT_MASK)
    169                 &&  (EMBER_SUCCESS == emberGetCertificate283k1(&cert283k1))) {
    170              cbkeKeyEstablishmentSuite |= EMBER_AF_CBKE_KEY_ESTABLISHMENT_SUITE_283K1;
    171            }
    172          #endif
    173          
    174            return cbkeKeyEstablishmentSuite;
   \                     emberAfIsFullSmartEnergySecurityPresent: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    175          }
    176          

   \                                 In section .text, align 2, keep-with-next
    177          static EmberStatus send(EmberOutgoingMessageType type,
    178                                  int16u indexOrDestination,
    179                                  EmberApsFrame *apsFrame,
    180                                  int16u messageLength,
    181                                  int8u *message,
    182                                  boolean broadcast,
    183                                  EmberAfMessageSentFunction callback)
    184          {
   \                     send: (+1)
   \   00000000   0xE92D 0x4FF1      PUSH     {R0,R4-R11,LR}
   \   00000004   0xB08E             SUB      SP,SP,#+56
   \   00000006   0x461F             MOV      R7,R3
    185            EmberStatus status;
    186            int8u commandId;
    187            int8u index;
    188            int8u messageSentIndex;
    189            int8u messageTag = INVALID_MESSAGE_TAG;
   \   00000008   0xF04F 0x0AFF      MOV      R10,#+255
   \   0000000C   0x468B             MOV      R11,R1
   \   0000000E   0x4616             MOV      R6,R2
   \   00000010   0xF88D 0xA009      STRB     R10,[SP, #+9]
    190          
    191            // The send APIs only deal with ZCL messages, so they must at least contain
    192            // the ZCL header.
    193            if (messageLength < EMBER_AF_ZCL_OVERHEAD) {
   \   00000014   0x2F03             CMP      R7,#+3
   \   00000016   0xDB05             BLT.N    ??send_0
   \   00000018   0x9C18             LDR      R4,[SP, #+96]
    194              return EMBER_ERR_FATAL;
    195            } else if (message[0] & ZCL_MANUFACTURER_SPECIFIC_MASK) {
   \   0000001A   0x7821             LDRB     R1,[R4, #+0]
   \   0000001C   0x0749             LSLS     R1,R1,#+29
   \   0000001E   0xD507             BPL.N    ??send_1
    196              if (messageLength < EMBER_AF_ZCL_MANUFACTURER_SPECIFIC_OVERHEAD) {
   \   00000020   0x2F05             CMP      R7,#+5
   \   00000022   0xDA03             BGE.N    ??send_2
    197                return EMBER_ERR_FATAL;
   \                     ??send_0: (+1)
   \   00000024   0x2001             MOVS     R0,#+1
   \                     ??send_3: (+1)
   \   00000026   0xB00F             ADD      SP,SP,#+60
   \   00000028   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    198              }
    199              commandId = message[4];
   \                     ??send_2: (+1)
   \   0000002C   0x7920             LDRB     R0,[R4, #+4]
   \   0000002E   0xE000             B.N      ??send_4
    200            } else {
    201              commandId = message[2];
   \                     ??send_1: (+1)
   \   00000030   0x78A0             LDRB     R0,[R4, #+2]
   \                     ??send_4: (+1)
   \   00000032   0xF88D 0x000B      STRB     R0,[SP, #+11]
    202            }
    203          
    204            messageSentIndex = getMessageSentCallbackIndex();
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0x.... 0x....      LDR.W    R9,??DataTable22
   \                     ??send_5: (+1)
   \   0000003C   0xEB09 0x01C0      ADD      R1,R9,R0, LSL #+3
   \   00000040   0x7909             LDRB     R1,[R1, #+4]
   \   00000042   0x29FF             CMP      R1,#+255
   \   00000044   0xD00A             BEQ.N    ??send_6
   \   00000046   0x1C40             ADDS     R0,R0,#+1
   \   00000048   0xB2C0             UXTB     R0,R0
   \   0000004A   0x2803             CMP      R0,#+3
   \   0000004C   0xDBF6             BLT.N    ??send_5
   \                     ??send_7: (+1)
   \   0000004E   0x9D1A             LDR      R5,[SP, #+104]
    205            if (callback != NULL && messageSentIndex == INVALID_MESSAGE_TAG) {
   \   00000050   0xB135             CBZ.N    R5,??send_8
   \   00000052   0xF1BA 0x0FFF      CMP      R10,#+255
   \   00000056   0xD103             BNE.N    ??send_8
    206              return EMBER_TABLE_FULL;
   \   00000058   0x20B4             MOVS     R0,#+180
   \   0000005A   0xE7E4             B.N      ??send_3
   \                     ??send_6: (+1)
   \   0000005C   0x4682             MOV      R10,R0
   \   0000005E   0xE7F6             B.N      ??send_7
    207            }
    208          
    209            // The source endpoint in the APS frame MUST be valid at this point.  We use
    210            // it to set the appropriate outgoing network as well as the profile id in
    211            // the APS frame.
    212            EmberAfEndpointInfoStruct endpointInfo;
    213            int8u networkIndex = 0;
   \                     ??send_8: (+1)
   \   00000060   0x2000             MOVS     R0,#+0
   \   00000062   0xF88D 0x000A      STRB     R0,[SP, #+10]
    214            if (emberAfGetEndpointInfoCallback(apsFrame->sourceEndpoint, 
    215                                               &networkIndex,
    216                                               &endpointInfo)) {
   \   00000066   0xAA08             ADD      R2,SP,#+32
   \   00000068   0x7930             LDRB     R0,[R6, #+4]
   \   0000006A   0xF10D 0x010A      ADD      R1,SP,#+10
   \   0000006E   0x.... 0x....      BL       emberAfGetEndpointInfoCallback
   \   00000072   0xB158             CBZ.N    R0,??send_9
    217              apsFrame->profileId = endpointInfo.profileId;
   \   00000074   0xF8BD 0x002C      LDRH     R0,[SP, #+44]
   \   00000078   0x8030             STRH     R0,[R6, #+0]
    218              status = emberAfPushNetworkIndex(networkIndex);
   \   0000007A   0xF89D 0x000A      LDRB     R0,[SP, #+10]
   \   0000007E   0x.... 0x....      BL       emberAfPushNetworkIndex
   \   00000082   0xF88D 0x0008      STRB     R0,[SP, #+8]
    219              if (status != EMBER_SUCCESS) {
   \   00000086   0x2800             CMP      R0,#+0
   \   00000088   0xD13F             BNE.N    ??send_10
   \   0000008A   0xE014             B.N      ??send_11
    220                return status;
    221              }
    222            } else {
    223              index = emberAfIndexFromEndpoint(apsFrame->sourceEndpoint);
   \                     ??send_9: (+1)
   \   0000008C   0x7930             LDRB     R0,[R6, #+4]
   \   0000008E   0x.... 0x....      BL       emberAfIndexFromEndpoint
   \   00000092   0x4680             MOV      R8,R0
    224              if (index == 0xFF) {
   \   00000094   0xF1B8 0x0FFF      CMP      R8,#+255
   \   00000098   0xBF08             IT       EQ 
    225                return EMBER_INVALID_ENDPOINT;
   \   0000009A   0x20A3             MOVEQ    R0,#+163
   \   0000009C   0xD0C3             BEQ.N    ??send_3
    226              }
    227              status = emberAfPushEndpointNetworkIndex(apsFrame->sourceEndpoint);
   \   0000009E   0x7930             LDRB     R0,[R6, #+4]
   \   000000A0   0x.... 0x....      BL       emberAfPushEndpointNetworkIndex
   \   000000A4   0xF88D 0x0008      STRB     R0,[SP, #+8]
    228              if (status != EMBER_SUCCESS) {
   \   000000A8   0xBB78             CBNZ.N   R0,??send_10
    229                return status;
    230              }
    231              apsFrame->profileId = emberAfProfileIdFromIndex(index);
   \   000000AA   0x.... 0x....      LDR.W    R0,??DataTable22_1
   \   000000AE   0xEB00 0x1008      ADD      R0,R0,R8, LSL #+4
   \   000000B2   0x8840             LDRH     R0,[R0, #+2]
   \   000000B4   0x8030             STRH     R0,[R6, #+0]
    232            }
    233          
    234            // Encryption is turned on if it is required, but not turned off if it isn't.
    235            // This allows the application to send encrypted messages in special cases
    236            // that aren't covered by the specs by manually setting the encryption bit
    237            // prior to calling the send APIs.
    238            if (emberAfDetermineIfLinkSecurityIsRequired(commandId,
    239                                                         FALSE, // incoming?
    240                                                         broadcast,
    241                                                         apsFrame->profileId,
    242                                                         apsFrame->clusterId,
    243                                                         (type == EMBER_OUTGOING_DIRECT)
    244                                                               ? indexOrDestination
    245                                                               : EMBER_NULL_NODE_ID)) {
   \                     ??send_11: (+1)
   \   000000B6   0xF89D 0x0038      LDRB     R0,[SP, #+56]
   \   000000BA   0x2800             CMP      R0,#+0
   \   000000BC   0xBF0C             ITE      EQ 
   \   000000BE   0x4658             MOVEQ    R0,R11
   \   000000C0   0xF64F 0x70FF      MOVWNE   R0,#+65535
   \   000000C4   0x9001             STR      R0,[SP, #+4]
   \   000000C6   0x2100             MOVS     R1,#+0
   \   000000C8   0x8870             LDRH     R0,[R6, #+2]
   \   000000CA   0xF8DD 0x8064      LDR      R8,[SP, #+100]
   \   000000CE   0x9000             STR      R0,[SP, #+0]
   \   000000D0   0x4642             MOV      R2,R8
   \   000000D2   0x8833             LDRH     R3,[R6, #+0]
   \   000000D4   0xF89D 0x000B      LDRB     R0,[SP, #+11]
   \   000000D8   0x.... 0x....      BL       emberAfDetermineIfLinkSecurityIsRequired
   \   000000DC   0xB118             CBZ.N    R0,??send_12
    246              apsFrame->options |= EMBER_APS_OPTION_ENCRYPTION;
   \   000000DE   0x88F0             LDRH     R0,[R6, #+6]
   \   000000E0   0xF040 0x0020      ORR      R0,R0,#0x20
   \   000000E4   0x80F0             STRH     R0,[R6, #+6]
    247            }
    248          
    249            {
    250              EmberAfMessageStruct messageStruct = {
   \                     ??send_12: (+1)
   \   000000E6   0x9503             STR      R5,[SP, #+12]
   \   000000E8   0x9604             STR      R6,[SP, #+16]
   \   000000EA   0x9405             STR      R4,[SP, #+20]
   \   000000EC   0xF8AD 0xB018      STRH     R11,[SP, #+24]
   \   000000F0   0xF8AD 0x701A      STRH     R7,[SP, #+26]
   \   000000F4   0xF88D 0x801D      STRB     R8,[SP, #+29]
    251                callback,
    252                apsFrame,
    253                message,
    254                indexOrDestination,
    255                messageLength,
    256                type,
    257                broadcast,
    258              };
    259              // Called prior to fragmentation in case the mesasge does not go out over the
    260              // Zigbee radio, and instead goes to some other transport that does not require
    261              // low level ZigBee fragmentation.
    262              if (emberAfPreMessageSendCallback(&messageStruct,
    263                                                &status)) {
   \   000000F8   0xA902             ADD      R1,SP,#+8
   \   000000FA   0xF89D 0x0038      LDRB     R0,[SP, #+56]
   \   000000FE   0xF88D 0x001C      STRB     R0,[SP, #+28]
   \   00000102   0xA803             ADD      R0,SP,#+12
   \   00000104   0x.... 0x....      BL       emberAfPreMessageSendCallback
   \   00000108   0xB110             CBZ.N    R0,??send_13
    264                return status;
   \                     ??send_10: (+1)
   \   0000010A   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \   0000010E   0xE78A             B.N      ??send_3
    265              }
    266            }
    267          
    268            if (messageLength
    269                <= emberAfMaximumApsPayloadLength(type, indexOrDestination, apsFrame)) {
   \                     ??send_13: (+1)
   \   00000110   0xF89D 0x0038      LDRB     R0,[SP, #+56]
   \   00000114   0x4632             MOV      R2,R6
   \   00000116   0x4659             MOV      R1,R11
   \   00000118   0x.... 0x....      BL       emberAfMaximumApsPayloadLength
   \   0000011C   0x42B8             CMP      R0,R7
   \   0000011E   0xD318             BCC.N    ??send_14
    270              status = emAfSend(type,
    271                                indexOrDestination,
    272                                apsFrame,
    273                                (int8u)messageLength,
    274                                message,
    275                                &messageTag);
   \   00000120   0xF10D 0x0009      ADD      R0,SP,#+9
   \   00000124   0x9001             STR      R0,[SP, #+4]
   \   00000126   0x9400             STR      R4,[SP, #+0]
   \   00000128   0xB2FB             UXTB     R3,R7
   \   0000012A   0xF89D 0x0038      LDRB     R0,[SP, #+56]
   \   0000012E   0x4632             MOV      R2,R6
   \   00000130   0x4659             MOV      R1,R11
   \   00000132   0x.... 0x....      BL       emAfSend
   \   00000136   0xF88D 0x0008      STRB     R0,[SP, #+8]
    276              if (callback != NULL && status == EMBER_SUCCESS && messageTag != INVALID_MESSAGE_TAG) {
   \   0000013A   0xB175             CBZ.N    R5,??send_15
   \   0000013C   0xB968             CBNZ.N   R0,??send_15
   \   0000013E   0xF89D 0x0009      LDRB     R0,[SP, #+9]
   \   00000142   0x28FF             CMP      R0,#+255
   \   00000144   0xD017             BEQ.N    ??send_16
    277                messageSentCallbacks[messageSentIndex].tag = messageTag;
   \   00000146   0xEB09 0x01CA      ADD      R1,R9,R10, LSL #+3
   \   0000014A   0x7108             STRB     R0,[R1, #+4]
    278                messageSentCallbacks[messageSentIndex].callback = callback;
   \   0000014C   0xF849 0x503A      STR      R5,[R9, R10, LSL #+3]
   \   00000150   0xE011             B.N      ??send_16
    279              }
    280          #ifdef EMBER_AF_PLUGIN_FRAGMENTATION
    281            } else if (!broadcast) {
    282              status = emAfFragmentationSendUnicast(type,
    283                                                    indexOrDestination,
    284                                                    apsFrame,
    285                                                    message,
    286                                                    messageLength);
    287              emberAfDebugPrintln("%pstart:len=%d.", "Fragmentation:", messageLength);
    288          #endif
    289            } else {
    290              status = EMBER_MESSAGE_TOO_LONG;
   \                     ??send_14: (+1)
   \   00000152   0x2074             MOVS     R0,#+116
   \   00000154   0xF88D 0x0008      STRB     R0,[SP, #+8]
   \   00000158   0xE010             B.N      ??send_17
    291            }
    292          
    293            if (status == EMBER_OPERATION_IN_PROGRESS
    294                && apsFrame->options & EMBER_APS_OPTION_DSA_SIGN) {
   \                     ??send_15: (+1)
   \   0000015A   0x28BA             CMP      R0,#+186
   \   0000015C   0xD108             BNE.N    ??send_18
   \   0000015E   0x79B0             LDRB     R0,[R6, #+6]
   \   00000160   0x06C0             LSLS     R0,R0,#+27
   \   00000162   0xD50B             BPL.N    ??send_17
    295              // We consider "in progress" signed messages as being sent successfully.
    296              // The stack will send the message after signing.
    297              status = EMBER_SUCCESS;
   \   00000164   0x2000             MOVS     R0,#+0
   \   00000166   0xF88D 0x0008      STRB     R0,[SP, #+8]
    298              emAfSetCryptoOperationInProgress();
   \   0000016A   0x2001             MOVS     R0,#+1
   \   0000016C   0x.... 0x....      BL       emAfSetCryptoStatus
    299            }
    300          
    301            if (status == EMBER_SUCCESS) {
   \                     ??send_18: (+1)
   \   00000170   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \   00000174   0xB910             CBNZ.N   R0,??send_17
    302              emberAfAddToCurrentAppTasks(EMBER_AF_WAITING_FOR_DATA_ACK
    303                                          | EMBER_AF_WAITING_FOR_ZCL_RESPONSE);
   \                     ??send_16: (+1)
   \   00000176   0x2011             MOVS     R0,#+17
   \   00000178   0x.... 0x....      BL       emberAfAddToCurrentAppTasksCallback
    304            }
    305          
    306            emberAfPopNetworkIndex();
   \                     ??send_17: (+1)
   \   0000017C   0x.... 0x....      BL       emberAfPopNetworkIndex
   \   00000180   0xE7C3             B.N      ??send_10
    307            return status;
    308          }
    309          

   \                                 In section .text, align 2, keep-with-next
    310          EmberStatus emberAfSendMulticastWithCallback(EmberMulticastId multicastId,
    311                                                       EmberApsFrame *apsFrame,
    312                                                       int16u messageLength,
    313                                                       int8u *message,
    314                                                       EmberAfMessageSentFunction callback)
    315          {
   \                     emberAfSendMulticastWithCallback: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
    316            apsFrame->groupId = multicastId;
   \   00000004   0x8108             STRH     R0,[R1, #+8]
    317            return send(EMBER_OUTGOING_MULTICAST,
    318                        multicastId,
    319                        apsFrame,
    320                        messageLength,
    321                        message,
    322                        TRUE, // broadcast?
    323                        callback);
   \   00000006   0x9300             STR      R3,[SP, #+0]
   \   00000008   0x4613             MOV      R3,R2
   \   0000000A   0x9C06             LDR      R4,[SP, #+24]
   \   0000000C   0x9402             STR      R4,[SP, #+8]
   \   0000000E   0x460A             MOV      R2,R1
   \   00000010   0x2401             MOVS     R4,#+1
   \   00000012   0x4601             MOV      R1,R0
   \   00000014   0x9401             STR      R4,[SP, #+4]
   \   00000016   0x2003             MOVS     R0,#+3
   \   00000018   0x....             B.N      ?Subroutine0
    324          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0x.... 0x....      BL       send
   \   00000004   0xB004             ADD      SP,SP,#+16
   \   00000006   0xBD10             POP      {R4,PC}          ;; return
    325          

   \                                 In section .text, align 2, keep-with-next
    326          EmberStatus emberAfSendMulticast(EmberMulticastId multicastId,
    327                                           EmberApsFrame *apsFrame,
    328                                           int16u messageLength,
    329                                           int8u *message)
    330          {
   \                     emberAfSendMulticast: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
    331            return emberAfSendMulticastWithCallback(multicastId,
    332                                                    apsFrame,
    333                                                    messageLength,
    334                                                    message,
    335                                                    NULL);
   \   00000004   0x2400             MOVS     R4,#+0
   \   00000006   0x9400             STR      R4,[SP, #+0]
   \   00000008   0x.... 0x....      BL       emberAfSendMulticastWithCallback
   \   0000000C   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    336          }
    337          

   \                                 In section .text, align 2, keep-with-next
    338          EmberStatus emberAfSendBroadcastWithCallback(EmberNodeId destination,
    339                                                       EmberApsFrame *apsFrame,
    340                                                       int16u messageLength,
    341                                                       int8u *message,
    342                                                       EmberAfMessageSentFunction callback)
    343          {
   \                     emberAfSendBroadcastWithCallback: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
    344            return send(EMBER_OUTGOING_BROADCAST,
    345                        destination,
    346                        apsFrame,
    347                        messageLength,
    348                        message,
    349                        TRUE, // broadcast?
    350                        callback);
   \   00000004   0x9C06             LDR      R4,[SP, #+24]
   \   00000006   0x9300             STR      R3,[SP, #+0]
   \   00000008   0x9402             STR      R4,[SP, #+8]
   \   0000000A   0x4613             MOV      R3,R2
   \   0000000C   0x460A             MOV      R2,R1
   \   0000000E   0x2401             MOVS     R4,#+1
   \   00000010   0x4601             MOV      R1,R0
   \   00000012   0x9401             STR      R4,[SP, #+4]
   \   00000014   0x2004             MOVS     R0,#+4
   \   00000016                      REQUIRE ?Subroutine0
   \   00000016                      ;; // Fall through to label ?Subroutine0
    351          }
    352          

   \                                 In section .text, align 2, keep-with-next
    353          EmberStatus emberAfSendBroadcast(EmberNodeId destination,
    354                                           EmberApsFrame *apsFrame,
    355                                           int16u messageLength,
    356                                           int8u *message)
    357          {
   \                     emberAfSendBroadcast: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
    358            return emberAfSendBroadcastWithCallback(destination,
    359                                                    apsFrame,
    360                                                    messageLength,
    361                                                    message,
    362                                                    NULL);
   \   00000004   0x2400             MOVS     R4,#+0
   \   00000006   0x9400             STR      R4,[SP, #+0]
   \   00000008   0x.... 0x....      BL       emberAfSendBroadcastWithCallback
   \   0000000C   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    363          }
    364          

   \                                 In section .text, align 2, keep-with-next
    365          EmberStatus emberAfSendUnicastWithCallback(EmberOutgoingMessageType type,
    366                                                     int16u indexOrDestination,
    367                                                     EmberApsFrame *apsFrame,
    368                                                     int16u messageLength,
    369                                                     int8u *message,
    370                                                     EmberAfMessageSentFunction callback)
    371          {
   \                     emberAfSendUnicastWithCallback: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0xB085             SUB      SP,SP,#+20
   \   00000006   0x460D             MOV      R5,R1
   \   00000008   0x4616             MOV      R6,R2
   \   0000000A   0x461F             MOV      R7,R3
    372            // The source endpoint in the APS frame MAY NOT be valid at this point if the
    373            // outgoing type is "via binding."
    374            if (type == EMBER_OUTGOING_VIA_BINDING) {
   \   0000000C   0x2C02             CMP      R4,#+2
   \   0000000E   0xD10A             BNE.N    ??emberAfSendUnicastWithCallback_0
    375              // If using binding, set the endpoints based on those in the binding.  The
    376              // cluster in the binding is not used because bindings can be used to send
    377              // messages with any cluster id, not just the one set in the binding.
    378              EmberBindingTableEntry binding;
    379              EmberStatus status = emberGetBinding(indexOrDestination, &binding);
   \   00000010   0xA900             ADD      R1,SP,#+0
   \   00000012   0xB2E8             UXTB     R0,R5
   \   00000014   0x.... 0x....      BL       emberGetBinding
    380              if (status != EMBER_SUCCESS) {
   \   00000018   0xB988             CBNZ.N   R0,??emberAfSendUnicastWithCallback_1
    381                return status;
    382              }
    383              apsFrame->sourceEndpoint = binding.local;
   \   0000001A   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   0000001E   0x7130             STRB     R0,[R6, #+4]
    384              apsFrame->destinationEndpoint = binding.remote;
   \   00000020   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   00000024   0x7170             STRB     R0,[R6, #+5]
    385            }
    386            return send(type,
    387                        indexOrDestination,
    388                        apsFrame,
    389                        messageLength,
    390                        message,
    391                        FALSE, // broadcast?
    392                        callback);
   \                     ??emberAfSendUnicastWithCallback_0: (+1)
   \   00000026   0x463B             MOV      R3,R7
   \   00000028   0x980B             LDR      R0,[SP, #+44]
   \   0000002A   0x9002             STR      R0,[SP, #+8]
   \   0000002C   0x4632             MOV      R2,R6
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0x9001             STR      R0,[SP, #+4]
   \   00000032   0x4629             MOV      R1,R5
   \   00000034   0x980A             LDR      R0,[SP, #+40]
   \   00000036   0x9000             STR      R0,[SP, #+0]
   \   00000038   0x4620             MOV      R0,R4
   \   0000003A   0x.... 0x....      BL       send
   \                     ??emberAfSendUnicastWithCallback_1: (+1)
   \   0000003E   0xB005             ADD      SP,SP,#+20
   \   00000040   0xBDF0             POP      {R4-R7,PC}       ;; return
    393          }
    394          

   \                                 In section .text, align 2, keep-with-next
    395          EmberStatus emberAfSendUnicast(EmberOutgoingMessageType type,
    396                                         int16u indexOrDestination,
    397                                         EmberApsFrame *apsFrame,
    398                                         int16u messageLength,
    399                                         int8u *message)
    400          {
   \                     emberAfSendUnicast: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
    401            return emberAfSendUnicastWithCallback(type,
    402                                                  indexOrDestination,
    403                                                  apsFrame,
    404                                                  messageLength,
    405                                                  message,
    406                                                  NULL);
   \   00000002   0x2400             MOVS     R4,#+0
   \   00000004   0x9401             STR      R4,[SP, #+4]
   \   00000006   0x9C04             LDR      R4,[SP, #+16]
   \   00000008   0x9400             STR      R4,[SP, #+0]
   \   0000000A   0x.... 0x....      BL       emberAfSendUnicastWithCallback
   \   0000000E   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    407          }
    408          

   \                                 In section .text, align 2, keep-with-next
    409          EmberStatus emberAfSendUnicastToBindingsWithCallback(EmberApsFrame *apsFrame,
    410                                                               int16u messageLength,
    411                                                               int8u* message,
    412                                                               EmberAfMessageSentFunction callback)
    413          {
   \                     emberAfSendUnicastToBindingsWithCallback: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB088             SUB      SP,SP,#+32
   \   00000006   0x4604             MOV      R4,R0
   \   00000008   0x4688             MOV      R8,R1
   \   0000000A   0x4616             MOV      R6,R2
   \   0000000C   0x461F             MOV      R7,R3
    414            EmberStatus status = EMBER_INVALID_BINDING_INDEX;
    415            int8u i;
    416          
    417            for (i = 0; i < EMBER_BINDING_TABLE_SIZE; i++) {
   \   0000000E   0x2500             MOVS     R5,#+0
    418              EmberBindingTableEntry binding;
    419              status = emberGetBinding(i, &binding);
   \                     ??emberAfSendUnicastToBindingsWithCallback_0: (+1)
   \   00000010   0xA903             ADD      R1,SP,#+12
   \   00000012   0x4628             MOV      R0,R5
   \   00000014   0x.... 0x....      BL       emberGetBinding
    420              if (status != EMBER_SUCCESS) {
   \   00000018   0xB9F8             CBNZ.N   R0,??emberAfSendUnicastToBindingsWithCallback_1
    421                return status;
    422              }
    423              if (binding.type == EMBER_UNICAST_BINDING
    424                  && binding.local == apsFrame->sourceEndpoint
    425                  && binding.clusterId == apsFrame->clusterId) {
   \   0000001A   0xF89D 0x100C      LDRB     R1,[SP, #+12]
   \   0000001E   0x2901             CMP      R1,#+1
   \   00000020   0xBF02             ITTT     EQ 
   \   00000022   0xF89D 0x100D      LDRBEQ   R1,[SP, #+13]
   \   00000026   0x7922             LDRBEQ   R2,[R4, #+4]
   \   00000028   0x4291             CMPEQ    R1,R2
   \   0000002A   0xBF02             ITTT     EQ 
   \   0000002C   0xF8BD 0x100E      LDRHEQ   R1,[SP, #+14]
   \   00000030   0x8862             LDRHEQ   R2,[R4, #+2]
   \   00000032   0x4291             CMPEQ    R1,R2
   \   00000034   0xD10D             BNE.N    ??emberAfSendUnicastToBindingsWithCallback_2
    426                apsFrame->destinationEndpoint = binding.remote;
   \   00000036   0xF89D 0x0010      LDRB     R0,[SP, #+16]
   \   0000003A   0x7160             STRB     R0,[R4, #+5]
    427                status = send(EMBER_OUTGOING_VIA_BINDING,
    428                              i,
    429                              apsFrame,
    430                              messageLength,
    431                              message,
    432                              FALSE, // broadcast?
    433                              callback);
   \   0000003C   0x9702             STR      R7,[SP, #+8]
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0x9001             STR      R0,[SP, #+4]
   \   00000042   0x9600             STR      R6,[SP, #+0]
   \   00000044   0x4643             MOV      R3,R8
   \   00000046   0x4622             MOV      R2,R4
   \   00000048   0x4629             MOV      R1,R5
   \   0000004A   0x2002             MOVS     R0,#+2
   \   0000004C   0x.... 0x....      BL       send
    434                if (status != EMBER_SUCCESS) {
   \   00000050   0xB918             CBNZ.N   R0,??emberAfSendUnicastToBindingsWithCallback_1
    435                  return status;
    436                }
    437              }
    438            }
   \                     ??emberAfSendUnicastToBindingsWithCallback_2: (+1)
   \   00000052   0x1C69             ADDS     R1,R5,#+1
   \   00000054   0xB2CD             UXTB     R5,R1
   \   00000056   0x2D0A             CMP      R5,#+10
   \   00000058   0xDBDA             BLT.N    ??emberAfSendUnicastToBindingsWithCallback_0
    439          
    440            return status;
   \                     ??emberAfSendUnicastToBindingsWithCallback_1: (+1)
   \   0000005A   0xB008             ADD      SP,SP,#+32
   \   0000005C   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    441          }
    442          

   \                                 In section .text, align 2, keep-with-next
    443          EmberStatus emberAfSendUnicastToBindings(EmberApsFrame *apsFrame,
    444                                                   int16u messageLength,
    445                                                   int8u* message)
    446          {
    447            return emberAfSendUnicastToBindingsWithCallback(apsFrame,
    448                                                            messageLength,
    449                                                            message,
    450                                                            NULL);
   \                     emberAfSendUnicastToBindings: (+1)
   \   00000000   0x2300             MOVS     R3,#+0
   \   00000002   0x....             B.N      emberAfSendUnicastToBindingsWithCallback
    451          }
    452          

   \                                 In section .text, align 2, keep-with-next
    453          EmberStatus emberAfSendInterPan(EmberPanId panId,
    454                                          const EmberEUI64 eui64,
    455                                          EmberNodeId nodeId,
    456                                          EmberMulticastId multicastId,
    457                                          EmberAfClusterId clusterId,
    458                                          EmberAfProfileId profileId,
    459                                          int16u messageLength,
    460                                          int8u* messageBytes)
    461          {
   \                     emberAfSendInterPan: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
   \   00000008   0x4616             MOV      R6,R2
   \   0000000A   0x461F             MOV      R7,R3
    462            EmberAfInterpanHeader header;
    463            MEMSET(&header, 0, sizeof(EmberAfInterpanHeader));
   \   0000000C   0x2216             MOVS     R2,#+22
   \   0000000E   0x2100             MOVS     R1,#+0
   \   00000010   0xA800             ADD      R0,SP,#+0
   \   00000012   0x.... 0x....      BL       halCommonMemSet
    464            header.panId = panId;
   \   00000016   0xF8AD 0x400C      STRH     R4,[SP, #+12]
    465            header.shortAddress = nodeId;
   \   0000001A   0xF8AD 0x600A      STRH     R6,[SP, #+10]
    466            if (eui64 != NULL) {
   \   0000001E   0xB16D             CBZ.N    R5,??emberAfSendInterPan_0
    467              MEMMOVE(header.longAddress, eui64, EUI64_SIZE);
   \   00000020   0x2208             MOVS     R2,#+8
   \   00000022   0x4629             MOV      R1,R5
   \   00000024   0xF10D 0x0001      ADD      R0,SP,#+1
   \   00000028   0x.... 0x....      BL       halCommonMemMove
    468              header.options |= EMBER_AF_INTERPAN_OPTION_MAC_HAS_LONG_ADDRESS;
   \   0000002C   0xF8BD 0x0014      LDRH     R0,[SP, #+20]
   \   00000030   0xF040 0x0002      ORR      R0,R0,#0x2
   \   00000034   0xF8AD 0x0014      STRH     R0,[SP, #+20]
    469              header.messageType = EMBER_AF_INTER_PAN_UNICAST;
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0xE00A             B.N      ??emberAfSendInterPan_1
    470            } else if (multicastId != 0) {
   \                     ??emberAfSendInterPan_0: (+1)
   \   0000003C   0xB11F             CBZ.N    R7,??emberAfSendInterPan_2
    471              header.groupId = multicastId;
   \   0000003E   0xF8AD 0x7012      STRH     R7,[SP, #+18]
    472              header.messageType = EMBER_AF_INTER_PAN_MULTICAST;
   \   00000042   0x200C             MOVS     R0,#+12
   \   00000044   0xE005             B.N      ??emberAfSendInterPan_1
    473            } else {
    474              header.messageType = (nodeId < EMBER_BROADCAST_ADDRESS
    475                                    ? EMBER_AF_INTER_PAN_UNICAST
    476                                    : EMBER_AF_INTER_PAN_BROADCAST);
   \                     ??emberAfSendInterPan_2: (+1)
   \   00000046   0xF64F 0x70FC      MOVW     R0,#+65532
   \   0000004A   0x4286             CMP      R6,R0
   \   0000004C   0xBFB4             ITE      LT 
   \   0000004E   0x2000             MOVLT    R0,#+0
   \   00000050   0x2008             MOVGE    R0,#+8
   \                     ??emberAfSendInterPan_1: (+1)
   \   00000052   0xF88D 0x0000      STRB     R0,[SP, #+0]
    477            }
    478            header.profileId = profileId;
   \   00000056   0x980D             LDR      R0,[SP, #+52]
    479            header.clusterId = clusterId;
    480            return emberAfInterpanSendMessageCallback(&header,
    481                                                      messageLength,
    482                                                      messageBytes);
   \   00000058   0x9A0F             LDR      R2,[SP, #+60]
   \   0000005A   0x990E             LDR      R1,[SP, #+56]
   \   0000005C   0xF8AD 0x000E      STRH     R0,[SP, #+14]
   \   00000060   0x980C             LDR      R0,[SP, #+48]
   \   00000062   0xF8AD 0x0010      STRH     R0,[SP, #+16]
   \   00000066   0xA800             ADD      R0,SP,#+0
   \   00000068   0x.... 0x....      BL       emberAfInterpanSendMessageCallback
   \   0000006C   0xB007             ADD      SP,SP,#+28
   \   0000006E   0xBDF0             POP      {R4-R7,PC}       ;; return
    483          }
    484          

   \                                 In section .text, align 2, keep-with-next
    485          void emberAfPrintMessageData(int8u* data, int16u length)
    486          {
    487          #if defined EMBER_AF_PRINT_APP
    488            emberAfAppPrint(" payload (len %2x) [", length); 
    489            emberAfAppPrintBuffer(data, length, TRUE);
    490            emberAfAppPrintln("]"); 
    491          #endif
    492          }
   \                     emberAfPrintMessageData: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    493          

   \                                 In section .text, align 2, keep-with-next
    494          void emAfPrintStatus(PGM_P task,
    495                               EmberStatus status)
    496          {
   \                     emAfPrintStatus: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x4603             MOV      R3,R0
    497            if (status == EMBER_SUCCESS) {
   \   00000004   0x....             LDR.N    R0,??DataTable22_2
   \   00000006   0x8800             LDRH     R0,[R0, #+0]
   \   00000008   0xB939             CBNZ.N   R1,??emAfPrintStatus_0
    498              emberAfPrint(emberAfPrintActiveArea,
    499                           "%p: %p", 
    500                           "Success",
    501                           task );
   \   0000000A   0x.... 0x....      ADR.W    R2,`?<Constant "Success">`
   \   0000000E   0x.... 0x....      ADR.W    R1,`?<Constant "%p: %p">`
   \   00000012   0xE8BD 0x5000      POP      {R12,LR}
   \   00000016   0x.... 0x....      B.W      emberAfPrint
    502            } else {
    503              emberAfPrint(emberAfPrintActiveArea,
    504                           "%p: %p: 0x%x", 
    505                           "Error",
    506                           task, 
    507                           status);
   \                     ??emAfPrintStatus_0: (+1)
   \   0000001A   0x9100             STR      R1,[SP, #+0]
   \   0000001C   0x.... 0x....      ADR.W    R2,`?<Constant "Error">`
   \   00000020   0x.... 0x....      ADR.W    R1,`?<Constant "%p: %p: 0x%x">`
   \   00000024   0x.... 0x....      BL       emberAfPrint
    508            }
    509          }
   \   00000028   0xBD01             POP      {R0,PC}          ;; return
    510          
    511          static EmberStatus broadcastPermitJoin(int8u duration)
    512          {
    513            EmberStatus status;
    514            int8u data[3] = { 0,   // sequence number (filled in later)
    515                              0,   // duration (filled in below)
    516                              0 }; // TC significance (not used)
    517          
    518            data[1] = duration;
    519            status = emberSendZigDevRequest(EMBER_BROADCAST_ADDRESS,
    520                                            PERMIT_JOINING_REQUEST,
    521                                            0,   // APS options
    522                                            data,
    523                                            3);  // length
    524            return status;
    525          }
    526          
    527          // Public API

   \                                 In section .text, align 2, keep-with-next
    528          EmberStatus emberAfPermitJoin(int8u duration,
    529                                        boolean broadcastMgmtPermitJoin)
    530          {
    531            // Permit joining forever is bad behavior, so we want to limit
    532            // this.  If 254 is not enough a re-broadcast should be done later.
    533            if (duration == EMBER_AF_PERMIT_JOIN_FOREVER) {
   \                     emberAfPermitJoin: (+1)
   \   00000000   0x28FF             CMP      R0,#+255
   \   00000002   0xBF08             IT       EQ 
    534              emberAfAppPrintln("Limiting duration of permit join from forever (255) to 254");
    535              duration = EMBER_AF_PERMIT_JOIN_MAX_TIMEOUT;
   \   00000004   0x20FE             MOVEQ    R0,#+254
    536            }
    537            return emAfPermitJoin(duration,
    538                                  broadcastMgmtPermitJoin);
   \   00000006                      REQUIRE emAfPermitJoin
   \   00000006                      ;; // Fall through to label emAfPermitJoin
    539          }
    540          
    541          // Old API that doesn't restrict prevent permit joining forever (255)

   \                                 In section .text, align 2, keep-with-next
    542          EmberStatus emAfPermitJoin(int8u duration, 
    543                                     boolean broadcastMgmtPermitJoin) 
    544          {
   \                     emAfPermitJoin: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
    545            EmberStatus status = emberPermitJoining(duration);
   \   00000008   0x.... 0x....      BL       emberPermitJoining
    546            emberAfAppPrintln("pJoin for %d sec: 0x%x", duration, status); 
    547            if (status == EMBER_SUCCESS && broadcastMgmtPermitJoin) {
   \   0000000C   0xB970             CBNZ.N   R0,??emAfPermitJoin_0
   \   0000000E   0xB16D             CBZ.N    R5,??emAfPermitJoin_0
    548              status = broadcastPermitJoin(duration);
   \   00000010   0xA801             ADD      R0,SP,#+4
   \   00000012   0x2100             MOVS     R1,#+0
   \   00000014   0x6001             STR      R1,[R0, #+0]
   \   00000016   0x2003             MOVS     R0,#+3
   \   00000018   0x9000             STR      R0,[SP, #+0]
   \   0000001A   0xF88D 0x4005      STRB     R4,[SP, #+5]
   \   0000001E   0xAB01             ADD      R3,SP,#+4
   \   00000020   0x2200             MOVS     R2,#+0
   \   00000022   0x2136             MOVS     R1,#+54
   \   00000024   0xF64F 0x70FC      MOVW     R0,#+65532
   \   00000028   0x.... 0x....      BL       emberSendZigDevRequest
    549            }
    550            return status;
   \                     ??emAfPermitJoin_0: (+1)
   \   0000002C   0xBD3E             POP      {R1-R5,PC}       ;; return
    551          }
    552          
    553          
    554          // ******************************************************************
    555          // Functions called by the Serial Command Line Interface (CLI)
    556          // ******************************************************************
    557          

   \                                 In section .text, align 2, keep-with-next
    558          boolean emAfProcessZdo(EmberNodeId sender,
    559                                 EmberApsFrame* apsFrame,
    560                                 int8u* message, 
    561                                 int16u length)
    562          {
   \                     emAfProcessZdo: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x460D             MOV      R5,R1
   \   00000004   0x4604             MOV      R4,R0
    563            if (apsFrame->profileId != EMBER_ZDO_PROFILE_ID) {
   \   00000006   0x8828             LDRH     R0,[R5, #+0]
   \   00000008   0x4616             MOV      R6,R2
   \   0000000A   0xB108             CBZ.N    R0,??emAfProcessZdo_0
    564              return FALSE;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0xBD70             POP      {R4-R6,PC}
    565            }
    566            
    567            // To make the printing simpler, we assume all 'request' messages
    568            // have a status of 0x00.  Request messages have no status value in them
    569            // but saying 'success' (0x00) seems appropriate.
    570            // Response messages will have their status value printed appropriately.
    571            emberAfZdoPrintln("RX: ZDO, command 0x%2x, status: 0x%X", 
    572                              apsFrame->clusterId,
    573                              (apsFrame->clusterId >= CLUSTER_ID_RESPONSE_MINIMUM
    574                               ? message[1]
    575                               : 0));
    576              
    577            if (apsFrame->clusterId == SIMPLE_DESCRIPTOR_RESPONSE) {
    578              emberAfZdoPrintln("RX: %p Desc Resp", "Simple");
    579            } else if (apsFrame->clusterId == MATCH_DESCRIPTORS_RESPONSE) {
    580              emberAfZdoPrint("RX: %p Desc Resp", "Match");
    581              emberAfZdoPrintln(", Matches: %d", message[4]);
    582            } else if (apsFrame->clusterId == END_DEVICE_BIND_RESPONSE) {
    583              emberAfZdoPrintln("RX: End dev bind response, status=%x", message[1]);
    584            } else if (apsFrame->clusterId == END_DEVICE_ANNOUNCE) {
    585              emberAfZdoPrintln("Device Announce: 0x%2x",
    586                                (int16u)(message[1])
    587                                + (int16u)(message[2] << 8));
    588            } else if (apsFrame->clusterId == IEEE_ADDRESS_RESPONSE) {
    589              emberAfZdoPrintln("RX: IEEE Address Response");
    590            } else if (apsFrame->clusterId == ACTIVE_ENDPOINTS_RESPONSE) {
    591              emberAfZdoPrintln("RX: Active EP Response, Count: %d", message[4]);
    592            } else if (apsFrame->clusterId == NODE_DESCRIPTOR_RESPONSE) {
    593              emberAfZdoPrint("RX: %p Desc Resp", "Node");
    594              emberAfZdoPrintln(", Matches: 0x%2x",                       (int16u)(message[1])
    595                                + (int16u)(message[2] << 8));
    596            }
    597          
    598            if (emberAfPreZDOMessageReceivedCallback(sender, apsFrame, message, length)) {
   \                     ??emAfProcessZdo_0: (+1)
   \   00000010   0x4620             MOV      R0,R4
   \   00000012   0x.... 0x....      BL       emberAfPreZDOMessageReceivedCallback
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xBF02             ITTT     EQ 
    599              goto zdoProcessingDone;
    600            }
    601          
    602          #ifdef EMBER_AF_GENERATED_PLUGIN_ZDO_MESSAGE_RECEIVED_FUNCTION_CALLS
    603            EMBER_AF_GENERATED_PLUGIN_ZDO_MESSAGE_RECEIVED_FUNCTION_CALLS
    604          #endif
    605          
    606            if (apsFrame->clusterId == BIND_RESPONSE) {
   \   0000001A   0x8868             LDRHEQ   R0,[R5, #+2]
   \   0000001C   0xF248 0x0121      MOVWEQ   R1,#+32801
   \   00000020   0x4288             CMPEQ    R0,R1
   \   00000022   0xD103             BNE.N    ??emAfProcessZdo_1
    607              emberAfPartnerLinkKeyExchangeResponseCallback(sender, message[1]);
   \   00000024   0x7871             LDRB     R1,[R6, #+1]
   \   00000026   0x4620             MOV      R0,R4
   \   00000028   0x.... 0x....      BL       emberAfPartnerLinkKeyExchangeResponseCallback
    608            }
    609          
    610          
    611           zdoProcessingDone:
    612            // if it is a zdo response we can remove the zdo waiting task
    613            // and let a sleepy go back into hibernation
    614            if (apsFrame->clusterId > CLUSTER_ID_RESPONSE_MINIMUM) {
   \                     ??emAfProcessZdo_1: (+1)
   \   0000002C   0x8868             LDRH     R0,[R5, #+2]
   \   0000002E   0xF5B0 0x4F00      CMP      R0,#+32768
   \   00000032   0xBFC4             ITT      GT 
    615              emberAfRemoveFromCurrentAppTasks(EMBER_AF_WAITING_FOR_ZDO_RESPONSE);
   \   00000034   0x2008             MOVGT    R0,#+8
   \   00000036   0x.... 0x....      BLGT     emberAfRemoveFromCurrentAppTasksCallback
    616            }
    617          
    618            return TRUE;
   \   0000003A   0x2001             MOVS     R0,#+1
   \   0000003C   0xBD70             POP      {R4-R6,PC}       ;; return
    619          }
    620          

   \                                 In section .text, align 2, keep-with-next
    621          void emAfIncomingMessageHandler(EmberIncomingMessageType type,
    622                                          EmberApsFrame *apsFrame,
    623                                          int8u lastHopLqi,
    624                                          int8s lastHopRssi,
    625                                          int16u messageLength,
    626                                          int8u *messageContents)
    627          {
   \                     emAfIncomingMessageHandler: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0xB088             SUB      SP,SP,#+32
   \   00000006   0x4681             MOV      R9,R0
   \   00000008   0x460E             MOV      R6,R1
   \   0000000A   0x4692             MOV      R10,R2
   \   0000000C   0x4698             MOV      R8,R3
    628            EmberNodeId sender = emberGetSender();
   \   0000000E   0x.... 0x....      BL       emberGetSender
    629            EmberAfIncomingMessage im;
    630          
    631          #ifdef EMBER_AF_PLUGIN_FRAGMENTATION
    632            if (emAfFragmentationIncomingMessage(apsFrame,
    633                                                 sender,
    634                                                 &messageContents,
    635                                                 &messageLength)) {
    636              emberAfDebugPrintln("%pfragment processed.", "Fragmentation:");
    637              return;
    638            }
    639          #endif //EMBER_AF_PLUGIN_FRAGMENTATION
    640          
    641            emberAfDebugPrintln("Processing message: len=%d profile=%2x cluster=%2x",
    642                                messageLength,
    643                                apsFrame->profileId,
    644                                apsFrame->clusterId);
    645            emberAfDebugFlush();
    646          
    647            // Populate the incoming message struct to pass to the incoming message
    648            // callback.
    649            im.type              = type;
   \   00000012   0xF88D 0x9008      STRB     R9,[SP, #+8]
    650            im.apsFrame          = apsFrame;
   \   00000016   0x9603             STR      R6,[SP, #+12]
   \   00000018   0x4605             MOV      R5,R0
   \   0000001A   0x9F11             LDR      R7,[SP, #+68]
    651            im.message           = messageContents;
   \   0000001C   0x9704             STR      R7,[SP, #+16]
    652            im.msgLen            = messageLength;
    653            im.source            = sender;
   \   0000001E   0xF8AD 0x5016      STRH     R5,[SP, #+22]
    654            im.lastHopLqi        = lastHopLqi;
   \   00000022   0xF88D 0xA018      STRB     R10,[SP, #+24]
    655            im.lastHopRssi       = lastHopRssi;
   \   00000026   0xF88D 0x8019      STRB     R8,[SP, #+25]
   \   0000002A   0x9C10             LDR      R4,[SP, #+64]
   \   0000002C   0xF8AD 0x4014      STRH     R4,[SP, #+20]
    656            im.bindingTableIndex = emberAfGetBindingIndex();
   \   00000030   0x.... 0x....      BL       emberAfGetBindingIndex
   \   00000034   0xF88D 0x001A      STRB     R0,[SP, #+26]
    657            im.addressTableIndex = emberAfGetAddressIndex();
   \   00000038   0x.... 0x....      BL       emberAfGetAddressIndex
   \   0000003C   0xF88D 0x001B      STRB     R0,[SP, #+27]
    658            im.networkIndex      = emberGetCurrentNetwork();
   \   00000040   0x.... 0x....      BL       emberGetCurrentNetwork
   \   00000044   0xF88D 0x001C      STRB     R0,[SP, #+28]
    659            if (emberAfPreMessageReceivedCallback(&im)) {
   \   00000048   0xA802             ADD      R0,SP,#+8
   \   0000004A   0x.... 0x....      BL       emberAfPreMessageReceivedCallback
   \   0000004E   0xB9A8             CBNZ.N   R0,??emAfIncomingMessageHandler_0
    660              return;
    661            }
    662          
    663            // Handle service discovery responses.
    664            if (emAfServiceDiscoveryIncoming(sender,
    665                                             apsFrame,
    666                                             messageContents,
    667                                             messageLength)) {
   \   00000050   0x4623             MOV      R3,R4
   \   00000052   0x463A             MOV      R2,R7
   \   00000054   0x4631             MOV      R1,R6
   \   00000056   0x4628             MOV      R0,R5
   \   00000058   0x.... 0x....      BL       emAfServiceDiscoveryIncoming
   \   0000005C   0xB970             CBNZ.N   R0,??emAfIncomingMessageHandler_0
    668              return;
    669            }
    670          
    671            // Handle ZDO messages.
    672            if (emAfProcessZdo(sender, apsFrame, messageContents, messageLength)) {
   \   0000005E   0x4623             MOV      R3,R4
   \   00000060   0x463A             MOV      R2,R7
   \   00000062   0x4631             MOV      R1,R6
   \   00000064   0x4628             MOV      R0,R5
   \   00000066   0x.... 0x....      BL       emAfProcessZdo
   \   0000006A   0xB938             CBNZ.N   R0,??emAfIncomingMessageHandler_0
    673              return;
    674            }
    675          
    676            // Handle ZCL messages.
    677            if (emberAfProcessMessage(apsFrame,
    678                                      type,
    679                                      messageContents,
    680                                      messageLength,
    681                                      sender,
    682                                      NULL)) { // no inter-pan header
   \   0000006C   0x9001             STR      R0,[SP, #+4]
   \   0000006E   0x9500             STR      R5,[SP, #+0]
   \   00000070   0x4623             MOV      R3,R4
   \   00000072   0x463A             MOV      R2,R7
   \   00000074   0x4649             MOV      R1,R9
   \   00000076   0x4630             MOV      R0,R6
   \   00000078   0x.... 0x....      BL       emberAfProcessMessage
    683              return;
   \                     ??emAfIncomingMessageHandler_0: (+1)
   \   0000007C   0xB008             ADD      SP,SP,#+32
   \   0000007E   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
    684            }
    685          }
    686          
    687          static void printMessage(EmberIncomingMessageType tyep,
    688                                   EmberApsFrame* apsFrame,
    689                                   int16u messageLength,
    690                                   int8u* messageContents)
    691          {
    692            emberAfAppPrint("Profile: %p (0x%2X), Cluster: 0x%2X, %d bytes,",
    693                               (apsFrame->profileId == EMBER_ZDO_PROFILE_ID
    694                                ? "ZDO"
    695                                : (apsFrame->profileId == SE_PROFILE_ID 
    696                                   ? "SE"
    697                                   : (apsFrame->profileId == 0x0104
    698                                      ? "HA"
    699                                      : "??"))),
    700                               apsFrame->profileId,
    701                               apsFrame->clusterId,
    702                               messageLength);
    703            if (apsFrame->profileId != EMBER_ZDO_PROFILE_ID
    704                && messageLength >= 3) {
    705              emberAfAppPrint(" ZCL %p Cmd ID: %d", 
    706                              (messageContents[0] & ZCL_CLUSTER_SPECIFIC_COMMAND
    707                               ? "Cluster"
    708                               : "Global"),
    709                              messageContents[2]);
    710            } 
    711            emberAfAppPrintln("");
    712          }
    713          

   \                                 In section .text, align 2, keep-with-next
    714          void emAfMessageSentHandler(EmberOutgoingMessageType type,
    715                                      int16u indexOrDestination,
    716                                      EmberApsFrame *apsFrame,
    717                                      EmberStatus status,
    718                                      int16u messageLength,
    719                                      int8u *messageContents,
    720                                      int8u messageTag)
    721          {
   \                     emAfMessageSentHandler: (+1)
   \   00000000   0xE92D 0x47FC      PUSH     {R2-R10,LR}
   \   00000004   0x4680             MOV      R8,R0
   \   00000006   0x468A             MOV      R10,R1
   \   00000008   0x4617             MOV      R7,R2
    722            EmberAfMessageSentFunction callback;
    723            if (status != EMBER_SUCCESS) {
    724              emberAfAppPrint("%ptx %x, ", "ERROR: ", status);
    725              printMessage(type, apsFrame, messageLength, messageContents);
    726            }
    727          
    728            callback = getMessageSentCallback(messageTag);
   \   0000000A   0x980C             LDR      R0,[SP, #+48]
   \   0000000C   0x....             LDR.N    R1,??DataTable22
   \   0000000E   0x461D             MOV      R5,R3
   \   00000010   0x2200             MOVS     R2,#+0
   \                     ??emAfMessageSentHandler_0: (+1)
   \   00000012   0xEB01 0x03C2      ADD      R3,R1,R2, LSL #+3
   \   00000016   0x791B             LDRB     R3,[R3, #+4]
   \   00000018   0x4283             CMP      R3,R0
   \   0000001A   0xD010             BEQ.N    ??emAfMessageSentHandler_1
   \   0000001C   0x1C52             ADDS     R2,R2,#+1
   \   0000001E   0xB2D2             UXTB     R2,R2
   \   00000020   0x2A03             CMP      R2,#+3
   \   00000022   0xDBF6             BLT.N    ??emAfMessageSentHandler_0
   \   00000024   0xF04F 0x0900      MOV      R9,#+0
    729            invalidateMessageSentCallbackEntry(messageTag);
   \                     ??emAfMessageSentHandler_2: (+1)
   \   00000028   0x2200             MOVS     R2,#+0
   \                     ??emAfMessageSentHandler_3: (+1)
   \   0000002A   0xEB01 0x03C2      ADD      R3,R1,R2, LSL #+3
   \   0000002E   0x791C             LDRB     R4,[R3, #+4]
   \   00000030   0x4284             CMP      R4,R0
   \   00000032   0xD007             BEQ.N    ??emAfMessageSentHandler_4
   \   00000034   0x1C52             ADDS     R2,R2,#+1
   \   00000036   0xB2D2             UXTB     R2,R2
   \   00000038   0x2A03             CMP      R2,#+3
   \   0000003A   0xDBF6             BLT.N    ??emAfMessageSentHandler_3
   \   0000003C   0xE007             B.N      ??emAfMessageSentHandler_5
   \                     ??emAfMessageSentHandler_1: (+1)
   \   0000003E   0xF851 0x9032      LDR      R9,[R1, R2, LSL #+3]
   \   00000042   0xE7F1             B.N      ??emAfMessageSentHandler_2
   \                     ??emAfMessageSentHandler_4: (+1)
   \   00000044   0x20FF             MOVS     R0,#+255
   \   00000046   0x7118             STRB     R0,[R3, #+4]
   \   00000048   0x2000             MOVS     R0,#+0
   \   0000004A   0xF841 0x0032      STR      R0,[R1, R2, LSL #+3]
    730          
    731            if (status == EMBER_SUCCESS
    732                && apsFrame->profileId == EMBER_ZDO_PROFILE_ID
    733                && apsFrame->clusterId < CLUSTER_ID_RESPONSE_MINIMUM) {
   \                     ??emAfMessageSentHandler_5: (+1)
   \   0000004E   0x2D00             CMP      R5,#+0
   \   00000050   0xBF04             ITT      EQ 
   \   00000052   0x8838             LDRHEQ   R0,[R7, #+0]
   \   00000054   0x2800             CMPEQ    R0,#+0
   \   00000056   0xD106             BNE.N    ??emAfMessageSentHandler_6
   \   00000058   0x8878             LDRH     R0,[R7, #+2]
   \   0000005A   0xF5B0 0x4F00      CMP      R0,#+32768
   \   0000005E   0xBFBC             ITT      LT 
    734              emberAfAddToCurrentAppTasks(EMBER_AF_WAITING_FOR_ZDO_RESPONSE);
   \   00000060   0x2008             MOVLT    R0,#+8
   \   00000062   0x.... 0x....      BLLT     emberAfAddToCurrentAppTasksCallback
    735            }
    736          
    737            emberAfRemoveFromCurrentAppTasks(EMBER_AF_WAITING_FOR_DATA_ACK);
   \                     ??emAfMessageSentHandler_6: (+1)
   \   00000066   0x2001             MOVS     R0,#+1
   \   00000068   0x.... 0x....      BL       emberAfRemoveFromCurrentAppTasksCallback
   \   0000006C   0x9C0A             LDR      R4,[SP, #+40]
   \   0000006E   0x9E0B             LDR      R6,[SP, #+44]
    738          
    739            if (messageContents != NULL && messageContents[0] & ZCL_CLUSTER_SPECIFIC_COMMAND) {
   \   00000070   0xB136             CBZ.N    R6,??emAfMessageSentHandler_7
   \   00000072   0x7830             LDRB     R0,[R6, #+0]
   \   00000074   0x07C0             LSLS     R0,R0,#+31
   \   00000076   0xD503             BPL.N    ??emAfMessageSentHandler_7
    740              emberAfClusterMessageSentCallback(type,
    741                                                indexOrDestination,
    742                                                apsFrame,
    743                                                messageLength,
    744                                                messageContents,
    745                                                status);
   \   00000078   0x.... 0x....      BL       ?Subroutine1
    746            }
   \                     ??CrossCallReturnLabel_0: (+1)
   \   0000007C   0x.... 0x....      BL       emberAfClusterMessageSentCallback
    747          
    748            if (callback != NULL) {
   \                     ??emAfMessageSentHandler_7: (+1)
   \   00000080   0xF1B9 0x0F00      CMP      R9,#+0
   \   00000084   0xD002             BEQ.N    ??emAfMessageSentHandler_8
    749              (*callback)(type, indexOrDestination, apsFrame, messageLength, messageContents, status);
   \   00000086   0x.... 0x....      BL       ?Subroutine1
    750            }
   \                     ??CrossCallReturnLabel_1: (+1)
   \   0000008A   0x47C8             BLX      R9
    751          
    752          #ifdef EMBER_AF_GENERATED_PLUGIN_MESSAGE_SENT_FUNCTION_CALLS
    753            EMBER_AF_GENERATED_PLUGIN_MESSAGE_SENT_FUNCTION_CALLS
    754          #endif
    755          
    756              emberAfMessageSentCallback(type,
    757                                         indexOrDestination,
    758                                         apsFrame,
    759                                         messageLength,
    760                                         messageContents,
    761                                         status);
   \                     ??emAfMessageSentHandler_8: (+1)
   \   0000008C   0x.... 0x....      BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_2: (+1)
   \   00000090   0x.... 0x....      BL       emberAfMessageSentCallback
    762          
    763          }
   \   00000094   0xE8BD 0x87F3      POP      {R0,R1,R4-R10,PC}  ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \   00000000   0x9501             STR      R5,[SP, #+4]
   \   00000002   0x9600             STR      R6,[SP, #+0]
   \   00000004   0x4623             MOV      R3,R4
   \   00000006   0x463A             MOV      R2,R7
   \   00000008   0x4651             MOV      R1,R10
   \   0000000A   0x4640             MOV      R0,R8
   \   0000000C   0x4770             BX       LR
    764          
    765          #ifdef EMBER_AF_PLUGIN_FRAGMENTATION
    766          void emAfFragmentationMessageSentHandler(EmberOutgoingMessageType type,
    767                                                   int16u indexOrDestination,
    768                                                   EmberApsFrame *apsFrame,
    769                                                   int8u *buffer,
    770                                                   int16u bufLen,
    771                                                   EmberStatus status)
    772          {
    773            // the fragmented message is no longer in process
    774            emberAfDebugPrintln("%pend.", "Fragmentation:");
    775            emAfMessageSentHandler(type,
    776                                   indexOrDestination,
    777                                   apsFrame,
    778                                   status,
    779                                   bufLen,
    780                                   buffer,
    781                                   INVALID_MESSAGE_TAG);
    782          }
    783          #endif //EMBER_AF_PLUGIN_FRAGMENTATION
    784          

   \                                 In section .text, align 2, keep-with-next
    785          void emAfStackStatusHandler(EmberStatus status)
    786          {
   \                     emAfStackStatusHandler: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0xB082             SUB      SP,SP,#+8
    787            emberAfAppFlush();
    788          
    789            // To be extra careful, we clear the network cache whenever a new status is
    790            // received.
    791            emAfClearNetworkCache(emberGetCurrentNetwork());
    792          
    793            switch (status) {
   \   00000006   0x3890             SUBS     R0,R0,#+144
   \   00000008   0xD00C             BEQ.N    ??emAfStackStatusHandler_0
   \   0000000A   0x1E40             SUBS     R0,R0,#+1
   \   0000000C   0xD03D             BEQ.N    ??emAfStackStatusHandler_1
   \   0000000E   0x1EC0             SUBS     R0,R0,#+3
   \   00000010   0xD03B             BEQ.N    ??emAfStackStatusHandler_1
   \   00000012   0x1E80             SUBS     R0,R0,#+2
   \   00000014   0xD039             BEQ.N    ??emAfStackStatusHandler_1
   \   00000016   0x1E80             SUBS     R0,R0,#+2
   \   00000018   0xD037             BEQ.N    ??emAfStackStatusHandler_1
   \   0000001A   0x3813             SUBS     R0,R0,#+19
   \   0000001C   0x2804             CMP      R0,#+4
   \   0000001E   0xD934             BLS.N    ??emAfStackStatusHandler_1
   \   00000020   0x3811             SUBS     R0,R0,#+17
   \   00000022   0xD134             BNE.N    ??emAfStackStatusHandler_2
    794              case EMBER_NETWORK_UP:
    795              case EMBER_TRUST_CENTER_EUI_HAS_CHANGED:  // also means NETWORK_UP
    796                {
    797                  // Set the runtime security settings as soon as the stack goes up.
    798                  EmberExtendedSecurityBitmask oldExtended;
    799                  EmberExtendedSecurityBitmask newExtended = 0;
   \                     ??emAfStackStatusHandler_0: (+1)
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    800                  const EmberAfSecurityProfileData *data = emAfGetCurrentSecurityProfileData();
   \   0000002A   0x.... 0x....      BL       emAfGetCurrentSecurityProfileData
   \   0000002E   0x4606             MOV      R6,R0
    801                  boolean trustCenter = (emberAfGetNodeId() == EMBER_TRUST_CENTER_NODE_ID);
   \   00000030   0x.... 0x....      BL       emberAfGetNodeId
   \   00000034   0x1E45             SUBS     R5,R0,#+1
   \   00000036   0x41AD             SBCS     R5,R5,R5
   \   00000038   0x0FED             LSRS     R5,R5,#+31
    802                  if (data != NULL) {
   \   0000003A   0xB12E             CBZ.N    R6,??emAfStackStatusHandler_3
    803                    newExtended = (trustCenter
    804                                ? data->tcExtendedBitmask
    805                                : data->nodeExtendedBitmask);
   \   0000003C   0x2D00             CMP      R5,#+0
   \   0000003E   0xBF14             ITE      NE 
   \   00000040   0x88B0             LDRHNE   R0,[R6, #+4]
   \   00000042   0x8930             LDRHEQ   R0,[R6, #+8]
   \   00000044   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    806                  }
    807          
    808                  emberGetExtendedSecurityBitmask(&oldExtended);
   \                     ??emAfStackStatusHandler_3: (+1)
   \   00000048   0xF10D 0x0002      ADD      R0,SP,#+2
   \   0000004C   0x.... 0x....      BL       emberGetExtendedSecurityBitmask
    809                  if (oldExtended & EMBER_EXT_NO_FRAME_COUNTER_RESET){
   \   00000050   0xF8BD 0x0002      LDRH     R0,[SP, #+2]
   \   00000054   0x0680             LSLS     R0,R0,#+26
   \   00000056   0xD505             BPL.N    ??emAfStackStatusHandler_4
    810                    newExtended |= EMBER_EXT_NO_FRAME_COUNTER_RESET;
   \   00000058   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   0000005C   0xF040 0x0020      ORR      R0,R0,#0x20
   \   00000060   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    811                  }
    812          
    813                  emberAfSecurityInitCallback(NULL, &newExtended, trustCenter);
   \                     ??emAfStackStatusHandler_4: (+1)
   \   00000064   0x462A             MOV      R2,R5
   \   00000066   0xA900             ADD      R1,SP,#+0
   \   00000068   0x2000             MOVS     R0,#+0
   \   0000006A   0x.... 0x....      BL       emberAfSecurityInitCallback
    814                  emberSetExtendedSecurityBitmask(newExtended);
   \   0000006E   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000072   0x.... 0x....      BL       emberSetExtendedSecurityBitmask
    815          
    816                  emberAfAppPrintln("%p%pUP 0x%2X", "EMBER_", "NETWORK_", emberAfGetNodeId());
    817                  emberAfAppFlush();
    818          #if defined(EMBER_TEST)
    819                  simulatedTimePasses();
    820          #endif        
    821          
    822                  if (status == EMBER_TRUST_CENTER_EUI_HAS_CHANGED) {
   \   00000076   0x2CBC             CMP      R4,#+188
   \   00000078   0xD102             BNE.N    ??emAfStackStatusHandler_5
    823                    emberAfAppPrintln("Trust Center EUI has changed.");
    824                    // We abort registration because we want to clear out any previous
    825                    // state and force it to start anew.  One of two results will occur after
    826                    // we restart registration later.
    827                    // (1) It succeeds and we are on a new network with a new TC, in which
    828                    //     case we need to kick off key establishment to re-authenticate it 
    829                    //     and also re-discover other ESIs.
    830                    // (2) It will fail, in which case we have to reboot to forget the untrusted
    831                    //     network and its settings.
    832                    emberAfRegistrationAbortCallback();
   \   0000007A   0x.... 0x....      BL       emberAfRegistrationAbortCallback
   \   0000007E   0xE001             B.N      ??emAfStackStatusHandler_6
    833                  } else {
    834                    emberStartWritingStackTokens();
   \                     ??emAfStackStatusHandler_5: (+1)
   \   00000080   0x.... 0x....      BL       emberStartWritingStackTokens
    835                  }
    836          
    837                  // This kicks off registration for newly joined devices.  If registration
    838                  // already occurred, nothing will happen here.
    839                  emberAfRegistrationStartCallback();
   \                     ??emAfStackStatusHandler_6: (+1)
   \   00000084   0x.... 0x....      BL       emberAfRegistrationStartCallback
    840                  break;
   \   00000088   0xE001             B.N      ??emAfStackStatusHandler_2
    841                }
    842          
    843              case EMBER_RECEIVED_KEY_IN_THE_CLEAR:
    844              case EMBER_NO_NETWORK_KEY_RECEIVED:
    845              case EMBER_NO_LINK_KEY_RECEIVED:
    846              case EMBER_PRECONFIGURED_KEY_REQUIRED:
    847              case EMBER_MOVE_FAILED:
    848              case EMBER_JOIN_FAILED:
    849              case EMBER_NO_BEACONS:
    850              case EMBER_CANNOT_JOIN_AS_ROUTER:
    851              case EMBER_NETWORK_DOWN:
    852                if (status == EMBER_NETWORK_DOWN) {
    853                  emberAfAppPrintln("%p%pDOWN", "EMBER_", "NETWORK_");
    854                } else {
    855                emberAfAppPrintln("%pJOIN%p", "EMBER_", "_FAILED");
    856                }
    857              emberAfAppFlush();
    858              emberAfStackDown();
   \                     ??emAfStackStatusHandler_1: (+1)
   \   0000008A   0x.... 0x....      BL       emberAfStackDown
    859              break;
    860          
    861            default:
    862              emberAfDebugPrintln("EVENT: stackStatus 0x%x", status);
    863            }
    864          
    865            emberAfAppFlush();
    866          
    867          #ifdef EMBER_AF_GENERATED_PLUGIN_STACK_STATUS_FUNCTION_CALLS
    868            EMBER_AF_GENERATED_PLUGIN_STACK_STATUS_FUNCTION_CALLS
   \                     ??emAfStackStatusHandler_2: (+1)
   \   0000008E   0x4620             MOV      R0,R4
   \   00000090   0x.... 0x....      BL       emberAfPluginNetworkFindStackStatusCallback
    869          #endif
    870          
    871            if (emberAfStackStatusCallback(status)) {
   \   00000094   0x4620             MOV      R0,R4
   \   00000096   0x.... 0x....      BL       emberAfStackStatusCallback
    872              // Bug 13690: Even if the callback handled the status, we still want to do
    873              // our things regarding the stack status. Therefore we no longer return
    874              // here. For now we just print a warning message to inform the customer that
    875              // a TRUE value returned by emberAfStackStatusCallback() no longer avoid
    876              // the Stack Status to be handled by our code.
    877              emberAfAppPrintln("The app framework is handling the stack status.");
    878            }
    879          }
   \   0000009A   0xBD73             POP      {R0,R1,R4-R6,PC}  ;; return
    880          
    881          #ifdef EMBER_AF_USE_STANDARD_NETWORK_INIT
    882            #define networkInit emberNetworkInit
    883          #else
    884          static EmberStatus networkInitExtended(void)
    885            {
    886              EmberNetworkInitStruct networkInitStruct = { 
    887                EMBER_AF_CUSTOM_NETWORK_INIT_OPTIONS   // EmberNetworkInitBitmask value
    888              };
    889              return emberNetworkInitExtended(&networkInitStruct);
    890            }
    891            #define networkInit networkInitExtended
    892          #endif
    893          
    894          // If possible, initialize each network.  For ZigBee PRO networks, the node
    895          // type of the device must match the one used previously, but note that
    896          // coordinator-capable devices are allowed to initialize as routers.

   \                                 In section .text, align 2, keep-with-next
    897          void emAfNetworkInit(void)
    898          {
   \                     emAfNetworkInit: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
    899            int8u i;
    900            for (i = 0; i < EMBER_SUPPORTED_NETWORKS; i++) {
   \   00000002   0x....             LDR.N    R4,??DataTable22_3
    901              boolean initialize = TRUE;
    902              emberAfPushNetworkIndex(i);
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x.... 0x....      BL       emberAfPushNetworkIndex
    903              emAfClearNetworkCache(i);
    904              if (emAfProIsCurrentNetwork()) {
   \   0000000A   0x6820             LDR      R0,[R4, #+0]
   \   0000000C   0xB190             CBZ.N    R0,??emAfNetworkInit_0
    905                EmberNodeType nodeType;
    906                if (emAfCurrentZigbeeProNetwork->nodeType == EMBER_COORDINATOR) {
   \   0000000E   0x7800             LDRB     R0,[R0, #+0]
   \   00000010   0x2801             CMP      R0,#+1
   \   00000012   0xBF08             IT       EQ 
    907                  zaTrustCenterSecurityPolicyInit();
   \   00000014   0x.... 0x....      BLEQ     zaTrustCenterSecurityPolicyInit
    908                }
    909                if (emberAfGetNodeType(&nodeType) != EMBER_SUCCESS
    910                    || (nodeType != emAfCurrentZigbeeProNetwork->nodeType
    911                        && (emAfCurrentZigbeeProNetwork->nodeType != EMBER_COORDINATOR
    912                            || nodeType != EMBER_ROUTER))) {
   \   00000018   0xA800             ADD      R0,SP,#+0
   \   0000001A   0x.... 0x....      BL       emberAfGetNodeType
   \   0000001E   0xB980             CBNZ.N   R0,??emAfNetworkInit_1
   \   00000020   0x6820             LDR      R0,[R4, #+0]
   \   00000022   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   00000026   0x7800             LDRB     R0,[R0, #+0]
   \   00000028   0x4281             CMP      R1,R0
   \   0000002A   0xD003             BEQ.N    ??emAfNetworkInit_0
   \   0000002C   0x2801             CMP      R0,#+1
   \   0000002E   0xBF08             IT       EQ 
   \   00000030   0x2902             CMPEQ    R1,#+2
   \   00000032   0xD106             BNE.N    ??emAfNetworkInit_1
    913                  initialize = FALSE;
    914                }
    915              }
    916              if (initialize) {
    917                networkInit();
   \                     ??emAfNetworkInit_0: (+1)
   \   00000034   0x.... 0x....      ADR.W    R0,`?<Constant {0}>`
   \   00000038   0x6800             LDR      R0,[R0, #+0]
   \   0000003A   0x9001             STR      R0,[SP, #+4]
   \   0000003C   0xA801             ADD      R0,SP,#+4
   \   0000003E   0x.... 0x....      BL       emberNetworkInitExtended
    918              }
    919              emberAfPopNetworkIndex();
   \                     ??emAfNetworkInit_1: (+1)
   \   00000042   0x.... 0x....      BL       emberAfPopNetworkIndex
    920            }
    921          }
   \   00000046   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    922          

   \                                 In section .text, align 2, keep-with-next
    923          void emberScanErrorHandler(EmberStatus status)
    924          {
   \                     emberScanErrorHandler: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    925            emberAfPushCallbackNetworkIndex();
   \   00000004   0x.... 0x....      BL       emberAfPushCallbackNetworkIndex
    926            emberAfScanErrorCallback(status);
   \   00000008   0x4620             MOV      R0,R4
   \   0000000A   0x.... 0x....      BL       emberAfScanErrorCallback
    927            emberAfPopNetworkIndex();
   \   0000000E   0xE8BD 0x4010      POP      {R4,LR}
   \   00000012   0x.... 0x....      B.W      emberAfPopNetworkIndex
    928          }
    929          

   \                                 In section .text, align 2, keep-with-next
    930          EmberStatus emAfFormNetwork(EmberNetworkParameters *parameters,
    931                                      boolean centralizedNetwork)
    932          {
    933            EmberStatus status = EMBER_INVALID_CALL;
    934          #ifdef EMBER_AF_HAS_COORDINATOR_NETWORK
    935            if (emAfProIsCurrentNetwork()
    936                && emAfCurrentZigbeeProNetwork->nodeType == EMBER_COORDINATOR) {
    937              zaTrustCenterSecurityInit(centralizedNetwork);
    938              emberAfCorePrintln("%ping on ch %d, panId 0x%2X",
    939                                 "Form", 
    940                                 parameters->radioChannel,
    941                                 parameters->panId);
    942              emberAfCoreFlush();
    943              status = emberFormNetwork(parameters);
    944            }
    945          #endif
    946            return status;
   \                     emAfFormNetwork: (+1)
   \   00000000   0x2070             MOVS     R0,#+112
   \   00000002   0x4770             BX       LR               ;; return
    947          }
    948          

   \                                 In section .text, align 2, keep-with-next
    949          EmberStatus emberAfFormNetwork(EmberNetworkParameters *parameters)
    950          {
    951            return emAfFormNetwork(parameters,
    952                                   TRUE); // Yes, centralized network.
   \                     emberAfFormNetwork: (+1)
   \   00000000   0x2070             MOVS     R0,#+112
   \   00000002   0x4770             BX       LR               ;; return
    953          }
    954          

   \                                 In section .text, align 2, keep-with-next
    955          EmberStatus emberAfJoinNetwork(EmberNetworkParameters *parameters)
    956          {
   \                     emberAfJoinNetwork: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    957            EmberStatus status = EMBER_INVALID_CALL;
    958            if (emAfProIsCurrentNetwork()) {
   \   00000002   0x....             LDR.N    R1,??DataTable22_3
   \   00000004   0x6809             LDR      R1,[R1, #+0]
   \   00000006   0x4604             MOV      R4,R0
   \   00000008   0x2070             MOVS     R0,#+112
   \   0000000A   0xB159             CBZ.N    R1,??emberAfJoinNetwork_0
    959              EmberNodeType nodeType = emAfCurrentZigbeeProNetwork->nodeType;
   \   0000000C   0x780D             LDRB     R5,[R1, #+0]
    960              if (nodeType == EMBER_COORDINATOR) {
   \   0000000E   0x2D01             CMP      R5,#+1
   \   00000010   0xBF08             IT       EQ 
    961                nodeType = EMBER_ROUTER;
   \   00000012   0x2502             MOVEQ    R5,#+2
    962              }
    963              zaNodeSecurityInit();
   \   00000014   0x.... 0x....      BL       zaNodeSecurityInit
    964              emberAfCorePrintln("%ping on ch %d, panId 0x%2X",
    965                                 "Join", 
    966                                 parameters->radioChannel,
    967                                 parameters->panId);
    968              status = emberJoinNetwork(nodeType, parameters);
   \   00000018   0x4621             MOV      R1,R4
   \   0000001A   0x4628             MOV      R0,R5
   \   0000001C   0xE8BD 0x4034      POP      {R2,R4,R5,LR}
   \   00000020   0x.... 0x....      B.W      emberJoinNetwork
    969            }
    970            return status;
   \                     ??emberAfJoinNetwork_0: (+1)
   \   00000024   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    971          }
    972          
    973          // mfgString is expected to be +1 of MFG_STRING_MAX_LENGTH

   \                                 In section .text, align 2, keep-with-next
    974          void emberAfFormatMfgString(int8u* mfgString)
    975          {
   \                     emberAfFormatMfgString: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    976            int8u i;
    977            emberAfGetMfgString(mfgString);
   \   00000004   0x.... 0x....      BL       emberAfGetMfgString
    978          
    979            for (i = 0; i < MFG_STRING_MAX_LENGTH; i++) {
   \   00000008   0x2000             MOVS     R0,#+0
    980              // The MFG string is not necessarily NULL terminated.
    981              // Uninitialized bytes are left at 0xFF so we make sure
    982              // it is NULL terminated.
    983              if (mfgString[i] == 0xFF) {
   \                     ??emberAfFormatMfgString_0: (+1)
   \   0000000A   0x5D01             LDRB     R1,[R0, R4]
   \   0000000C   0x29FF             CMP      R1,#+255
   \   0000000E   0xBF04             ITT      EQ 
    984                mfgString[i] = '\0';
   \   00000010   0x2100             MOVEQ    R1,#+0
   \   00000012   0x5501             STRBEQ   R1,[R0, R4]
    985              }
    986            }
   \   00000014   0x1C40             ADDS     R0,R0,#+1
   \   00000016   0x2810             CMP      R0,#+16
   \   00000018   0xDBF7             BLT.N    ??emberAfFormatMfgString_0
    987            mfgString[MFG_STRING_MAX_LENGTH] = '\0';
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x7420             STRB     R0,[R4, #+16]
    988          }
   \   0000001E   0xBD10             POP      {R4,PC}          ;; return
    989          

   \                                 In section .text, align 4, keep-with-next
    990          static PGM EmberReleaseTypeStruct releaseTypes[] = {
   \                     releaseTypes:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \   00000004   0x........         DC32 `?<Constant "Pre-Release">`
   \   00000008   0x11 0x00          DC8 17, 0, 0, 0
   \              0x00 0x00    
   \   0000000C   0x........         DC32 `?<Constant "Alpha 1">`
   \   00000010   0x12 0x00          DC8 18, 0, 0, 0
   \              0x00 0x00    
   \   00000014   0x........         DC32 `?<Constant "Alpha 2">`
   \   00000018   0x13 0x00          DC8 19, 0, 0, 0
   \              0x00 0x00    
   \   0000001C   0x........         DC32 `?<Constant "Alpha 3">`
   \   00000020   0x21 0x00          DC8 33, 0, 0, 0
   \              0x00 0x00    
   \   00000024   0x........         DC32 `?<Constant "Beta 1">`
   \   00000028   0x22 0x00          DC8 34, 0, 0, 0
   \              0x00 0x00    
   \   0000002C   0x........         DC32 `?<Constant "Beta 2">`
   \   00000030   0x23 0x00          DC8 35, 0, 0, 0
   \              0x00 0x00    
   \   00000034   0x........         DC32 `?<Constant "Beta 3">`
   \   00000038   0xAA 0x00          DC8 170, 0, 0, 0
   \              0x00 0x00    
   \   0000003C   0x........         DC32 `?<Constant "GA">`
   \   00000040   0xFF 0x00          DC8 255, 0, 0, 0
   \              0x00 0x00    
   \   00000044   0x00000000         DC32 0H
    991            EMBER_RELEASE_TYPE_TO_STRING_STRUCT_DATA
    992          };
    993          

   \                                 In section .text, align 2, keep-with-next
    994          void emAfParseAndPrintVersion(EmberVersion versionStruct)
    995          {
    996            int8u i = 0;
   \                     emAfParseAndPrintVersion: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
    997            PGM_P typeText = NULL;
   \   00000002   0x.... 0x....      ADR.W    R1,releaseTypes
   \   00000006   0xE001             B.N      ??emAfParseAndPrintVersion_0
    998            while (releaseTypes[i].typeString != NULL) {
    999              if (releaseTypes[i].typeNum == versionStruct.type) {
   1000                typeText = releaseTypes[i].typeString;
   1001              }
   1002              i++;
   \                     ??emAfParseAndPrintVersion_1: (+1)
   \   00000008   0x1C40             ADDS     R0,R0,#+1
   \   0000000A   0xB2C0             UXTB     R0,R0
   1003            }
   \                     ??emAfParseAndPrintVersion_0: (+1)
   \   0000000C   0xEB01 0x02C0      ADD      R2,R1,R0, LSL #+3
   \   00000010   0x6852             LDR      R2,[R2, #+4]
   \   00000012   0x2A00             CMP      R2,#+0
   \   00000014   0xD1F8             BNE.N    ??emAfParseAndPrintVersion_1
   1004            emberAfAppPrint("stack ver. [%d.%d.%d",
   1005                            versionStruct.major,
   1006                            versionStruct.minor,
   1007                            versionStruct.patch);
   1008            if (versionStruct.special != 0) {
   1009              emberAfAppPrint(".%d",
   1010                              versionStruct.special);
   1011            }
   1012            UNUSED_VAR(typeText);
   1013            emberAfAppPrintln(" %p build %d]", 
   1014                              (typeText == NULL
   1015                               ? "???"
   1016                               : typeText),
   1017                              versionStruct.build);
   1018            emberAfAppFlush();
   1019          }
   \   00000016   0x4770             BX       LR               ;; return
   1020          
   1021          //hal button isr

   \                                 In section .text, align 2, keep-with-next
   1022          void halButtonIsr(int8u button, int8u state) {
   1023          //  emberAfHalButtonIsrCallback(button, state);
   1024          }
   \                     halButtonIsr: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22:
   \   00000000   0x........         DC32     messageSentCallbacks

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_1:
   \   00000000   0x........         DC32     emAfEndpoints

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_2:
   \   00000000   0x........         DC32     emberAfPrintActiveArea

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_3:
   \   00000000   0x........         DC32     emAfCurrentZigbeeProNetwork

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%p: %p">`:
   \   00000000   0x25 0x70          DC8 "%p: %p"
   \              0x3A 0x20    
   \              0x25 0x70    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Pre-Release">`:
   \   00000000   0x50 0x72          DC8 "Pre-Release"
   \              0x65 0x2D    
   \              0x52 0x65    
   \              0x6C 0x65    
   \              0x61 0x73    
   \              0x65 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Alpha 1">`:
   \   00000000   0x41 0x6C          DC8 "Alpha 1"
   \              0x70 0x68    
   \              0x61 0x20    
   \              0x31 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Alpha 2">`:
   \   00000000   0x41 0x6C          DC8 "Alpha 2"
   \              0x70 0x68    
   \              0x61 0x20    
   \              0x32 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Alpha 3">`:
   \   00000000   0x41 0x6C          DC8 "Alpha 3"
   \              0x70 0x68    
   \              0x61 0x20    
   \              0x33 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Beta 1">`:
   \   00000000   0x42 0x65          DC8 "Beta 1"
   \              0x74 0x61    
   \              0x20 0x31    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Beta 2">`:
   \   00000000   0x42 0x65          DC8 "Beta 2"
   \              0x74 0x61    
   \              0x20 0x32    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Beta 3">`:
   \   00000000   0x42 0x65          DC8 "Beta 3"
   \              0x74 0x61    
   \              0x20 0x33    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "GA">`:
   \   00000000   0x47 0x41          DC8 "GA"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Success">`:
   \   00000000   0x53 0x75          DC8 "Success"
   \              0x63 0x63    
   \              0x65 0x73    
   \              0x73 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%p: %p: 0x%x">`:
   \   00000000   0x25 0x70          DC8 "%p: %p: 0x%x"
   \              0x3A 0x20    
   \              0x25 0x70    
   \              0x3A 0x20    
   \              0x30 0x78    
   \              0x25 0x78    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Error">`:
   \   00000000   0x45 0x72          DC8 "Error"
   \              0x72 0x6F    
   \              0x72 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant {0, 0, 0}>`:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {0}>`:
   \   00000000   0x0000             DC16 0
   \   00000002   0x00 0x00          DC8 0, 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   emAfFormNetwork
      64   emAfIncomingMessageHandler
        64   -> emAfProcessZdo
        64   -> emAfServiceDiscoveryIncoming
        64   -> emberAfGetAddressIndex
        64   -> emberAfGetBindingIndex
        64   -> emberAfPreMessageReceivedCallback
        64   -> emberAfProcessMessage
        64   -> emberGetCurrentNetwork
        64   -> emberGetSender
       0   emAfInitializeMessageSentCallbackArray
      40   emAfMessageSentHandler
        40   -- Indirect call
        40   -> emberAfAddToCurrentAppTasksCallback
        40   -> emberAfClusterMessageSentCallback
        40   -> emberAfMessageSentCallback
        40   -> emberAfRemoveFromCurrentAppTasksCallback
      16   emAfNetworkInit
        16   -> emberAfGetNodeType
        16   -> emberAfPopNetworkIndex
        16   -> emberAfPushNetworkIndex
        16   -> emberNetworkInitExtended
        16   -> zaTrustCenterSecurityPolicyInit
       0   emAfParseAndPrintVersion
      24   emAfPermitJoin
        24   -> emberPermitJoining
        24   -> emberSendZigDevRequest
       8   emAfPrintStatus
         0   -> emberAfPrint
         8   -> emberAfPrint
      16   emAfProcessZdo
        16   -> emberAfPartnerLinkKeyExchangeResponseCallback
        16   -> emberAfPreZDOMessageReceivedCallback
        16   -> emberAfRemoveFromCurrentAppTasksCallback
      24   emAfStackStatusHandler
        24   -> emAfGetCurrentSecurityProfileData
        24   -> emberAfGetNodeId
        24   -> emberAfPluginNetworkFindStackStatusCallback
        24   -> emberAfRegistrationAbortCallback
        24   -> emberAfRegistrationStartCallback
        24   -> emberAfSecurityInitCallback
        24   -> emberAfStackDown
        24   -> emberAfStackStatusCallback
        24   -> emberGetExtendedSecurityBitmask
        24   -> emberSetExtendedSecurityBitmask
        24   -> emberStartWritingStackTokens
       0   emberAfFormNetwork
       8   emberAfFormatMfgString
         8   -> emberAfGetMfgString
       0   emberAfIsFullSmartEnergySecurityPresent
      16   emberAfJoinNetwork
         0   -> emberJoinNetwork
        16   -> zaNodeSecurityInit
       0   emberAfPermitJoin
         0   -> emAfPermitJoin
       0   emberAfPrintMessageData
      16   emberAfSendBroadcast
        16   -> emberAfSendBroadcastWithCallback
      24   emberAfSendBroadcastWithCallback
        24   -> send
      48   emberAfSendInterPan
        48   -> emberAfInterpanSendMessageCallback
        48   -> halCommonMemMove
        48   -> halCommonMemSet
      16   emberAfSendMulticast
        16   -> emberAfSendMulticastWithCallback
      24   emberAfSendMulticastWithCallback
        24   -> send
      16   emberAfSendUnicast
        16   -> emberAfSendUnicastWithCallback
       0   emberAfSendUnicastToBindings
         0   -> emberAfSendUnicastToBindingsWithCallback
      56   emberAfSendUnicastToBindingsWithCallback
        56   -> emberGetBinding
        56   -> send
      40   emberAfSendUnicastWithCallback
        40   -> emberGetBinding
        40   -> send
       8   emberScanErrorHandler
         0   -> emberAfPopNetworkIndex
         8   -> emberAfPushCallbackNetworkIndex
         8   -> emberAfScanErrorCallback
       0   halButtonIsr
      96   send
        96   -> emAfSend
        96   -> emAfSetCryptoStatus
        96   -> emberAfAddToCurrentAppTasksCallback
        96   -> emberAfDetermineIfLinkSecurityIsRequired
        96   -> emberAfGetEndpointInfoCallback
        96   -> emberAfIndexFromEndpoint
        96   -> emberAfMaximumApsPayloadLength
        96   -> emberAfPopNetworkIndex
        96   -> emberAfPreMessageSendCallback
        96   -> emberAfPushEndpointNetworkIndex
        96   -> emberAfPushNetworkIndex


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?<Constant "%p: %p">
      16  ?<Constant "%p: %p: 0x%x">
       8  ?<Constant "Alpha 1">
       8  ?<Constant "Alpha 2">
       8  ?<Constant "Alpha 3">
       8  ?<Constant "Beta 1">
       8  ?<Constant "Beta 2">
       8  ?<Constant "Beta 3">
       8  ?<Constant "Error">
       4  ?<Constant "GA">
      12  ?<Constant "Pre-Release">
       8  ?<Constant "Success">
       4  ?<Constant {0, 0, 0}>
       4  ?<Constant {0}>
       4  ??DataTable22
       4  ??DataTable22_1
       4  ??DataTable22_2
       4  ??DataTable22_3
       8  ?Subroutine0
      14  ?Subroutine1
       4  emAfFormNetwork
     130  emAfIncomingMessageHandler
      28  emAfInitializeMessageSentCallbackArray
     152  emAfMessageSentHandler
      72  emAfNetworkInit
      24  emAfParseAndPrintVersion
      46  emAfPermitJoin
      42  emAfPrintStatus
      62  emAfProcessZdo
     156  emAfStackStatusHandler
       4  emberAfFormNetwork
      32  emberAfFormatMfgString
      16  emberAfInvalidImageId
       4  emberAfIsFullSmartEnergySecurityPresent
      38  emberAfJoinNetwork
       8  emberAfNullEui64
       6  emberAfPermitJoin
       2  emberAfPrintMessageData
       1  emberAfPrintReceivedMessages
      14  emberAfSendBroadcast
      22  emberAfSendBroadcastWithCallback
     112  emberAfSendInterPan
      14  emberAfSendMulticast
      26  emberAfSendMulticastWithCallback
      16  emberAfSendUnicast
       4  emberAfSendUnicastToBindings
      96  emberAfSendUnicastToBindingsWithCallback
      66  emberAfSendUnicastWithCallback
      22  emberScanErrorHandler
       2  halButtonIsr
      24  messageSentCallbacks
      72  releaseTypes
     386  send

 
    24 bytes in section .bss
     1 byte  in section .data
    92 bytes in section .rodata
 1 736 bytes in section .text
 
 1 736 bytes of CODE  memory
    92 bytes of CONST memory
    25 bytes of DATA  memory

Errors: none
Warnings: none
