###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        31/Aug/2015  14:04:34
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\Zigbee\EmberZNet5.6.0-GA\app\framework\plugin\ota-client\ota-client-cli.c
#    Command line =  
#        E:\Zigbee\EmberZNet5.6.0-GA\app\framework\plugin\ota-client\ota-client-cli.c
#        -D NULL_BTL -D CORTEXM3 -D CORTEXM3_EMBER_MICRO -D CORTEXM3_EM357 -D
#        PHY_EM3XX -D
#        "APPLICATION_TOKEN_HEADER=\"app/framework/util/tokens.h\"" -D
#        "ATTRIBUTE_STORAGE_CONFIGURATION=\"app/builder/ZigbeeRoute/ZigbeeRoute_endpoint_config.h\""
#        -D "BOARD_HEADER=\"app\builder\ZigbeeRoute\ZigbeeRoute_board.h\"" -D
#        "CONFIGURATION_HEADER=\"app/framework/util/config.h\"" -D
#        "GENERATED_TOKEN_HEADER=\"app/builder/ZigbeeRoute/ZigbeeRoute_tokens.h\""
#        -D "PLATFORM_HEADER=\"hal/micro/cortexm3/compiler/iar.h\"" -D
#        "ZA_GENERATED_HEADER=\"app/builder/ZigbeeRoute/ZigbeeRoute.h\"" -D
#        "__SOURCEFILE__=\"ota-client-cli.c\"" -lC
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\build\lst\
#        --diag_suppress Pa050 -o
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\build\obj\ --debug
#        --endian=little --cpu=Cortex-M3 --no_path_in_file_macros
#        --separate_cluster_for_initialized_variables -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\framework\plugin\ota-client\ -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\ -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\ -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\app\framework\include\
#        -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\app\util\
#        -I E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\stack\
#        -I E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\hal\
#        -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\hal\..\
#        -Ohz --use_c++_inline
#    List file    =  
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\build\lst\ota-client-cli.lst
#    Object file  =  
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\build\obj\ota-client-cli.o
#
###############################################################################

E:\Zigbee\EmberZNet5.6.0-GA\app\framework\plugin\ota-client\ota-client-cli.c
      1          // *******************************************************************
      2          // * ota-client-cli.c
      3          // *
      4          // * Zigbee Over-the-air bootload cluster for upgrading firmware and 
      5          // * downloading specific file. 
      6          // * 
      7          // * Copyright 2009 by Ember Corporation. All rights reserved.              *80*
      8          // *******************************************************************
      9          
     10          #include "app/framework/include/af.h"
     11          #include "app/util/serial/command-interpreter2.h"
     12          
     13          #include "app/framework/plugin/ota-common/ota.h"
     14          #include "app/framework/plugin/ota-common/ota-cli.h"
     15          #include "app/framework/plugin/ota-client/ota-client.h"
     16          #include "app/framework/plugin/ota-storage-common/ota-storage.h"
     17          
     18          #include "app/framework/plugin/ota-client/ota-client-signature-verify.h"
     19          #include "app/framework/plugin/ota-client-policy/ota-client-policy.h"
     20          
     21          /**
     22           * @addtogroup cli
     23           * @{
     24           */
     25          /**
     26           * @brief OTA Client CLI commands. Used to drive the OTA client.
     27           *        <b>plugin ota-client bootload &lt;index&gt;</b>
     28           *        - <i> bootloads the image at the specified index by calling the OTA
     29           *              bootload callback.
     30           *           - index - int8u. The index at which to bootload the image.</i>
     31           *
     32           *        <b>plugin ota-client verify &lt;index&gt;</b>
     33           *        - <i> Performs signature verification on the image at the specified
     34           *              index.
     35           *           - index - int8u. The index of the image to be verified.</i>
     36           *
     37           *        <b>plugin ota-client info</b>
     38           *        - <i>Prints the manufacturer ID, Image Type ID, and Version information
     39           *             that are used when a query next image is sent to the server by the
     40           *             client.</i>
     41           *
     42           *        <b>plugin ota-client start</b>
     43           *        - <i>Starts the ota client state machine. The state machine discovers
     44           *             the OTA server, queries for new images, downloads the images
     45           *             and waits for the server command to upgrade.</i>
     46           *
     47           *        <b>plugin ota-client stop</b>
     48           *        - <i>Stops the OTA state machine.</i>
     49           *
     50           *        <b>plugin ota-client status</b>
     51           *        - <i>Prints information on the current state of the OTA client
     52           *             download.</i>
     53           *
     54           *        <b>plugin ota-client block-test</b>
     55           *        - <i></i>
     56           *
     57           *        <b>plugin ota-client page-request</b>
     58           *        - <i></i>
     59           *
     60           */
     61          #define EMBER_AF_DOXYGEN_CLI__OTA_CLIENT_COMMANDS
     62          /** @} END addtogroup */
     63          
     64          #ifdef EMBER_AF_PLUGIN_OTA_CLIENT
     65          
     66          //------------------------------------------------------------------------------
     67          // Forward Declarations
     68          
     69          void otaCliBootload(void);
     70          void otaPrintClientInfo(void);
     71          void otaCliVerify(void);
     72          void otaStartClientCommand(void);
     73          void otaStopClientCommand(void);
     74          void setPageRequest(void);
     75          
     76          // TODO: need to gate this when we're better equipped to do so
     77          // with the generated CLI
     78          //#if defined(EMBER_TEST)
     79          void setPausePercentage(void);
     80          //#endif
     81          
     82          #if defined(EMBER_TEST)
     83          #define PAUSE_AT_COMMAND emberCommandEntryAction("pause-at",     setPausePercentage, "u" ,""), 
     84          #else
     85          #define PAUSE_AT_COMMAND
     86          #endif
     87          
     88          #ifndef EMBER_AF_GENERATE_CLI
     89          #define OTA_CLIENT_COMMANDS  \
     90            emberCommandEntryAction("bootload",     otaCliBootload, "u", ""), \
     91            emberCommandEntryAction("verify",       otaCliVerify,   "u", ""), \
     92            emberCommandEntryAction("info",         otaPrintClientInfo,    "", ""), \
     93            emberCommandEntryAction("start",        otaStartClientCommand, "", ""), \
     94            emberCommandEntryAction("stop",         otaStopClientCommand,  "", ""), \
     95            emberCommandEntryAction("status",       emAfOtaClientPrintState, "", ""), \
     96            emberCommandEntryAction("block-test",   emAfSendImageBlockRequestTest, "", ""), \
     97            emberCommandEntryAction("page-request", setPageRequest, "u", ""), \
     98            PAUSE_AT_COMMAND \
     99            emberCommandEntryTerminator(), 
    100          #endif // EMBER_AF_GENERATE_CLI
    101          
    102          //------------------------------------------------------------------------------
    103          // Globals

   \                                 In section .rodata, align 4, keep-with-next
    104          EmberCommandEntry emberAfPluginOtaClientCommands[] = {
   \                     emberAfPluginOtaClientCommands:
   \   00000000   0x00000000         DC32 0H, 0H, 0H, 0H, 0H
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
    105            
    106          #ifndef EMBER_AF_GENERATE_CLI
    107            OTA_CLIENT_COMMANDS
    108          #endif // EMBER_AF_GENERATE_CLI
    109          
    110            emberCommandEntryTerminator(),
    111          };
    112          
    113          //------------------------------------------------------------------------------
    114          // Functions
    115          

   \                                 In section .text, align 2, keep-with-next
    116          void otaStartStopClientCommand(boolean starting)
    117          {
   \                     otaStartStopClientCommand: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    118            emberAfCorePrintln("%p" "ing OTA client state machine",
    119                               starting ? "start" : "stopp");
   \   00000004   0xBF14             ITE      NE 
   \   00000006   0x.... 0x....      ADRNE.W  R2,`?<Constant "start">`
   \   0000000A   0x.... 0x....      ADREQ.W  R2,`?<Constant "stopp">`
   \   0000000E   0x.... 0x....      ADR.W    R1,`?<Constant "%ping OTA client stat...">`
   \   00000012   0x2001             MOVS     R0,#+1
   \   00000014   0x.... 0x....      BL       emberAfPrintln
    120            if (starting) {
   \   00000018   0x2C00             CMP      R4,#+0
   \   0000001A   0xBF1C             ITT      NE 
    121              emberAfOtaClientStartCallback(); 
   \   0000001C   0xE8BD 0x4010      POPNE    {R4,LR}
   \   00000020   0x.... 0x....      BNE.W    emberAfOtaClientStartCallback
    122            } else {
    123              emAfOtaClientStop();
   \   00000024   0xE8BD 0x4010      POP      {R4,LR}
   \   00000028   0x.... 0x....      B.W      emAfOtaClientStop
    124            }
    125          }
    126          

   \                                 In section .text, align 2, keep-with-next
    127          void otaStartClientCommand(void)
    128          {
    129            otaStartStopClientCommand(TRUE);
   \                     otaStartClientCommand: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x....             B.N      otaStartStopClientCommand
    130          }
    131          

   \                                 In section .text, align 2, keep-with-next
    132          void otaStopClientCommand(void)
    133          {
    134            otaStartStopClientCommand(FALSE);
   \                     otaStopClientCommand: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x....             B.N      otaStartStopClientCommand
    135          }
    136          

   \                                 In section .text, align 2, keep-with-next
    137          void otaCliBootload(void)
    138          {
   \                     otaCliBootload: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB089             SUB      SP,SP,#+36
    139            int8u index = (int8u)emberUnsignedCommandArgument(0);
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x.... 0x....      BL       emberUnsignedCommandArgument
   \   0000000A   0xB2C1             UXTB     R1,R0
   \   0000000C   0xA804             ADD      R0,SP,#+16
   \   0000000E   0x.... 0x....      BL       emAfOtaFindImageIdByIndex
    140            EmberAfOtaImageId id = emAfOtaFindImageIdByIndex(index);
   \   00000012   0xA800             ADD      R0,SP,#+0
   \   00000014   0xA904             ADD      R1,SP,#+16
   \   00000016   0x2210             MOVS     R2,#+16
   \   00000018   0x.... 0x....      BL       __aeabi_memcpy4
    141            if (!emberAfIsOtaImageIdValid(&id)) {
   \   0000001C   0xA800             ADD      R0,SP,#+0
   \   0000001E   0x.... 0x....      BL       emberAfIsOtaImageIdValid
   \   00000022   0xB110             CBZ.N    R0,??otaCliBootload_0
    142              otaPrintln("Error: No image at index %d", index);
    143              return;
    144            }
    145            emberAfOtaClientBootloadCallback(&id);
   \   00000024   0xA800             ADD      R0,SP,#+0
   \   00000026   0x.... 0x....      BL       emberAfOtaClientBootloadCallback
    146          }
   \                     ??otaCliBootload_0: (+1)
   \   0000002A   0xB009             ADD      SP,SP,#+36
   \   0000002C   0xBD00             POP      {PC}             ;; return
    147          

   \                                 In section .text, align 2, keep-with-next
    148          void otaCliVerify(void)
    149          {
    150          #if defined(EMBER_AF_PLUGIN_OTA_CLIENT_SIGNATURE_VERIFICATION_SUPPORT)
    151            int8u index = (int8u)emberUnsignedCommandArgument(0);
    152            EmberAfOtaImageId id = emAfOtaFindImageIdByIndex(index);
    153            if (!emberAfIsOtaImageIdValid(&id)) {
    154              otaPrintln("Error: No image at index %d", index);
    155              return;
    156            }
    157            emAfOtaImageSignatureVerify(0,       // max number of hash calculations 
    158                                        &id,     //   (0 = keep going until hashing is done)
    159                                        TRUE);   // new verification?
    160          #else
    161            otaPrintln("Not supported.");
    162          #endif
    163          }
   \                     otaCliVerify: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    164          
    165          

   \                                 In section .text, align 2, keep-with-next
    166          void otaPrintClientInfo(void)
    167          {
   \                     otaPrintClientInfo: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
    168            EmberAfOtaImageId myId;
    169            int16u hardwareVersion;
    170            emberAfOtaClientVersionInfoCallback(&myId, &hardwareVersion);
   \   00000004   0xA900             ADD      R1,SP,#+0
   \   00000006   0xA801             ADD      R0,SP,#+4
   \   00000008   0x.... 0x....      BL       emberAfOtaClientVersionInfoCallback
    171            otaPrintln("Client image query info");
    172            otaPrintln("Manuf ID:         0x%2X", myId.manufacturerId);
    173            otaPrintln("Image Type ID:    0x%2X", myId.imageTypeId);
    174            otaPrintln("Current Version:  0x%4X", myId.firmwareVersion);
    175            emberAfOtaBootloadClusterPrint(  "Hardware Version: ");
    176            if (hardwareVersion != EMBER_AF_INVALID_HARDWARE_VERSION) {
    177              otaPrintln("0x%2X", hardwareVersion);
    178            } else {
    179              otaPrintln("NA");
    180            }
    181            emberAfCoreFlush();
    182          
    183            otaPrintln("Query Delay ms:            %l", (int32u)EMBER_AF_OTA_QUERY_DELAY_MS);
    184            emberAfCoreFlush();
    185            otaPrintln("Server Discovery Delay ms: %l", (int32u)EMBER_AF_OTA_SERVER_DISCOVERY_DELAY_MS);
    186            otaPrintln("Download Delay ms:         %l", (int32u)EMBER_AF_PLUGIN_OTA_CLIENT_DOWNLOAD_DELAY_MS);
    187            otaPrintln("Run Upgrade Delay ms:      %l", (int32u)EMBER_AF_RUN_UPGRADE_REQUEST_DELAY_MS);
    188            emberAfCoreFlush();
    189            otaPrintln("Verify Delay ms:           %l", (int32u)EMBER_AF_PLUGIN_OTA_CLIENT_VERIFY_DELAY_MS);
    190            otaPrintln("Download Error Threshold:  %d",    EMBER_AF_PLUGIN_OTA_CLIENT_DOWNLOAD_ERROR_THRESHOLD);
    191            otaPrintln("Upgrade Wait Threshold:    %d",    EMBER_AF_PLUGIN_OTA_CLIENT_UPGRADE_WAIT_THRESHOLD);
    192            emberAfCoreFlush();
    193          
    194          #if defined(EMBER_AF_PLUGIN_OTA_CLIENT_USE_PAGE_REQUEST)
    195            otaPrintln("Use Page Request: %s", emAfUsingPageRequest() ? "yes": "no");
    196            otaPrintln("Page Request Size: %d bytes", 
    197                       EMBER_AF_PLUGIN_OTA_CLIENT_PAGE_REQUEST_SIZE);
    198            otaPrintln("Page Request Timeout: %d sec.", 
    199                       EMBER_AF_PLUGIN_OTA_CLIENT_PAGE_REQUEST_TIMEOUT_SECONDS);
    200          #endif
    201          
    202          #if defined(EMBER_AF_PLUGIN_OTA_CLIENT_SIGNATURE_VERIFICATION_SUPPORT)
    203            otaPrintln("");
    204            emAfOtaClientSignatureVerifyPrintSigners();
    205          #endif
    206          }
   \   0000000C   0xB005             ADD      SP,SP,#+20
   \   0000000E   0xBD00             POP      {PC}             ;; return
    207          

   \                                 In section .text, align 2, keep-with-next
    208          void setPageRequest(void)
    209          {
   \                     setPageRequest: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    210            boolean pageRequest = (boolean)emberUnsignedCommandArgument(0);
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x.... 0x....      BL       emberUnsignedCommandArgument
    211            emAfSetPageRequest(pageRequest);
   \   00000008   0xE8BD 0x4002      POP      {R1,LR}
   \   0000000C   0xB2C0             UXTB     R0,R0
   \   0000000E   0x.... 0x....      B.W      emAfSetPageRequest
    212          }
    213          
    214          // TODO: need to gate this when we're better equipped to do so
    215          // with the generated CLI
    216          //#if defined(EMBER_TEST)

   \                                 In section .text, align 2, keep-with-next
    217          void setPausePercentage(void)
    218          {
   \                     setPausePercentage: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    219            emAfOtaClientStopDownloadPercentage = (int8u)emberUnsignedCommandArgument(0);
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x.... 0x....      BL       emberUnsignedCommandArgument
   \   00000008   0x....             LDR.N    R1,??DataTable4
   \   0000000A   0x7008             STRB     R0,[R1, #+0]
    220          }
   \   0000000C   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x........         DC32     emAfOtaClientStopDownloadPercentage

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%ping OTA client stat...">`:
   \   00000000   0x25 0x70          DC8 "%ping OTA client state machine"
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x4F 0x54    
   \              0x41 0x20    
   \              0x63 0x6C    
   \              0x69 0x65    
   \              0x6E 0x74    
   \              0x20 0x73    
   \              0x74 0x61    
   \              0x74 0x65    
   \              0x20 0x6D    
   \              0x61 0x63    
   \              0x68 0x69    
   \              0x6E 0x65    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "start">`:
   \   00000000   0x73 0x74          DC8 "start"
   \              0x61 0x72    
   \              0x74 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "stopp">`:
   \   00000000   0x73 0x74          DC8 "stopp"
   \              0x6F 0x70    
   \              0x70 0x00    
   \   00000006   0x00 0x00          DC8 0, 0
    221          //#endif
    222          
    223          #endif //EMBER_AF_PLUGIN_OTA_CLIENT

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      40   otaCliBootload
        40   -> __aeabi_memcpy4
        40   -> emAfOtaFindImageIdByIndex
        40   -> emberAfIsOtaImageIdValid
        40   -> emberAfOtaClientBootloadCallback
        40   -> emberUnsignedCommandArgument
       0   otaCliVerify
      24   otaPrintClientInfo
        24   -> emberAfOtaClientVersionInfoCallback
       0   otaStartClientCommand
         0   -> otaStartStopClientCommand
       8   otaStartStopClientCommand
         0   -> emAfOtaClientStop
         8   -> emberAfOtaClientStartCallback
         8   -> emberAfPrintln
       0   otaStopClientCommand
         0   -> otaStartStopClientCommand
       8   setPageRequest
         0   -> emAfSetPageRequest
         8   -> emberUnsignedCommandArgument
       8   setPausePercentage
         8   -> emberUnsignedCommandArgument


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      32  ?<Constant "%ping OTA client stat...">
       8  ?<Constant "start">
       8  ?<Constant "stopp">
       4  ??DataTable4
      20  emberAfPluginOtaClientCommands
      46  otaCliBootload
       2  otaCliVerify
      16  otaPrintClientInfo
       4  otaStartClientCommand
      44  otaStartStopClientCommand
       4  otaStopClientCommand
      18  setPageRequest
      14  setPausePercentage

 
  20 bytes in section .rodata
 200 bytes in section .text
 
 200 bytes of CODE  memory
  20 bytes of CONST memory

Errors: none
Warnings: none
