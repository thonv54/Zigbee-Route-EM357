###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        09/Sep/2015  17:12:00
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\callback-stub.c
#    Command line =  
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\callback-stub.c -D
#        NULL_BTL -D CORTEXM3 -D CORTEXM3_EMBER_MICRO -D CORTEXM3_EM357 -D
#        PHY_EM3XX -D
#        "APPLICATION_TOKEN_HEADER=\"app/framework/util/tokens.h\"" -D
#        "ATTRIBUTE_STORAGE_CONFIGURATION=\"app/builder/ZigbeeRoute/ZigbeeRoute_endpoint_config.h\""
#        -D "BOARD_HEADER=\"app\builder\ZigbeeRoute\ZigbeeRoute_board.h\"" -D
#        "CONFIGURATION_HEADER=\"app/framework/util/config.h\"" -D
#        "GENERATED_TOKEN_HEADER=\"app/builder/ZigbeeRoute/ZigbeeRoute_tokens.h\""
#        -D "PLATFORM_HEADER=\"hal/micro/cortexm3/compiler/iar.h\"" -D
#        "ZA_GENERATED_HEADER=\"app/builder/ZigbeeRoute/ZigbeeRoute.h\"" -D
#        "__SOURCEFILE__=\"callback-stub.c\"" -lC
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\build\lst\
#        --diag_suppress Pa050 -o
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\build\obj\ --debug
#        --endian=little --cpu=Cortex-M3 --no_path_in_file_macros
#        --separate_cluster_for_initialized_variables -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\ -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\ -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\ -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\app\framework\include\
#        -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\app\util\
#        -I E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\stack\
#        -I E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\hal\
#        -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\hal\..\
#        -Ohz --use_c++_inline
#    List file    =  
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\build\lst\callback-stub.lst
#    Object file  =  
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\build\obj\callback-stub.o
#
###############################################################################

E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\callback-stub.c
      1          // This file is generated by Ember Desktop.  Please do not edit manually.
      2          //
      3          //
      4          
      5          // This c file provides stubs for all callbacks. These stubs
      6          // will be used in the case where user defined implementations
      7          // of the callbacks have not been provided.
      8          #include "app/framework/include/af.h"
      9          
     10          /** @brief Add To Current App Tasks
     11           *
     12           * This function is only useful to sleepy end devices.  This function will note
     13           * the passed item as part of a set of tasks the application has outstanding
     14           * (e.g. message sent requiring APS acknwoledgement).  This will affect how the
     15           * application behaves with regard to sleeping and polling.  Until the
     16           * outstanding task is completed, the device may poll more frequently and sleep
     17           * less often.
     18           *
     19           * @param tasks   Ver.: always
     20           */

   \                                 In section .text, align 2, keep-with-next
     21          void emberAfAddToCurrentAppTasksCallback(EmberAfApplicationTask tasks)
     22          {
     23          }
   \                     emberAfAddToCurrentAppTasksCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
     24          
     25          /** @brief Allow Network Write Attribute
     26           *
     27           * This function is called by the application framework before it writes an
     28           * attribute in response to a write attribute request from an external device.
     29           * The value passed into this callback is the value to which the attribute is to
     30           * be set by the framework.
     31                  Example:	In mirroring simple metering data
     32           * on an Energy Services Interface (ESI) (formerly called Energy Service Portal
     33           * (ESP) in SE 1.0).), a mirrored simple meter needs to write read-only
     34           * attributes on its mirror. The-meter-mirror sample application, located in
     35           * app/framework/sample-apps, uses this callback to allow the mirrored device to
     36           * write simple metering attributes on the mirror regardless of the fact that
     37           * most simple metering attributes are defined as read-only by the ZigBee
     38           * specification.
     39                  Note:	The ZCL specification does not (as of this
     40           * writing) specify any permission-level security for writing writeable
     41           * attributes. As far as the ZCL specification is concerned, if an attribute is
     42           * writeable, any device that has a link key for the device should be able to
     43           * write that attribute. Furthermore if an attribute is read only, it should not
     44           * be written over the air. Thus, if you implement permissions for writing
     45           * attributes as a feature, you MAY be operating outside the specification. This
     46           * is unlikely to be a problem for writing read-only attributes, but it may be a
     47           * problem for attributes that are writeable according to the specification but
     48           * restricted by the application implementing this callback.
     49           *
     50           * @param endpoint   Ver.: always
     51           * @param clusterId   Ver.: always
     52           * @param attributeId   Ver.: always
     53           * @param mask   Ver.: always
     54           * @param manufacturerCode   Ver.: always
     55           * @param value   Ver.: always
     56           * @param type   Ver.: always
     57           */

   \                                 In section .text, align 2, keep-with-next
     58          EmberAfAttributeWritePermission emberAfAllowNetworkWriteAttributeCallback(int8u endpoint,
     59                                                                                    EmberAfClusterId clusterId,
     60                                                                                    EmberAfAttributeId attributeId,
     61                                                                                    int8u mask,
     62                                                                                    int16u manufacturerCode,
     63                                                                                    int8u* value,
     64                                                                                    int8u type)
     65          {
     66            return EMBER_ZCL_ATTRIBUTE_WRITE_PERMISSION_ALLOW_WRITE_NORMAL; // Default
   \                     emberAfAllowNetworkWriteAttributeCallback: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x4770             BX       LR               ;; return
     67          }
     68          
     69          /** @brief Check For Sleep
     70           *
     71           * @deprecated This callback has been deprecated and will be removed in a future
     72           * release.  Customers should use ::emberAfMainTickCallback instead.
     73           *
     74           */

   \                                 In section .text, align 2, keep-with-next
     75          int32u emberAfCheckForSleepCallback(void)
     76          {
     77            return 0;
   \                     emberAfCheckForSleepCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
     78          }
     79          
     80          /** @brief Clear Report Table
     81           *
     82           * This function is called by the framework when the application should clear
     83           * the report table.
     84           *
     85           */

   \                                 In section .text, align 2, keep-with-next
     86          EmberStatus emberAfClearReportTableCallback(void)
     87          {
     88            return EMBER_LIBRARY_NOT_PRESENT;
   \                     emberAfClearReportTableCallback: (+1)
   \   00000000   0x20B5             MOVS     R0,#+181
   \   00000002   0x4770             BX       LR               ;; return
     89          }
     90          
     91          /** @brief Key Establishment Cluster Client Command Received
     92           *
     93           * This function is called by the application framework when a server-to-client
     94           * key establishment command is received but has yet to be handled by the
     95           * framework code.  This function should return a boolean value indicating
     96           * whether the command has been handled by the application code and should not
     97           * be further processed by the framework.
     98           *
     99           * @param cmd   Ver.: always
    100           */

   \                                 In section .text, align 2, keep-with-next
    101          boolean emberAfKeyEstablishmentClusterClientCommandReceivedCallback(EmberAfClusterCommand *cmd)
    102          {
    103            return FALSE;
   \                     emberAfKeyEstablishmentClusterClientCommandReceivedCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    104          }
    105          
    106          /** @brief Cluster Init
    107           *
    108           * This function is called when a specific cluster is initialized. It gives the
    109           * application an opportunity to take care of cluster initialization procedures.
    110           * It is called exactly once for each endpoint where cluster is present.
    111           *
    112           * @param endpoint   Ver.: always
    113           * @param clusterId   Ver.: always
    114           */

   \                                 In section .text, align 2, keep-with-next
    115          void emberAfClusterInitCallback(int8u endpoint,
    116                                          EmberAfClusterId clusterId)
    117          {
    118          }
   \                     emberAfClusterInitCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    119          
    120          /** @brief Cluster Security Custom
    121           *
    122           * This callback is fired when determining if APS encryption is required for a
    123           * cluster outside of the specification's required clusters.  In other words,
    124           * for the Smart Energy profile this would be a cluster beyond the list that
    125           * normally requires APS encryption.
    126           *
    127           * @param profileId The profile ID  Ver.: always
    128           * @param clusterId The cluster ID  Ver.: always
    129           * @param incoming Whether this is an incoming or outgoing message.  Ver.:
    130           * always
    131           * @param commandId The ZCL command ID being sent/received.  Ver.: always
    132           */

   \                                 In section .text, align 2, keep-with-next
    133          boolean emberAfClusterSecurityCustomCallback(EmberAfProfileId profileId,
    134                                                       EmberAfClusterId clusterId,
    135                                                       boolean incoming,
    136                                                       int8u commandId)
    137          {
    138            // By default, assume APS encryption is not required.
    139            return FALSE;
   \                     emberAfClusterSecurityCustomCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    140          }
    141          
    142          /** @brief Configure Reporting Command
    143           *
    144           * This function is called by the application framework when a Configure
    145           * Reporting command is received from an external device.  The Configure
    146           * Reporting command contains a series of attribute reporting configuration
    147           * records.  The application should return TRUE if the message was processed or
    148           * FALSE if it was not.
    149           *
    150           * @param cmd   Ver.: always
    151           */

   \                                 In section .text, align 2, keep-with-next
    152          boolean emberAfConfigureReportingCommandCallback(const EmberAfClusterCommand *cmd)
    153          {
    154            return FALSE;
   \                     emberAfConfigureReportingCommandCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    155          }
    156          
    157          /** @brief Configure Reporting Response
    158           *
    159           * This function is called by the application framework when a Configure
    160           * Reporting Response command is received from an external device.  The
    161           * application should return TRUE if the message was processed or FALSE if it
    162           * was not.
    163           *
    164           * @param clusterId The cluster identifier of this response.  Ver.: always
    165           * @param buffer Buffer containing the list of attribute status records.  Ver.:
    166           * always
    167           * @param bufLen The length in bytes of the list.  Ver.: always
    168           */

   \                                 In section .text, align 2, keep-with-next
    169          boolean emberAfConfigureReportingResponseCallback(EmberAfClusterId clusterId,
    170                                                            int8u *buffer,
    171                                                            int16u bufLen)
    172          {
    173            return FALSE;
   \                     emberAfConfigureReportingResponseCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    174          }
    175          
    176          /** @brief Default Response
    177           *
    178           * This function is called by the application framework when a Default Response
    179           * command is received from an external device.  The application should return
    180           * TRUE if the message was processed or FALSE if it was not.
    181           *
    182           * @param clusterId The cluster identifier of this response.  Ver.: always
    183           * @param commandId The command identifier to which this is a response.  Ver.:
    184           * always
    185           * @param status Specifies either SUCCESS or the nature of the error that was
    186           * detected in the received command.  Ver.: always
    187           */

   \                                 In section .text, align 2, keep-with-next
    188          boolean emberAfDefaultResponseCallback(EmberAfClusterId clusterId,
    189                                                 int8u commandId,
    190                                                 EmberAfStatus status)
    191          {
    192            return FALSE;
   \                     emberAfDefaultResponseCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    193          }
    194          
    195          /** @brief Discover Attributes Response
    196           *
    197           * This function is called by the application framework when a Discover
    198           * Attributes Response or Discover Attributes Extended Response command is
    199           * received from an external device.  The Discover Attributes Response command
    200           * contains a boolean indicating if discovery is complete and a list of zero or
    201           * more attribute identifier/type records. The final argument indicates whether
    202           * the response is in the extended format or not.  The application should return
    203           * TRUE if the message was processed or FALSE if it was not.
    204           *
    205           * @param clusterId The cluster identifier of this response.  Ver.: always
    206           * @param discoveryComplete Indicates whether there are more attributes to be
    207           * discovered.  TRUE if there are no more attributes to be discovered.  Ver.:
    208           * always
    209           * @param buffer Buffer containing the list of attribute identifier/type
    210           * records.  Ver.: always
    211           * @param bufLen The length in bytes of the list.  Ver.: always
    212           * @param extended Indicates whether the response is in the extended format or
    213           * not.  Ver.: always
    214           */

   \                                 In section .text, align 2, keep-with-next
    215          boolean emberAfDiscoverAttributesResponseCallback(EmberAfClusterId clusterId,
    216                                                            boolean discoveryComplete,
    217                                                            int8u *buffer,
    218                                                            int16u bufLen,
    219                                                            boolean extended)
    220          {
    221            return FALSE;
   \                     emberAfDiscoverAttributesResponseCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    222          }
    223          
    224          /** @brief Discover Commands Generated Response
    225           *
    226           * This function is called by the framework when Discover Commands Generated
    227           * Response is received.
    228           *
    229           * @param clusterId The cluster identifier of this response.  Ver.: always
    230           * @param manufacturerCode Manufacturer code  Ver.: always
    231           * @param discoveryComplete Indicates whether there are more commands to be
    232           * discovered.  Ver.: always
    233           * @param commandIds Buffer containing the list of command identifiers.  Ver.:
    234           * always
    235           * @param commandIdCount The length of bytes of the list, whish is the same as
    236           * the number of identifiers.  Ver.: always
    237           */

   \                                 In section .text, align 2, keep-with-next
    238          boolean emberAfDiscoverCommandsGeneratedResponseCallback(EmberAfClusterId clusterId,
    239                                                                   int16u manufacturerCode,
    240                                                                   boolean discoveryComplete,
    241                                                                   int8u *commandIds,
    242                                                                   int16u commandIdCount)
    243          {
    244            return FALSE;
   \                     emberAfDiscoverCommandsGeneratedResponseCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    245          }
    246          
    247          /** @brief Discover Commands Received Response
    248           *
    249           * This function is called by the framework when Discover Commands Received
    250           * Response is received.
    251           *
    252           * @param clusterId The cluster identifier of this response.  Ver.: always
    253           * @param manufacturerCode Manufacturer code  Ver.: always
    254           * @param discoveryComplete Indicates whether there are more commands to be
    255           * discovered.  Ver.: always
    256           * @param commandIds Buffer containing the list of command identifiers.  Ver.:
    257           * always
    258           * @param commandIdCount The length of bytes of the list, whish is the same as
    259           * the number of identifiers.  Ver.: always
    260           */

   \                                 In section .text, align 2, keep-with-next
    261          boolean emberAfDiscoverCommandsReceivedResponseCallback(EmberAfClusterId clusterId,
    262                                                                  int16u manufacturerCode,
    263                                                                  boolean discoveryComplete,
    264                                                                  int8u *commandIds,
    265                                                                  int16u commandIdCount)
    266          {
    267            return FALSE;
   \                     emberAfDiscoverCommandsReceivedResponseCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    268          }
    269          
    270          /** @brief Eeprom Init
    271           *
    272           * Tells the system to initialize the EEPROM if it is not already initialized.
    273           *
    274           */

   \                                 In section .text, align 2, keep-with-next
    275          void emberAfEepromInitCallback(void)
    276          {
    277          }
   \                     emberAfEepromInitCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    278          
    279          /** @brief Eeprom Note Initialized State
    280           *
    281           * Records the state of the EEPROM so that an intelligent driver (like the
    282           * EEPROM plugin) can re-initialize the driver prior to any calls to it.
    283           *
    284           * @param state The state of the EEPROM, false=re-initalization needed,
    285           * true=no-re-init needed  Ver.: always
    286           */

   \                                 In section .text, align 2, keep-with-next
    287          void emberAfEepromNoteInitializedStateCallback(boolean state)
    288          {
    289          }
   \                     emberAfEepromNoteInitializedStateCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    290          
    291          /** @brief Eeprom Shutdown
    292           *
    293           * Tells the system to shutdown the EEPROM if it is not already shutdown.
    294           *
    295           */

   \                                 In section .text, align 2, keep-with-next
    296          void emberAfEepromShutdownCallback(void)
    297          {
    298          }
   \                     emberAfEepromShutdownCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    299          
    300          /** @brief External Attribute Read
    301           *
    302           * Like emberAfExternalAttributeWriteCallback above, this function is called
    303           * when the framework needs to read an attribute that is not stored within the
    304           * Application Framework's data structures.
    305                  All of the important
    306           * information about the attribute itself is passed as a pointer to an
    307           * EmberAfAttributeMetadata struct, which is stored within the application and
    308           * used to manage the attribute. A complete description of the
    309           * EmberAfAttributeMetadata struct is provided in
    310           * app/framework/include/af-types.h
    311                  This function assumes that the
    312           * application is able to read the attribute, write it into the passed buffer,
    313           * and return immediately. Any attributes that require a state machine for
    314           * reading and writing are not really candidates for externalization at the
    315           * present time. The Application Framework does not currently include a state
    316           * machine for reading or writing attributes that must take place across a
    317           * series of application ticks. Attributes that cannot be read in a timely
    318           * manner should be stored within the Application Framework and updated
    319           * occasionally by the application code from within the
    320           * emberAfMainTickCallback.
    321                  If the application was successfully able to
    322           * read the attribute and write it into the passed buffer, it should return a
    323           * value of EMBER_ZCL_STATUS_SUCCESS. Any other return value indicates the
    324           * application was not able to read the attribute.
    325           *
    326           * @param endpoint   Ver.: always
    327           * @param clusterId   Ver.: always
    328           * @param attributeMetadata   Ver.: always
    329           * @param manufacturerCode   Ver.: always
    330           * @param buffer   Ver.: always
    331           */

   \                                 In section .text, align 2, keep-with-next
    332          EmberAfStatus emberAfExternalAttributeReadCallback(int8u endpoint,
    333                                                             EmberAfClusterId clusterId,
    334                                                             EmberAfAttributeMetadata *attributeMetadata,
    335                                                             int16u manufacturerCode,
    336                                                             int8u *buffer)
    337          {
    338            return EMBER_ZCL_STATUS_FAILURE;
   \                     emberAfExternalAttributeReadCallback: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x4770             BX       LR               ;; return
    339          }
    340          
    341          /** @brief External Attribute Write
    342           *
    343           * This function is called whenever the Application Framework needs to write an
    344           * attribute which is not stored within the data structures of the Application
    345           * Framework itself. One of the new features in Version 2 is the ability to
    346           * store attributes outside the Framework. This is particularly useful for
    347           * attributes that do not need to be stored because they can be read off the
    348           * hardware when they are needed, or are stored in some central location used by
    349           * many modules within the system. In this case, you can indicate that the
    350           * attribute is stored externally. When the framework needs to write an external
    351           * attribute, it makes a call to this callback.
    352                  This callback is very
    353           * useful for host micros which need to store attributes in persistent memory.
    354           * Because each host micro (used with an Ember NCP) has its own type of
    355           * persistent memory storage, the Application Framework does not include the
    356           * ability to mark attributes as stored in flash the way that it does for Ember
    357           * SoCs like the EM35x. On a host micro, any attributes that need to be stored
    358           * in persistent memory should be marked as external and accessed through the
    359           * external read and write callbacks. Any host code associated with the
    360           * persistent storage should be implemented within this callback.
    361                  All of
    362           * the important information about the attribute itself is passed as a pointer
    363           * to an EmberAfAttributeMetadata struct, which is stored within the application
    364           * and used to manage the attribute. A complete description of the
    365           * EmberAfAttributeMetadata struct is provided in
    366           * app/framework/include/af-types.h.
    367                  This function assumes that the
    368           * application is able to write the attribute and return immediately. Any
    369           * attributes that require a state machine for reading and writing are not
    370           * candidates for externalization at the present time. The Application Framework
    371           * does not currently include a state machine for reading or writing attributes
    372           * that must take place across a series of application ticks. Attributes that
    373           * cannot be written immediately should be stored within the Application
    374           * Framework and updated occasionally by the application code from within the
    375           * emberAfMainTickCallback.
    376                  If the application was successfully able to
    377           * write the attribute, it returns a value of EMBER_ZCL_STATUS_SUCCESS. Any
    378           * other return value indicates the application was not able to write the
    379           * attribute.
    380           *
    381           * @param endpoint   Ver.: always
    382           * @param clusterId   Ver.: always
    383           * @param attributeMetadata   Ver.: always
    384           * @param manufacturerCode   Ver.: always
    385           * @param buffer   Ver.: always
    386           */

   \                                 In section .text, align 2, keep-with-next
    387          EmberAfStatus emberAfExternalAttributeWriteCallback(int8u endpoint,
    388                                                              EmberAfClusterId clusterId,
    389                                                              EmberAfAttributeMetadata *attributeMetadata,
    390                                                              int16u manufacturerCode,
    391                                                              int8u *buffer)
    392          {
    393            return EMBER_ZCL_STATUS_FAILURE;
   \                     emberAfExternalAttributeWriteCallback: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x4770             BX       LR               ;; return
    394          }
    395          
    396          /** @brief Get Current App Tasks
    397           *
    398           * This function is only useful to sleepy end devices.  This function will
    399           * return the set of tasks the application has outstanding.  These tasks affect
    400           * how the application behaves with regard to sleeping and polling.
    401           *
    402           */

   \                                 In section .text, align 2, keep-with-next
    403          EmberAfApplicationTask emberAfGetCurrentAppTasksCallback(void)
    404          {
    405            return 0;
   \                     emberAfGetCurrentAppTasksCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    406          }
    407          
    408          /** @brief Get Current Poll Control
    409           *
    410           * This function will retrieve the current poll control that the system is using
    411           * for the current network.  This is determined by examining all the scheduled
    412           * events and obtaining the most restrictive poll control context across all
    413           * events.  The most restrictive poll control is EMBER_AF_SHORT_POLL followed by
    414           * EMBER_AF_LONG_POLL.
    415           *
    416           */

   \                                 In section .text, align 2, keep-with-next
    417          EmberAfEventPollControl emberAfGetCurrentPollControlCallback(void)
    418          {
    419            return EMBER_AF_LONG_POLL;
   \                     emberAfGetCurrentPollControlCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    420          }
    421          
    422          /** @brief Get Current Poll Interval Ms
    423           *
    424           * This function is only useful to end devices.  This function will return the
    425           * current poll interval (in milliseconds) for the current network.  This
    426           * interval is the maximum amount of time a child is currently waiting between
    427           * polls of its parent.
    428           *
    429           */

   \                                 In section .text, align 2, keep-with-next
    430          int32u emberAfGetCurrentPollIntervalMsCallback(void)
    431          {
    432            return 0;
   \                     emberAfGetCurrentPollIntervalMsCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    433          }
    434          
    435          /** @brief Get Current Poll Interval Qs
    436           *
    437           * This function is only useful to end devices.  This function will return the
    438           * current poll interval (in quarter seconds) for the current network.  This
    439           * interval is the maximum amount of time a child is currently waiting between
    440           * polls of its parent.
    441           *
    442           */

   \                                 In section .text, align 2, keep-with-next
    443          int32u emberAfGetCurrentPollIntervalQsCallback(void)
    444          {
    445            return 0;
   \                     emberAfGetCurrentPollIntervalQsCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    446          }
    447          
    448          /** @brief Get Current Time
    449           *
    450           * This callback is called when device attempts to get current time from the
    451           * hardware. If this device has means to retrieve exact time, then this method
    452           * should implement it. If the callback can't provide the exact time it should
    453           * return 0 to indicate failure. Default action is to return 0, which indicates
    454           * that device does not have access to real time.
    455           *
    456           */

   \                                 In section .text, align 2, keep-with-next
    457          int32u emberAfGetCurrentTimeCallback(void)
    458          {
    459            return 0;
   \                     emberAfGetCurrentTimeCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    460          }
    461          
    462          /** @brief Get Default Poll Control
    463           *
    464           * This function will retrieve the default poll control for the current network
    465           * as previously set by emberAfSetDefaultPollControlCallback().  The default
    466           * poll control will limit whether the network can long poll.
    467           *
    468           */

   \                                 In section .text, align 2, keep-with-next
    469          EmberAfEventPollControl emberAfGetDefaultPollControlCallback(void)
    470          {
    471            return EMBER_AF_LONG_POLL;
   \                     emberAfGetDefaultPollControlCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    472          }
    473          
    474          /** @brief Get Endpoint By Index
    475           *
    476           * Get the endpoint number based on the passed index.  By default the framework
    477           * handles this by managing endpoints based on the precompiled configuration
    478           * defined in AppBuilder.  This callback can override this behavior at runtime
    479           * and provide additional endpoints or different data than the compiled values.
    480           * If the index is overridden than the callback shall return TRUE and set the
    481           * endpointReturn parameter accordingly. A value of 0xFF means the endpoint
    482           * doesn't exist at that index.
    483                  Otherwise FALSE must be returned by the
    484           * callback and the default framework behavior will be executed.  This is only
    485           * applicable to the SOC devices.
    486           *
    487           * @param index The index of the endpoint.  Ver.: always
    488           * @param endpointReturn The value of endpoint.  Ver.: always
    489           */

   \                                 In section .text, align 2, keep-with-next
    490          boolean emberAfGetEndpointByIndexCallback(int8u index,
    491                                                    int8u* endpointReturn)
    492          {
    493            return FALSE;
   \                     emberAfGetEndpointByIndexCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    494          }
    495          
    496          /** @brief Get Endpoint Description
    497           *
    498           * This callback is called by the framework whenever it receives a ZDO request
    499           * to enumerate the details about an endpoint.  By default the framework
    500           * provides the information based on the precompiled endpoint information as
    501           * defined in AppBuilder.  This callback can override that behavior at runtime
    502           * and return different information.  If the endpoint information is being
    503           * overridden then the callback must return TRUE.  Otherwise it should return
    504           * FALSE, which allows the framework to perform its default behavior.  This is
    505           * only applicable to SOC devices.
    506           *
    507           * @param endpoint The endpoint number that is being queried.  Ver.: always
    508           * @param result This is a pointer to a data structure where the endpoint
    509           * information is written if the callback is providing the information.  Ver.:
    510           * always
    511           */

   \                                 In section .text, align 2, keep-with-next
    512          boolean emberAfGetEndpointDescriptionCallback(int8u endpoint,
    513                                                        EmberEndpointDescription* result)
    514          {
    515            return FALSE;
   \                     emberAfGetEndpointDescriptionCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    516          }
    517          
    518          /** @brief Get Endpoint Info
    519           *
    520           * This function is a callback to an application implemented endpoint that
    521           * operates outside the normal application framework.  When the framework wishes
    522           * to perform operations with that endpoint it uses this callback to retrieve
    523           * the endpoint's information.  If the endpoint exists and the application can
    524           * provide data then TRUE shall be returned.  Otherwise the callback must return
    525           * FALSE.
    526           *
    527           * @param endpoint The endpoint to retrieve data for.  Ver.: always
    528           * @param returnNetworkIndex The index corresponding to the ZigBee network the
    529           * endpoint belongs to.  If not using a multi-network device, 0 must be
    530           * returned.  Otherwise on a multi-network device the stack will switch to this
    531           * network before sending the message.  Ver.: always
    532           * @param returnEndpointInfo A pointer to a data struct that will be written
    533           * with information about the endpoint.  Ver.: always
    534           */

   \                                 In section .text, align 2, keep-with-next
    535          boolean emberAfGetEndpointInfoCallback(int8u endpoint,
    536                                                 int8u* returnNetworkIndex,
    537                                                 EmberAfEndpointInfoStruct* returnEndpointInfo)
    538          {
    539            return FALSE;
   \                     emberAfGetEndpointInfoCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    540          }
    541          
    542          /** @brief Get Long Poll Interval Ms
    543           *
    544           * This function is only useful to end devices.  This function will return the
    545           * long poll interval (in milliseconds) for the current network.  This interval
    546           * is the maximum amount of time a child will wait between polls of its parent
    547           * when it is not expecting data.
    548           *
    549           */

   \                                 In section .text, align 2, keep-with-next
    550          int32u emberAfGetLongPollIntervalMsCallback(void)
    551          {
    552            return 0;
   \                     emberAfGetLongPollIntervalMsCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    553          }
    554          
    555          /** @brief Get Long Poll Interval Qs
    556           *
    557           * This function is only useful to end devices.  This function will return the
    558           * long poll interval (in quarter seconds) for the current network.  This
    559           * interval is the maximum amount of time a child will wait between polls of its
    560           * parent when it is not expecting data.
    561           *
    562           */

   \                                 In section .text, align 2, keep-with-next
    563          int32u emberAfGetLongPollIntervalQsCallback(void)
    564          {
    565            return 0;
   \                     emberAfGetLongPollIntervalQsCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    566          }
    567          
    568          /** @brief Get Short Poll Interval Ms
    569           *
    570           * This function is only useful to sleepy end devices.  This function will
    571           * return the short poll interval (in milliseconds) for the current network.
    572           * This interval is the maximum amount of time a child will wait between polls
    573           * of its parent when it is expecting data.
    574           *
    575           */

   \                                 In section .text, align 2, keep-with-next
    576          int16u emberAfGetShortPollIntervalMsCallback(void)
    577          {
    578            return 0;
   \                     emberAfGetShortPollIntervalMsCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    579          }
    580          
    581          /** @brief Get Short Poll Interval Qs
    582           *
    583           * This function is only useful to sleepy end devices.  This function will
    584           * return the short poll interval (in quarter seconds) for the current network.
    585           * This interval is the maximum amount of time a child will wait between polls
    586           * of its parent when it is expecting data.
    587           *
    588           */

   \                                 In section .text, align 2, keep-with-next
    589          int16u emberAfGetShortPollIntervalQsCallback(void)
    590          {
    591            return 0;
   \                     emberAfGetShortPollIntervalQsCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    592          }
    593          
    594          /** @brief Get Source Route Overhead
    595           *
    596           * This function is called by the framework to determine the overhead required
    597           * in the network frame for source routing to a particular destination.
    598           *
    599           * @param destination The node id of the destination  Ver.: always
    600           */

   \                                 In section .text, align 2, keep-with-next
    601          int8u emberAfGetSourceRouteOverheadCallback(EmberNodeId destination)
    602          {
    603            return 0;
   \                     emberAfGetSourceRouteOverheadCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    604          }
    605          
    606          /** @brief Get Wake Timeout Bitmask
    607           *
    608           * This function is only useful to sleepy end devices.  This function will
    609           * return the wake timeout bitmask for the current network.  The bitmask
    610           * determines which tasks will timeout automatically and which tasks require
    611           * manual removal from the task list.
    612           *
    613           */

   \                                 In section .text, align 2, keep-with-next
    614          EmberAfApplicationTask emberAfGetWakeTimeoutBitmaskCallback(void)
    615          {
    616            return 0;
   \                     emberAfGetWakeTimeoutBitmaskCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    617          }
    618          
    619          /** @brief Get Wake Timeout Ms
    620           *
    621           * This function is only useful to sleepy end devices.  This function will
    622           * return the wake timeout (in milliseconds) for the current network.  This
    623           * timeout is the maximum amount of time a child will wait for a task in the
    624           * wake bitmask to finish.  While waiting, the device will short poll.
    625           *
    626           */

   \                                 In section .text, align 2, keep-with-next
    627          int16u emberAfGetWakeTimeoutMsCallback(void)
    628          {
    629            return 0;
   \                     emberAfGetWakeTimeoutMsCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    630          }
    631          
    632          /** @brief Get Wake Timeout Qs
    633           *
    634           * This function is only useful to sleepy end devices.  This function will
    635           * return the wake timeout (in quarter seconds) for the current network.  This
    636           * timeout is the maximum amount of time a child will wait for a task in the
    637           * wake bitmask to finish.  While waiting, the device will short poll.
    638           *
    639           */

   \                                 In section .text, align 2, keep-with-next
    640          int16u emberAfGetWakeTimeoutQsCallback(void)
    641          {
    642            return 0;
   \                     emberAfGetWakeTimeoutQsCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    643          }
    644          
    645          /** @brief Hal Button Isr
    646           *
    647           * This callback is called by the framework whenever a button is pressed on the
    648           * device. This callback is called within ISR context.
    649           *
    650           * @param button The button which has changed state, either BUTTON0 or BUTTON1
    651           * as defined in the appropriate BOARD_HEADER.  Ver.: always
    652           * @param state The new state of the button referenced by the button parameter,
    653           * either ::BUTTON_PRESSED if the button has been pressed or ::BUTTON_RELEASED
    654           * if the button has been released.  Ver.: always
    655           */

   \                                 In section .text, align 2, keep-with-next
    656          void emberAfHalButtonIsrCallback(int8u button,
    657                                           int8u state)
    658          {
    659          }
   \                     emberAfHalButtonIsrCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    660          
    661          /** @brief Initiate Inter Pan Key Establishment
    662           *
    663           * This function is called by the framework to initiate key establishment with a
    664           * remote device on a different PAN.  The application should return
    665           * EMBER_SUCCESS if key establishment was initiated successfully.  The
    666           * application should call ::emberAfInterPanKeyEstablishmentCallback as events
    667           * occur.
    668           *
    669           * @param panId The PAN id of the remote device.  Ver.: always
    670           * @param eui64 The EUI64 of the remote device.  Ver.: always
    671           */

   \                                 In section .text, align 2, keep-with-next
    672          EmberStatus emberAfInitiateInterPanKeyEstablishmentCallback(EmberPanId panId,
    673                                                                      const EmberEUI64 eui64)
    674          {
    675            return EMBER_LIBRARY_NOT_PRESENT;
   \                     emberAfInitiateInterPanKeyEstablishmentCallback: (+1)
   \   00000000   0x20B5             MOVS     R0,#+181
   \   00000002   0x4770             BX       LR               ;; return
    676          }
    677          
    678          /** @brief Initiate Key Establishment
    679           *
    680           * This function is called by the framework to initiate key establishment with a
    681           * remote device.  The application should return EMBER_SUCCESS if key
    682           * establishment was initiated successfully.  The application should call
    683           * ::emberAfKeyEstablishmentCallback as events occur.
    684           *
    685           * @param nodeId The node id of the remote device.  Ver.: always
    686           * @param endpoint The endpoint on the remote device.  Ver.: always
    687           */

   \                                 In section .text, align 2, keep-with-next
    688          EmberStatus emberAfInitiateKeyEstablishmentCallback(EmberNodeId nodeId,
    689                                                              int8u endpoint)
    690          {
    691            return EMBER_LIBRARY_NOT_PRESENT;
   \                     emberAfInitiateKeyEstablishmentCallback: (+1)
   \   00000000   0x20B5             MOVS     R0,#+181
   \   00000002   0x4770             BX       LR               ;; return
    692          }
    693          
    694          /** @brief Initiate Partner Link Key Exchange
    695           *
    696           * This function is called by the framework to initiate a partner link key
    697           * exchange with a remote device.  The application should return EMBER_SUCCESS
    698           * if the partner link key exchange was initiated successfully.  When the
    699           * partner link key exchange completes, the application should call the given
    700           * callback.
    701           *
    702           * @param target The node id of the remote device.  Ver.: always
    703           * @param endpoint The key establishment endpoint of the remote device.  Ver.:
    704           * always
    705           * @param callback The callback that should be called when the partner link key
    706           * exchange completse.  Ver.: always
    707           */

   \                                 In section .text, align 2, keep-with-next
    708          EmberStatus emberAfInitiatePartnerLinkKeyExchangeCallback(EmberNodeId target,
    709                                                                    int8u endpoint,
    710                                                                    EmberAfPartnerLinkKeyExchangeCallback *callback)
    711          {
    712            return EMBER_LIBRARY_NOT_PRESENT;
   \                     emberAfInitiatePartnerLinkKeyExchangeCallback: (+1)
   \   00000000   0x20B5             MOVS     R0,#+181
   \   00000002   0x4770             BX       LR               ;; return
    713          }
    714          
    715          /** @brief Inter Pan Key Establishment
    716           *
    717           * A callback by the key-establishment code to indicate an event has occurred.
    718           * For error codes this is purely a notification.  For non-error status codes
    719           * (besides LINK_KEY_ESTABLISHED), it is the application's chance to allow or
    720           * disallow the operation.  If the application returns TRUE then the key
    721           * establishment is allowed to proceed.  If it returns FALSE, then key
    722           * establishment is aborted.  LINK_KEY_ESTABLISHED is a notification of success.
    723           *
    724           * @param status   Ver.: always
    725           * @param amInitiator   Ver.: always
    726           * @param panId   Ver.: always
    727           * @param eui64   Ver.: always
    728           * @param delayInSeconds   Ver.: always
    729           */

   \                                 In section .text, align 2, keep-with-next
    730          boolean emberAfInterPanKeyEstablishmentCallback(EmberAfKeyEstablishmentNotifyMessage status,
    731                                                          boolean amInitiator,
    732                                                          EmberPanId panId,
    733                                                          const EmberEUI64 eui64,
    734                                                          int8u delayInSeconds)
    735          {
    736            return TRUE;
   \                     emberAfInterPanKeyEstablishmentCallback: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x4770             BX       LR               ;; return
    737          }
    738          
    739          /** @brief Interpan Send Message
    740           *
    741           * This function will send a raw MAC message with interpan frame format using
    742           * the passed parameters.
    743           *
    744           * @param header Interpan header info  Ver.: always
    745           * @param messageLength The length of the message received or to send  Ver.:
    746           * always
    747           * @param message The message data received or to send.  Ver.: always
    748           */

   \                                 In section .text, align 2, keep-with-next
    749          EmberStatus emberAfInterpanSendMessageCallback(EmberAfInterpanHeader* header,
    750                                                         int16u messageLength,
    751                                                         int8u* message)
    752          {
    753            return EMBER_LIBRARY_NOT_PRESENT;
   \                     emberAfInterpanSendMessageCallback: (+1)
   \   00000000   0x20B5             MOVS     R0,#+181
   \   00000002   0x4770             BX       LR               ;; return
    754          }
    755          
    756          /** @brief Key Establishment
    757           *
    758           * A callback by the key-establishment code to indicate an event has occurred.
    759           * For error codes this is purely a notification.  For non-error status codes
    760           * (besides LINK_KEY_ESTABLISHED), it is the application's chance to allow or
    761           * disallow the operation.  If the application returns TRUE then the key
    762           * establishment is allowed to proceed.  If it returns FALSE, then key
    763           * establishment is aborted.  LINK_KEY_ESTABLISHED is a notification of success.
    764           *
    765           * @param status   Ver.: always
    766           * @param amInitiator   Ver.: always
    767           * @param partnerShortId   Ver.: always
    768           * @param delayInSeconds   Ver.: always
    769           */

   \                                 In section .text, align 2, keep-with-next
    770          boolean emberAfKeyEstablishmentCallback(EmberAfKeyEstablishmentNotifyMessage status,
    771                                                  boolean amInitiator,
    772                                                  EmberNodeId partnerShortId,
    773                                                  int8u delayInSeconds)
    774          {
    775            return TRUE;
   \                     emberAfKeyEstablishmentCallback: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x4770             BX       LR               ;; return
    776          }
    777          
    778          /** @brief On/off Cluster Level Control Effect
    779           *
    780           * This is called by the framework when the on/off cluster initiates a command
    781           * that must effect a level control change. The implementation assumes that the
    782           * client will handle any effect on the On/Off Cluster.
    783           *
    784           * @param endpoint   Ver.: always
    785           * @param newValue   Ver.: always
    786           */

   \                                 In section .text, align 2, keep-with-next
    787          void emberAfOnOffClusterLevelControlEffectCallback(int8u endpoint,
    788                                                             boolean newValue)
    789          {
    790          }
   \                     emberAfOnOffClusterLevelControlEffectCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    791          
    792          /** @brief Main Start
    793           *
    794           * This function is called at the start of main after the HAL has been
    795           * initialized.  The standard main function arguments of argc and argv are
    796           * passed in.  However not all platforms have support for main() function
    797           * arguments.  Those that do not are passed NULL for argv, therefore argv should
    798           * be checked for NULL before using it.  If the callback determines that the
    799           * program must exit, it should return TRUE.  The value returned by main() will
    800           * be the value written to the returnCode pointer.  Otherwise the callback
    801           * should return FALSE to let normal execution continue.
    802           *
    803           * @param returnCode   Ver.: always
    804           * @param argc   Ver.: always
    805           * @param argv   Ver.: always
    806           */

   \                                 In section .text, align 2, keep-with-next
    807          boolean emberAfMainStartCallback(int* returnCode,
    808                                           int argc,
    809                                           char** argv)
    810          {
    811            // NOTE:  argc and argv may not be supported on all platforms, so argv MUST be
    812            // checked for NULL before referencing it.  On those platforms without argc
    813            // and argv "0" and "NULL" are passed respectively.
    814          
    815            return FALSE;  // exit?
   \                     emberAfMainStartCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    816          }
    817          
    818          /** @brief Message Sent
    819           *
    820           * This function is called by the application framework from the message sent
    821           * handler, when it is informed by the stack regarding the message sent status.
    822           * All of the values passed to the emberMessageSentHandler are passed on to this
    823           * callback. This provides an opportunity for the application to verify that its
    824           * message has been sent successfully and take the appropriate action. This
    825           * callback should return a boolean value of TRUE or FALSE. A value of TRUE
    826           * indicates that the message sent notification has been handled and should not
    827           * be handled by the application framework.
    828           *
    829           * @param type   Ver.: always
    830           * @param indexOrDestination   Ver.: always
    831           * @param apsFrame   Ver.: always
    832           * @param msgLen   Ver.: always
    833           * @param message   Ver.: always
    834           * @param status   Ver.: always
    835           */

   \                                 In section .text, align 2, keep-with-next
    836          boolean emberAfMessageSentCallback(EmberOutgoingMessageType type,
    837                                             int16u indexOrDestination,
    838                                             EmberApsFrame* apsFrame,
    839                                             int16u msgLen,
    840                                             int8u* message,
    841                                             EmberStatus status)
    842          {
    843            return FALSE;
   \                     emberAfMessageSentCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    844          }
    845          
    846          /** @brief Ncp Init
    847           *
    848           * This function is called when the network coprocessor is being initialized,
    849           * either at startup or upon reset.  It provides applications on opportunity to
    850           * perform additional configuration of the NCP.  The function is always called
    851           * twice when the NCP is initialized.  In the first invocation, memoryAllocation
    852           * will be TRUE and the application should only issue EZSP commands that affect
    853           * memory allocation on the NCP.  For example, tables on the NCP can be resized
    854           * in the first call.  In the second invocation, memoryAllocation will be FALSE
    855           * and the application should only issue EZSP commands that do not affect memory
    856           * allocation.  For example, tables on the NCP can be populated in the second
    857           * call.  This callback is not called on SoCs.
    858           *
    859           * @param memoryAllocation   Ver.: always
    860           */

   \                                 In section .text, align 2, keep-with-next
    861          void emberAfNcpInitCallback(boolean memoryAllocation)
    862          {
    863          }
   \                     emberAfNcpInitCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    864          
    865          /** @brief Ncp Is Awake Isr
    866           *
    867           * This function is called IN ISR CONTEXT.  It notes that the NCP is awake after
    868           * sleeping.  Care should be taken to do minimal processing in this ISR handler
    869           * function.
    870           *
    871           */

   \                                 In section .text, align 2, keep-with-next
    872          void emberAfNcpIsAwakeIsrCallback(void)
    873          {
    874          }
   \                     emberAfNcpIsAwakeIsrCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    875          
    876          /** @brief Network Key Update Complete
    877           *
    878           * This is called by the framework when a network key update operation started
    879           * by the trust center is complete.
    880           *
    881           * @param status   Ver.: always
    882           */

   \                                 In section .text, align 2, keep-with-next
    883          void emberAfNetworkKeyUpdateCompleteCallback(EmberStatus status)
    884          {
    885          }
   \                     emberAfNetworkKeyUpdateCompleteCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    886          
    887          /** @brief Ota Bootload
    888           *
    889           * The platform specific routine to bootload the device from a ZigBee
    890           * over-the-air upgrade file.
    891           *
    892           * @param id A pointer to the structure that contains the information about what
    893           * OTA image to bootload.  Ver.: always
    894           * @param ncpUpgradeTagId The tag ID of the upgrade data that will be used to
    895           * bootload the device.  Ver.: always
    896           */

   \                                 In section .text, align 2, keep-with-next
    897          int8u emberAfOtaBootloadCallback(const EmberAfOtaImageId* id,
    898                                           int16u ncpUpgradeTagId)
    899          {
    900            // Please implement me
    901            emberAfCorePrintln("Not supported.");
    902            return 1;
   \                     emberAfOtaBootloadCallback: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x4770             BX       LR               ;; return
    903          }
    904          
    905          /** @brief Ota Client Bootload
    906           *
    907           * This callback is fired when the OTA Client recevies a command to bootload the
    908           * newly downloaded OTA image.  This callback will perform the platform specific
    909           * to bootload their device.
    910           *
    911           * @param id This is the identifier relating to the image that has been
    912           * downloaded and is ready for bootload.  Ver.: always
    913           */

   \                                 In section .text, align 2, keep-with-next
    914          void emberAfOtaClientBootloadCallback(const EmberAfOtaImageId* id)
    915          {
    916            // Any final preperation prior to the bootload should be done here.
    917            // It is assumed that the device will reset in most all cases.
    918            // Please implement me.
    919          }
   \                     emberAfOtaClientBootloadCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    920          
    921          /** @brief Ota Client Custom Verify
    922           *
    923           * This callback is executed by the OTA client after the signature verification
    924           * has successfully completed.  It allows the device to do its own custom
    925           * verification of the image (such as verifying that the EBL is intact).
    926           *
    927           * @param newVerification This indicates if a new verification should be
    928           * started.  Ver.: always
    929           * @param id This is ID of the image to be verified.  Ver.: always
    930           */

   \                                 In section .text, align 2, keep-with-next
    931          EmberAfImageVerifyStatus emberAfOtaClientCustomVerifyCallback(boolean newVerification,
    932                                                                        const EmberAfOtaImageId* id)
    933          {
    934            // Manufacturing specific checks can be made to the image in this function to
    935            // determine if it is valid.  This function is called AFTER cryptographic
    936            // checks have passed.  If the cryptographic checks failed, this function will
    937            // never be called.
    938          
    939            // The function shall return one of the following based on its own
    940            // verification process.
    941            // 1) EMBER_AF_IMAGE_GOOD - the image has passed all checks
    942            // 2) EMBER_AF_IMAGE_BAD  - the image is not valid
    943            // 3) EMBER_AF_IMAGE_VERIFY_IN_PROGRESS - the image is valid so far, but more
    944            //      checks are needed.  This callback shall be re-executed later to
    945            //      continue verification.  This allows other code in the framework to run.
    946            return EMBER_AF_IMAGE_GOOD;
   \                     emberAfOtaClientCustomVerifyCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    947          }
    948          
    949          /** @brief Ota Client Download Complete
    950           *
    951           * This callback indicates that the OTA client has completed the download of a
    952           * file.  If the file has been completely downloaded and cryptographic checks
    953           * have been turned on, then those will be performed prior to this callback and
    954           * that outcome included in the 'success' result.  On failure, this callback is
    955           * merely informative, and the return type is ignored.  On succesful download,
    956           * this callback allows the client to perform any additional verification of the
    957           * downloaded image and return that result to the OTA server.
    958           *
    959           * @param success This indicates the success or failure of the download and
    960           * cryptographic verification process (if applicable).  Ver.: always
    961           * @param id This is the image identifier information that corresponds to the
    962           * download result.  Ver.: always
    963           */

   \                                 In section .text, align 2, keep-with-next
    964          boolean emberAfOtaClientDownloadCompleteCallback(EmberAfOtaDownloadResult success,
    965                                                           const EmberAfOtaImageId* id)
    966          {
    967            // At this point the image has been completely downloaded and cryptographic
    968            // checks (if applicable) have been performed.
    969          
    970            if (!success) {
    971              emberAfOtaBootloadClusterPrintln("Download failed.");
    972              return TRUE;   // return value is ignored
    973            }
    974          
    975            // This is for any additional validation that needs to be performed
    976            // on the image by the application.
    977          
    978            // The results of checks here will be returned back to the OTA server
    979            // in the Upgrade End request.
    980            return TRUE;
   \                     emberAfOtaClientDownloadCompleteCallback: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x4770             BX       LR               ;; return
    981          }
    982          
    983          /** @brief Ota Client Incoming Message Raw
    984           *
    985           * This callback is for processing incoming messages for the Over-the-air
    986           * bootload cluster client.  ZCL will not process the message and instead hand
    987           * the raw over the air data to the callback for its own processing.
    988           *
    989           * @param message A pointer to the structure containing the message buffer and
    990           * other information about it.  Ver.: always
    991           */

   \                                 In section .text, align 2, keep-with-next
    992          boolean emberAfOtaClientIncomingMessageRawCallback(EmberAfClusterCommand *message)
    993          {
    994            return FALSE;
   \                     emberAfOtaClientIncomingMessageRawCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    995          }
    996          
    997          /** @brief Ota Client Start
    998           *
    999           * This callback should be called when the profile specific registration has
   1000           * completed successfully.  It will start the client's state machine that will
   1001           * find the OTA server, query it for the next image, download the image, wait
   1002           * for the bootload message, and kick off the bootload.
   1003           *
   1004           */

   \                                 In section .text, align 2, keep-with-next
   1005          void emberAfOtaClientStartCallback(void)
   1006          {
   1007          }
   \                     emberAfOtaClientStartCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1008          
   1009          /** @brief Ota Client Version Info
   1010           *
   1011           * This function is called by the OTA client when a new query will occur to the
   1012           * server asking what the next version of firmware is.  The client can inform
   1013           * the cluster software as to what information to use in the query (and
   1014           * subsequent download).
   1015           *
   1016           * @param currentImageInfo This is the information to use in the next query by
   1017           * the client cluster code.  It contains the manufacturer ID, image type ID, and
   1018           * the firmware version to be specified in the query message sent to the server.
   1019           *  Ver.: always
   1020           * @param hardwareVersion This is a pointer to the hardware version to use in
   1021           * the query.  If no hardware version should be used, then
   1022           * EMBER_AF_INVALID_HARDWARE_VERSION should be used.  Ver.: always
   1023           */

   \                                 In section .text, align 2, keep-with-next
   1024          void emberAfOtaClientVersionInfoCallback(EmberAfOtaImageId* currentImageInfo,
   1025                                                   int16u* hardwareVersion)
   1026          {
   1027            // Customer will fill in the image info with their manufacturer ID,
   1028            // image type ID, and current software version number.
   1029            // The deviceSpecificFileEui64 can be ignored.
   1030          
   1031            // It may be necessary to dynamically determine this by talking to
   1032            // another device, as is the case with a host talking to an NCP device.
   1033          
   1034            // However, this routine will be called repeatedly so it may be wise
   1035            // to cache the data!
   1036          
   1037          /* This is commented out since the #defines below are not defined.
   1038          
   1039            if (currentImageInfo != NULL) {
   1040              MEMSET(currentImageInfo, 0, sizeof(EmberAfOtaImageId));
   1041              currentImageInfo->manufacturerId  = EMBER_AF_MANUFACTURER_CODE;
   1042              currentImageInfo->imageTypeId     = EMBER_AF_IMAGE_TYPE_ID;
   1043              currentImageInfo->firmwareVersion = EMBER_AF_CUSTOM_FIRMWARE_VERSION;
   1044            }
   1045          
   1046            if (hardwareVersion != NULL) {
   1047              *hardwareVersion = EMBER_AF_INVALID_HARDWARE_VERSION;
   1048            }
   1049          
   1050            assert(FALSE);
   1051          */
   1052          }
   \                     emberAfOtaClientVersionInfoCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1053          
   1054          /** @brief Ota Page Request Server Policy
   1055           *
   1056           * This callback is called by the OTA server page request code when it wants to
   1057           * determine if it is allowed for an OTA client to make a page request.  It is
   1058           * only called if page request support has been enabled on the server.  It
   1059           * should return EMBER_ZCL_STATUS_SUCCESS if it allows the page request, and
   1060           * EMBER_ZCL_STATUS_UNSUP_CLUSTER_COMMAND if it does not want to allow it.
   1061           *
   1062           */

   \                                 In section .text, align 2, keep-with-next
   1063          int8u emberAfOtaPageRequestServerPolicyCallback(void)
   1064          {
   1065            return EMBER_ZCL_STATUS_SUCCESS;
   \                     emberAfOtaPageRequestServerPolicyCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1066          }
   1067          
   1068          /** @brief Ota Server Block Size
   1069           *
   1070           * This function provides a way for the server to adjust the block size of its
   1071           * response to an Image block request by a client.
   1072           *
   1073           * @param clientNodeId The node Id of OTA client making an image block request.
   1074           * Ver.: always
   1075           */

   \                                 In section .text, align 2, keep-with-next
   1076          int8u emberAfOtaServerBlockSizeCallback(EmberNodeId clientNodeId)
   1077          {
   \                     emberAfOtaServerBlockSizeCallback: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
   \   00000004   0x4604             MOV      R4,R0
   1078            // This function provides a way for the server to potentially
   1079            // adjust the block size based on the client who is requesting.
   1080            // In other words if we are using source routing we will limit
   1081            // data returned by enough to put a source route into the message.
   1082          
   1083            // Image Block Response Message Format
   1084            // Status Code: 1-byte
   1085            // Manuf Code:  2-bytes
   1086            // Image Type:  2-bytes
   1087            // File Ver:    4-bytes
   1088            // File Offset: 4-bytes
   1089            // Data Size:   1-byte
   1090            // Data:        variable
   1091            const int8u IMAGE_BLOCK_RESPONSE_OVERHEAD = (EMBER_AF_ZCL_OVERHEAD + 14);
   1092          
   1093            EmberApsFrame apsFrame;
   1094            int8u maxSize;
   1095            apsFrame.options = EMBER_APS_OPTION_NONE;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0xF8AD 0x0006      STRH     R0,[SP, #+6]
   1096          
   1097            if (emberAfIsCurrentSecurityProfileSmartEnergy()) {
   \   0000000C   0x.... 0x....      BL       emberAfIsCurrentSecurityProfileSmartEnergy
   \   00000010   0xB128             CBZ.N    R0,??emberAfOtaServerBlockSizeCallback_0
   1098              apsFrame.options |= EMBER_APS_OPTION_ENCRYPTION;
   \   00000012   0xF8BD 0x0006      LDRH     R0,[SP, #+6]
   \   00000016   0xF040 0x0020      ORR      R0,R0,#0x20
   \   0000001A   0xF8AD 0x0006      STRH     R0,[SP, #+6]
   1099            }
   1100          
   1101            maxSize = emberAfMaximumApsPayloadLength(EMBER_OUTGOING_DIRECT,
   1102                                                     clientNodeId,
   1103                                                     &apsFrame);
   1104            maxSize -= IMAGE_BLOCK_RESPONSE_OVERHEAD;
   1105            return maxSize;
   \                     ??emberAfOtaServerBlockSizeCallback_0: (+1)
   \   0000001E   0xAA00             ADD      R2,SP,#+0
   \   00000020   0x4621             MOV      R1,R4
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x.... 0x....      BL       emberAfMaximumApsPayloadLength
   \   00000028   0x3811             SUBS     R0,R0,#+17
   \   0000002A   0xB2C0             UXTB     R0,R0
   \   0000002C   0xB004             ADD      SP,SP,#+16
   \   0000002E   0xBD10             POP      {R4,PC}          ;; return
   1106          }
   1107          
   1108          /** @brief Ota Server Image Block Request
   1109           *
   1110           * This function is called when the server application receives an image block
   1111           * request by a client.
   1112           *
   1113           * @param data A struct containing the details of the image block response and
   1114           * values that can be returned by the application to effect the behavior of the
   1115           * server's response.  Ver.: always
   1116           */

   \                                 In section .text, align 2, keep-with-next
   1117          int8u emberAfOtaServerImageBlockRequestCallback(EmberAfImageBlockRequestCallbackStruct* data)
   1118          {
   1119            // This function should return one of the following:
   1120            //   EMBER_ZCL_STATUS_SUCCESS - This indicates that the OTA server code should
   1121            //     respond to the image block request normally.
   1122            //   EMBER_ZCL_STATUS_ABORT - This indicates to the OTA server that it should
   1123            //     tell the client to abort the download and make no more image block requests.
   1124            //   EMBER_ZCL_STATUS_WAIT_FOR_DATA - This indicates to the OTA server to tell
   1125            //     the client it should delay before asking for that data block again.
   1126            //     The 'waitTimeInMinutesResponse' value should be filled in with the delay value.
   1127            return EMBER_ZCL_STATUS_SUCCESS;
   \                     emberAfOtaServerImageBlockRequestCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1128          }
   1129          
   1130          /** @brief Ota Server Incoming Message Raw
   1131           *
   1132           * This callback is for processing incoming messages for the Over-the-air
   1133           * bootload cluster server.  ZCL will not process the message and instead hand
   1134           * the raw over the air data to the callback for its own processing.
   1135           *
   1136           * @param message A pointer to the structure containing the message buffer and
   1137           * other information about it.  Ver.: always
   1138           */

   \                                 In section .text, align 2, keep-with-next
   1139          boolean emberAfOtaServerIncomingMessageRawCallback(EmberAfClusterCommand *message)
   1140          {
   1141            return FALSE;
   \                     emberAfOtaServerIncomingMessageRawCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1142          }
   1143          
   1144          /** @brief Ota Server Query
   1145           *
   1146           * This callback is fired when the OTA server receives a query request by the
   1147           * client.  The callback lets the server application indicate to the client what
   1148           * the 'next' version of software is for the device, or if there is not one
   1149           * available.
   1150           *
   1151           * @param currentImageId This is the current software image that the client
   1152           * hase.  Ver.: always
   1153           * @param hardwareVersion If this value is non-NULL, it indicates the hardware
   1154           * version of the client device.  If NULL, the client did not specify a hardware
   1155           * version.  Ver.: always
   1156           * @param nextUpgradeImageId This is a pointer to a data structure containing
   1157           * the 'next' software version for the client to download.  Ver.: always
   1158           */

   \                                 In section .text, align 2, keep-with-next
   1159          int8u emberAfOtaServerQueryCallback(const EmberAfOtaImageId* currentImageId,
   1160                                              int16u* hardwareVersion,
   1161                                              EmberAfOtaImageId* nextUpgradeImageId)
   1162          {
   1163            // If a new software image is available, this function should return EMBER_ZCL_STATUS_SUCCESS
   1164            // and populate the 'nextUpgradeImageId' structure with the appropriate values.
   1165            // If no new software image is available (i.e. the client should not download a firmware image)
   1166            // then the server should return EMBER_ZCL_STATUS_NO_IMAGE_AVAILABLE.
   1167            return EMBER_ZCL_STATUS_NO_IMAGE_AVAILABLE;
   \                     emberAfOtaServerQueryCallback: (+1)
   \   00000000   0x2098             MOVS     R0,#+152
   \   00000002   0x4770             BX       LR               ;; return
   1168          }
   1169          
   1170          /** @brief Ota Server Send Image Notify
   1171           *
   1172           * This callback is an indication to the OTA server that it should send out
   1173           * notification about an OTA file that is available for download.
   1174           *
   1175           * @param dest The destination of the image notify message.  May be a broadcast
   1176           * address.  Ver.: always
   1177           * @param endpoint The destination endpoint of the image notify message.  May be
   1178           * a broadcast endpoint.  Ver.: always
   1179           * @param payloadType The type of data the image notify message will contain.  0
   1180           * = no data.  1 = Manufacturer ID.  2 = Manufacturer ID and the image type ID.
   1181           * 3 = Manufacturer ID, image type ID, and firmware version.  Ver.: always
   1182           * @param queryJitter The percentage of nodes that should respond to this
   1183           * message, from 1-100.  On receipt of this message, each recipient will
   1184           * randomly choose a percentage and only query the server if their percentage is
   1185           * below this value.  Ver.: always
   1186           * @param id The image information that will be put in the message.  The data
   1187           * within this struct that will be appended to the message is determined by the
   1188           * previous 'payloadType' argument.  Ver.: always
   1189           */

   \                                 In section .text, align 2, keep-with-next
   1190          boolean emberAfOtaServerSendImageNotifyCallback(EmberNodeId dest,
   1191                                                          int8u endpoint,
   1192                                                          int8u payloadType,
   1193                                                          int8u queryJitter,
   1194                                                          const EmberAfOtaImageId* id)
   1195          {
   1196            return FALSE;
   \                     emberAfOtaServerSendImageNotifyCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1197          }
   1198          
   1199          /** @brief Ota Server Upgrade End Request
   1200           *
   1201           * This function is called when the OTA server receives a request an upgrade end
   1202           * request.  If the request indicated a successful download by the client, the
   1203           * server must tell the client when and if to upgrade to the downloaded image.
   1204           *
   1205           * @param source The node ID of the device that sent the upgrade end request.
   1206           * Ver.: always
   1207           * @param status This is the ZCL status sent by the client indicating the result
   1208           * of its attempt to download the new upgrade image.  If the status is not
   1209           * EMBER_ZCL_STATUS_SUCCESS then this callback is merely informative and no
   1210           * response mesasge will be generated by the server.  Ver.: always
   1211           * @param returnValue If the server returns TRUE indicating that the client
   1212           * should apply the upgrade, this time value indicates when in the future the
   1213           * client should apply the upgrade.  Ver.: always
   1214           * @param imageId This variable indicates the software version that the client
   1215           * successfully downloaded and is asking to upgrade to.  Ver.: always
   1216           */

   \                                 In section .text, align 2, keep-with-next
   1217          boolean emberAfOtaServerUpgradeEndRequestCallback(EmberNodeId source,
   1218                                                            int8u status,
   1219                                                            int32u* returnValue,
   1220                                                            const EmberAfOtaImageId* imageId)
   1221          {
   1222            // If the status value is not EMBER_ZCL_STATUS_SUCCESS, then this callback is
   1223            // merely informative and no response message will be generated by the server.
   1224            // If the server wants the client to NOT apply the upgrade, then it should
   1225            // return FALSE.
   1226            // If the server wants the client to apply the upgrade, it should return TRUE
   1227            // and set the 'returnValue' parameter to when it wants the client to
   1228            // apply the upgrade.  There are three possible values:
   1229            //   0               =  Apply the upgrade now
   1230            //   0xFFFFFFFF      =  Don't apply yet, ask again later.
   1231            //   (anything-else) =  Apply the upgrade X minutes from now.
   1232            *returnValue = 0;
   \                     emberAfOtaServerUpgradeEndRequestCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x6010             STR      R0,[R2, #+0]
   1233            return TRUE;
   \   00000004   0x2001             MOVS     R0,#+1
   \   00000006   0x4770             BX       LR               ;; return
   1234          }
   1235          
   1236          /** @brief Ota Storage Check Temp Data
   1237           *
   1238           * This callback will validate temporary data in the storage device to determine
   1239           * whether it is a complete file, a partially downloaded file, or there is no
   1240           * file present.  When a complete or partial file is found it will return
   1241           * EMBER_AF_OTA_STORAGE_SUCCESS or EMBER_AF_OTA_STORAGE_PARTIAL_FILE_FOUND,
   1242           * respectively.  In that case, the currentOffset, totalImageSize, and
   1243           * newFileInfo will be populated with data.  When EMBER_AF_OTA_STORAGE_ERROR is
   1244           * returned, no temporary data is present.
   1245           *
   1246           * @param currentOffset A pointer to a value that will be written with the
   1247           * offset within the total file size that has been successfully stored in the
   1248           * storage device.  This will indicate how much data has been currently
   1249           * dowloaded.  Ver.: always
   1250           * @param totalImageSize A pointer to a value that will be written with the
   1251           * total image size of the OTA file when a download has completed.  This does
   1252           * not indicate how much data has actually been downloaded currently.  Ver.:
   1253           * always
   1254           * @param newFileInfo This is the image id of the temporary file data stored in
   1255           * the storage device.  Ver.: always
   1256           */

   \                                 In section .text, align 2, keep-with-next
   1257          EmberAfOtaStorageStatus emberAfOtaStorageCheckTempDataCallback(int32u* currentOffset,
   1258                                                                         int32u* totalImageSize,
   1259                                                                         EmberAfOtaImageId* newFileInfo)
   1260          {
   1261            // If the image data cannot be successfully verified, an error should be returned.
   1262            return EMBER_AF_OTA_STORAGE_ERROR;
   \                     emberAfOtaStorageCheckTempDataCallback: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x4770             BX       LR               ;; return
   1263          }
   1264          
   1265          /** @brief Ota Storage Clear Temp Data
   1266           *
   1267           * This function clears any existing temp data that was downloaed.  It is used
   1268           * immediately prior to downloading a raw image over the air.
   1269           *
   1270           */

   \                                 In section .text, align 2, keep-with-next
   1271          EmberAfOtaStorageStatus emberAfOtaStorageClearTempDataCallback(void)
   1272          {
   1273            // If the image data cannot be stored, an error should be returned.
   1274            return EMBER_AF_OTA_STORAGE_ERROR;
   \                     emberAfOtaStorageClearTempDataCallback: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x4770             BX       LR               ;; return
   1275          }
   1276          
   1277          /** @brief Ota Storage Close
   1278           *
   1279           * This callback shuts down the ZigBee Over-the-air storage module.
   1280           *
   1281           */

   \                                 In section .text, align 2, keep-with-next
   1282          void emberAfOtaStorageCloseCallback(void)
   1283          {
   1284            // Please implement me.
   1285            assert(FALSE);
   \                     emberAfOtaStorageCloseCallback: (+1)
   \   00000000   0xF240 0x5105      MOVW     R1,#+1285
   \   00000004   0x....             B.N      ?Subroutine0
   1286          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0x.... 0x....      ADR.W    R0,`?<Constant "callback-stub.c">`
   \   00000004   0x.... 0x....      B.W      halInternalAssertFailed
   1287          
   1288          /** @brief Ota Storage Driver Download Finish
   1289           *
   1290           * This callback defines the low-level means by which a device records the final
   1291           * offset value of the download image.
   1292           *
   1293           * @param offset The value of the final offset of the image download.  Ver.:
   1294           * always
   1295           */

   \                                 In section .text, align 2, keep-with-next
   1296          void emberAfOtaStorageDriverDownloadFinishCallback(int32u offset)
   1297          {
   1298            // The storage driver and the rest of the OTA bootload code will not function correctly unless it is implemnted.
   1299            // Please implement me.
   1300            assert(FALSE);
   \                     emberAfOtaStorageDriverDownloadFinishCallback: (+1)
   \   00000000   0xF240 0x5114      MOVW     R1,#+1300
   \   00000004                      REQUIRE ?Subroutine0
   \   00000004                      ;; // Fall through to label ?Subroutine0
   1301          }
   1302          
   1303          /** @brief Ota Storage Driver Init
   1304           *
   1305           * The initialization code for the OTA storage driver.
   1306           *
   1307           */

   \                                 In section .text, align 2, keep-with-next
   1308          boolean emberAfOtaStorageDriverInitCallback(void)
   1309          {
   \                     emberAfOtaStorageDriverInitCallback: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1310            // The storage driver and the rest of the OTA bootload code will not function correctly unless it is implemnted.
   1311            // Please implement me.
   1312            assert(FALSE);
   \   00000002   0xF44F 0x61A4      MOV      R1,#+1312
   \   00000006   0x....             B.N      ?Subroutine1
   1313            return FALSE;
   1314          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \   00000000   0x.... 0x....      ADR.W    R0,`?<Constant "callback-stub.c">`
   \   00000004   0x.... 0x....      BL       halInternalAssertFailed
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0xBD02             POP      {R1,PC}          ;; return
   1315          
   1316          /** @brief Ota Storage Driver Invalidate Image
   1317           *
   1318           * This callback invalidates the image stored on disk so that it will not be
   1319           * bootloaded, and it will not be a valid image that is in the middle of
   1320           * downloading.
   1321           *
   1322           */

   \                                 In section .text, align 2, keep-with-next
   1323          EmberAfOtaStorageStatus emberAfOtaStorageDriverInvalidateImageCallback(void)
   1324          {
   \                     emberAfOtaStorageDriverInvalidateImageCallback: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1325            // The storage driver and the rest of the OTA bootload code will not function correctly unless it is implemnted.
   1326            // Please implement me.
   1327            assert(FALSE);
   \   00000002   0xF240 0x512F      MOVW     R1,#+1327
   \   00000006   0x....             B.N      ?Subroutine2
   1328            return EMBER_AF_OTA_STORAGE_ERROR;
   1329          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2: (+1)
   \   00000000   0x.... 0x....      ADR.W    R0,`?<Constant "callback-stub.c">`
   \   00000004   0x.... 0x....      BL       halInternalAssertFailed
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0xBD02             POP      {R1,PC}          ;; return
   1330          
   1331          /** @brief Ota Storage Driver Prepare To Resume Download
   1332           *
   1333           * This callback allows the underlying storage driver to prepare to resume the
   1334           * OTA file download.  For example, the driver may exceute a page erase to
   1335           * insure the next page is ready to be written to.
   1336           *
   1337           */

   \                                 In section .text, align 2, keep-with-next
   1338          EmberAfOtaStorageStatus emberAfOtaStorageDriverPrepareToResumeDownloadCallback(void)
   1339          {
   \                     emberAfOtaStorageDriverPrepareToResumeDownloadCallback: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1340            assert(FALSE);
   \   00000002   0xF240 0x513C      MOVW     R1,#+1340
   \   00000006                      REQUIRE ?Subroutine2
   \   00000006                      ;; // Fall through to label ?Subroutine2
   1341            return EMBER_AF_OTA_STORAGE_ERROR;
   1342          }
   1343          
   1344          /** @brief Ota Storage Driver Read
   1345           *
   1346           * This callback defines the low-level means by which a device reads from the
   1347           * OTA storage device.
   1348           *
   1349           * @param offset The address offset from the start of the storage device where
   1350           * data is to be read.  Ver.: always
   1351           * @param length The length of the data to be read from the storage device.
   1352           * Ver.: always
   1353           * @param returnData A pointer where the data read from the device should be
   1354           * written to.  Ver.: always
   1355           */

   \                                 In section .text, align 2, keep-with-next
   1356          boolean emberAfOtaStorageDriverReadCallback(int32u offset,
   1357                                                      int32u length,
   1358                                                      int8u* returnData)
   1359          {
   \                     emberAfOtaStorageDriverReadCallback: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1360            // The storage driver and the rest of the OTA bootload code will not function correctly unless it is implemnted.
   1361            // Please implement me.
   1362            assert(FALSE);
   \   00000002   0xF240 0x5152      MOVW     R1,#+1362
   \   00000006                      REQUIRE ?Subroutine1
   \   00000006                      ;; // Fall through to label ?Subroutine1
   1363            return FALSE;
   1364          }
   1365          
   1366          /** @brief Ota Storage Driver Retrieve Last Stored Offset
   1367           *
   1368           * This callback defines the low-level means by which a device retrieves the
   1369           * last persistently recorded download offset.  This may be different than last
   1370           * actual download offset.
   1371           *
   1372           */

   \                                 In section .text, align 2, keep-with-next
   1373          int32u emberAfOtaStorageDriverRetrieveLastStoredOffsetCallback(void)
   1374          {
   \                     emberAfOtaStorageDriverRetrieveLastStoredOffsetCallback: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1375            // The storage driver and the rest of the OTA bootload code will not function correctly unless it is implemnted.
   1376            // Please implement me.
   1377            assert(FALSE);
   \   00000002   0xF240 0x5161      MOVW     R1,#+1377
   \   00000006   0x....             B.N      ?Subroutine1
   1378            return 0;
   1379          }
   1380          
   1381          /** @brief Ota Storage Driver Write
   1382           *
   1383           * This callback defines the low-level means by which a device reads from the
   1384           * OTA storage device.
   1385           *
   1386           * @param dataToWrite A pointer to the data that will be written to the storage
   1387           * device.  Ver.: always
   1388           * @param offset The address offset from the start of the storage device where
   1389           * data will be written.  Ver.: always
   1390           * @param length The length of the data to be written to the storage device.
   1391           * Ver.: always
   1392           */

   \                                 In section .text, align 2, keep-with-next
   1393          boolean emberAfOtaStorageDriverWriteCallback(const int8u* dataToWrite,
   1394                                                       int32u offset,
   1395                                                       int32u length)
   1396          {
   \                     emberAfOtaStorageDriverWriteCallback: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1397            // The storage driver and the rest of the OTA bootload code will not function correctly unless it is implemnted.
   1398            // Please implement me.
   1399            assert(FALSE);
   \   00000002   0xF240 0x5177      MOVW     R1,#+1399
   \   00000006   0x....             B.N      ?Subroutine1
   1400            return FALSE;
   1401          }
   1402          
   1403          /** @brief Ota Storage Finish Download
   1404           *
   1405           * This function indicates to the storage module that the download has finished.
   1406           *
   1407           * @param offset The final offset of the downloaded file (i.e. the total size)
   1408           * Ver.: always
   1409           */

   \                                 In section .text, align 2, keep-with-next
   1410          EmberAfOtaStorageStatus emberAfOtaStorageFinishDownloadCallback(int32u offset)
   1411          {
   1412            return EMBER_AF_OTA_STORAGE_SUCCESS;
   \                     emberAfOtaStorageFinishDownloadCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1413          }
   1414          
   1415          /** @brief Ota Storage Get Count
   1416           *
   1417           * This callback returns the total number of ZigBee Over-the-air upgrade images
   1418           * stored in the storage module.
   1419           *
   1420           */

   \                                 In section .text, align 2, keep-with-next
   1421          int8u emberAfOtaStorageGetCountCallback(void)
   1422          {
   1423            return 0;
   \                     emberAfOtaStorageGetCountCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1424          }
   1425          
   1426          /** @brief Ota Storage Get Full Header
   1427           *
   1428           * This callback populates the EmberAfOtaHeader structure pointed to by the
   1429           * returnData with data about the OTA file stored in the storage module.
   1430           *
   1431           * @param id This is a pointer to the image id for the OTA file to retrieve
   1432           * information about.  Ver.: always
   1433           * @param returnData This is a pointer to the location of the structure that
   1434           * will be populated with data.  Ver.: always
   1435           */

   \                                 In section .text, align 2, keep-with-next
   1436          EmberAfOtaStorageStatus emberAfOtaStorageGetFullHeaderCallback(const EmberAfOtaImageId* id,
   1437                                                                         EmberAfOtaHeader* returnData)
   1438          {
   1439            // If the requested image cannot be found, then an error shouldb e returned.
   1440            return EMBER_AF_OTA_STORAGE_ERROR;
   \                     emberAfOtaStorageGetFullHeaderCallback: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x4770             BX       LR               ;; return
   1441          }
   1442          
   1443          /** @brief Ota Storage Get Total Image Size
   1444           *
   1445           * This function returns the total size of the ZigBee Over-the-air file with the
   1446           * passed parameters.  If no file is found with those parameters, 0 is returned.
   1447           *
   1448           * @param id A pointer to the image identifier for the OTA file to retrieve
   1449           * information for.  Ver.: always
   1450           */

   \                                 In section .text, align 2, keep-with-next
   1451          int32u emberAfOtaStorageGetTotalImageSizeCallback(const EmberAfOtaImageId* id)
   1452          {
   1453            // On failure this should return an image size of zero.
   1454            return 0;
   \                     emberAfOtaStorageGetTotalImageSizeCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1455          }
   1456          
   1457          /** @brief Ota Storage Init
   1458           *
   1459           * This callback initializes the ZigBee Over-the-air storage module.
   1460           *
   1461           */

   \                                 In section .text, align 2, keep-with-next
   1462          EmberAfOtaStorageStatus emberAfOtaStorageInitCallback(void)
   1463          {
   1464            return EMBER_AF_OTA_STORAGE_SUCCESS;
   \                     emberAfOtaStorageInitCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1465          }
   1466          
   1467          /** @brief Ota Storage Iterator First
   1468           *
   1469           * This callback lets you walk through the list of all OTA files by jumping to
   1470           * the first file in the list maintained by the storage module.  If there is no
   1471           * file then emberAfOtaInvalidImageId is returned.
   1472           *
   1473           */

   \                                 In section .text, align 2, keep-with-next
   1474          EmberAfOtaImageId emberAfOtaStorageIteratorFirstCallback(void)
   1475          {
   1476            // It is expected that the storage module maintain its own internal iterator that the 'first' and 'next' functions will manipulate.
   1477          
   1478            // If there are no images at all, this function should return the invalid image id.
   1479            return emberAfInvalidImageId;
   \                     emberAfOtaStorageIteratorFirstCallback: (+1)
   \   00000000   0x....             B.N      ?Subroutine3
   1480          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable1
   \   00000002   0x2210             MOVS     R2,#+16
   \   00000004   0x.... 0x....      B.W      __aeabi_memcpy4
   1481          
   1482          /** @brief Ota Storage Iterator Next
   1483           *
   1484           * This callback lets you walk through the list of all OTA files by jumping to
   1485           * the next file in the list maintained by the storage module.  If there is no
   1486           * next file then emberAfOtaInvalidImageId is returned.
   1487           *
   1488           */

   \                                 In section .text, align 2, keep-with-next
   1489          EmberAfOtaImageId emberAfOtaStorageIteratorNextCallback(void)
   \                     emberAfOtaStorageIteratorNextCallback: (+1)
   \   00000000   0xBF00             Nop      
   1490          {
   1491            // It is expected that the storage module maintain its own internal iterator that the 'first' and 'next' functions will manipulate.
   1492          
   1493            // If there are no more images, this function should return the invalid image id.
   1494            return emberAfInvalidImageId;
   \   00000002                      REQUIRE ?Subroutine3
   \   00000002                      ;; // Fall through to label ?Subroutine3
   1495          }
   1496          
   1497          /** @brief Ota Storage Read Image Data
   1498           *
   1499           * This callback reads data from the specified OTA file and returns that data to
   1500           * the caller.
   1501           *
   1502           * @param id This is a pointer to the image id for the OTA file to retrieve data
   1503           * from.  Ver.: always
   1504           * @param offset This is the offset relative to the start of the image where the
   1505           * data should be read from.  Ver.: always
   1506           * @param length This is the length of data that will be read.  Ver.: always
   1507           * @param returnData This is a pointer to where the data read out of the file
   1508           * will be written to  Ver.: always
   1509           * @param returnedLength This is a pointer to a variable where the actual length
   1510           * of data read will be written to.  A short read may occur if the end of file
   1511           * was reached.  Ver.: always
   1512           */

   \                                 In section .text, align 2, keep-with-next
   1513          EmberAfOtaStorageStatus emberAfOtaStorageReadImageDataCallback(const EmberAfOtaImageId* id,
   1514                                                                         int32u offset,
   1515                                                                         int32u length,
   1516                                                                         int8u* returnData,
   1517                                                                         int32u* returnedLength)
   1518          {
   1519            // If the requested image cannot be found, then an error should be returned.
   1520            return EMBER_AF_OTA_STORAGE_ERROR;
   \                     emberAfOtaStorageReadImageDataCallback: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x4770             BX       LR               ;; return
   1521          }
   1522          
   1523          /** @brief Ota Storage Search
   1524           *
   1525           * This callback searches through the list of all images for one that matches
   1526           * the passed parameters.  On success an image identifier is returned with a
   1527           * matching image.  On failure emberAfInvalidImageId is returned.
   1528           *
   1529           * @param manufacturerId The ZigBee assigned identifier of the manufacturer
   1530           * contained in the OTA image being searched for.  Ver.: always
   1531           * @param imageTypeId The image type identifier contained in the OTA image being
   1532           * searched for.  Ver.: always
   1533           * @param hardwareVersion This is a pointer to the hardware version that will be
   1534           * used in the search.  If the pointer is NULL, hardware version will not be
   1535           * considered when searching for matching images.  If it points to a value, the
   1536           * search will only consider images where that value falls between the minimum
   1537           * and maxmimum hardware version specified in the OTA file.  If no hardware
   1538           * version is present in an OTA file but the other parameters match, the file
   1539           * will be considered a match  Ver.: always
   1540           */

   \                                 In section .text, align 2, keep-with-next
   1541          EmberAfOtaImageId emberAfOtaStorageSearchCallback(int16u manufacturerId,
   1542                                                            int16u imageTypeId,
   1543                                                            const int16u* hardwareVersion)
   1544          {
   1545            // If no image is found that matches the search criteria, this function should return the invalid image id.
   1546            return emberAfInvalidImageId;
   \                     emberAfOtaStorageSearchCallback: (+1)
   \   00000000   0x....             B.N      ?Subroutine3
   1547          }
   1548          
   1549          /** @brief Ota Storage Write Temp Data
   1550           *
   1551           * This function writes to the temporary data in the storage device at the
   1552           * specified offset.  It is used when downloading a raw image over the air.
   1553           *
   1554           * @param offset The location within the download image file where to write the
   1555           * data.  Ver.: always
   1556           * @param length The length of data to write.  Ver.: always
   1557           * @param data A pointer to the temporary data that will be written to the
   1558           * storage device.  Ver.: always
   1559           */

   \                                 In section .text, align 2, keep-with-next
   1560          EmberAfOtaStorageStatus emberAfOtaStorageWriteTempDataCallback(int32u offset,
   1561                                                                         int32u length,
   1562                                                                         const int8u* data)
   1563          {
   1564            // If the image data cannot be stored, an error should be returned.
   1565            return EMBER_AF_OTA_STORAGE_ERROR;
   \                     emberAfOtaStorageWriteTempDataCallback: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x4770             BX       LR               ;; return
   1566          }
   1567          
   1568          /** @brief Partner Link Key Exchange Request
   1569           *
   1570           * This function is called by the framework on SOC platforms when a remote node
   1571           * requests a partner link key exchange.  The application should return
   1572           * EMBER_SUCCESS to accept the request or any other status to reject it.  On
   1573           * network coprocessor platforms, this function will not be called because the
   1574           * NCP handles partner link key exchange requests based on the binding policy.
   1575           *
   1576           * @param partner The EUI of the remote node.  Ver.: always
   1577           */

   \                                 In section .text, align 2, keep-with-next
   1578          EmberStatus emberAfPartnerLinkKeyExchangeRequestCallback(EmberEUI64 partner)
   1579          {
   1580            return EMBER_LIBRARY_NOT_PRESENT;
   \                     emberAfPartnerLinkKeyExchangeRequestCallback: (+1)
   \   00000000   0x20B5             MOVS     R0,#+181
   \   00000002   0x4770             BX       LR               ;; return
   1581          }
   1582          
   1583          /** @brief Partner Link Key Exchange Response
   1584           *
   1585           * This function is called by the framework when a remote node requests a
   1586           * partner link key exchange.  The application should return TRUE to accept the
   1587           * request or FALSE to reject it.  On network coprocessor platforms, this
   1588           * function will not be called because the NCP handles partner link key exchange
   1589           * requests based on the binding policy.
   1590           *
   1591           * @param sender The EUI of the remote node.  Ver.: always
   1592           * @param status The ZDO response status.  Ver.: always
   1593           */

   \                                 In section .text, align 2, keep-with-next
   1594          void emberAfPartnerLinkKeyExchangeResponseCallback(EmberNodeId sender,
   1595                                                             EmberZdoStatus status)
   1596          {
   1597          }
   \                     emberAfPartnerLinkKeyExchangeResponseCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1598          
   1599          /** @brief Performing Key Establishment
   1600           *
   1601           * This function is called by the framework to determine if the device is
   1602           * performing key establishment.  The application should return TRUE if key
   1603           * establishment is in progress.
   1604           *
   1605           */

   \                                 In section .text, align 2, keep-with-next
   1606          boolean emberAfPerformingKeyEstablishmentCallback(void)
   1607          {
   1608            return FALSE;
   \                     emberAfPerformingKeyEstablishmentCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1609          }
   1610          
   1611          /** @brief Rollover
   1612           *
   1613           * This function is called every time a counter exceeds its threshold.
   1614           *
   1615           * @param type The counter that rolled over  Ver.: always
   1616           */

   \                                 In section .text, align 2, keep-with-next
   1617          void emberAfPluginCountersRolloverCallback(EmberCounterType type)
   1618          {
   1619          }
   \                     emberAfPluginCountersRolloverCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1620          
   1621          /** @brief Get Group Name
   1622           *
   1623           * This function returns the name of a group with the provided group ID, should
   1624           * it exist.
   1625           *
   1626           * @param endpoint Endpoint  Ver.: always
   1627           * @param groupId Group ID  Ver.: always
   1628           * @param groupName Group Name  Ver.: always
   1629           */

   \                                 In section .text, align 2, keep-with-next
   1630          void emberAfPluginGroupsServerGetGroupNameCallback(int8u endpoint,
   1631                                                             int16u groupId,
   1632                                                             int8u *groupName)
   1633          {
   1634          }
   \                     emberAfPluginGroupsServerGetGroupNameCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1635          
   1636          /** @brief Group Names Supported
   1637           *
   1638           * This function returns whether or not group names are supported.
   1639           *
   1640           * @param endpoint Endpoint  Ver.: always
   1641           */

   \                                 In section .text, align 2, keep-with-next
   1642          boolean emberAfPluginGroupsServerGroupNamesSupportedCallback(int8u endpoint)
   1643          {
   1644            return FALSE;
   \                     emberAfPluginGroupsServerGroupNamesSupportedCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1645          }
   1646          
   1647          /** @brief Set Group Name
   1648           *
   1649           * This function sets the name of a group with the provided group ID.
   1650           *
   1651           * @param endpoint Endpoint  Ver.: always
   1652           * @param groupId Group ID  Ver.: always
   1653           * @param groupName Group Name  Ver.: always
   1654           */

   \                                 In section .text, align 2, keep-with-next
   1655          void emberAfPluginGroupsServerSetGroupNameCallback(int8u endpoint,
   1656                                                             int16u groupId,
   1657                                                             int8u *groupName)
   1658          {
   1659          }
   \                     emberAfPluginGroupsServerSetGroupNameCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1660          
   1661          /** @brief Active
   1662           *
   1663           * This function is called by the Idle/Sleep plugin after idling.
   1664           *
   1665           */

   \                                 In section .text, align 2, keep-with-next
   1666          void emberAfPluginIdleSleepActiveCallback(void)
   1667          {
   1668          }
   \                     emberAfPluginIdleSleepActiveCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1669          
   1670          /** @brief Ok To Idle
   1671           *
   1672           * This function is called by the Idle/Sleep plugin before idling.  It is called
   1673           * with interrupts disabled.  The application should return TRUE if the device
   1674           * may idle or FALSE otherwise.
   1675           *
   1676           */

   \                                 In section .text, align 2, keep-with-next
   1677          boolean emberAfPluginIdleSleepOkToIdleCallback(void)
   1678          {
   1679            return TRUE;
   \                     emberAfPluginIdleSleepOkToIdleCallback: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x4770             BX       LR               ;; return
   1680          }
   1681          
   1682          /** @brief Ok To Sleep
   1683           *
   1684           * This function is called by the Idle/Sleep plugin before sleeping.  It is
   1685           * called with interrupts disabled.  The application should return TRUE if the
   1686           * device may sleep or FALSE otherwise.
   1687           *
   1688           * @param durationMs The maximum duration in milliseconds that the device will
   1689           * sleep.  Ver.: always
   1690           */

   \                                 In section .text, align 2, keep-with-next
   1691          boolean emberAfPluginIdleSleepOkToSleepCallback(int32u durationMs)
   1692          {
   1693            return TRUE;
   \                     emberAfPluginIdleSleepOkToSleepCallback: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x4770             BX       LR               ;; return
   1694          }
   1695          
   1696          /** @brief Wake Up
   1697           *
   1698           * This function is called by the Idle/Sleep plugin after sleeping.
   1699           *
   1700           * @param durationMs The duration in milliseconds that the device slept.  Ver.:
   1701           * always
   1702           */

   \                                 In section .text, align 2, keep-with-next
   1703          void emberAfPluginIdleSleepWakeUpCallback(int32u durationMs)
   1704          {
   1705          }
   \                     emberAfPluginIdleSleepWakeUpCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1706          
   1707          /** @brief Finished
   1708           *
   1709           * This callback is fired when the network-find plugin is finished with the
   1710           * forming or joining process.  The result of the operation will be returned in
   1711           * the status parameter.
   1712           *
   1713           * @param status   Ver.: always
   1714           */

   \                                 In section .text, align 2, keep-with-next
   1715          void emberAfPluginNetworkFindFinishedCallback(EmberStatus status)
   1716          {
   1717          }
   \                     emberAfPluginNetworkFindFinishedCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1718          
   1719          /** @brief Get Radio Power For Channel
   1720           *
   1721           * This callback is called by the framework when it is setting the radio power
   1722           * during the discovery process. The framework will set the radio power
   1723           * depending on what is returned by this callback.
   1724           *
   1725           * @param channel   Ver.: always
   1726           */

   \                                 In section .text, align 2, keep-with-next
   1727          int8s emberAfPluginNetworkFindGetRadioPowerForChannelCallback(int8u channel)
   1728          {
   1729            return EMBER_AF_PLUGIN_NETWORK_FIND_RADIO_TX_POWER;
   \                     emberAfPluginNetworkFindGetRadioPowerForChannelCallback: (+1)
   \   00000000   0x2008             MOVS     R0,#+8
   \   00000002   0x4770             BX       LR               ;; return
   1730          }
   1731          
   1732          /** @brief Join
   1733           *
   1734           * This callback is called by the plugin when a joinable network has been found.
   1735           *  If the application returns TRUE, the plugin will attempt to join the
   1736           * network.  Otherwise, the plugin will ignore the network and continue
   1737           * searching.  Applications can use this callback to implement a network
   1738           * blacklist.
   1739           *
   1740           * @param networkFound   Ver.: always
   1741           * @param lqi   Ver.: always
   1742           * @param rssi   Ver.: always
   1743           */

   \                                 In section .text, align 2, keep-with-next
   1744          boolean emberAfPluginNetworkFindJoinCallback(EmberZigbeeNetwork *networkFound,
   1745                                                       int8u lqi,
   1746                                                       int8s rssi)
   1747          {
   1748            return TRUE;
   \                     emberAfPluginNetworkFindJoinCallback: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x4770             BX       LR               ;; return
   1749          }
   1750          
   1751          /** @brief Post Attribute Change
   1752           *
   1753           * This function is called by the application framework after it changes an
   1754           * attribute value. The value passed into this callback is the value to which
   1755           * the attribute was set by the framework.
   1756           *
   1757           * @param endpoint   Ver.: always
   1758           * @param clusterId   Ver.: always
   1759           * @param attributeId   Ver.: always
   1760           * @param mask   Ver.: always
   1761           * @param manufacturerCode   Ver.: always
   1762           * @param type   Ver.: always
   1763           * @param size   Ver.: always
   1764           * @param value   Ver.: always
   1765           */

   \                                 In section .text, align 2, keep-with-next
   1766          void emberAfPostAttributeChangeCallback(int8u endpoint,
   1767                                                  EmberAfClusterId clusterId,
   1768                                                  EmberAfAttributeId attributeId,
   1769                                                  int8u mask,
   1770                                                  int16u manufacturerCode,
   1771                                                  int8u type,
   1772                                                  int8u size,
   1773                                                  int8u* value)
   1774          {
   1775          }
   \                     emberAfPostAttributeChangeCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1776          
   1777          /** @brief Pre Attribute Change
   1778           *
   1779           * This function is called by the application framework before it changes an
   1780           * attribute value.  The value passed into this callback is the value to which
   1781           * the attribute is to be set by the framework.  The application should return
   1782           * ::EMBER_ZCL_STATUS_SUCCESS to permit the change or any other ::EmberAfStatus
   1783           * to reject it.
   1784           *
   1785           * @param endpoint   Ver.: always
   1786           * @param clusterId   Ver.: always
   1787           * @param attributeId   Ver.: always
   1788           * @param mask   Ver.: always
   1789           * @param manufacturerCode   Ver.: always
   1790           * @param type   Ver.: always
   1791           * @param size   Ver.: always
   1792           * @param value   Ver.: always
   1793           */

   \                                 In section .text, align 2, keep-with-next
   1794          EmberAfStatus emberAfPreAttributeChangeCallback(int8u endpoint,
   1795                                                          EmberAfClusterId clusterId,
   1796                                                          EmberAfAttributeId attributeId,
   1797                                                          int8u mask,
   1798                                                          int16u manufacturerCode,
   1799                                                          int8u type,
   1800                                                          int8u size,
   1801                                                          int8u* value)
   1802          {
   1803            return EMBER_ZCL_STATUS_SUCCESS;
   \                     emberAfPreAttributeChangeCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1804          }
   1805          
   1806          /** @brief Pre Cli Send
   1807           *
   1808           * This function is called by the framework when it is about to pass a message
   1809           * constructed over CLI to the stack primitives for sending. If the function
   1810           * returns TRUE it is assumed that the callback has consumed and processed the
   1811           * message. The framework will not do any further processing on the message.
   1812          
   1813           *     If the function returns FALSE then it is assumed that the callback has
   1814           * not processed the message and the framework will continue to process
   1815           * accordingly.
   1816           *
   1817           * @param apsFrame The structure containing the APS frame  Ver.: always
   1818           * @param source Source Node Id  Ver.: always
   1819           * @param destination Destintion Node Id  Ver.: always
   1820           * @param message Pointer to the message payload  Ver.: always
   1821           * @param messageLength Length of the message payload  Ver.: always
   1822           */

   \                                 In section .text, align 2, keep-with-next
   1823          boolean emberAfPreCliSendCallback(EmberApsFrame* apsFrame,
   1824                                            EmberNodeId source,
   1825                                            EmberNodeId destination,
   1826                                            int8u* message,
   1827                                            int16u messageLength)
   1828          {
   1829            return FALSE;
   \                     emberAfPreCliSendCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1830          }
   1831          
   1832          
   1833          
   1834          /** @brief Pre Message Received
   1835           *
   1836           * This callback is the first in the Application Framework's message processing
   1837           * chain. The Application Framework calls it when a message has been received
   1838           * over the air but has not yet been parsed by the ZCL command-handling code. If
   1839           * you wish to parse some messages that are completely outside the ZCL
   1840           * specification or are not handled by the Application Framework's command
   1841           * handling code, you should intercept them for parsing in this callback.
   1842          
   1843           *   This callback returns a Boolean value indicating whether or not the message
   1844           * has been handled. If the callback returns a value of TRUE, then the
   1845           * Application Framework assumes that the message has been handled and it does
   1846           * nothing else with it. If the callback returns a value of FALSE, then the
   1847           * application framework continues to process the message as it would with any
   1848           * incoming message.
   1849                  Note: 	This callback receives a pointer to an
   1850           * incoming message struct. This struct allows the application framework to
   1851           * provide a unified interface between both Host devices, which receive their
   1852           * message through the ezspIncomingMessageHandler, and SoC devices, which
   1853           * receive their message through emberIncomingMessageHandler.
   1854           *
   1855           * @param incomingMessage   Ver.: always
   1856           */

   \                                 In section .text, align 2, keep-with-next
   1857          boolean emberAfPreMessageReceivedCallback(EmberAfIncomingMessage* incomingMessage)
   1858          {
   1859            return FALSE;
   \                     emberAfPreMessageReceivedCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1860          }
   1861          
   1862          /** @brief Pre Message Send
   1863           *
   1864           * This function is called by the framework when it is about to pass a message
   1865           * to the stack primitives for sending.   This message may or may not be ZCL,
   1866           * ZDO, or some other protocol.  This is called prior to
   1867                  any ZigBee
   1868           * fragmentation that may be done.  If the function returns TRUE it is assumed
   1869           * the callback has consumed and processed the message.  The callback must also
   1870           * set the EmberStatus status code to be passed back to the caller.  The
   1871           * framework will do no further processing on the message.
   1872                  If the
   1873           * function returns FALSE then it is assumed that the callback has not processed
   1874           * the mesasge and the framework will continue to process accordingly.
   1875           *
   1876           * @param messageStruct The structure containing the parameters of the APS
   1877           * message to be sent.  Ver.: always
   1878           * @param status A pointer to the status code value that will be returned to the
   1879           * caller.  Ver.: always
   1880           */

   \                                 In section .text, align 2, keep-with-next
   1881          boolean emberAfPreMessageSendCallback(EmberAfMessageStruct* messageStruct,
   1882                                                EmberStatus* status)
   1883          {
   1884            return FALSE;
   \                     emberAfPreMessageSendCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1885          }
   1886          
   1887          /** @brief Pre Ncp Reset
   1888           *
   1889           * This function will be called prior to the reset of the NCP by the host.
   1890           *
   1891           */

   \                                 In section .text, align 2, keep-with-next
   1892          void emberAfPreNcpResetCallback(void)
   1893          {
   1894          }
   \                     emberAfPreNcpResetCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1895          
   1896          /** @brief Read Attributes Response
   1897           *
   1898           * This function is called by the application framework when a Read Attributes
   1899           * Response command is received from an external device.  The application should
   1900           * return TRUE if the message was processed or FALSE if it was not.
   1901           *
   1902           * @param clusterId The cluster identifier of this response.  Ver.: always
   1903           * @param buffer Buffer containing the list of read attribute status records.
   1904           * Ver.: always
   1905           * @param bufLen The length in bytes of the list.  Ver.: always
   1906           */

   \                                 In section .text, align 2, keep-with-next
   1907          boolean emberAfReadAttributesResponseCallback(EmberAfClusterId clusterId,
   1908                                                        int8u *buffer,
   1909                                                        int16u bufLen)
   1910          {
   1911            return FALSE;
   \                     emberAfReadAttributesResponseCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1912          }
   1913          
   1914          /** @brief Read Reporting Configuration Command
   1915           *
   1916           * This function is called by the application framework when a Read Reporting
   1917           * Configuration command is received from an external device.  The application
   1918           * should return TRUE if the message was processed or FALSE if it was not.
   1919           *
   1920           * @param cmd   Ver.: always
   1921           */

   \                                 In section .text, align 2, keep-with-next
   1922          boolean emberAfReadReportingConfigurationCommandCallback(const EmberAfClusterCommand *cmd)
   1923          {
   1924            return FALSE;
   \                     emberAfReadReportingConfigurationCommandCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1925          }
   1926          
   1927          /** @brief Read Reporting Configuration Response
   1928           *
   1929           * This function is called by the application framework when a Read Reporting
   1930           * Configuration Response command is received from an external device.  The
   1931           * application should return TRUE if the message was processed or FALSE if it
   1932           * was not.
   1933           *
   1934           * @param clusterId The cluster identifier of this response.  Ver.: always
   1935           * @param buffer Buffer containing the list of attribute reporting configuration
   1936           * records.  Ver.: always
   1937           * @param bufLen The length in bytes of the list.  Ver.: always
   1938           */

   \                                 In section .text, align 2, keep-with-next
   1939          boolean emberAfReadReportingConfigurationResponseCallback(EmberAfClusterId clusterId,
   1940                                                                    int8u *buffer,
   1941                                                                    int16u bufLen)
   1942          {
   1943            return FALSE;
   \                     emberAfReadReportingConfigurationResponseCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1944          }
   1945          
   1946          /** @brief Registration Abort
   1947           *
   1948           * This callback is called when the device should abort the registration
   1949           * process.
   1950           *
   1951           */

   \                                 In section .text, align 2, keep-with-next
   1952          void emberAfRegistrationAbortCallback(void)
   1953          {
   1954          }
   \                     emberAfRegistrationAbortCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1955          
   1956          /** @brief Registration
   1957           *
   1958           * This callback is called when the device joins a network and the process of
   1959           * registration is complete. This callback provides a success value of TRUE if
   1960           * the registration process was successful and a value of FALSE if registration
   1961           * failed.
   1962           *
   1963           * @param success TRUE if registration succeeded, FALSE otherwise.  Ver.: always
   1964           */

   \                                 In section .text, align 2, keep-with-next
   1965          void emberAfRegistrationCallback(boolean success)
   1966          {
   1967          }
   \                     emberAfRegistrationCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1968          
   1969          /** @brief Registration Start
   1970           *
   1971           * This callback is called when the device joins a network and the registration
   1972           * process should begin.  The application should return EMBER_SUCCESS if the
   1973           * registration process started successfully.  When registration is complete,
   1974           * the application should call emberAfRegistrationCallback with an indication of
   1975           * success or failure.
   1976           *
   1977           */

   \                                 In section .text, align 2, keep-with-next
   1978          EmberStatus emberAfRegistrationStartCallback(void)
   1979          {
   1980            return EMBER_LIBRARY_NOT_PRESENT;
   \                     emberAfRegistrationStartCallback: (+1)
   \   00000000   0x20B5             MOVS     R0,#+181
   \   00000002   0x4770             BX       LR               ;; return
   1981          }
   1982          
   1983          /** @brief Remote Delete Binding Permission
   1984           *
   1985           * This function is called by the framework to request permission to service the
   1986           * remote delete binding request. Return EMBER_SUCCESS to allow request,
   1987           * anything else to disallow request.
   1988           *
   1989           * @param index index to an Ember binding table entry  Ver.: always
   1990           */

   \                                 In section .text, align 2, keep-with-next
   1991          EmberStatus emberAfRemoteDeleteBindingPermissionCallback(int8u index)
   1992          {
   1993            return EMBER_SUCCESS; // default
   \                     emberAfRemoteDeleteBindingPermissionCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1994          }
   1995          
   1996          /** @brief Remote Set Binding Permission
   1997           *
   1998           * This function is called by the framework to request permission to service the
   1999           * remote set binding request. Return EMBER_SUCCESS to allow request, anything
   2000           * else to disallow request.
   2001           *
   2002           * @param entry Ember Binding Tablet Entry  Ver.: always
   2003           */

   \                                 In section .text, align 2, keep-with-next
   2004          EmberStatus emberAfRemoteSetBindingPermissionCallback(const EmberBindingTableEntry *entry)
   2005          {
   2006            return EMBER_SUCCESS; // default
   \                     emberAfRemoteSetBindingPermissionCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   2007          }
   2008          
   2009          /** @brief Remove From Current App Tasks
   2010           *
   2011           * This function is only useful to sleepy end devices.  This function will
   2012           * remove the passed item from the set of tasks the application has outstanding
   2013           * (e.g. message sent requiring APS acknwoledgement).  This will affect how the
   2014           * application behaves with regard to sleeping and polling.  Removing the item
   2015           * from the list of outstanding tasks may allow the device to sleep longer and
   2016           * poll less frequently.  If there are other outstanding tasks the system may
   2017           * still have to stay away and poll more often.
   2018           *
   2019           * @param tasks   Ver.: always
   2020           */

   \                                 In section .text, align 2, keep-with-next
   2021          void emberAfRemoveFromCurrentAppTasksCallback(EmberAfApplicationTask tasks)
   2022          {
   2023          }
   \                     emberAfRemoveFromCurrentAppTasksCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   2024          
   2025          /** @brief Report Attributes
   2026           *
   2027           * This function is called by the application framework when a Report Attributes
   2028           * command is received from an external device.  The application should return
   2029           * TRUE if the message was processed or FALSE if it was not.
   2030           *
   2031           * @param clusterId The cluster identifier of this command.  Ver.: always
   2032           * @param buffer Buffer containing the list of attribute report records.  Ver.:
   2033           * always
   2034           * @param bufLen The length in bytes of the list.  Ver.: always
   2035           */

   \                                 In section .text, align 2, keep-with-next
   2036          boolean emberAfReportAttributesCallback(EmberAfClusterId clusterId,
   2037                                                  int8u *buffer,
   2038                                                  int16u bufLen)
   2039          {
   2040            return FALSE;
   \                     emberAfReportAttributesCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   2041          }
   2042          
   2043          /** @brief Reporting Attribute Change
   2044           *
   2045           * This function is called by the framework when an attribute managed by the
   2046           * framework changes.  The application should call this function when an
   2047           * externally-managed attribute changes.  The application should use the change
   2048           * notification to inform its reporting decisions.
   2049           *
   2050           * @param endpoint   Ver.: always
   2051           * @param clusterId   Ver.: always
   2052           * @param attributeId   Ver.: always
   2053           * @param mask   Ver.: always
   2054           * @param manufacturerCode   Ver.: always
   2055           * @param type   Ver.: always
   2056           * @param data   Ver.: always
   2057           */

   \                                 In section .text, align 2, keep-with-next
   2058          void emberAfReportingAttributeChangeCallback(int8u endpoint,
   2059                                                       EmberAfClusterId clusterId,
   2060                                                       EmberAfAttributeId attributeId,
   2061                                                       int8u mask,
   2062                                                       int16u manufacturerCode,
   2063                                                       EmberAfAttributeType type,
   2064                                                       int8u *data)
   2065          {
   2066          }
   \                     emberAfReportingAttributeChangeCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   2067          
   2068          /** @brief Schedule Poll Event
   2069           *
   2070           * @deprecated This callback has been deprecated and will be removed in a future
   2071           * release.  Customers should use ::emberAfMainTickCallback instead.
   2072           *
   2073           */

   \                                 In section .text, align 2, keep-with-next
   2074          void emberAfSchedulePollEventCallback(void)
   2075          {
   2076          }
   \                     emberAfSchedulePollEventCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   2077          
   2078          /** @brief Security Init
   2079           *
   2080           * This callback is called by the framework to give the application a chance to
   2081           * modify the security settings of the node during network initialization.
   2082           * Depending on the context when this callback is called, the pointer to the
   2083           * initial security state may be NULL, which means the initial security state
   2084           * can no longer be modified as the node is already operating on the network.
   2085           *
   2086           * @param state   Ver.: always
   2087           * @param extended   Ver.: always
   2088           * @param trustCenter   Ver.: always
   2089           */

   \                                 In section .text, align 2, keep-with-next
   2090          void emberAfSecurityInitCallback(EmberInitialSecurityState *state,
   2091                                           EmberExtendedSecurityBitmask *extended,
   2092                                           boolean trustCenter)
   2093          {
   2094          }
   \                     emberAfSecurityInitCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   2095          
   2096          /** @brief Key Establishment Cluster Server Command Received
   2097           *
   2098           * This function is called by the application framework when a client-to-server
   2099           * key establishment command is received but has yet to be handled by the
   2100           * framework code.  This function should return a boolean value indicating
   2101           * whether the command has been handled by the application code and should not
   2102           * be further processed by the framework.
   2103           *
   2104           * @param cmd   Ver.: always
   2105           */

   \                                 In section .text, align 2, keep-with-next
   2106          boolean emberAfKeyEstablishmentClusterServerCommandReceivedCallback(EmberAfClusterCommand *cmd)
   2107          {
   2108            return FALSE;
   \                     emberAfKeyEstablishmentClusterServerCommandReceivedCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   2109          }
   2110          
   2111          /** @brief Set Default Poll Control
   2112           *
   2113           * This function will set the default poll control for the current network to
   2114           * control whether or not it can long poll.
   2115           *
   2116           * @param control   Ver.: always
   2117           */

   \                                 In section .text, align 2, keep-with-next
   2118          void emberAfSetDefaultPollControlCallback(EmberAfEventPollControl control)
   2119          {
   2120          }
   \                     emberAfSetDefaultPollControlCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   2121          
   2122          /** @brief Set Long Poll Interval Ms
   2123           *
   2124           * This function is only useful to end devices.  This function will set the long
   2125           * poll interval (in milliseconds) for the current network.  This interval is
   2126           * the maximum amount of time a child will wait between polls of its parent when
   2127           * it is not expecting data.
   2128           *
   2129           * @param longPollIntervalMs   Ver.: always
   2130           */

   \                                 In section .text, align 2, keep-with-next
   2131          void emberAfSetLongPollIntervalMsCallback(int32u longPollIntervalMs)
   2132          {
   2133          }
   \                     emberAfSetLongPollIntervalMsCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   2134          
   2135          /** @brief Set Long Poll Interval Qs
   2136           *
   2137           * This function is only useful to end devices.  This function will set the long
   2138           * poll interval (in quarter seconds) for the current network.  This interval is
   2139           * the maximum amount of time a child will wait between polls of its parent when
   2140           * it is not expecting data.
   2141           *
   2142           * @param longPollIntervalQs   Ver.: always
   2143           */

   \                                 In section .text, align 2, keep-with-next
   2144          void emberAfSetLongPollIntervalQsCallback(int32u longPollIntervalQs)
   2145          {
   2146          }
   \                     emberAfSetLongPollIntervalQsCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   2147          
   2148          /** @brief Set Short Poll Interval Ms
   2149           *
   2150           * This function is only useful to sleepy end devices.  This function will set
   2151           * the short poll interval (in milliseconds) for the current network.  This
   2152           * interval is the maximum amount of time a child will wait between polls of its
   2153           * parent when it is expecting data.
   2154           *
   2155           * @param shortPollIntervalMs   Ver.: always
   2156           */

   \                                 In section .text, align 2, keep-with-next
   2157          void emberAfSetShortPollIntervalMsCallback(int16u shortPollIntervalMs)
   2158          {
   2159          }
   \                     emberAfSetShortPollIntervalMsCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   2160          
   2161          /** @brief Set Short Poll Interval Qs
   2162           *
   2163           * This function is only useful to sleepy end devices.  This function will set
   2164           * the short poll interval (in quarter seconds) for the current network.  This
   2165           * interval is the maximum amount of time a child will wait between polls of its
   2166           * parent when it is expecting data.
   2167           *
   2168           * @param shortPollIntervalQs   Ver.: always
   2169           */

   \                                 In section .text, align 2, keep-with-next
   2170          void emberAfSetShortPollIntervalQsCallback(int16u shortPollIntervalQs)
   2171          {
   2172          }
   \                     emberAfSetShortPollIntervalQsCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   2173          
   2174          /** @brief Set Source Route Overhead
   2175           *
   2176           * This function is called by the framework when it has information about the
   2177           * source route overhead to a particular destination. The application may use
   2178           * this information to cache the source route overhead.
   2179           *
   2180           * @param destination The node id of the destination  Ver.: always
   2181           * @param overhead The overhead in bytes  Ver.: always
   2182           */

   \                                 In section .text, align 2, keep-with-next
   2183          void emberAfSetSourceRouteOverheadCallback(EmberNodeId destination,
   2184                                                     int8u overhead)
   2185          {
   2186          }
   \                     emberAfSetSourceRouteOverheadCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   2187          
   2188          /** @brief Set Time
   2189           *
   2190           * This callback should be implemented, if the device has access to real time
   2191           * clock, and has an ability to update that clock. The application framework
   2192           * expects to be passed the utcTime which is the number of seconds since the
   2193           * year 2000. Default implementation does nothing. Note: This function used to
   2194           * take time in year, month, day, hour, min, sec. We have changed this to
   2195           * utcTime in order to conserve code space.
   2196           *
   2197           * @param utcTime   Ver.: always
   2198           */

   \                                 In section .text, align 2, keep-with-next
   2199          void emberAfSetTimeCallback(int32u utcTime)
   2200          {
   2201          }
   \                     emberAfSetTimeCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   2202          
   2203          /** @brief Set Wake Timeout Bitmask
   2204           *
   2205           * This function is only useful to sleepy end devices.  This function will set
   2206           * the wake timeout bitmask for the current network.  The bitmask determines
   2207           * which tasks will timeout automatically and which tasks require manual removal
   2208           * from the task list.
   2209           *
   2210           * @param tasks   Ver.: always
   2211           */

   \                                 In section .text, align 2, keep-with-next
   2212          void emberAfSetWakeTimeoutBitmaskCallback(EmberAfApplicationTask tasks)
   2213          {
   2214          }
   \                     emberAfSetWakeTimeoutBitmaskCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   2215          
   2216          /** @brief Set Wake Timeout Ms
   2217           *
   2218           * This function is only useful to sleepy end devices.  This function will set
   2219           * the wake timeout (in milliseconds) for the current network.  This timeout is
   2220           * the maximum amount of time a child will wait for a task in the wake bitmask
   2221           * to finish.  While waiting, the device will short poll.
   2222           *
   2223           * @param wakeTimeoutMs   Ver.: always
   2224           */

   \                                 In section .text, align 2, keep-with-next
   2225          void emberAfSetWakeTimeoutMsCallback(int16u wakeTimeoutMs)
   2226          {
   2227          }
   \                     emberAfSetWakeTimeoutMsCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   2228          
   2229          /** @brief Set Wake Timeout Qs
   2230           *
   2231           * This function is only useful to sleepy end devices.  This function will set
   2232           * the wake timeout (in quarter seconds) for the current network.  This timeout
   2233           * is the maximum amount of time a child will wait for a task in the wake
   2234           * bitmask to finish.  While waiting, the device will short poll.
   2235           *
   2236           * @param wakeTimeoutQs   Ver.: always
   2237           */

   \                                 In section .text, align 2, keep-with-next
   2238          void emberAfSetWakeTimeoutQsCallback(int16u wakeTimeoutQs)
   2239          {
   2240          }
   \                     emberAfSetWakeTimeoutQsCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   2241          
   2242          /** @brief Stack Status
   2243           *
   2244           * This function is called by the application framework from the stack status
   2245           * handler.  This callbacks provides applications an opportunity to be notified
   2246           * of changes to the stack status and take appropriate action.  The return code
   2247           * from this callback is ignored by the framework.  The framework will always
   2248           * process the stack status after the callback returns.
   2249           *
   2250           * @param status   Ver.: always
   2251           */

   \                                 In section .text, align 2, keep-with-next
   2252          boolean emberAfStackStatusCallback(EmberStatus status)
   2253          {
   2254            return FALSE;
   \                     emberAfStackStatusCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   2255          }
   2256          
   2257          /** @brief Start Move
   2258           *
   2259           * This function is called to initiate the process for a device to move (rejoin)
   2260           * to a new parent.
   2261           *
   2262           */

   \                                 In section .text, align 2, keep-with-next
   2263          boolean emberAfStartMoveCallback(void)
   2264          {
   2265            return FALSE;
   \                     emberAfStartMoveCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   2266          }
   2267          
   2268          /** @brief Stop Move
   2269           *
   2270           * This function is called to cancel a previously scheduled move (rejoin) to a
   2271           * new parent.
   2272           *
   2273           */

   \                                 In section .text, align 2, keep-with-next
   2274          void emberAfStopMoveCallback(void)
   2275          {
   2276          }
   \                     emberAfStopMoveCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   2277          
   2278          /** @brief Trust Center Join
   2279           *
   2280           * This callback is called from within the application framework's
   2281           * implementation of emberTrustCenterJoinHandler or ezspTrustCenterJoinHandler.
   2282           * This callback provides the same arguments passed to the
   2283           * TrustCenterJoinHandler. For more information about the TrustCenterJoinHandler
   2284           * please see documentation included in stack/include/trust-center.h.
   2285           *
   2286           * @param newNodeId   Ver.: always
   2287           * @param newNodeEui64   Ver.: always
   2288           * @param parentOfNewNode   Ver.: always
   2289           * @param status   Ver.: always
   2290           * @param decision   Ver.: always
   2291           */

   \                                 In section .text, align 2, keep-with-next
   2292          void emberAfTrustCenterJoinCallback(EmberNodeId newNodeId,
   2293                                              EmberEUI64 newNodeEui64,
   2294                                              EmberNodeId parentOfNewNode,
   2295                                              EmberDeviceUpdate status,
   2296                                              EmberJoinDecision decision)
   2297          {
   2298          }
   \                     emberAfTrustCenterJoinCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   2299          
   2300          /** @brief Trust Center Keepalive Abort
   2301           *
   2302           * This callback is called when the device should abort the trust center
   2303           * keepalive process.
   2304           *
   2305           */

   \                                 In section .text, align 2, keep-with-next
   2306          void emberAfTrustCenterKeepaliveAbortCallback(void)
   2307          {
   2308          }
   \                     emberAfTrustCenterKeepaliveAbortCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   2309          
   2310          /** @brief Trust Center Keepalive Update
   2311           *
   2312           * This callback is called when the device finishes registration (successfully
   2313           * or otherwise) and the trust center keepalive process must be updated.  If the
   2314           * keepalive process has not been started, then it is started.  Otherwise if the
   2315           * keepalive is in the process of searching for the TC, it will process the
   2316           * result of that Trust Center search operation.
   2317           *
   2318           * @param registrationComplete   Ver.: always
   2319           */

   \                                 In section .text, align 2, keep-with-next
   2320          void emberAfTrustCenterKeepaliveUpdateCallback(boolean registrationComplete)
   2321          {
   2322          }
   \                     emberAfTrustCenterKeepaliveUpdateCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   2323          
   2324          /** @brief Write Attributes Response
   2325           *
   2326           * This function is called by the application framework when a Write Attributes
   2327           * Response command is received from an external device.  The application should
   2328           * return TRUE if the message was processed or FALSE if it was not.
   2329           *
   2330           * @param clusterId The cluster identifier of this response.  Ver.: always
   2331           * @param buffer Buffer containing the list of write attribute status records.
   2332           * Ver.: always
   2333           * @param bufLen The length in bytes of the list.  Ver.: always
   2334           */

   \                                 In section .text, align 2, keep-with-next
   2335          boolean emberAfWriteAttributesResponseCallback(EmberAfClusterId clusterId,
   2336                                                         int8u *buffer,
   2337                                                         int16u bufLen)
   2338          {
   2339            return FALSE;
   \                     emberAfWriteAttributesResponseCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   2340          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     emberAfInvalidImageId

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "callback-stub.c">`:
   \   00000000   0x63 0x61          DC8 "callback-stub.c"
   \              0x6C 0x6C    
   \              0x62 0x61    
   \              0x63 0x6B    
   \              0x2D 0x73    
   \              0x74 0x75    
   \              0x62 0x2E    
   \              0x63 0x00    

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   emberAfAddToCurrentAppTasksCallback
       0   emberAfAllowNetworkWriteAttributeCallback
       0   emberAfCheckForSleepCallback
       0   emberAfClearReportTableCallback
       0   emberAfClusterInitCallback
       0   emberAfClusterSecurityCustomCallback
       0   emberAfConfigureReportingCommandCallback
       0   emberAfConfigureReportingResponseCallback
       0   emberAfDefaultResponseCallback
       0   emberAfDiscoverAttributesResponseCallback
       0   emberAfDiscoverCommandsGeneratedResponseCallback
       0   emberAfDiscoverCommandsReceivedResponseCallback
       0   emberAfEepromInitCallback
       0   emberAfEepromNoteInitializedStateCallback
       0   emberAfEepromShutdownCallback
       0   emberAfExternalAttributeReadCallback
       0   emberAfExternalAttributeWriteCallback
       0   emberAfGetCurrentAppTasksCallback
       0   emberAfGetCurrentPollControlCallback
       0   emberAfGetCurrentPollIntervalMsCallback
       0   emberAfGetCurrentPollIntervalQsCallback
       0   emberAfGetCurrentTimeCallback
       0   emberAfGetDefaultPollControlCallback
       0   emberAfGetEndpointByIndexCallback
       0   emberAfGetEndpointDescriptionCallback
       0   emberAfGetEndpointInfoCallback
       0   emberAfGetLongPollIntervalMsCallback
       0   emberAfGetLongPollIntervalQsCallback
       0   emberAfGetShortPollIntervalMsCallback
       0   emberAfGetShortPollIntervalQsCallback
       0   emberAfGetSourceRouteOverheadCallback
       0   emberAfGetWakeTimeoutBitmaskCallback
       0   emberAfGetWakeTimeoutMsCallback
       0   emberAfGetWakeTimeoutQsCallback
       0   emberAfHalButtonIsrCallback
       0   emberAfInitiateInterPanKeyEstablishmentCallback
       0   emberAfInitiateKeyEstablishmentCallback
       0   emberAfInitiatePartnerLinkKeyExchangeCallback
       0   emberAfInterPanKeyEstablishmentCallback
       0   emberAfInterpanSendMessageCallback
       0   emberAfKeyEstablishmentCallback
       0   emberAfKeyEstablishmentClusterClientCommandReceivedCallback
       0   emberAfKeyEstablishmentClusterServerCommandReceivedCallback
       0   emberAfMainStartCallback
       0   emberAfMessageSentCallback
       0   emberAfNcpInitCallback
       0   emberAfNcpIsAwakeIsrCallback
       0   emberAfNetworkKeyUpdateCompleteCallback
       0   emberAfOnOffClusterLevelControlEffectCallback
       0   emberAfOtaBootloadCallback
       0   emberAfOtaClientBootloadCallback
       0   emberAfOtaClientCustomVerifyCallback
       0   emberAfOtaClientDownloadCompleteCallback
       0   emberAfOtaClientIncomingMessageRawCallback
       0   emberAfOtaClientStartCallback
       0   emberAfOtaClientVersionInfoCallback
       0   emberAfOtaPageRequestServerPolicyCallback
      24   emberAfOtaServerBlockSizeCallback
        24   -> emberAfIsCurrentSecurityProfileSmartEnergy
        24   -> emberAfMaximumApsPayloadLength
       0   emberAfOtaServerImageBlockRequestCallback
       0   emberAfOtaServerIncomingMessageRawCallback
       0   emberAfOtaServerQueryCallback
       0   emberAfOtaServerSendImageNotifyCallback
       0   emberAfOtaServerUpgradeEndRequestCallback
       0   emberAfOtaStorageCheckTempDataCallback
       0   emberAfOtaStorageClearTempDataCallback
       0   emberAfOtaStorageCloseCallback
         0   -> halInternalAssertFailed
       0   emberAfOtaStorageDriverDownloadFinishCallback
         0   -> halInternalAssertFailed
       8   emberAfOtaStorageDriverInitCallback
         8   -> halInternalAssertFailed
       8   emberAfOtaStorageDriverInvalidateImageCallback
         8   -> halInternalAssertFailed
       8   emberAfOtaStorageDriverPrepareToResumeDownloadCallback
         8   -> halInternalAssertFailed
       8   emberAfOtaStorageDriverReadCallback
         8   -> halInternalAssertFailed
       8   emberAfOtaStorageDriverRetrieveLastStoredOffsetCallback
         8   -> halInternalAssertFailed
       8   emberAfOtaStorageDriverWriteCallback
         8   -> halInternalAssertFailed
       0   emberAfOtaStorageFinishDownloadCallback
       0   emberAfOtaStorageGetCountCallback
       0   emberAfOtaStorageGetFullHeaderCallback
       0   emberAfOtaStorageGetTotalImageSizeCallback
       0   emberAfOtaStorageInitCallback
       0   emberAfOtaStorageIteratorFirstCallback
         0   -> __aeabi_memcpy4
       0   emberAfOtaStorageIteratorNextCallback
         0   -> __aeabi_memcpy4
       0   emberAfOtaStorageReadImageDataCallback
       0   emberAfOtaStorageSearchCallback
         0   -> __aeabi_memcpy4
       0   emberAfOtaStorageWriteTempDataCallback
       0   emberAfPartnerLinkKeyExchangeRequestCallback
       0   emberAfPartnerLinkKeyExchangeResponseCallback
       0   emberAfPerformingKeyEstablishmentCallback
       0   emberAfPluginCountersRolloverCallback
       0   emberAfPluginGroupsServerGetGroupNameCallback
       0   emberAfPluginGroupsServerGroupNamesSupportedCallback
       0   emberAfPluginGroupsServerSetGroupNameCallback
       0   emberAfPluginIdleSleepActiveCallback
       0   emberAfPluginIdleSleepOkToIdleCallback
       0   emberAfPluginIdleSleepOkToSleepCallback
       0   emberAfPluginIdleSleepWakeUpCallback
       0   emberAfPluginNetworkFindFinishedCallback
       0   emberAfPluginNetworkFindGetRadioPowerForChannelCallback
       0   emberAfPluginNetworkFindJoinCallback
       0   emberAfPostAttributeChangeCallback
       0   emberAfPreAttributeChangeCallback
       0   emberAfPreCliSendCallback
       0   emberAfPreMessageReceivedCallback
       0   emberAfPreMessageSendCallback
       0   emberAfPreNcpResetCallback
       0   emberAfReadAttributesResponseCallback
       0   emberAfReadReportingConfigurationCommandCallback
       0   emberAfReadReportingConfigurationResponseCallback
       0   emberAfRegistrationAbortCallback
       0   emberAfRegistrationCallback
       0   emberAfRegistrationStartCallback
       0   emberAfRemoteDeleteBindingPermissionCallback
       0   emberAfRemoteSetBindingPermissionCallback
       0   emberAfRemoveFromCurrentAppTasksCallback
       0   emberAfReportAttributesCallback
       0   emberAfReportingAttributeChangeCallback
       0   emberAfSchedulePollEventCallback
       0   emberAfSecurityInitCallback
       0   emberAfSetDefaultPollControlCallback
       0   emberAfSetLongPollIntervalMsCallback
       0   emberAfSetLongPollIntervalQsCallback
       0   emberAfSetShortPollIntervalMsCallback
       0   emberAfSetShortPollIntervalQsCallback
       0   emberAfSetSourceRouteOverheadCallback
       0   emberAfSetTimeCallback
       0   emberAfSetWakeTimeoutBitmaskCallback
       0   emberAfSetWakeTimeoutMsCallback
       0   emberAfSetWakeTimeoutQsCallback
       0   emberAfStackStatusCallback
       0   emberAfStartMoveCallback
       0   emberAfStopMoveCallback
       0   emberAfTrustCenterJoinCallback
       0   emberAfTrustCenterKeepaliveAbortCallback
       0   emberAfTrustCenterKeepaliveUpdateCallback
       0   emberAfWriteAttributesResponseCallback


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      16  ?<Constant "callback-stub.c">
       4  ??DataTable1
       8  ?Subroutine0
      12  ?Subroutine1
      12  ?Subroutine2
       8  ?Subroutine3
       2  emberAfAddToCurrentAppTasksCallback
       4  emberAfAllowNetworkWriteAttributeCallback
       4  emberAfCheckForSleepCallback
       4  emberAfClearReportTableCallback
       2  emberAfClusterInitCallback
       4  emberAfClusterSecurityCustomCallback
       4  emberAfConfigureReportingCommandCallback
       4  emberAfConfigureReportingResponseCallback
       4  emberAfDefaultResponseCallback
       4  emberAfDiscoverAttributesResponseCallback
       4  emberAfDiscoverCommandsGeneratedResponseCallback
       4  emberAfDiscoverCommandsReceivedResponseCallback
       2  emberAfEepromInitCallback
       2  emberAfEepromNoteInitializedStateCallback
       2  emberAfEepromShutdownCallback
       4  emberAfExternalAttributeReadCallback
       4  emberAfExternalAttributeWriteCallback
       4  emberAfGetCurrentAppTasksCallback
       4  emberAfGetCurrentPollControlCallback
       4  emberAfGetCurrentPollIntervalMsCallback
       4  emberAfGetCurrentPollIntervalQsCallback
       4  emberAfGetCurrentTimeCallback
       4  emberAfGetDefaultPollControlCallback
       4  emberAfGetEndpointByIndexCallback
       4  emberAfGetEndpointDescriptionCallback
       4  emberAfGetEndpointInfoCallback
       4  emberAfGetLongPollIntervalMsCallback
       4  emberAfGetLongPollIntervalQsCallback
       4  emberAfGetShortPollIntervalMsCallback
       4  emberAfGetShortPollIntervalQsCallback
       4  emberAfGetSourceRouteOverheadCallback
       4  emberAfGetWakeTimeoutBitmaskCallback
       4  emberAfGetWakeTimeoutMsCallback
       4  emberAfGetWakeTimeoutQsCallback
       2  emberAfHalButtonIsrCallback
       4  emberAfInitiateInterPanKeyEstablishmentCallback
       4  emberAfInitiateKeyEstablishmentCallback
       4  emberAfInitiatePartnerLinkKeyExchangeCallback
       4  emberAfInterPanKeyEstablishmentCallback
       4  emberAfInterpanSendMessageCallback
       4  emberAfKeyEstablishmentCallback
       4  emberAfKeyEstablishmentClusterClientCommandReceivedCallback
       4  emberAfKeyEstablishmentClusterServerCommandReceivedCallback
       4  emberAfMainStartCallback
       4  emberAfMessageSentCallback
       2  emberAfNcpInitCallback
       2  emberAfNcpIsAwakeIsrCallback
       2  emberAfNetworkKeyUpdateCompleteCallback
       2  emberAfOnOffClusterLevelControlEffectCallback
       4  emberAfOtaBootloadCallback
       2  emberAfOtaClientBootloadCallback
       4  emberAfOtaClientCustomVerifyCallback
       4  emberAfOtaClientDownloadCompleteCallback
       4  emberAfOtaClientIncomingMessageRawCallback
       2  emberAfOtaClientStartCallback
       2  emberAfOtaClientVersionInfoCallback
       4  emberAfOtaPageRequestServerPolicyCallback
      48  emberAfOtaServerBlockSizeCallback
       4  emberAfOtaServerImageBlockRequestCallback
       4  emberAfOtaServerIncomingMessageRawCallback
       4  emberAfOtaServerQueryCallback
       4  emberAfOtaServerSendImageNotifyCallback
       8  emberAfOtaServerUpgradeEndRequestCallback
       4  emberAfOtaStorageCheckTempDataCallback
       4  emberAfOtaStorageClearTempDataCallback
       6  emberAfOtaStorageCloseCallback
       4  emberAfOtaStorageDriverDownloadFinishCallback
       8  emberAfOtaStorageDriverInitCallback
       8  emberAfOtaStorageDriverInvalidateImageCallback
       6  emberAfOtaStorageDriverPrepareToResumeDownloadCallback
       6  emberAfOtaStorageDriverReadCallback
       8  emberAfOtaStorageDriverRetrieveLastStoredOffsetCallback
       8  emberAfOtaStorageDriverWriteCallback
       4  emberAfOtaStorageFinishDownloadCallback
       4  emberAfOtaStorageGetCountCallback
       4  emberAfOtaStorageGetFullHeaderCallback
       4  emberAfOtaStorageGetTotalImageSizeCallback
       4  emberAfOtaStorageInitCallback
       2  emberAfOtaStorageIteratorFirstCallback
       2  emberAfOtaStorageIteratorNextCallback
       4  emberAfOtaStorageReadImageDataCallback
       2  emberAfOtaStorageSearchCallback
       4  emberAfOtaStorageWriteTempDataCallback
       4  emberAfPartnerLinkKeyExchangeRequestCallback
       2  emberAfPartnerLinkKeyExchangeResponseCallback
       4  emberAfPerformingKeyEstablishmentCallback
       2  emberAfPluginCountersRolloverCallback
       2  emberAfPluginGroupsServerGetGroupNameCallback
       4  emberAfPluginGroupsServerGroupNamesSupportedCallback
       2  emberAfPluginGroupsServerSetGroupNameCallback
       2  emberAfPluginIdleSleepActiveCallback
       4  emberAfPluginIdleSleepOkToIdleCallback
       4  emberAfPluginIdleSleepOkToSleepCallback
       2  emberAfPluginIdleSleepWakeUpCallback
       2  emberAfPluginNetworkFindFinishedCallback
       4  emberAfPluginNetworkFindGetRadioPowerForChannelCallback
       4  emberAfPluginNetworkFindJoinCallback
       2  emberAfPostAttributeChangeCallback
       4  emberAfPreAttributeChangeCallback
       4  emberAfPreCliSendCallback
       4  emberAfPreMessageReceivedCallback
       4  emberAfPreMessageSendCallback
       2  emberAfPreNcpResetCallback
       4  emberAfReadAttributesResponseCallback
       4  emberAfReadReportingConfigurationCommandCallback
       4  emberAfReadReportingConfigurationResponseCallback
       2  emberAfRegistrationAbortCallback
       2  emberAfRegistrationCallback
       4  emberAfRegistrationStartCallback
       4  emberAfRemoteDeleteBindingPermissionCallback
       4  emberAfRemoteSetBindingPermissionCallback
       2  emberAfRemoveFromCurrentAppTasksCallback
       4  emberAfReportAttributesCallback
       2  emberAfReportingAttributeChangeCallback
       2  emberAfSchedulePollEventCallback
       2  emberAfSecurityInitCallback
       2  emberAfSetDefaultPollControlCallback
       2  emberAfSetLongPollIntervalMsCallback
       2  emberAfSetLongPollIntervalQsCallback
       2  emberAfSetShortPollIntervalMsCallback
       2  emberAfSetShortPollIntervalQsCallback
       2  emberAfSetSourceRouteOverheadCallback
       2  emberAfSetTimeCallback
       2  emberAfSetWakeTimeoutBitmaskCallback
       2  emberAfSetWakeTimeoutMsCallback
       2  emberAfSetWakeTimeoutQsCallback
       4  emberAfStackStatusCallback
       4  emberAfStartMoveCallback
       2  emberAfStopMoveCallback
       2  emberAfTrustCenterJoinCallback
       2  emberAfTrustCenterKeepaliveAbortCallback
       2  emberAfTrustCenterKeepaliveUpdateCallback
       4  emberAfWriteAttributesResponseCallback

 
 572 bytes in section .text
 
 572 bytes of CODE memory

Errors: none
Warnings: none
