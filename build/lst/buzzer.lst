###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        09/Sep/2015  17:11:57
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  E:\Zigbee\EmberZNet5.6.0-GA\hal\micro\cortexm3\buzzer.c
#    Command line =  
#        E:\Zigbee\EmberZNet5.6.0-GA\hal\micro\cortexm3\buzzer.c -D NULL_BTL -D
#        CORTEXM3 -D CORTEXM3_EMBER_MICRO -D CORTEXM3_EM357 -D PHY_EM3XX -D
#        "APPLICATION_TOKEN_HEADER=\"app/framework/util/tokens.h\"" -D
#        "ATTRIBUTE_STORAGE_CONFIGURATION=\"app/builder/ZigbeeRoute/ZigbeeRoute_endpoint_config.h\""
#        -D "BOARD_HEADER=\"app\builder\ZigbeeRoute\ZigbeeRoute_board.h\"" -D
#        "CONFIGURATION_HEADER=\"app/framework/util/config.h\"" -D
#        "GENERATED_TOKEN_HEADER=\"app/builder/ZigbeeRoute/ZigbeeRoute_tokens.h\""
#        -D "PLATFORM_HEADER=\"hal/micro/cortexm3/compiler/iar.h\"" -D
#        "ZA_GENERATED_HEADER=\"app/builder/ZigbeeRoute/ZigbeeRoute.h\"" -D
#        "__SOURCEFILE__=\"buzzer.c\"" -lC
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\build\lst\
#        --diag_suppress Pa050 -o
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\build\obj\ --debug
#        --endian=little --cpu=Cortex-M3 --no_path_in_file_macros
#        --separate_cluster_for_initialized_variables -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\Zigbee\EmberZNet5.6.0-GA\hal\micro\cortexm3\ -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\ -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\ -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\app\framework\include\
#        -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\app\util\
#        -I E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\stack\
#        -I E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\hal\
#        -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\hal\..\
#        -Ohz --use_c++_inline
#    List file    =  
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\build\lst\buzzer.lst
#    Object file  =  
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\build\obj\buzzer.o
#
###############################################################################

E:\Zigbee\EmberZNet5.6.0-GA\hal\micro\cortexm3\buzzer.c
      1          /** @file hal/micro/cortexm3/buzzer.c
      2           *  @brief  Sample API functions for using a timer to play tunes on a buzzer.
      3           *
      4           * <!-- Copyright 2015 Silicon Laboratories, Inc.                        *80*-->
      5           */
      6          
      7          #include PLATFORM_HEADER
      8          #include "stack/include/ember.h"
      9          #include "hal/hal.h"
     10          
     11          // Tune state

   \                                 In section .bss, align 4
     12          int8u PGM *currentTune = NULL;
     13          int8u tunePos = 0;
   \                     tunePos:
   \   00000000                      DS8 1
   \   00000001                      DS8 1
     14          int16u currentDuration = 0;
   \                     currentDuration:
   \   00000002                      DS8 2
   \                     currentTune:
   \   00000004                      DS8 4

   \                                 In section .data, align 1
     15          boolean tuneDone=TRUE;
   \                     tuneDone:
   \   00000000   0x01               DC8 1
     16          
     17          // Keep the defaults if not defined on the board file. Default is TMR1
     18          #ifndef BUZZER_CLK
     19          #define BUZZER_CLK TIM1_OR
     20          #endif
     21          
     22          #ifndef BUZZER_PSC
     23          #define BUZZER_PSC TIM1_PSC
     24          #endif
     25          
     26          #ifndef BUZZER_UPDATE
     27          #define BUZZER_UPDATE TIM1_EGR
     28          #endif
     29          
     30          #ifndef BUZZER_OUTPUT_CFG
     31          #define BUZZER_OUTPUT_CFG TIM1_CCMR1
     32          #endif
     33          
     34          #ifndef BUZZER_OUTPUT_MODE
     35          #define BUZZER_OUTPUT_MODE (0x3 << TIM_OC2M_BIT)
     36          #endif
     37          
     38          #ifndef BUZZER_OUTPUT_ENABLE
     39          #define BUZZER_OUTPUT_ENABLE TIM1_CCER
     40          #endif
     41          
     42          #ifndef BUZZER_OUTPUT_ENABLE_CHANNEL
     43          #define BUZZER_OUTPUT_ENABLE_CHANNEL TIM_CC2E
     44          #endif
     45          
     46          #ifndef BUZZER_TOP
     47          #define BUZZER_TOP TIM1_ARR
     48          #endif
     49          
     50          #ifndef BUZZER_CNT
     51          #define BUZZER_CNT TIM1_CNT
     52          #endif
     53          
     54          #ifndef BUZZER_INT_MASK
     55          #define BUZZER_INT_MASK INT_TIM1CFG
     56          #endif
     57          
     58          #ifndef BUZZER_INT
     59          #define BUZZER_INT INT_TIM1FLAG
     60          #endif
     61          
     62          #ifndef BUZZER_BIT
     63          #define BUZZER_BIT INT_TIMUIF
     64          #endif
     65          
     66          #ifndef BUZZER_ENABLE
     67          #define BUZZER_ENABLE TIM1_CR1
     68          #endif
     69          
     70          #ifndef BUZZER_TEMPO
     71          #define BUZZER_TEMPO 200
     72          #endif
     73          
     74          // EO defaults
     75          

   \                                 In section .text, align 2, keep-with-next
     76          static void endTune(void)
     77          {
     78              // Also useful for "cleaning out the timer."
     79              BUZZER_INT_MASK &= ~BUZZER_BIT; //disable the Timer, CNT ?= TOP interrupt
   \                     endTune: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable4  ;; 0x4000a840
   \   00000002   0x....             LDR.N    R2,??DataTable4_1
   \   00000004   0x6801             LDR      R1,[R0, #+0]
   \   00000006   0x0849             LSRS     R1,R1,#+1
   \   00000008   0x0049             LSLS     R1,R1,#+1
   \   0000000A   0x6001             STR      R1,[R0, #+0]
     80              INT_CFGSET &= ~INT_TIM1; //stop the interrupts
   \   0000000C   0x....             LDR.N    R0,??DataTable4_2  ;; 0xe000e100
   \   0000000E   0x6801             LDR      R1,[R0, #+0]
   \   00000010   0x0849             LSRS     R1,R1,#+1
   \   00000012   0x0049             LSLS     R1,R1,#+1
   \   00000014   0x6001             STR      R1,[R0, #+0]
     81              BUZZER_OUTPUT_ENABLE  = 0; //disable output
   \   00000016   0x2100             MOVS     R1,#+0
   \   00000018   0x....             LDR.N    R0,??DataTable4_3  ;; 0x4000e000
   \   0000001A   0x6201             STR      R1,[R0, #+32]
     82              BUZZER_ENABLE = 0;; //disable timer
   \   0000001C   0x6001             STR      R1,[R0, #+0]
     83              tuneDone = TRUE;
   \   0000001E   0x2101             MOVS     R1,#+1
   \   00000020   0x7011             STRB     R1,[R2, #+0]
     84              BUZZER_TOP = 0;
   \   00000022   0x2100             MOVS     R1,#+0
   \   00000024   0x62C1             STR      R1,[R0, #+44]
     85              BUZZER_CNT = 0;
   \   00000026   0x6241             STR      R1,[R0, #+36]
     86          }
   \   00000028   0x4770             BX       LR               ;; return
     87          

   \                                 In section .text, align 2, keep-with-next
     88          static void setUpNextNoteOrStop(void)
     89          {
   \                     setUpNextNoteOrStop: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
     90            if (currentTune[tunePos + 1]) {
   \   00000002   0x....             LDR.N    R0,??DataTable4_4
   \   00000004   0x7801             LDRB     R1,[R0, #+0]
   \   00000006   0x6846             LDR      R6,[R0, #+4]
   \   00000008   0x198A             ADDS     R2,R1,R6
   \   0000000A   0x7853             LDRB     R3,[R2, #+1]
   \   0000000C   0xB313             CBZ.N    R3,??setUpNextNoteOrStop_0
     91              if (currentTune[tunePos]) {
   \   0000000E   0x5D8F             LDRB     R7,[R1, R6]
   \   00000010   0x....             LDR.N    R4,??DataTable4_5  ;; 0x4000e020
   \   00000012   0x23C8             MOVS     R3,#+200
   \   00000014   0xB17F             CBZ.N    R7,??setUpNextNoteOrStop_1
     92                // generate a note
     93                BUZZER_TOP = currentTune[tunePos]*13; //magical conversion
   \   00000016   0x250D             MOVS     R5,#+13
   \   00000018   0x436F             MULS     R7,R7,R5
   \   0000001A   0x60E7             STR      R7,[R4, #+12]
   \   0000001C   0x250F             MOVS     R5,#+15
     94                BUZZER_CNT = 0; //force the counter back to zero to prevent missing BUZZER_TOP
   \   0000001E   0x2700             MOVS     R7,#+0
   \   00000020   0x6067             STR      R7,[R4, #+4]
     95                BUZZER_OUTPUT_ENABLE = BUZZER_OUTPUT_ENABLE_CHANNEL; //enable channel output
   \   00000022   0x2710             MOVS     R7,#+16
   \   00000024   0x6027             STR      R7,[R4, #+0]
     96                // work some magic to determine the duration based upon the frequency
     97                // of the note we are currently playing.
     98                currentDuration = (((int16u)BUZZER_TEMPO
     99                                    * (int16u)currentTune[tunePos + 1])
    100                                   / (currentTune[tunePos] / 15));
   \   00000026   0x5D8C             LDRB     R4,[R1, R6]
   \   00000028   0x7852             LDRB     R2,[R2, #+1]
   \   0000002A   0xFB94 0xF4F5      SDIV     R4,R4,R5
   \   0000002E   0x435A             MULS     R2,R3,R2
   \   00000030   0xFB92 0xF2F4      SDIV     R2,R2,R4
   \   00000034   0xE00A             B.N      ??setUpNextNoteOrStop_2
    101              } else {
    102                // generate a pause
    103                BUZZER_TOP = 403; //simulated a note (NOTE_B4*13), but output is disabled
   \                     ??setUpNextNoteOrStop_1: (+1)
   \   00000036   0xF240 0x1593      MOVW     R5,#+403
   \   0000003A   0x60E5             STR      R5,[R4, #+12]
    104                BUZZER_CNT = 0; //force the counter back to zero to prevent missing BUZZER_TOP
   \   0000003C   0x2500             MOVS     R5,#+0
   \   0000003E   0x6065             STR      R5,[R4, #+4]
    105                BUZZER_OUTPUT_ENABLE = 0; //Output waveform disabled for silence
   \   00000040   0x6025             STR      R5,[R4, #+0]
    106                currentDuration = (((int16u)BUZZER_TEMPO
    107                                    * (int16u)currentTune[tunePos + 1])
    108                                   / (31 / 15));
   \   00000042   0x7852             LDRB     R2,[R2, #+1]
   \   00000044   0x435A             MULS     R2,R3,R2
   \   00000046   0xEB02 0x72D2      ADD      R2,R2,R2, LSR #+31
   \   0000004A   0x1052             ASRS     R2,R2,#+1
    109              }
    110              tunePos += 2;
   \                     ??setUpNextNoteOrStop_2: (+1)
   \   0000004C   0x1C89             ADDS     R1,R1,#+2
   \   0000004E   0x8042             STRH     R2,[R0, #+2]
   \   00000050   0x7001             STRB     R1,[R0, #+0]
   \   00000052   0xBDF1             POP      {R0,R4-R7,PC}
    111            } else {
    112              endTune();
   \                     ??setUpNextNoteOrStop_0: (+1)
   \   00000054   0xE8BD 0x40F1      POP      {R0,R4-R7,LR}
   \   00000058   0x....             B.N      endTune
    113            }
    114          }
    115          

   \                                 In section .text, align 2, keep-with-next
    116          void halPlayTune_P(int8u PGM *tune, boolean bkg)
    117          {
   \                     halPlayTune_P: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4606             MOV      R6,R0
   \   00000004   0x460C             MOV      R4,R1
    118            //Start from a fully disabled timer.  (Tune's cannot be chained with
    119            //this play tune functionality.)
    120            endTune();
   \   00000006   0x.... 0x....      BL       endTune
    121          
    122            //According to emulator.h, buzzer is on pin 15 which is mapped
    123            //to channel 2 of TMR1
    124            BUZZER_CLK = 0; //use 12MHz clock
   \   0000000A   0x....             LDR.N    R5,??DataTable4_3  ;; 0x4000e000
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x6528             STR      R0,[R5, #+80]
   \   00000010   0x2100             MOVS     R1,#+0
    125            BUZZER_PSC = 5; //2^5=32 -> 12MHz/32 = 375kHz = 2.6us tick
   \   00000012   0x2005             MOVS     R0,#+5
   \   00000014   0x62A8             STR      R0,[R5, #+40]
    126            BUZZER_UPDATE = 1; //trigger update event to load new prescaler value
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0x6168             STR      R0,[R5, #+20]
    127            BUZZER_OUTPUT_CFG  = 0; //start from a zeroed configuration
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x61A8             STR      R0,[R5, #+24]
    128            //Output waveform: toggle on CNT reaching TOP
    129            BUZZER_OUTPUT_CFG |= BUZZER_OUTPUT_MODE;
   \   0000001E   0x69A8             LDR      R0,[R5, #+24]
   \   00000020   0xF440 0x5040      ORR      R0,R0,#0x3000
   \   00000024   0x61A8             STR      R0,[R5, #+24]
    130          
    131            currentTune = tune;
   \   00000026   0x....             LDR.N    R0,??DataTable4_4
   \   00000028   0x6046             STR      R6,[R0, #+4]
    132            tunePos = 0;
   \   0000002A   0x7001             STRB     R1,[R0, #+0]
    133            tuneDone = FALSE;
   \   0000002C   0x....             LDR.N    R6,??DataTable4_1
   \   0000002E   0x7031             STRB     R1,[R6, #+0]
    134          
    135            ATOMIC(
    136              BUZZER_INT_MASK = BUZZER_BIT; //enable the Timer 1, CNT ?= TOP interrupt
    137              INT_CFGSET |= INT_TIM1; //enable top level timer interrupts
    138              BUZZER_ENABLE |= TIM_CEN; //enable counting
    139              setUpNextNoteOrStop();
    140            )
   \   00000030   0x.... 0x....      BL       _disableBasePri
   \   00000034   0x4607             MOV      R7,R0
   \   00000036   0x....             LDR.N    R1,??DataTable4  ;; 0x4000a840
   \   00000038   0x2001             MOVS     R0,#+1
   \   0000003A   0x6008             STR      R0,[R1, #+0]
   \   0000003C   0x....             LDR.N    R0,??DataTable4_2  ;; 0xe000e100
   \   0000003E   0x6801             LDR      R1,[R0, #+0]
   \   00000040   0xF041 0x0101      ORR      R1,R1,#0x1
   \   00000044   0x6001             STR      R1,[R0, #+0]
   \   00000046   0x6828             LDR      R0,[R5, #+0]
   \   00000048   0xF040 0x0001      ORR      R0,R0,#0x1
   \   0000004C   0x6028             STR      R0,[R5, #+0]
   \   0000004E   0x.... 0x....      BL       setUpNextNoteOrStop
   \   00000052   0x4638             MOV      R0,R7
   \   00000054   0x.... 0x....      BL       _writeBasePri
   \   00000058   0xE001             B.N      ??halPlayTune_P_0
    141            while (!bkg && !tuneDone) {
    142              halResetWatchdog();
   \                     ??halPlayTune_P_1: (+1)
   \   0000005A   0x.... 0x....      BL       halInternalResetWatchDog
    143            }
   \                     ??halPlayTune_P_0: (+1)
   \   0000005E   0x7830             LDRB     R0,[R6, #+0]
   \   00000060   0x4320             ORRS     R0,R0,R4
   \   00000062   0xD0FA             BEQ.N    ??halPlayTune_P_1
    144          }
   \   00000064   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    145          

   \                                 In section .text, align 2, keep-with-next
    146          void halTimer1Isr(void)
    147          {
   \                     halTimer1Isr: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    148            if (currentDuration-- == 0) {
   \   00000002   0x....             LDR.N    R0,??DataTable4_4
   \   00000004   0x8841             LDRH     R1,[R0, #+2]
   \   00000006   0x1E4A             SUBS     R2,R1,#+1
   \   00000008   0x8042             STRH     R2,[R0, #+2]
   \   0000000A   0xB909             CBNZ.N   R1,??halTimer1Isr_0
    149              setUpNextNoteOrStop();
   \   0000000C   0x.... 0x....      BL       setUpNextNoteOrStop
    150            }
    151            //clear interrupt
    152            BUZZER_INT = 0xFFFFFFFF;
   \                     ??halTimer1Isr_0: (+1)
   \   00000010   0xF04F 0x30FF      MOV      R0,#-1
   \   00000014   0x....             LDR.N    R1,??DataTable4_6  ;; 0x4000a800
   \   00000016   0x6008             STR      R0,[R1, #+0]
    153          }
   \   00000018   0xBD01             POP      {R0,PC}          ;; return
    154          

   \                                 In section .text, align 4, keep-with-next
    155          int8u PGM hereIamTune[] = {
   \                     hereIamTune:
   \   00000000   0x1F 0x01          DC8 31, 1, 0, 1, 31, 1, 0, 1, 31, 1, 0, 1, 15, 5, 0, 0
   \              0x00 0x01    
   \              0x1F 0x01    
   \              0x00 0x01    
   \              0x1F 0x01    
   \              0x00 0x01    
   \              0x0F 0x05    
   \              0x00 0x00    
    156            NOTE_B4,  1,
    157            0,        1,
    158            NOTE_B4,  1,
    159            0,        1,
    160            NOTE_B4,  1,
    161            0,        1,
    162            NOTE_B5,  5,
    163            0,        0
    164          };
    165          

   \                                 In section .text, align 2, keep-with-next
    166          void halStackIndicatePresence(void)
    167          {
    168            halPlayTune_P(hereIamTune, TRUE);
   \                     halStackIndicatePresence: (+1)
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0x.... 0x....      ADR.W    R0,hereIamTune
   \   00000006   0x....             B.N      halPlayTune_P
    169          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x4000A840         DC32     0x4000a840

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x........         DC32     tuneDone

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x4000E000         DC32     0x4000e000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x........         DC32     tunePos

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x4000E020         DC32     0x4000e020

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \   00000000   0x4000A800         DC32     0x4000a800

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   endTune
      24   halPlayTune_P
        24   -> _disableBasePri
        24   -> _writeBasePri
        24   -> endTune
        24   -> halInternalResetWatchDog
        24   -> setUpNextNoteOrStop
       0   halStackIndicatePresence
         0   -> halPlayTune_P
       8   halTimer1Isr
         8   -> setUpNextNoteOrStop
      24   setUpNextNoteOrStop
         0   -> endTune


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
      42  endTune
     102  halPlayTune_P
       8  halStackIndicatePresence
      26  halTimer1Isr
      16  hereIamTune
      90  setUpNextNoteOrStop
       1  tuneDone
       8  tunePos
          currentDuration
          currentTune

 
   8 bytes in section .bss
   1 byte  in section .data
 312 bytes in section .text
 
 312 bytes of CODE memory
   9 bytes of DATA memory

Errors: none
Warnings: none
