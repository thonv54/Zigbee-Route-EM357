###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        09/Sep/2015  17:12:24
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\Zigbee\EmberZNet5.6.0-GA\hal\micro\cortexm3\usb\em_usbhal.c
#    Command line =  
#        E:\Zigbee\EmberZNet5.6.0-GA\hal\micro\cortexm3\usb\em_usbhal.c -D
#        NULL_BTL -D CORTEXM3 -D CORTEXM3_EMBER_MICRO -D CORTEXM3_EM357 -D
#        PHY_EM3XX -D
#        "APPLICATION_TOKEN_HEADER=\"app/framework/util/tokens.h\"" -D
#        "ATTRIBUTE_STORAGE_CONFIGURATION=\"app/builder/ZigbeeRoute/ZigbeeRoute_endpoint_config.h\""
#        -D "BOARD_HEADER=\"app\builder\ZigbeeRoute\ZigbeeRoute_board.h\"" -D
#        "CONFIGURATION_HEADER=\"app/framework/util/config.h\"" -D
#        "GENERATED_TOKEN_HEADER=\"app/builder/ZigbeeRoute/ZigbeeRoute_tokens.h\""
#        -D "PLATFORM_HEADER=\"hal/micro/cortexm3/compiler/iar.h\"" -D
#        "ZA_GENERATED_HEADER=\"app/builder/ZigbeeRoute/ZigbeeRoute.h\"" -D
#        "__SOURCEFILE__=\"em_usbhal.c\"" -lC
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\build\lst\
#        --diag_suppress Pa050 -o
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\build\obj\ --debug
#        --endian=little --cpu=Cortex-M3 --no_path_in_file_macros
#        --separate_cluster_for_initialized_variables -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\Zigbee\EmberZNet5.6.0-GA\hal\micro\cortexm3\usb\ -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\ -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\ -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\app\framework\include\
#        -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\app\util\
#        -I E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\stack\
#        -I E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\hal\
#        -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\hal\..\
#        -Ohz --use_c++_inline
#    List file    =  
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\build\lst\em_usbhal.lst
#    Object file  =  
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\build\obj\em_usbhal.o
#
###############################################################################

E:\Zigbee\EmberZNet5.6.0-GA\hal\micro\cortexm3\usb\em_usbhal.c
      1          /**************************************************************************//**
      2           * @file
      3           * @brief USB protocol stack library, low level USB peripheral access.
      4           * @author Nathaniel Ting
      5           * @version 3.20.3
      6           * <!-- Copyright 2013 by Silicon Laboratories. All rights reserved.     *80*-->
      7           *****************************************************************************/
      8          
      9          #include PLATFORM_HEADER
     10          #include "stack/include/ember.h"
     11          #include "hal/hal.h"
     12          
     13          #if defined(CORTEXM3_EM35X_USB)
     14          #include "em_usb.h"
     15          #include "em_usbtypes.h"
     16          #include "em_usbhal.h"
     17          
     18          
     19          /** @cond DO_NOT_INCLUDE_WITH_DOXYGEN */
     20          
     21          
     22          boolean usbVbusPresent;
     23          extern USBD_Device_TypeDef *dev;
     24          
     25          ALIGNMENT(8)
     26          EndPointUnion usbBufferA = {0,};
     27          int8u *EPOUTBUF[7] = {usbBufferA.eps.ep0OUT,
     28                              usbBufferA.eps.ep1OUT,
     29                              usbBufferA.eps.ep2OUT,
     30                              usbBufferA.eps.ep3OUT,
     31                              usbBufferA.eps.ep4OUT,
     32                              usbBufferA.eps.ep5OUT,
     33                              usbBufferA.eps.ep6OUT};
     34          int8u *EPINBUF[7]  = {usbBufferA.eps.ep0IN,
     35                                usbBufferA.eps.ep1IN,
     36                                usbBufferA.eps.ep2IN,
     37                                usbBufferA.eps.ep3IN,
     38                                usbBufferA.eps.ep4IN,
     39                                usbBufferA.eps.ep5IN,
     40                                usbBufferA.eps.ep6IN};
     41          volatile int32u *EPOUTBUFSIZE[7] = {&USB_RXBUFSIZEEP0A,
     42                                              &USB_RXBUFSIZEEP1A,
     43                                              &USB_RXBUFSIZEEP2A,
     44                                              &USB_RXBUFSIZEEP3A,
     45                                              &USB_RXBUFSIZEEP4A,
     46                                              &USB_RXBUFSIZEEP5A,
     47                                              &USB_RXBUFSIZEEP6A};
     48          
     49          volatile int32u *EPINBUFSIZE[7] =  {&USB_TXBUFSIZEEP0A,
     50                                              &USB_TXBUFSIZEEP1A,
     51                                              &USB_TXBUFSIZEEP2A,
     52                                              &USB_TXBUFSIZEEP3A,
     53                                              &USB_TXBUFSIZEEP4A,
     54                                              &USB_TXBUFSIZEEP5A,
     55                                              &USB_TXBUFSIZEEP6A};
     56          void USBDHAL_Connect( void )
     57          {
     58            #if USB_SELFPWRD_STATE==1 && defined(VBUSMON)
     59          
     60            //For self-powered devices, The USB specification requires that the pull-up
     61            //resistor is disconnected if VBUS is not connected.
     62            vbusMonCfg();
     63            if(usbVbusPresent) {
     64              //Set ENUMCTRL ouput-high to enumerate.
     65              ENUMCTRL_SETCFG(GPIOCFG_OUT);
     66              ENUMCTRL_SET();
     67            }
     68            #else // USB_SELFPWRD_STATE==1 && defined(VBUSMON)
     69              //Set ENUMCTRL ouput-high to enumerate.
     70              ENUMCTRL_SETCFG(GPIOCFG_OUT);
     71              ENUMCTRL_SET();
     72            #endif // USB_SELFPWRD_STATE==1 && defined(VBUSMON)
     73          
     74          }
     75          
     76          void USBDHAL_Disconnect( void )
     77          {
     78            ENUMCTRL_SETCFG(GPIOCFG_IN);
     79            ENUMCTRL_CLR();
     80          }
     81          
     82          USB_Status_TypeDef USBDHAL_CoreInit( int32u totalRxFifoSize,
     83                                               int32u totalTxFifoSize )
     84          {
     85          
     86            //Configure PA0 and PA1 in analog mode for USB
     87            SET_REG_FIELD(GPIO_PACFGL, PA0_CFG, GPIOCFG_ANALOG);
     88            SET_REG_FIELD(GPIO_PACFGL, PA1_CFG, GPIOCFG_ANALOG);
     89            
     90            USB_BUFBASEA = (int32u)usbBufferA.allEps;
     91            MEMSET(usbBufferA.allEps, 0, USB_BUFFER_SIZE);
     92          
     93            // Double buffering currently not supported
     94            // #ifdef USB_DOUBLE_BUFFER  
     95            //   USB_BUFBASEB = (int32u)usbBufferB.allEps;
     96            //   MEMSET(usbBufferB.allEps, 0, USB_BUFFER_SIZE);
     97            //   //Refer to "handle buffer B" in the driveEp3Tx() function above
     98            //   //to learn why double buffering is not enabled by default.
     99            //   
    100            //   //Enable double buffering bulk EP3.
    101            //   USB_CTRL |= (USB_ENBUFOUTEP3B | USB_ENBUFINEP3B);
    102            // #endif // USB_DOUBLE_BUFFER
    103            
    104            //Use the SELFPWDRD and REMOTEWKUPEN state defines to set the appropriate
    105            //bits in USB_CTRL
    106            USB_CTRL = (USB_CTRL & (~(USB_SELFPWRD_MASK | USB_REMOTEWKUPEN_MASK))) |
    107                       ((USB_SELFPWRD_STATE<<USB_SELFPWRD_BIT) |
    108                        (USB_REMOTEWKUPEN_STATE<<USB_REMOTEWKUPEN_BIT));
    109          
    110          #ifdef  EMBER_EMU_TEST
    111            //Select which GPIO output is used for connect/disconnect. Any
    112            //value > 47, selects disconnected state.
    113            EMU_USB_DISCONNECT = PORTA_PIN(2);
    114          #endif //EMBER_EMU_TEST
    115            
    116          
    117            return USB_STATUS_OK;
    118          }
    119          
    120          
    121          void USBDHAL_AbortAllTransfers( USB_Status_TypeDef reason )
    122          {
    123            int i;
    124            USBD_Ep_TypeDef *ep;
    125            USB_XferCompleteCb_TypeDef callback;
    126          
    127            if ( reason != USB_STATUS_DEVICE_RESET )
    128            {
    129              // unsupported
    130              // USBDHAL_AbortAllEps();
    131            }
    132          
    133            for ( i = 1; i <= NUM_EP_USED; i++ )
    134            {
    135              ep = &(dev->ep[i]);
    136              if ( ep->state != D_EP_IDLE )
    137              {
    138                ep->state = D_EP_IDLE;
    139                if ( ep->xferCompleteCb )
    140                {
    141                  callback = ep->xferCompleteCb;
    142                  ep->xferCompleteCb = NULL;
    143          
    144                  if ( ( dev->lastState == USBD_STATE_CONFIGURED ) &&
    145                       ( dev->state     == USBD_STATE_ADDRESSED  )    )
    146                  {
    147                    USBDHAL_DeactivateEp( ep );
    148                  }
    149                  callback( reason, ep->xferred, ep->remaining );
    150                }
    151              }
    152            }
    153          }
    154          
    155          #ifdef VBUSMON
    156          //Use a selectable IRQ for monitoring VBUS on VBUSMON.
    157          void vbusMonCfg(void)
    158          {
    159            //VBUSMON just needs to be a simple input.
    160            VBUSMON_SETCFG();
    161          
    162            //start from a fresh state, just in case
    163            VBUSMON_INTCFG = 0;              //disable triggering
    164            INT_CFGCLR = VBUSMON_INT_EN_BIT; //clear top level int enable
    165            INT_GPIOFLAG = VBUSMON_FLAG_BIT; //clear stale interrupt
    166            INT_MISS = VBUSMON_MISS_BIT;     //clear stale missed interrupt
    167            //configure
    168            VBUSMON_SEL();             //point IRQ at the desired pin
    169            VBUSMON_INTCFG  = ((0 << GPIO_INTFILT_BIT) | //no filter
    170                               (3 << GPIO_INTMOD_BIT));  //3 = both edges
    171            
    172            usbVbusPresent = ((VBUSMON_IN & VBUSMON) == VBUSMON);
    173            
    174            INT_CFGSET = VBUSMON_INT_EN_BIT; //set top level interrupt enable
    175          }
    176          #endif //VBUSMON
    177          
    178          #ifndef EMBER_APPLICATION_HAS_CUSTOM_SUSPEND_CALLBACK
    179            int32u savedPeripheralReg;
    180            void halSuspendCallback(void)
    181            {
    182              halSuspend();
    183              savedPeripheralReg = PERIPHERAL_DISABLE;
    184              PERIPHERAL_DISABLE |= ((1 << PERIDIS_ADC_BIT) |   \
    185                                     (1 << PERIDIS_TIM2_BIT)|   \
    186                                     (1 << PERIDIS_TIM1_BIT)|   \
    187                                     (1 << PERIDIS_SC1_BIT) |   \
    188                                     (1 << PERIDIS_SC2_BIT));
    189            }
    190          
    191            void halResumeCallback(void)
    192            {
    193              PERIPHERAL_DISABLE = savedPeripheralReg;
    194              halResume();
    195            }
    196          #endif // EMBER_APPLICATION_HAS_CUSTOM_SUSPEND_CALLBACK
    197          
    198          
    199          /** @endcond */
    200          #endif //CORTEXM3_EM35X_USB
    201          


 

 


Errors: none
Warnings: none
