###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        31/Aug/2015  13:55:42
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\Zigbee\EmberZNet5.6.0-GA\app\framework\plugin\standalone-bootloader-client\standalone-bootloader-client.c
#    Command line =  
#        E:\Zigbee\EmberZNet5.6.0-GA\app\framework\plugin\standalone-bootloader-client\standalone-bootloader-client.c
#        -D NULL_BTL -D CORTEXM3 -D CORTEXM3_EMBER_MICRO -D CORTEXM3_EM357 -D
#        PHY_EM3XX -D
#        "APPLICATION_TOKEN_HEADER=\"app/framework/util/tokens.h\"" -D
#        "ATTRIBUTE_STORAGE_CONFIGURATION=\"app/builder/ZigbeeRoute/ZigbeeRoute_endpoint_config.h\""
#        -D "BOARD_HEADER=\"app\builder\ZigbeeRoute\ZigbeeRoute_board.h\"" -D
#        "CONFIGURATION_HEADER=\"app/framework/util/config.h\"" -D
#        "GENERATED_TOKEN_HEADER=\"app/builder/ZigbeeRoute/ZigbeeRoute_tokens.h\""
#        -D "PLATFORM_HEADER=\"hal/micro/cortexm3/compiler/iar.h\"" -D
#        "ZA_GENERATED_HEADER=\"app/builder/ZigbeeRoute/ZigbeeRoute.h\"" -D
#        "__SOURCEFILE__=\"standalone-bootloader-client.c\"" -lC
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\build\lst\
#        --diag_suppress Pa050 -o
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\build\obj\ --debug
#        --endian=little --cpu=Cortex-M3 --no_path_in_file_macros
#        --separate_cluster_for_initialized_variables -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\framework\plugin\standalone-bootloader-client\
#        -I E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\ -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\ -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\app\framework\include\
#        -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\app\util\
#        -I E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\stack\
#        -I E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\hal\
#        -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\hal\..\
#        -Ohz --use_c++_inline
#    List file    =  
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\build\lst\standalone-bootloader-client.lst
#    Object file  =  
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\build\obj\standalone-bootloader-client.o
#
###############################################################################

E:\Zigbee\EmberZNet5.6.0-GA\app\framework\plugin\standalone-bootloader-client\standalone-bootloader-client.c
      1          // *****************************************************************************
      2          // * standalone-bootloader-client.c
      3          // *
      4          // * This file defines the client behavior for the Ember proprietary bootloader
      5          // * protocol.
      6          // * 
      7          // * Copyright 2012 by Ember Corporation. All rights reserved.              *80*
      8          // *****************************************************************************
      9          
     10          #include "app/framework/include/af.h"
     11          #include "app/framework/plugin/standalone-bootloader-common/bootloader-protocol.h"
     12          #include "standalone-bootloader-client.h"
     13          
     14          //------------------------------------------------------------------------------
     15          // Globals
     16          
     17          // Most of the work is done by the actual bootloader code.  Client just
     18          // has to authenticate the challenge and launch the bootloader.
     19          typedef enum {
     20            CLIENT_BOOTLOAD_STATE_NONE           = 0,
     21            CLIENT_BOOTLOAD_STATE_CHALLENGE_SENT = 1,
     22            CLIENT_BOOTLOAD_STATE_COUNTDOWN      = 2,
     23          } ClientBootloadState;
     24          

   \                                 In section .data, align 4
     25          static PGM_P clientStateStrings[] = {
   \                     clientStateStrings:
   \   00000000   0x........         DC32 `?<Constant "None">`, `?<Constant "Challenge Sent">`
   \              0x........   
   \   00000008   0x........         DC32 `?<Constant "Countdown to bootload...">`
     26            "None",
     27            "Challenge Sent",
     28            "Countdown to bootload launch",
     29          };
     30          #define NULL_EUI64 { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF }
     31          
     32          static ClientBootloadState clientBootloadState = CLIENT_BOOTLOAD_STATE_NONE;

   \                                 In section .data, align 4
     33          static EmberEUI64 bootloadServerEui64 = NULL_EUI64;
   \                     bootloadServerEui64:
   \   00000000   0xFF 0xFF          DC8 255, 255, 255, 255, 255, 255, 255, 255
   \              0xFF 0xFF    
   \              0xFF 0xFF    
   \              0xFF 0xFF    

   \                                 In section .bss, align 4
   \                     clientBootloadState:
   \   00000000                      DS8 1
   \   00000001                      DS8 3
     34          static int8u challenge[BOOTLOAD_AUTH_CHALLENGE_SIZE];
     35          
     36          EmberEventControl emberAfPluginStandaloneBootloaderClientMyEventEventControl;
   \                     emberAfPluginStandaloneBootloaderClientMyEventEventControl:
   \   00000004                      DS8 8
   \   0000000C                      DS8 16
     37          
     38          #define CHALLENGE_TIMEOUT_SECONDS 2
     39          
     40          #if !defined(EMBER_TEST)
     41            #define getBootloadKey(returnData) emAfStandaloneBootloaderClientGetKey(returnData)
     42          #endif
     43          
     44          //------------------------------------------------------------------------------
     45          // External Declarations
     46          
     47          void emAesEncrypt(int8u *block, int8u *key);
     48          
     49          //------------------------------------------------------------------------------
     50          // Functions
     51          
     52          #if defined(EMBER_TEST)
     53          // No MFG tokens in simulation.  Here is a hack to make it work.
     54          void getBootloadKey(int8u* returnData)
     55          {
     56            // Same key as the default for the Standalone Bootloader Server plugin
     57            int8u testKey[] = {
     58              0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 
     59              0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
     60            };
     61            MEMMOVE(returnData, testKey, EMBER_ENCRYPTION_KEY_SIZE);
     62          }
     63          #endif
     64          

   \                                 In section .text, align 2, keep-with-next
     65          void emAfStandaloneBootloaderClientPrintStatus(void)
     66          {
   \                     emAfStandaloneBootloaderClientPrintStatus: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB08B             SUB      SP,SP,#+44
     67            int8u platformId;
     68            int8u microId;
     69            int8u phyId;
     70            int16u bootloaderVersion;
     71            int16u mfgId;
     72            int8u hardwareTag[EMBER_AF_STANDALONE_BOOTLOADER_HARDWARE_TAG_LENGTH];
     73            int8u key[EMBER_ENCRYPTION_KEY_SIZE];
     74          
     75            emAfStandaloneBootloaderClientGetInfo(&bootloaderVersion,
     76                                                  &platformId,
     77                                                  &microId,
     78                                                  &phyId);
   \   00000004   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_13: (+1)
   \   00000008   0xA801             ADD      R0,SP,#+4
   \   0000000A   0x.... 0x....      BL       emAfStandaloneBootloaderClientGetInfo
     79            emAfStandaloneBootloaderClientGetMfgInfo(&mfgId,
     80                                                     hardwareTag);
   \   0000000E   0xA906             ADD      R1,SP,#+24
   \   00000010   0xF10D 0x0002      ADD      R0,SP,#+2
   \   00000014   0x.... 0x....      BL       emAfStandaloneBootloaderClientGetMfgInfo
     81            getBootloadKey(key);
   \   00000018   0xA802             ADD      R0,SP,#+8
   \   0000001A   0x.... 0x....      BL       emAfStandaloneBootloaderClientGetKey
     82          
     83            bootloadPrintln("Client status: %p", clientStateStrings[clientBootloadState]);
   \   0000001E   0x....             LDR.N    R0,??DataTable31_1
   \   00000020   0x....             LDR.N    R1,??DataTable31_2
   \   00000022   0x7800             LDRB     R0,[R0, #+0]
   \   00000024   0xF851 0x2020      LDR      R2,[R1, R0, LSL #+2]
   \   00000028   0x.... 0x....      ADR.W    R1,`?<Constant "Client status: %p">`
   \   0000002C   0x.... 0x....      BL       ?Subroutine0
     84            bootloadPrintln("Platform: 0x%X", platformId);
   \                     ??CrossCallReturnLabel_7: (+1)
   \   00000030   0xF89D 0x2006      LDRB     R2,[SP, #+6]
   \   00000034   0x.... 0x....      ADR.W    R1,`?<Constant "Platform: 0x%X">`
   \   00000038   0x.... 0x....      BL       ?Subroutine0
     85            bootloadPrintln("Micro:    0x%X", microId);
   \                     ??CrossCallReturnLabel_6: (+1)
   \   0000003C   0xF89D 0x2001      LDRB     R2,[SP, #+1]
   \   00000040   0x.... 0x....      ADR.W    R1,`?<Constant "Micro:    0x%X">`
   \   00000044   0x.... 0x....      BL       ?Subroutine0
     86            bootloadPrintln("Phy:      0x%X", phyId);
   \                     ??CrossCallReturnLabel_5: (+1)
   \   00000048   0xF89D 0x2000      LDRB     R2,[SP, #+0]
   \   0000004C   0x.... 0x....      ADR.W    R1,`?<Constant "Phy:      0x%X">`
   \   00000050   0x.... 0x....      BL       ?Subroutine0
     87            bootloadPrintln("BTL Version: 0x%2X", bootloaderVersion);
   \                     ??CrossCallReturnLabel_4: (+1)
   \   00000054   0xF8BD 0x2004      LDRH     R2,[SP, #+4]
   \   00000058   0x.... 0x....      ADR.W    R1,`?<Constant "BTL Version: 0x%2X">`
   \   0000005C   0x.... 0x....      BL       ?Subroutine0
     88            bootloadPrintln("MFG ID:   0x%2X", mfgId);
   \                     ??CrossCallReturnLabel_3: (+1)
   \   00000060   0xF8BD 0x2002      LDRH     R2,[SP, #+2]
   \   00000064   0x.... 0x....      ADR.W    R1,`?<Constant "MFG ID:   0x%2X">`
   \   00000068   0x.... 0x....      BL       ?Subroutine0
     89            bootloadPrint("Board Name: ");
   \                     ??CrossCallReturnLabel_2: (+1)
   \   0000006C   0x.... 0x....      ADR.W    R1,`?<Constant "Board Name: ">`
   \   00000070   0x2001             MOVS     R0,#+1
   \   00000072   0x.... 0x....      BL       emberAfPrint
     90            emAfStandaloneBootloaderCommonPrintHardwareTag(hardwareTag);
   \   00000076   0xA806             ADD      R0,SP,#+24
   \   00000078   0x.... 0x....      BL       emAfStandaloneBootloaderCommonPrintHardwareTag
     91          
     92            bootloadPrint("MFG Key in Token: ");
   \   0000007C   0x.... 0x....      ADR.W    R1,`?<Constant "MFG Key in Token: ">`
   \   00000080   0x2001             MOVS     R0,#+1
   \   00000082   0x.... 0x....      BL       emberAfPrint
     93            emberAfPrintZigbeeKey(key);
   \   00000086   0xA802             ADD      R0,SP,#+8
   \   00000088   0x.... 0x....      BL       printZigbeeKey
     94          }
   \   0000008C   0xB00B             ADD      SP,SP,#+44
   \   0000008E   0xBD00             POP      {PC}             ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x.... 0x....      B.W      emberAfPrintln

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2: (+1)
   \   00000000   0xAB00             ADD      R3,SP,#+0
   \   00000002   0xF10D 0x0201      ADD      R2,SP,#+1
   \   00000006   0xF10D 0x0106      ADD      R1,SP,#+6
   \   0000000A   0x4770             BX       LR
     95          

   \                                 In section .text, align 2, keep-with-next
     96          static EmberStatus sendChallenge(EmberEUI64 targetEui)
     97          {
   \                     sendChallenge: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB094             SUB      SP,SP,#+80
   \   00000004   0x4604             MOV      R4,R0
     98            int8u outgoingBlock[MAX_BOOTLOAD_MESSAGE_SIZE];
     99            int8u index = emberAfPluginStandaloneBootloaderCommonMakeHeader(outgoingBlock, 
    100                                                                            XMODEM_AUTH_CHALLENGE);
   \   00000006   0x2163             MOVS     R1,#+99
   \   00000008   0xA802             ADD      R0,SP,#+8
   \   0000000A   0x.... 0x....      BL       emberAfPluginStandaloneBootloaderCommonMakeHeader
    101            int8u platformId;
    102            int8u microId;
    103            int8u phyId;
    104            int32u macTimer;
    105            EmberStatus status;
    106            int8u i;
                         ^
Warning[Pe177]: variable "i" was declared but never referenced
    107            int16u bootloaderVersion;
    108          
    109            outgoingBlock[index++] = CHALLENGE_REQUEST_VERSION;
   \   0000000E   0xAD02             ADD      R5,SP,#+8
   \   00000010   0x2101             MOVS     R1,#+1
   \   00000012   0x5541             STRB     R1,[R0, R5]
   \   00000014   0x1C46             ADDS     R6,R0,#+1
    110            emAfStandaloneBootloaderClientGetInfo(&bootloaderVersion,
    111                                                  &platformId,
    112                                                  &microId,
    113                                                  &phyId);
   \   00000016   0xAB00             ADD      R3,SP,#+0
   \   00000018   0xF10D 0x0201      ADD      R2,SP,#+1
   \   0000001C   0xA901             ADD      R1,SP,#+4
   \   0000001E   0xF10D 0x0002      ADD      R0,SP,#+2
   \   00000022   0x.... 0x....      BL       emAfStandaloneBootloaderClientGetInfo
    114            outgoingBlock[index++] = HIGH_BYTE(bootloaderVersion);
   \   00000026   0xF8BD 0x0002      LDRH     R0,[SP, #+2]
   \   0000002A   0xB2F6             UXTB     R6,R6
   \   0000002C   0x0A00             LSRS     R0,R0,#+8
   \   0000002E   0x5570             STRB     R0,[R6, R5]
   \   00000030   0x1C70             ADDS     R0,R6,#+1
    115            outgoingBlock[index++] = LOW_BYTE(bootloaderVersion);
   \   00000032   0xF8BD 0x1002      LDRH     R1,[SP, #+2]
   \   00000036   0xB2C0             UXTB     R0,R0
   \   00000038   0x5541             STRB     R1,[R0, R5]
   \   0000003A   0x1C40             ADDS     R0,R0,#+1
    116            outgoingBlock[index++] = platformId;
   \   0000003C   0xF89D 0x1004      LDRB     R1,[SP, #+4]
   \   00000040   0xB2C0             UXTB     R0,R0
   \   00000042   0x5541             STRB     R1,[R0, R5]
   \   00000044   0x1C40             ADDS     R0,R0,#+1
    117            outgoingBlock[index++] = microId;
   \   00000046   0xF89D 0x1001      LDRB     R1,[SP, #+1]
   \   0000004A   0xB2C0             UXTB     R0,R0
   \   0000004C   0x5541             STRB     R1,[R0, R5]
   \   0000004E   0x1C40             ADDS     R0,R0,#+1
    118            outgoingBlock[index++] = phyId;
   \   00000050   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   00000054   0xB2C0             UXTB     R0,R0
   \   00000056   0x1C46             ADDS     R6,R0,#+1
   \   00000058   0x5541             STRB     R1,[R0, R5]
    119          
    120            emberAfGetEui64(&(outgoingBlock[index]));
   \   0000005A   0xB2F6             UXTB     R6,R6
   \   0000005C   0xA802             ADD      R0,SP,#+8
   \   0000005E   0x1830             ADDS     R0,R6,R0
   \   00000060   0x.... 0x....      BL       emberAfGetEui64
    121            index += EUI64_SIZE;
   \   00000064   0x3608             ADDS     R6,R6,#+8
    122            macTimer = emAfStandaloneBootloaderClientGetRandomNumber();
   \   00000066   0x.... 0x....      BL       emAfStandaloneBootloaderClientGetRandomNumber
    123            
    124            // The em250's mac timer is 20 bits long.  Disregard the first byte (zero),
    125            // even for other devices that may have a 32-bit symbol timer.
    126            outgoingBlock[index++] = LOW_BYTE(macTimer);
   \   0000006A   0xB2F6             UXTB     R6,R6
   \   0000006C   0x1C71             ADDS     R1,R6,#+1
   \   0000006E   0x5570             STRB     R0,[R6, R5]
    127            outgoingBlock[index++] = HIGH_BYTE(macTimer);
   \   00000070   0xB2C9             UXTB     R1,R1
   \   00000072   0x0A02             LSRS     R2,R0,#+8
   \   00000074   0x1C4E             ADDS     R6,R1,#+1
   \   00000076   0x554A             STRB     R2,[R1, R5]
    128            outgoingBlock[index++] = (int8u)(macTimer >> 16);
   \   00000078   0xB2F6             UXTB     R6,R6
   \   0000007A   0x0C00             LSRS     R0,R0,#+16
   \   0000007C   0x5570             STRB     R0,[R6, R5]
    129          
    130            // NOTE:  The protocol has a bug in it.  17-bytes are sent over-the-air
    131            // but only 16-bytes are used in the authentication.  That means only
    132            // 2-bytes of pseudo random data are used as the challenge (the MAC Timer).
    133          
    134            // Remember the challenge for later so we can authenticate it.
    135            MEMMOVE(challenge, 
    136                    &(outgoingBlock[BOOTLOAD_MESSAGE_OVERHEAD]), 
    137                    BOOTLOAD_AUTH_CHALLENGE_SIZE);
   \   0000007E   0x2210             MOVS     R2,#+16
   \   00000080   0x....             LDR.N    R5,??DataTable31_1
   \   00000082   0xF10D 0x010A      ADD      R1,SP,#+10
   \   00000086   0xF105 0x000C      ADD      R0,R5,#+12
   \   0000008A   0x.... 0x....      BL       halCommonMemMove
    138            MEMMOVE(bootloadServerEui64, targetEui, EUI64_SIZE);
   \   0000008E   0x2208             MOVS     R2,#+8
   \   00000090   0x4621             MOV      R1,R4
   \   00000092   0x....             LDR.N    R0,??DataTable31_3
   \   00000094   0x.... 0x....      BL       halCommonMemMove
    139          
    140            status = emberAfPluginStandaloneBootloaderCommonSendMessage(FALSE,  // is broadcast?
    141                                                                        targetEui,
    142                                                                        index,
    143                                                                        outgoingBlock);
   \   00000098   0x1C72             ADDS     R2,R6,#+1
   \   0000009A   0xAB02             ADD      R3,SP,#+8
   \   0000009C   0xB2D2             UXTB     R2,R2
   \   0000009E   0x4621             MOV      R1,R4
   \   000000A0   0x2000             MOVS     R0,#+0
   \   000000A2   0x.... 0x....      BL       emberAfPluginStandaloneBootloaderCommonSendMessage
   \   000000A6   0x0004             MOVS     R4,R0
    144          
    145            if (status == EMBER_SUCCESS) {
   \   000000A8   0xD106             BNE.N    ??sendChallenge_0
    146              clientBootloadState = CLIENT_BOOTLOAD_STATE_CHALLENGE_SENT;
   \   000000AA   0x2001             MOVS     R0,#+1
   \   000000AC   0x7028             STRB     R0,[R5, #+0]
    147              emberEventControlSetDelayQS(emberAfPluginStandaloneBootloaderClientMyEventEventControl,
    148                                          CHALLENGE_TIMEOUT_SECONDS << 2);
   \   000000AE   0xF44F 0x6100      MOV      R1,#+2048
   \   000000B2   0x1D28             ADDS     R0,R5,#+4
   \   000000B4   0x.... 0x....      BL       emEventControlSetDelayMS
    149            }
    150            return status;
   \                     ??sendChallenge_0: (+1)
   \   000000B8   0x4620             MOV      R0,R4
   \   000000BA   0xB014             ADD      SP,SP,#+80
   \   000000BC   0xBD70             POP      {R4-R6,PC}       ;; return
    151          }
    152          
    153          

   \                                 In section .text, align 2, keep-with-next
    154          static void resetClientState(void)
    155          {
   \                     resetClientState: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    156            bootloadPrintln("Clearing client bootload state");
   \   00000002   0x.... 0x....      ADR.W    R1,`?<Constant "Clearing client bootl...">`
   \   00000006   0x.... 0x....      BL       ?Subroutine1
    157            MEMSET(bootloadServerEui64, 0, EUI64_SIZE);
   \                     ??CrossCallReturnLabel_11: (+1)
   \   0000000A   0x2208             MOVS     R2,#+8
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x....             LDR.N    R0,??DataTable31_3
   \   00000010   0x.... 0x....      BL       halCommonMemSet
    158            clientBootloadState = CLIENT_BOOTLOAD_STATE_NONE;
   \   00000014   0x....             LDR.N    R1,??DataTable31_1
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x7008             STRB     R0,[R1, #+0]
    159          }
   \   0000001A   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x.... 0x....      B.W      emberAfPrintln
    160          
    161          static void launchBootloader(void)
    162          {
    163            EmberStatus status;
    164            bootloadPrintln("Launching standalone bootloader now...");
    165            emberSerialWaitSend(APP_SERIAL);
    166          
    167            status = emAfStandaloneBootloaderClientLaunch();
    168          
    169            // If we got here, something went wrong.
    170            bootloadPrintln("ERROR: Bootloader Launch failed: 0x%X", status);
    171          }
    172          

   \                                 In section .text, align 2, keep-with-next
    173          void emberAfPluginStandaloneBootloaderClientMyEventEventHandler(void)
    174          {
   \                     emberAfPluginStandaloneBootloaderClientMyEventEventHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    175            emberEventControlSetInactive(emberAfPluginStandaloneBootloaderClientMyEventEventControl);
   \   00000002   0x....             LDR.N    R0,??DataTable31_1
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x7101             STRB     R1,[R0, #+4]
   \   00000008   0x7800             LDRB     R0,[R0, #+0]
   \   0000000A   0x2801             CMP      R0,#+1
   \   0000000C   0xD104             BNE.N    ??emberAfPluginStandaloneBootloaderClientMyEven_0
    176          
    177            if (clientBootloadState == CLIENT_BOOTLOAD_STATE_CHALLENGE_SENT) {
    178              bootloadPrintln("Timeout waiting for challenge response");
   \   0000000E   0x.... 0x....      ADR.W    R1,`?<Constant "Timeout waiting for c...">`
   \   00000012   0x.... 0x....      BL       emberAfPrintln
   \   00000016   0xE00F             B.N      ??CrossCallReturnLabel_1
    179            } else if (clientBootloadState == CLIENT_BOOTLOAD_STATE_COUNTDOWN) {
   \                     ??emberAfPluginStandaloneBootloaderClientMyEven_0: (+1)
   \   00000018   0x2802             CMP      R0,#+2
   \   0000001A   0xD10D             BNE.N    ??CrossCallReturnLabel_1
    180              launchBootloader();
   \   0000001C   0x.... 0x....      ADR.W    R1,`?<Constant "Launching standalone ...">`
   \   00000020   0x.... 0x....      BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_10: (+1)
   \   00000024   0x2001             MOVS     R0,#+1
   \   00000026   0x.... 0x....      BL       emberSerialWaitSend
   \   0000002A   0x.... 0x....      BL       emAfStandaloneBootloaderClientLaunch
   \   0000002E   0x4602             MOV      R2,R0
   \   00000030   0x.... 0x....      ADR.W    R1,`?<Constant "ERROR: Bootloader Lau...">`
   \   00000034   0x.... 0x....      BL       ?Subroutine0
    181            }
    182            resetClientState();
   \                     ??CrossCallReturnLabel_1: (+1)
   \   00000038   0xE8BD 0x4001      POP      {R0,LR}
   \   0000003C   0x....             B.N      resetClientState
    183          }
    184          

   \                                 In section .text, align 2, keep-with-next
    185          static EmberStatus sendQueryResponse(EmberEUI64 longId)
    186          {
   \                     sendQueryResponse: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB095             SUB      SP,SP,#+84
   \   00000004   0x4604             MOV      R4,R0
    187            int8u outgoingBlock[MAX_BOOTLOAD_MESSAGE_SIZE];
    188            int8u index = emberAfPluginStandaloneBootloaderCommonMakeHeader(outgoingBlock, 
    189                                                                            XMODEM_QRESP);
   \   00000006   0x2152             MOVS     R1,#+82
   \   00000008   0xA802             ADD      R0,SP,#+8
   \   0000000A   0x.... 0x....      BL       emberAfPluginStandaloneBootloaderCommonMakeHeader
   \   0000000E   0x4605             MOV      R5,R0
    190            int16u mfgId;
    191            int8u platformId;
    192            int8u microId;
    193            int8u phyId;
    194            int16u bootloaderVersion;
    195          
    196            emAfStandaloneBootloaderClientGetMfgInfo(&mfgId,
    197                                                     &(outgoingBlock[QRESP_OFFSET_HARDWARE_TAG]));
   \   00000010   0xF10D 0x010D      ADD      R1,SP,#+13
   \   00000014   0xA801             ADD      R0,SP,#+4
   \   00000016   0x.... 0x....      BL       emAfStandaloneBootloaderClientGetMfgInfo
    198            emAfStandaloneBootloaderClientGetInfo(&bootloaderVersion,
    199                                                  &platformId,
    200                                                  &microId,
    201                                                  &phyId);
   \   0000001A   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_14: (+1)
   \   0000001E   0xF10D 0x0002      ADD      R0,SP,#+2
   \   00000022   0x.... 0x....      BL       emAfStandaloneBootloaderClientGetInfo
    202            
    203            // Bootloader active?  1-byte
    204            outgoingBlock[index++] = 0;
   \   00000026   0xA802             ADD      R0,SP,#+8
   \   00000028   0x2100             MOVS     R1,#+0
   \   0000002A   0x5429             STRB     R1,[R5, R0]
   \   0000002C   0x1C69             ADDS     R1,R5,#+1
    205          
    206            outgoingBlock[index++] = HIGH_BYTE(mfgId);
   \   0000002E   0xF8BD 0x2004      LDRH     R2,[SP, #+4]
   \   00000032   0xB2C9             UXTB     R1,R1
   \   00000034   0x0A12             LSRS     R2,R2,#+8
   \   00000036   0x540A             STRB     R2,[R1, R0]
   \   00000038   0x1C49             ADDS     R1,R1,#+1
    207            outgoingBlock[index++] = LOW_BYTE(mfgId);
   \   0000003A   0xF8BD 0x2004      LDRH     R2,[SP, #+4]
   \   0000003E   0xB2C9             UXTB     R1,R1
    208          
    209            // Hardware Tag has already been copied into place.
    210            index += EMBER_AF_STANDALONE_BOOTLOADER_HARDWARE_TAG_LENGTH;
    211          
    212            // Bootloader Capabilities : 1-byte
    213            // In the future, we should read the capabilities mask from fixed 
    214            // location in bootloader.  However, currently we do not have any
    215            // bootload capabilities implemented.  This filed is included for
    216            // future use.
    217            outgoingBlock[index++] = 0;
    218          
    219            outgoingBlock[index++] = platformId;
    220            outgoingBlock[index++] = microId;
    221            outgoingBlock[index++] = phyId;
    222            outgoingBlock[index++] = HIGH_BYTE(bootloaderVersion);
    223            outgoingBlock[index++] = LOW_BYTE(bootloaderVersion);
    224          
    225            return emberAfPluginStandaloneBootloaderCommonSendMessage(FALSE, // is broadcast?
    226                                                                      longId,
    227                                                                      index,
    228                                                                      outgoingBlock);
   \   00000040   0xAB02             ADD      R3,SP,#+8
   \   00000042   0x540A             STRB     R2,[R1, R0]
   \   00000044   0x3111             ADDS     R1,R1,#+17
   \   00000046   0xB2C9             UXTB     R1,R1
   \   00000048   0x2200             MOVS     R2,#+0
   \   0000004A   0x540A             STRB     R2,[R1, R0]
   \   0000004C   0x1C49             ADDS     R1,R1,#+1
   \   0000004E   0xF89D 0x2006      LDRB     R2,[SP, #+6]
   \   00000052   0xB2C9             UXTB     R1,R1
   \   00000054   0x540A             STRB     R2,[R1, R0]
   \   00000056   0x1C49             ADDS     R1,R1,#+1
   \   00000058   0xF89D 0x2001      LDRB     R2,[SP, #+1]
   \   0000005C   0xB2C9             UXTB     R1,R1
   \   0000005E   0x540A             STRB     R2,[R1, R0]
   \   00000060   0x1C49             ADDS     R1,R1,#+1
   \   00000062   0xF89D 0x2000      LDRB     R2,[SP, #+0]
   \   00000066   0xB2C9             UXTB     R1,R1
   \   00000068   0x.... 0x....      BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_15: (+1)
   \   0000006C   0x0A12             LSRS     R2,R2,#+8
   \   0000006E   0x.... 0x....      BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_16: (+1)
   \   00000072   0x540A             STRB     R2,[R1, R0]
   \   00000074   0x2000             MOVS     R0,#+0
   \   00000076   0x1C4A             ADDS     R2,R1,#+1
   \   00000078   0xB2D2             UXTB     R2,R2
   \   0000007A   0x4621             MOV      R1,R4
   \   0000007C   0x.... 0x....      BL       emberAfPluginStandaloneBootloaderCommonSendMessage
   \   00000080   0xB015             ADD      SP,SP,#+84
   \   00000082   0xBD30             POP      {R4,R5,PC}       ;; return
    229          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3: (+1)
   \   00000000   0x540A             STRB     R2,[R1, R0]
   \   00000002   0x1C49             ADDS     R1,R1,#+1
   \   00000004   0xF8BD 0x2002      LDRH     R2,[SP, #+2]
   \   00000008   0xB2C9             UXTB     R1,R1
   \   0000000A   0x4770             BX       LR
    230          
    231          static boolean authenticateChallengeResponse(int8u* challengeResponse)
    232          {
    233            int8u i;
    234            boolean validKey = FALSE;
    235            int8u key[EMBER_ENCRYPTION_KEY_SIZE];
    236            getBootloadKey(key);
    237          
    238            for (i = 0; i < EMBER_ENCRYPTION_KEY_SIZE && !validKey; i++) {
    239              if (key[i] != 0xFF) {
    240                validKey = TRUE;
    241              }
    242            }
    243            if (!validKey) {
    244              bootloadPrintln("Error: Bootload key not set!  Cannot authenticate response!  Giving up!");
    245              return FALSE;
    246            }
    247          
    248            emAfStandaloneBootloaderClientEncrypt(challenge, key);
    249            return (0 == MEMCOMPARE(challengeResponse, challenge, EMBER_ENCRYPTION_KEY_SIZE));
    250          }
    251          
    252          static void delayedLaunchBootloader(void)
    253          {
    254            // If the time is 0, then this should fire on the next emberTick().
    255            emberEventControlSetDelayQS(emberAfPluginStandaloneBootloaderClientMyEventEventControl,
    256                                        EMBER_AF_PLUGIN_STANDALONE_BOOTLOADER_CLIENT_COUNTDOWN_TIME_SECONDS << 2);
    257            clientBootloadState = CLIENT_BOOTLOAD_STATE_COUNTDOWN;
    258            bootloadPrintln("Delaying %d seconds before launching bootloader", 
    259                            EMBER_AF_PLUGIN_STANDALONE_BOOTLOADER_CLIENT_COUNTDOWN_TIME_SECONDS);
    260          }
    261          
    262          static void decodeAndPrintClientMessageType(int8u command)
    263          {
    264            int8u id = 0xFF;
    265            PGM_P commandStrings[] = {
    266              "Query",
    267              "Launch Request",
    268              "Auth Response",
    269            };
    270            switch (command) {
    271            case (XMODEM_QUERY):
    272              id = 0;
    273              break;
    274            case (XMODEM_LAUNCH_REQUEST):
    275              id = 1;
    276              break;
    277            case (XMODEM_AUTH_RESPONSE):
    278              id = 2;
    279            default:
    280              break;  
    281            }
    282            bootloadPrintln("Received Standalone Bootloader message (%d): %p",
    283                            command,
    284                            (id == 0xFF
    285                             ? "??"
    286                             : commandStrings[id]));
    287          }
    288          
    289          static boolean validateSenderEui64(EmberEUI64 sender)
    290          {
    291            // Anyone may send us messages if we are not otherwise in the middle
    292            // of a bootload.
    293            if (clientBootloadState == CLIENT_BOOTLOAD_STATE_NONE) {
    294              return TRUE;
    295            }
    296          
    297            return (0 == MEMCOMPARE(sender, bootloadServerEui64, EUI64_SIZE));
    298          }
    299          

   \                                 In section .text, align 2, keep-with-next
    300          boolean emberAfPluginStandaloneBootloaderCommonIncomingMessageCallback(EmberEUI64 longId,
    301                                                                                 int8u length,
    302                                                                                 int8u* message)
    303          {
   \                     emberAfPluginStandaloneBootloaderCommonIncomingMessageCallback: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
   \   00000006   0x4616             MOV      R6,R2
   \   00000008   0xB087             SUB      SP,SP,#+28
    304            if (!emberAfPluginStandaloneBootloaderCommonCheckIncomingMessage(length, message)) {
   \   0000000A   0x4631             MOV      R1,R6
   \   0000000C   0x4628             MOV      R0,R5
   \   0000000E   0x.... 0x....      BL       emberAfPluginStandaloneBootloaderCommonCheckIncomingMessage
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xF000 0x808C      BEQ.W    ??emberAfPluginStandaloneBootloaderCommonIncomi_0
    305              return FALSE;
    306            }
    307          
    308            decodeAndPrintClientMessageType(message[OFFSET_MESSAGE_TYPE]);
   \   00000018   0x.... 0x....      ADR.W    R1,`?<Constant {&"Query", &"Launch Request", &"Aut`
   \   0000001C   0x7872             LDRB     R2,[R6, #+1]
   \   0000001E   0xE8B1 0x1088      LDM      R1!,{R3,R7,R12}
   \   00000022   0xA804             ADD      R0,SP,#+16
   \   00000024   0x2A4C             CMP      R2,#+76
   \   00000026   0xE8A0 0x1088      STM      R0!,{R3,R7,R12}
   \   0000002A   0xD021             BEQ.N    ??emberAfPluginStandaloneBootloaderCommonIncomi_1
   \   0000002C   0x2A51             CMP      R2,#+81
   \   0000002E   0xD021             BEQ.N    ??emberAfPluginStandaloneBootloaderCommonIncomi_2
   \   00000030   0x2A72             CMP      R2,#+114
   \   00000032   0xD121             BNE.N    ??emberAfPluginStandaloneBootloaderCommonIncomi_3
   \   00000034   0x2002             MOVS     R0,#+2
   \                     ??emberAfPluginStandaloneBootloaderCommonIncomi_4: (+1)
   \   00000036   0xA904             ADD      R1,SP,#+16
   \   00000038   0xF851 0x3020      LDR      R3,[R1, R0, LSL #+2]
   \                     ??emberAfPluginStandaloneBootloaderCommonIncomi_5: (+1)
   \   0000003C   0x.... 0x....      ADR.W    R1,`?<Constant "Received Standalone B...">`
   \   00000040   0x2001             MOVS     R0,#+1
   \   00000042   0x.... 0x....      BL       emberAfPrintln
    309          
    310            if (!validateSenderEui64(longId)) {
   \   00000046   0x....             LDR.N    R7,??DataTable31_1
   \   00000048   0x7838             LDRB     R0,[R7, #+0]
   \   0000004A   0xB128             CBZ.N    R0,??emberAfPluginStandaloneBootloaderCommonIncomi_6
   \   0000004C   0x....             LDR.N    R1,??DataTable31_3
   \   0000004E   0x2208             MOVS     R2,#+8
   \   00000050   0x4620             MOV      R0,R4
   \   00000052   0x.... 0x....      BL       halCommonMemCompare
   \   00000056   0xB988             CBNZ.N   R0,??emberAfPluginStandaloneBootloaderCommonIncomi_7
    311              bootloadPrintln("Error: Sender EUI64 doesn't match current server EUI64");
    312              return TRUE;
    313            }
    314          
    315            if (!emAfPluginStandaloneBootloaderClientCheckBootloader()) {
                        ^
Warning[Pe223]: function "emAfPluginStandaloneBootloaderClientCheckBootloader"
          declared implicitly
   \                     ??emberAfPluginStandaloneBootloaderCommonIncomi_6: (+1)
   \   00000058   0x.... 0x....      BL       emAfPluginStandaloneBootloaderClientCheckBootloader
   \   0000005C   0x2800             CMP      R0,#+0
   \   0000005E   0xD066             BEQ.N    ??emberAfPluginStandaloneBootloaderCommonIncomi_8
    316              // Wrong bootloader type.  But claim we processed the message since
    317              // we do not want anything else to respond.
    318              return TRUE;
    319            }
    320          
    321            if (!emberAfPluginStandaloneBootloaderClientAllowIncomingMessageCallback(longId,
    322                                                                                     message[OFFSET_MESSAGE_TYPE])) {
   \   00000060   0x7871             LDRB     R1,[R6, #+1]
   \   00000062   0x4620             MOV      R0,R4
   \   00000064   0x.... 0x....      BL       emberAfPluginStandaloneBootloaderClientAllowIncomingMessageCallback
   \   00000068   0xB968             CBNZ.N   R0,??emberAfPluginStandaloneBootloaderCommonIncomi_9
    323              bootloadPrintln("Standalone bootload client plugin told to ignore incoming message");
   \   0000006A   0x.... 0x....      ADR.W    R1,`?<Constant "Standalone bootload c...">`
   \   0000006E   0xE007             B.N      ??emberAfPluginStandaloneBootloaderCommonIncomi_10
   \                     ??emberAfPluginStandaloneBootloaderCommonIncomi_1: (+1)
   \   00000070   0x2001             MOVS     R0,#+1
   \   00000072   0xE7E0             B.N      ??emberAfPluginStandaloneBootloaderCommonIncomi_4
   \                     ??emberAfPluginStandaloneBootloaderCommonIncomi_2: (+1)
   \   00000074   0x2000             MOVS     R0,#+0
   \   00000076   0xE7DE             B.N      ??emberAfPluginStandaloneBootloaderCommonIncomi_4
   \                     ??emberAfPluginStandaloneBootloaderCommonIncomi_3: (+1)
   \   00000078   0x....             ADR.N    R3,??DataTable31  ;; 0x3F, 0x3F, 0x00, 0x00
   \   0000007A   0xE7DF             B.N      ??emberAfPluginStandaloneBootloaderCommonIncomi_5
    324              return TRUE;
    325            }
   \                     ??emberAfPluginStandaloneBootloaderCommonIncomi_7: (+1)
   \   0000007C   0x.... 0x....      ADR.W    R1,`?<Constant "Error: Sender EUI64 d...">`
   \                     ??emberAfPluginStandaloneBootloaderCommonIncomi_10: (+1)
   \   00000080   0x.... 0x....      BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_9: (+1)
   \   00000084   0xE053             B.N      ??emberAfPluginStandaloneBootloaderCommonIncomi_8
    326          
    327            switch (message[OFFSET_MESSAGE_TYPE]) {
   \                     ??emberAfPluginStandaloneBootloaderCommonIncomi_9: (+1)
   \   00000086   0x7871             LDRB     R1,[R6, #+1]
   \   00000088   0x7838             LDRB     R0,[R7, #+0]
   \   0000008A   0x294C             CMP      R1,#+76
   \   0000008C   0xD008             BEQ.N    ??emberAfPluginStandaloneBootloaderCommonIncomi_11
   \   0000008E   0x2951             CMP      R1,#+81
   \   00000090   0xD002             BEQ.N    ??emberAfPluginStandaloneBootloaderCommonIncomi_12
   \   00000092   0x2972             CMP      R1,#+114
   \   00000094   0xD00A             BEQ.N    ??emberAfPluginStandaloneBootloaderCommonIncomi_13
   \   00000096   0xE04A             B.N      ??emberAfPluginStandaloneBootloaderCommonIncomi_8
    328            case (XMODEM_QUERY): {
    329              sendQueryResponse(longId);
   \                     ??emberAfPluginStandaloneBootloaderCommonIncomi_12: (+1)
   \   00000098   0x4620             MOV      R0,R4
   \   0000009A   0x.... 0x....      BL       sendQueryResponse
    330              break;
   \   0000009E   0xE046             B.N      ??emberAfPluginStandaloneBootloaderCommonIncomi_8
    331            }
    332            case (XMODEM_LAUNCH_REQUEST): {
    333              if (clientBootloadState == CLIENT_BOOTLOAD_STATE_NONE) {
   \                     ??emberAfPluginStandaloneBootloaderCommonIncomi_11: (+1)
   \   000000A0   0x2800             CMP      R0,#+0
   \   000000A2   0xD144             BNE.N    ??emberAfPluginStandaloneBootloaderCommonIncomi_8
    334                int16u mfgId = HIGH_LOW_TO_INT(message[OFFSET_MFG_ID+1],
                              ^
Warning[Pe177]: variable "mfgId" was declared but never referenced
    335                                               message[OFFSET_MFG_ID]);
    336                
    337                sendChallenge(longId);
   \   000000A4   0x4620             MOV      R0,R4
   \   000000A6   0x.... 0x....      BL       sendChallenge
   \   000000AA   0xE040             B.N      ??emberAfPluginStandaloneBootloaderCommonIncomi_8
    338              }
    339              break;
    340            }
    341            case (XMODEM_AUTH_RESPONSE): {
    342              if (clientBootloadState == CLIENT_BOOTLOAD_STATE_CHALLENGE_SENT) {
   \                     ??emberAfPluginStandaloneBootloaderCommonIncomi_13: (+1)
   \   000000AC   0x2801             CMP      R0,#+1
   \   000000AE   0xD13E             BNE.N    ??emberAfPluginStandaloneBootloaderCommonIncomi_8
    343                if (length < XMODEM_AUTH_RESPONSE_LENGTH) {
   \   000000B0   0x2D12             CMP      R5,#+18
   \   000000B2   0xDA06             BGE.N    ??emberAfPluginStandaloneBootloaderCommonIncomi_14
    344                  bootloadPrintln("Error: Challenge-Response too short (%d < %d)", length, XMODEM_AUTH_RESPONSE_LENGTH);
   \   000000B4   0x2312             MOVS     R3,#+18
   \   000000B6   0x462A             MOV      R2,R5
   \   000000B8   0x.... 0x....      ADR.W    R1,`?<Constant "Error: Challenge-Resp...">`
   \   000000BC   0x.... 0x....      BL       emberAfPrintln
   \   000000C0   0xE035             B.N      ??emberAfPluginStandaloneBootloaderCommonIncomi_8
    345                  return TRUE;
    346                }
    347          
    348                emberEventControlSetInactive(emberAfPluginStandaloneBootloaderClientMyEventEventControl);
   \                     ??emberAfPluginStandaloneBootloaderCommonIncomi_14: (+1)
   \   000000C2   0x2000             MOVS     R0,#+0
   \   000000C4   0x7138             STRB     R0,[R7, #+4]
    349          
    350                if (authenticateChallengeResponse(&(message[BOOTLOAD_MESSAGE_OVERHEAD]))) {
   \   000000C6   0x1CB5             ADDS     R5,R6,#+2
   \   000000C8   0xA800             ADD      R0,SP,#+0
   \   000000CA   0x.... 0x....      BL       emAfStandaloneBootloaderClientGetKey
   \   000000CE   0x2000             MOVS     R0,#+0
   \                     ??emberAfPluginStandaloneBootloaderCommonIncomi_15: (+1)
   \   000000D0   0xA900             ADD      R1,SP,#+0
   \   000000D2   0x5C41             LDRB     R1,[R0, R1]
   \   000000D4   0x29FF             CMP      R1,#+255
   \   000000D6   0xD01C             BEQ.N    ??emberAfPluginStandaloneBootloaderCommonIncomi_16
   \   000000D8   0xA900             ADD      R1,SP,#+0
   \   000000DA   0xF107 0x000C      ADD      R0,R7,#+12
   \   000000DE   0x.... 0x....      BL       emAfStandaloneBootloaderClientEncrypt
   \   000000E2   0x2210             MOVS     R2,#+16
   \   000000E4   0xF107 0x010C      ADD      R1,R7,#+12
   \   000000E8   0x4628             MOV      R0,R5
   \   000000EA   0x.... 0x....      BL       halCommonMemCompare
   \   000000EE   0xB9C0             CBNZ.N   R0,??CrossCallReturnLabel_12
    351                  if (emberAfPluginStandaloneBootloaderClientAllowBootloadLaunchCallback(longId)) {
   \   000000F0   0x4620             MOV      R0,R4
   \   000000F2   0x.... 0x....      BL       emberAfPluginStandaloneBootloaderClientAllowBootloadLaunchCallback
   \   000000F6   0xB1C0             CBZ.N    R0,??CrossCallReturnLabel_8
    352                    delayedLaunchBootloader();
   \   000000F8   0xF44F 0x6180      MOV      R1,#+1024
   \   000000FC   0x1D38             ADDS     R0,R7,#+4
   \   000000FE   0x.... 0x....      BL       emEventControlSetDelayMS
   \   00000102   0x2002             MOVS     R0,#+2
   \   00000104   0x7038             STRB     R0,[R7, #+0]
   \   00000106   0x2201             MOVS     R2,#+1
   \   00000108   0x.... 0x....      ADR.W    R1,`?<Constant "Delaying %d seconds b...">`
   \   0000010C   0x.... 0x....      BL       ?Subroutine0
    353                    break;
   \                     ??CrossCallReturnLabel_0: (+1)
   \   00000110   0xE00D             B.N      ??emberAfPluginStandaloneBootloaderCommonIncomi_8
    354                  }
    355          
    356                } else {
   \                     ??emberAfPluginStandaloneBootloaderCommonIncomi_16: (+1)
   \   00000112   0x1C40             ADDS     R0,R0,#+1
   \   00000114   0xB2C0             UXTB     R0,R0
   \   00000116   0x2810             CMP      R0,#+16
   \   00000118   0xDBDA             BLT.N    ??emberAfPluginStandaloneBootloaderCommonIncomi_15
   \   0000011A   0x.... 0x....      ADR.W    R1,`?<Constant "Error: Bootload key n...">`
   \   0000011E   0x.... 0x....      BL       ?Subroutine1
    357                  bootloadPrintln("Error: Invalid response to challenge");
   \                     ??CrossCallReturnLabel_12: (+1)
   \   00000122   0x.... 0x....      ADR.W    R1,`?<Constant "Error: Invalid respon...">`
   \   00000126   0x.... 0x....      BL       ?Subroutine1
    358                }
    359                resetClientState();
   \                     ??CrossCallReturnLabel_8: (+1)
   \   0000012A   0x.... 0x....      BL       resetClientState
    360              }
    361              break;
    362            }
    363            default:
    364              // Assume error has already been printed.
    365              break;
    366            }
    367          
    368            return TRUE;
   \                     ??emberAfPluginStandaloneBootloaderCommonIncomi_8: (+1)
   \   0000012E   0x2001             MOVS     R0,#+1
   \                     ??emberAfPluginStandaloneBootloaderCommonIncomi_0: (+1)
   \   00000130   0xB007             ADD      SP,SP,#+28
   \   00000132   0xBDF0             POP      {R4-R7,PC}       ;; return
    369          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31:
   \   00000000   0x3F 0x3F          DC8      0x3F, 0x3F, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_1:
   \   00000000   0x........         DC32     clientBootloadState

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_2:
   \   00000000   0x........         DC32     clientStateStrings

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_3:
   \   00000000   0x........         DC32     bootloadServerEui64

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Client status: %p">`:
   \   00000000   0x43 0x6C          DC8 "Client status: %p"
   \              0x69 0x65    
   \              0x6E 0x74    
   \              0x20 0x73    
   \              0x74 0x61    
   \              0x74 0x75    
   \              0x73 0x3A    
   \              0x20 0x25    
   \              0x70 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "None">`:
   \   00000000   0x4E 0x6F          DC8 "None"
   \              0x6E 0x65    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Challenge Sent">`:
   \   00000000   0x43 0x68          DC8 "Challenge Sent"
   \              0x61 0x6C    
   \              0x6C 0x65    
   \              0x6E 0x67    
   \              0x65 0x20    
   \              0x53 0x65    
   \              0x6E 0x74    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Countdown to bootload...">`:
   \   00000000   0x43 0x6F          DC8 "Countdown to bootload launch"
   \              0x75 0x6E    
   \              0x74 0x64    
   \              0x6F 0x77    
   \              0x6E 0x20    
   \              0x74 0x6F    
   \              0x20 0x62    
   \              0x6F 0x6F    
   \              0x74 0x6C    
   \              0x6F 0x61    
   \              0x64 0x20    
   \              0x6C 0x61    
   \              0x75 0x6E    
   \              0x63 0x68    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Platform: 0x%X">`:
   \   00000000   0x50 0x6C          DC8 "Platform: 0x%X"
   \              0x61 0x74    
   \              0x66 0x6F    
   \              0x72 0x6D    
   \              0x3A 0x20    
   \              0x30 0x78    
   \              0x25 0x58    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Micro:    0x%X">`:
   \   00000000   0x4D 0x69          DC8 "Micro:    0x%X"
   \              0x63 0x72    
   \              0x6F 0x3A    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x30 0x78    
   \              0x25 0x58    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Phy:      0x%X">`:
   \   00000000   0x50 0x68          DC8 "Phy:      0x%X"
   \              0x79 0x3A    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x30 0x78    
   \              0x25 0x58    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "BTL Version: 0x%2X">`:
   \   00000000   0x42 0x54          DC8 "BTL Version: 0x%2X"
   \              0x4C 0x20    
   \              0x56 0x65    
   \              0x72 0x73    
   \              0x69 0x6F    
   \              0x6E 0x3A    
   \              0x20 0x30    
   \              0x78 0x25    
   \              0x32 0x58    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "MFG ID:   0x%2X">`:
   \   00000000   0x4D 0x46          DC8 "MFG ID:   0x%2X"
   \              0x47 0x20    
   \              0x49 0x44    
   \              0x3A 0x20    
   \              0x20 0x20    
   \              0x30 0x78    
   \              0x25 0x32    
   \              0x58 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Board Name: ">`:
   \   00000000   0x42 0x6F          DC8 "Board Name: "
   \              0x61 0x72    
   \              0x64 0x20    
   \              0x4E 0x61    
   \              0x6D 0x65    
   \              0x3A 0x20    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "MFG Key in Token: ">`:
   \   00000000   0x4D 0x46          DC8 "MFG Key in Token: "
   \              0x47 0x20    
   \              0x4B 0x65    
   \              0x79 0x20    
   \              0x69 0x6E    
   \              0x20 0x54    
   \              0x6F 0x6B    
   \              0x65 0x6E    
   \              0x3A 0x20    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Clearing client bootl...">`:
   \   00000000   0x43 0x6C          DC8 "Clearing client bootload state"
   \              0x65 0x61    
   \              0x72 0x69    
   \              0x6E 0x67    
   \              0x20 0x63    
   \              0x6C 0x69    
   \              0x65 0x6E    
   \              0x74 0x20    
   \              0x62 0x6F    
   \              0x6F 0x74    
   \              0x6C 0x6F    
   \              0x61 0x64    
   \              0x20 0x73    
   \              0x74 0x61    
   \              0x74 0x65    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Launching standalone ...">`:
   \   00000000   0x4C 0x61          DC8 "Launching standalone bootloader now..."
   \              0x75 0x6E    
   \              0x63 0x68    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x73 0x74    
   \              0x61 0x6E    
   \              0x64 0x61    
   \              0x6C 0x6F    
   \              0x6E 0x65    
   \              0x20 0x62    
   \              0x6F 0x6F    
   \              0x74 0x6C    
   \              0x6F 0x61    
   \              0x64 0x65    
   \              0x72 0x20    
   \              0x6E 0x6F    
   \              0x77 0x2E    
   \              0x2E 0x2E    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "ERROR: Bootloader Lau...">`:
   \   00000000   0x45 0x52          DC8 "ERROR: Bootloader Launch failed: 0x%X"
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x42    
   \              0x6F 0x6F    
   \              0x74 0x6C    
   \              0x6F 0x61    
   \              0x64 0x65    
   \              0x72 0x20    
   \              0x4C 0x61    
   \              0x75 0x6E    
   \              0x63 0x68    
   \              0x20 0x66    
   \              0x61 0x69    
   \              0x6C 0x65    
   \              0x64 0x3A    
   \              0x20 0x30    
   \              0x78 0x25    
   \              0x58 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Query">`:
   \   00000000   0x51 0x75          DC8 "Query"
   \              0x65 0x72    
   \              0x79 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Launch Request">`:
   \   00000000   0x4C 0x61          DC8 "Launch Request"
   \              0x75 0x6E    
   \              0x63 0x68    
   \              0x20 0x52    
   \              0x65 0x71    
   \              0x75 0x65    
   \              0x73 0x74    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Auth Response">`:
   \   00000000   0x41 0x75          DC8 "Auth Response"
   \              0x74 0x68    
   \              0x20 0x52    
   \              0x65 0x73    
   \              0x70 0x6F    
   \              0x6E 0x73    
   \              0x65 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "??">`:
   \   00000000   0x3F 0x3F          DC8 "??"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Timeout waiting for c...">`:
   \   00000000   0x54 0x69          DC8 "Timeout waiting for challenge response"
   \              0x6D 0x65    
   \              0x6F 0x75    
   \              0x74 0x20    
   \              0x77 0x61    
   \              0x69 0x74    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x66 0x6F    
   \              0x72 0x20    
   \              0x63 0x68    
   \              0x61 0x6C    
   \              0x6C 0x65    
   \              0x6E 0x67    
   \              0x65 0x20    
   \              0x72 0x65    
   \              0x73 0x70    
   \              0x6F 0x6E    
   \              0x73 0x65    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Error: Bootload key n...">`:
   \   00000000   0x45 0x72          DC8 45H, 72H, 72H, 6FH, 72H, 3AH, 20H, 42H
   \              0x72 0x6F    
   \              0x72 0x3A    
   \              0x20 0x42    
   \   00000008   0x6F 0x6F          DC8 6FH, 6FH, 74H, 6CH, 6FH, 61H, 64H, 20H
   \              0x74 0x6C    
   \              0x6F 0x61    
   \              0x64 0x20    
   \   00000010   0x6B 0x65          DC8 6BH, 65H, 79H, 20H, 6EH, 6FH, 74H, 20H
   \              0x79 0x20    
   \              0x6E 0x6F    
   \              0x74 0x20    
   \   00000018   0x73 0x65          DC8 73H, 65H, 74H, 21H, 20H, 20H, 43H, 61H
   \              0x74 0x21    
   \              0x20 0x20    
   \              0x43 0x61    
   \   00000020   0x6E 0x6E          DC8 6EH, 6EH, 6FH, 74H, 20H, 61H, 75H, 74H
   \              0x6F 0x74    
   \              0x20 0x61    
   \              0x75 0x74    
   \   00000028   0x68 0x65          DC8 68H, 65H, 6EH, 74H, 69H, 63H, 61H, 74H
   \              0x6E 0x74    
   \              0x69 0x63    
   \              0x61 0x74    
   \   00000030   0x65 0x20          DC8 65H, 20H, 72H, 65H, 73H, 70H, 6FH, 6EH
   \              0x72 0x65    
   \              0x73 0x70    
   \              0x6F 0x6E    
   \   00000038   0x73 0x65          DC8 73H, 65H, 21H, 20H, 20H, 47H, 69H, 76H
   \              0x21 0x20    
   \              0x20 0x47    
   \              0x69 0x76    
   \   00000040   0x69 0x6E          DC8 69H, 6EH, 67H, 20H, 75H, 70H, 21H, 0
   \              0x67 0x20    
   \              0x75 0x70    
   \              0x21 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Delaying %d seconds b...">`:
   \   00000000   0x44 0x65          DC8 "Delaying %d seconds before launching bootloader"
   \              0x6C 0x61    
   \              0x79 0x69    
   \              0x6E 0x67    
   \              0x20 0x25    
   \              0x64 0x20    
   \              0x73 0x65    
   \              0x63 0x6F    
   \              0x6E 0x64    
   \              0x73 0x20    
   \              0x62 0x65    
   \              0x66 0x6F    
   \              0x72 0x65    
   \              0x20 0x6C    
   \              0x61 0x75    
   \              0x6E 0x63    
   \              0x68 0x69    
   \              0x6E 0x67    
   \              0x20 0x62    
   \              0x6F 0x6F    
   \              0x74 0x6C    
   \              0x6F 0x61    
   \              0x64 0x65    
   \              0x72 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {&"Query", &"Launch Request", &"Aut`:
   \   00000000   0x........         DC32 `?<Constant "Query">`, `?<Constant "Launch Request">`
   \              0x........   
   \   00000008   0x........         DC32 `?<Constant "Auth Response">`

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Received Standalone B...">`:
   \   00000000   0x52 0x65          DC8 "Received Standalone Bootloader message (%d): %p"
   \              0x63 0x65    
   \              0x69 0x76    
   \              0x65 0x64    
   \              0x20 0x53    
   \              0x74 0x61    
   \              0x6E 0x64    
   \              0x61 0x6C    
   \              0x6F 0x6E    
   \              0x65 0x20    
   \              0x42 0x6F    
   \              0x6F 0x74    
   \              0x6C 0x6F    
   \              0x61 0x64    
   \              0x65 0x72    
   \              0x20 0x6D    
   \              0x65 0x73    
   \              0x73 0x61    
   \              0x67 0x65    
   \              0x20 0x28    
   \              0x25 0x64    
   \              0x29 0x3A    
   \              0x20 0x25    
   \              0x70 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Error: Sender EUI64 d...">`:
   \   00000000   0x45 0x72          DC8 45H, 72H, 72H, 6FH, 72H, 3AH, 20H, 53H
   \              0x72 0x6F    
   \              0x72 0x3A    
   \              0x20 0x53    
   \   00000008   0x65 0x6E          DC8 65H, 6EH, 64H, 65H, 72H, 20H, 45H, 55H
   \              0x64 0x65    
   \              0x72 0x20    
   \              0x45 0x55    
   \   00000010   0x49 0x36          DC8 49H, 36H, 34H, 20H, 64H, 6FH, 65H, 73H
   \              0x34 0x20    
   \              0x64 0x6F    
   \              0x65 0x73    
   \   00000018   0x6E 0x27          DC8 6EH, 27H, 74H, 20H, 6DH, 61H, 74H, 63H
   \              0x74 0x20    
   \              0x6D 0x61    
   \              0x74 0x63    
   \   00000020   0x68 0x20          DC8 68H, 20H, 63H, 75H, 72H, 72H, 65H, 6EH
   \              0x63 0x75    
   \              0x72 0x72    
   \              0x65 0x6E    
   \   00000028   0x74 0x20          DC8 74H, 20H, 73H, 65H, 72H, 76H, 65H, 72H
   \              0x73 0x65    
   \              0x72 0x76    
   \              0x65 0x72    
   \   00000030   0x20 0x45          DC8 20H, 45H, 55H, 49H, 36H, 34H, 0
   \              0x55 0x49    
   \              0x36 0x34    
   \              0x00         
   \   00000037   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Standalone bootload c...">`:
   \   00000000   0x53 0x74          DC8 53H, 74H, 61H, 6EH, 64H, 61H, 6CH, 6FH
   \              0x61 0x6E    
   \              0x64 0x61    
   \              0x6C 0x6F    
   \   00000008   0x6E 0x65          DC8 6EH, 65H, 20H, 62H, 6FH, 6FH, 74H, 6CH
   \              0x20 0x62    
   \              0x6F 0x6F    
   \              0x74 0x6C    
   \   00000010   0x6F 0x61          DC8 6FH, 61H, 64H, 20H, 63H, 6CH, 69H, 65H
   \              0x64 0x20    
   \              0x63 0x6C    
   \              0x69 0x65    
   \   00000018   0x6E 0x74          DC8 6EH, 74H, 20H, 70H, 6CH, 75H, 67H, 69H
   \              0x20 0x70    
   \              0x6C 0x75    
   \              0x67 0x69    
   \   00000020   0x6E 0x20          DC8 6EH, 20H, 74H, 6FH, 6CH, 64H, 20H, 74H
   \              0x74 0x6F    
   \              0x6C 0x64    
   \              0x20 0x74    
   \   00000028   0x6F 0x20          DC8 6FH, 20H, 69H, 67H, 6EH, 6FH, 72H, 65H
   \              0x69 0x67    
   \              0x6E 0x6F    
   \              0x72 0x65    
   \   00000030   0x20 0x69          DC8 20H, 69H, 6EH, 63H, 6FH, 6DH, 69H, 6EH
   \              0x6E 0x63    
   \              0x6F 0x6D    
   \              0x69 0x6E    
   \   00000038   0x67 0x20          DC8 67H, 20H, 6DH, 65H, 73H, 73H, 61H, 67H
   \              0x6D 0x65    
   \              0x73 0x73    
   \              0x61 0x67    
   \   00000040   0x65 0x00          DC8 65H, 0
   \   00000042   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Error: Challenge-Resp...">`:
   \   00000000   0x45 0x72          DC8 "Error: Challenge-Response too short (%d < %d)"
   \              0x72 0x6F    
   \              0x72 0x3A    
   \              0x20 0x43    
   \              0x68 0x61    
   \              0x6C 0x6C    
   \              0x65 0x6E    
   \              0x67 0x65    
   \              0x2D 0x52    
   \              0x65 0x73    
   \              0x70 0x6F    
   \              0x6E 0x73    
   \              0x65 0x20    
   \              0x74 0x6F    
   \              0x6F 0x20    
   \              0x73 0x68    
   \              0x6F 0x72    
   \              0x74 0x20    
   \              0x28 0x25    
   \              0x64 0x20    
   \              0x3C 0x20    
   \              0x25 0x64    
   \              0x29 0x00    
   \   0000002E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Error: Invalid respon...">`:
   \   00000000   0x45 0x72          DC8 "Error: Invalid response to challenge"
   \              0x72 0x6F    
   \              0x72 0x3A    
   \              0x20 0x49    
   \              0x6E 0x76    
   \              0x61 0x6C    
   \              0x69 0x64    
   \              0x20 0x72    
   \              0x65 0x73    
   \              0x70 0x6F    
   \              0x6E 0x73    
   \              0x65 0x20    
   \              0x74 0x6F    
   \              0x20 0x63    
   \              0x68 0x61    
   \              0x6C 0x6C    
   \              0x65 0x6E    
   \              0x67 0x65    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      48   emAfStandaloneBootloaderClientPrintStatus
        48   -> emAfStandaloneBootloaderClientGetInfo
        48   -> emAfStandaloneBootloaderClientGetKey
        48   -> emAfStandaloneBootloaderClientGetMfgInfo
        48   -> emAfStandaloneBootloaderCommonPrintHardwareTag
        48   -> emberAfPrint
        48   -> emberAfPrintln
        48   -> printZigbeeKey
       8   emberAfPluginStandaloneBootloaderClientMyEventEventHandler
         8   -> emAfStandaloneBootloaderClientLaunch
         8   -> emberAfPrintln
         8   -> emberSerialWaitSend
         0   -> resetClientState
      48   emberAfPluginStandaloneBootloaderCommonIncomingMessageCallback
        48   -> emAfPluginStandaloneBootloaderClientCheckBootloader
        48   -> emAfStandaloneBootloaderClientEncrypt
        48   -> emAfStandaloneBootloaderClientGetKey
        48   -> emEventControlSetDelayMS
        48   -> emberAfPluginStandaloneBootloaderClientAllowBootloadLaunchCallback
        48   -> emberAfPluginStandaloneBootloaderClientAllowIncomingMessageCallback
        48   -> emberAfPluginStandaloneBootloaderCommonCheckIncomingMessage
        48   -> emberAfPrintln
        48   -> halCommonMemCompare
        48   -> resetClientState
        48   -> sendChallenge
        48   -> sendQueryResponse
       8   resetClientState
         8   -> emberAfPrintln
         8   -> halCommonMemSet
      96   sendChallenge
        96   -> emAfStandaloneBootloaderClientGetInfo
        96   -> emAfStandaloneBootloaderClientGetRandomNumber
        96   -> emEventControlSetDelayMS
        96   -> emberAfGetEui64
        96   -> emberAfPluginStandaloneBootloaderCommonMakeHeader
        96   -> emberAfPluginStandaloneBootloaderCommonSendMessage
        96   -> halCommonMemMove
      96   sendQueryResponse
        96   -> emAfStandaloneBootloaderClientGetInfo
        96   -> emAfStandaloneBootloaderClientGetMfgInfo
        96   -> emberAfPluginStandaloneBootloaderCommonMakeHeader
        96   -> emberAfPluginStandaloneBootloaderCommonSendMessage


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ?<Constant "??">
      16  ?<Constant "Auth Response">
      20  ?<Constant "BTL Version: 0x%2X">
      16  ?<Constant "Board Name: ">
      16  ?<Constant "Challenge Sent">
      32  ?<Constant "Clearing client bootl...">
      20  ?<Constant "Client status: %p">
      32  ?<Constant "Countdown to bootload...">
      48  ?<Constant "Delaying %d seconds b...">
      40  ?<Constant "ERROR: Bootloader Lau...">
      72  ?<Constant "Error: Bootload key n...">
      48  ?<Constant "Error: Challenge-Resp...">
      40  ?<Constant "Error: Invalid respon...">
      56  ?<Constant "Error: Sender EUI64 d...">
      16  ?<Constant "Launch Request">
      40  ?<Constant "Launching standalone ...">
      16  ?<Constant "MFG ID:   0x%2X">
      20  ?<Constant "MFG Key in Token: ">
      16  ?<Constant "Micro:    0x%X">
       8  ?<Constant "None">
      16  ?<Constant "Phy:      0x%X">
      16  ?<Constant "Platform: 0x%X">
       8  ?<Constant "Query">
      48  ?<Constant "Received Standalone B...">
      68  ?<Constant "Standalone bootload c...">
      40  ?<Constant "Timeout waiting for c...">
      12  ?<Constant {&"Query", &"Launch Request", &"Aut
       4  ??DataTable31
       4  ??DataTable31_1
       4  ??DataTable31_2
       4  ??DataTable31_3
       6  ?Subroutine0
       6  ?Subroutine1
      12  ?Subroutine2
      12  ?Subroutine3
       8  bootloadServerEui64
      28  clientBootloadState
          emberAfPluginStandaloneBootloaderClientMyEventEventControl
          challenge
      12  clientStateStrings
     144  emAfStandaloneBootloaderClientPrintStatus
      62  emberAfPluginStandaloneBootloaderClientMyEventEventHandler
     308  emberAfPluginStandaloneBootloaderCommonIncomingMessageCallback
      28  resetClientState
     190  sendChallenge
     132  sendQueryResponse

 
    28 bytes in section .bss
    20 bytes in section .data
   100 bytes in section .rodata
 1 600 bytes in section .text
 
 1 600 bytes of CODE  memory
   100 bytes of CONST memory
    48 bytes of DATA  memory

Errors: none
Warnings: 3
