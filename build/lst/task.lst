###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        09/Sep/2015  17:13:17
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\task.c
#    Command line =  
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\task.c -D NULL_BTL
#        -D CORTEXM3 -D CORTEXM3_EMBER_MICRO -D CORTEXM3_EM357 -D PHY_EM3XX -D
#        "APPLICATION_TOKEN_HEADER=\"app/framework/util/tokens.h\"" -D
#        "ATTRIBUTE_STORAGE_CONFIGURATION=\"app/builder/ZigbeeRoute/ZigbeeRoute_endpoint_config.h\""
#        -D "BOARD_HEADER=\"app\builder\ZigbeeRoute\ZigbeeRoute_board.h\"" -D
#        "CONFIGURATION_HEADER=\"app/framework/util/config.h\"" -D
#        "GENERATED_TOKEN_HEADER=\"app/builder/ZigbeeRoute/ZigbeeRoute_tokens.h\""
#        -D "PLATFORM_HEADER=\"hal/micro/cortexm3/compiler/iar.h\"" -D
#        "ZA_GENERATED_HEADER=\"app/builder/ZigbeeRoute/ZigbeeRoute.h\"" -D
#        "__SOURCEFILE__=\"task.c\"" -lC
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\build\lst\
#        --diag_suppress Pa050 -o
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\build\obj\ --debug
#        --endian=little --cpu=Cortex-M3 --no_path_in_file_macros
#        --separate_cluster_for_initialized_variables -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\ -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\ -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\ -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\app\framework\include\
#        -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\app\util\
#        -I E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\stack\
#        -I E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\hal\
#        -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\hal\..\
#        -Ohz --use_c++_inline
#    List file    =  
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\build\lst\task.lst
#    Object file  =  
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\build\obj\task.o
#
###############################################################################

E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\task.c
      1          
      2          
      3          
      4          
      5          //-----------------------------Khai bao thu vien---------------------//
      6          
      7          
      8          #include "app/framework/include/af.h"
      9          #include "task.h"
     10          #include "ButtonExe.h"
     11          #include "halDelay.h"
     12          #include "UART_task.h"
     13          
     14          //-----------------------------Khai bao bien-------------------------//
     15          
     16          
     17          

   \                                 In section .bss, align 4
     18          int16u TaskData[64];
   \                     TaskData:
   \   00000000                      DS8 128
     19          
     20          
     21          
     22          //---------------------Struct------------------//
     23          
     24          typedef struct {
     25              int16u BlinkLedID;
     26              int16u Length;
     27              int16u DelayTime;
     28              int16u BlinkCnt;
     29              int16u MaxCnt;
     30              int16u BeforeTimer;
     31          } TaskBlinkLedData;
     32          typedef struct {
     33          	int16u ID;
     34          	int16u Length;
     35          	int16u TimeCountDown;
     36          	int16u BeforeTimer;
     37          }TaskResetMCUData;
     38          
     39          typedef struct {
     40              int16u ButtonDetectID;
     41              int16u Length;
     42              int16u StateBefore;
     43              int16u PressCnt;
     44              int16u PressOnTime;
     45          	int16u ComboPressCnt;
     46          
     47          }TaskButtonDetectData;
     48          
     49          typedef struct {
     50              int16u ID;
     51              int16u Length;
     52              int16u TimeMax;
     53          	int16u TimeCnt;
     54              int16u Cycle;
     55              int16u BeforeTimer;
     56          }TaskJoinData;
     57          
     58          typedef struct{
     59          	int16u ID;
     60          	int16u Length;
     61          	int16u Endpoint;
     62          	int16u Value;
     63          
     64          }TaskOnOffAttributeChangeData;
     65          
     66          typedef struct {
     67            /** The AttributeID of on-off cluster */
     68            int16u AttributeID;
     69            /** The Status  */
     70            int8u Status;
     71            /** The DataType. */
     72            int8u DataType;
     73            /** Value. */
     74            int8u Value;
     75          
     76          } EmberOnOffAttributeResponse;
     77          #define	EmberOnOffAttributeResponseLength	5
     78          //------------------------------Xu li chuong trinh-------------------//
     79          
     80          
     81          
     82          
     83          
     84          //------------------------------Common Utility-----------------------//
     85          
     86          
     87          //------------------------------Task Utility-------------------------//

   \                                 In section .text, align 2, keep-with-next
     88          unsigned char GetLastTask(void){
     89              unsigned char Head = 0;
   \                     GetLastTask: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
     90              unsigned char Length = 0;
   \   00000002   0x.... 0x....      LDR.W    R1,??DataTable11_1
   \   00000006   0xE005             B.N      ??GetLastTask_0
     91              while(TaskData[Head] != 0){
     92                  if(TaskData[Head] != 0){
     93                      Length = TaskData[Head+1]+2;
     94                      Head = Head+Length;
   \                     ??GetLastTask_1: (+1)
   \   00000008   0xEB01 0x0240      ADD      R2,R1,R0, LSL #+1
   \   0000000C   0x8852             LDRH     R2,[R2, #+2]
   \   0000000E   0x1810             ADDS     R0,R2,R0
   \   00000010   0x1C80             ADDS     R0,R0,#+2
   \   00000012   0xB2C0             UXTB     R0,R0
     95                  }
     96              }
   \                     ??GetLastTask_0: (+1)
   \   00000014   0xF831 0x2010      LDRH     R2,[R1, R0, LSL #+1]
   \   00000018   0x2A00             CMP      R2,#+0
   \   0000001A   0xD1F5             BNE.N    ??GetLastTask_1
     97              return Head;
   \   0000001C   0x4770             BX       LR               ;; return
     98          }

   \                                 In section .text, align 2, keep-with-next
     99          void TaskDelete (unsigned char head){
   \                     TaskDelete: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4601             MOV      R1,R0
    100              unsigned char TaskDataLength = 0;
    101              TaskDataLength = TaskData[head+1]+2;
   \   00000004   0x460B             MOV      R3,R1
   \   00000006   0x.... 0x....      LDR.W    R4,??DataTable11_1
   \   0000000A   0xEB04 0x0043      ADD      R0,R4,R3, LSL #+1
    102              MEMCOPY(&TaskData[head], &TaskData[head + TaskDataLength], (TASKDATASIZE - head - TaskDataLength)*2);
   \   0000000E   0xF1C1 0x0140      RSB      R1,R1,#+64
   \   00000012   0x8842             LDRH     R2,[R0, #+2]
   \   00000014   0x1C95             ADDS     R5,R2,#+2
   \   00000016   0xB2ED             UXTB     R5,R5
   \   00000018   0x1B49             SUBS     R1,R1,R5
   \   0000001A   0x004A             LSLS     R2,R1,#+1
   \   0000001C   0x18E9             ADDS     R1,R5,R3
   \   0000001E   0xEB04 0x0141      ADD      R1,R4,R1, LSL #+1
   \   00000022   0xE8BD 0x4038      POP      {R3-R5,LR}
   \   00000026   0xB292             UXTH     R2,R2
   \   00000028   0x.... 0x....      B.W      halCommonMemMove
    103          }

   \                                 In section .text, align 2, keep-with-next
    104          unsigned char FindTaskID(unsigned char TaskID){
    105              unsigned char Head;
    106              unsigned char CurrentTaskID;
    107          
    108              Head = 0;
    109              CurrentTaskID = TaskData[0];
   \                     FindTaskID: (+1)
   \   00000000   0x.... 0x....      LDR.W    R2,??DataTable11_1
   \   00000004   0x7813             LDRB     R3,[R2, #+0]
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0xE007             B.N      ??FindTaskID_0
    110              while(CurrentTaskID !=0){
    111          
    112                  if(TaskID == CurrentTaskID){
    113                      return Head;
    114                  }
    115                  else{
    116                       Head = Head + TaskData[Head+1]+2;
   \                     ??FindTaskID_1: (+1)
   \   0000000A   0xEB02 0x0341      ADD      R3,R2,R1, LSL #+1
   \   0000000E   0x885B             LDRH     R3,[R3, #+2]
   \   00000010   0x1859             ADDS     R1,R3,R1
   \   00000012   0x1C89             ADDS     R1,R1,#+2
   \   00000014   0xB2C9             UXTB     R1,R1
    117                       CurrentTaskID = TaskData[Head];
   \   00000016   0xF812 0x3011      LDRB     R3,[R2, R1, LSL #+1]
    118                  }
   \                     ??FindTaskID_0: (+1)
   \   0000001A   0xB11B             CBZ.N    R3,??FindTaskID_2
   \   0000001C   0x4298             CMP      R0,R3
   \   0000001E   0xD1F4             BNE.N    ??FindTaskID_1
   \   00000020   0x4608             MOV      R0,R1
   \   00000022   0x4770             BX       LR
    119              }
    120              return TaskOK;
   \                     ??FindTaskID_2: (+1)
   \   00000024   0x20FF             MOVS     R0,#+255
   \   00000026   0x4770             BX       LR               ;; return
    121          }

   \                                 In section .text, align 2, keep-with-next
    122          int8u ClearTask(int8u taskID){
   \                     ClearTask: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    123          	int8u taskPos;
    124          	taskPos = FindTaskID(taskID);
   \   00000002   0x.... 0x....      BL       FindTaskID
    125          	if(taskPos != TaskOK){
   \   00000006   0x28FF             CMP      R0,#+255
   \   00000008   0xD003             BEQ.N    ??ClearTask_0
    126          		 TaskDelete(taskPos);
   \   0000000A   0x.... 0x....      BL       TaskDelete
    127          		 return TaskClearOK;
   \   0000000E   0x20FF             MOVS     R0,#+255
   \   00000010   0xBD02             POP      {R1,PC}
    128          	}
    129          	else{
    130          		return TaskIdNotFound;
   \                     ??ClearTask_0: (+1)
   \   00000012   0x2001             MOVS     R0,#+1
   \   00000014   0xBD02             POP      {R1,PC}          ;; return
    131          	}
    132          
    133          }
    134          
    135          //-----------------------------************--------------------------//
    136          
    137          
    138          //-----------------------------Send and Receiver Utility-------------//
    139          
    140          
    141          

   \                                 In section .text, align 2, keep-with-next
    142          int8u SendViaBindingTable (int8u switchStatus, int8u sourceEndpoint){
   \                     SendViaBindingTable: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
    143          	int8u i;
    144          	EmberBindingTableEntry result;
    145          	EmberStatus bindStatus;
    146              EmberStatus sendStatus;
    147          
    148          
    149          
    150          	for (i = 0; i < EMBER_BINDING_TABLE_SIZE; i++) {
   \   00000008   0x2600             MOVS     R6,#+0
   \   0000000A   0x....             ADR.N    R7,??DataTable9  ;; ""
    151          		bindStatus = emberGetBinding(i, &result);
    152          		if (bindStatus == EMBER_SUCCESS) {
   \                     ??SendViaBindingTable_0: (+1)
   \   0000000C   0xA900             ADD      R1,SP,#+0
   \   0000000E   0x4630             MOV      R0,R6
   \   00000010   0x.... 0x....      BL       emberGetBinding
   \   00000014   0xB9D8             CBNZ.N   R0,??SendViaBindingTable_1
    153          			if (result.type > EMBER_MULTICAST_BINDING) {
   \   00000016   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001A   0x2804             CMP      R0,#+4
   \   0000001C   0xDB03             BLT.N    ??SendViaBindingTable_2
    154          				result.type = 4;  // last entry in the string list above
   \   0000001E   0x2004             MOVS     R0,#+4
   \   00000020   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   00000024   0xE000             B.N      ??SendViaBindingTable_3
    155          			}
    156          			if (result.type != EMBER_UNUSED_BINDING) {
   \                     ??SendViaBindingTable_2: (+1)
   \   00000026   0xB190             CBZ.N    R0,??SendViaBindingTable_1
    157          				if(result.local == sourceEndpoint){
   \                     ??SendViaBindingTable_3: (+1)
   \   00000028   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   0000002C   0x42A8             CMP      R0,R5
   \   0000002E   0xD10E             BNE.N    ??SendViaBindingTable_1
    158          					if(switchStatus == 1){
   \   00000030   0x2C01             CMP      R4,#+1
   \   00000032   0x463B             MOV      R3,R7
   \   00000034   0xD101             BNE.N    ??SendViaBindingTable_4
    159          						emberAfFillCommandOnOffClusterOn();
   \   00000036   0x2201             MOVS     R2,#+1
   \   00000038   0xE000             B.N      ??SendViaBindingTable_5
    160          					}
    161          					else{
    162          						emberAfFillCommandOnOffClusterOff();
   \                     ??SendViaBindingTable_4: (+1)
   \   0000003A   0x2200             MOVS     R2,#+0
   \                     ??SendViaBindingTable_5: (+1)
   \   0000003C   0x2106             MOVS     R1,#+6
   \   0000003E   0x2001             MOVS     R0,#+1
   \   00000040   0x.... 0x....      BL       emberAfFillExternalBuffer
    163          					}
    164          					sendStatus = emberAfSendCommandUnicast(EMBER_OUTGOING_VIA_BINDING,i); // Send Bind
   \   00000044   0x4631             MOV      R1,R6
   \   00000046   0x2002             MOVS     R0,#+2
   \   00000048   0x.... 0x....      BL       emberAfSendCommandUnicast
    165          					if(sendStatus != EMBER_SUCCESS){
   \   0000004C   0xB920             CBNZ.N   R0,??SendViaBindingTable_6
    166          						return sendStatus;
    167          					}
    168          				}
    169          			}
    170          		}
    171          	}
   \                     ??SendViaBindingTable_1: (+1)
   \   0000004E   0x1C76             ADDS     R6,R6,#+1
   \   00000050   0xB2F6             UXTB     R6,R6
   \   00000052   0x2E0A             CMP      R6,#+10
   \   00000054   0xDBDA             BLT.N    ??SendViaBindingTable_0
    172              return EMBER_SUCCESS;
   \   00000056   0x2000             MOVS     R0,#+0
   \                     ??SendViaBindingTable_6: (+1)
   \   00000058   0xB005             ADD      SP,SP,#+20
   \   0000005A   0xBDF0             POP      {R4-R7,PC}       ;; return
    173          }
    174          
    175          
    176          //-----------------------------************--------------------------//
    177          
    178          
    179          //------------------------------BlinkLedTask-------------------------//

   \                                 In section .text, align 2, keep-with-next
    180          void CallTaskBlinkLed (int8u n, int16u delayTime, int16u maxCnt){
   \                     CallTaskBlinkLed: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
   \   00000008   0x4616             MOV      R6,R2
    181              int8u TaskDulicateStatus;
    182              TaskDulicateStatus = FindTaskID(n);
    183              if(TaskDulicateStatus == TaskOK){
   \   0000000A   0x.... 0x....      BL       FindTaskID
   \   0000000E   0x28FF             CMP      R0,#+255
   \   00000010   0xD117             BNE.N    ??CallTaskBlinkLed_0
    184                  TaskBlinkLedData BlinkData;
    185                  BlinkData.BlinkLedID = n;
    186                  BlinkData.Length = 4;
   \   00000012   0x2004             MOVS     R0,#+4
   \   00000014   0xF8AD 0x0002      STRH     R0,[SP, #+2]
   \   00000018   0xF8AD 0x4000      STRH     R4,[SP, #+0]
    187                  BlinkData.DelayTime = delayTime;
    188                  BlinkData.MaxCnt = maxCnt;
    189                  BlinkData.BlinkCnt = 0;
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0xF8AD 0x5004      STRH     R5,[SP, #+4]
   \   00000022   0xF8AD 0x6008      STRH     R6,[SP, #+8]
   \   00000026   0x.... 0x....      BL       ??Subroutine2_0
    190                  BlinkData.BeforeTimer = (int16u)halCommonGetInt32uMillisecondTick();
   \                     ??CrossCallReturnLabel_1: (+1)
   \   0000002A   0xF8AD 0x000A      STRH     R0,[SP, #+10]
    191          
    192                  MEMCOPY(&TaskData[GetLastTask()],&BlinkData, sizeof(TaskBlinkLedData));
   \   0000002E   0x.... 0x....      BL       GetLastTask
   \   00000032   0x220C             MOVS     R2,#+12
   \   00000034   0x.... 0x....      LDR.W    R3,??DataTable11_1
   \   00000038   0xA900             ADD      R1,SP,#+0
   \   0000003A   0xEB03 0x0040      ADD      R0,R3,R0, LSL #+1
   \   0000003E   0x.... 0x....      BL       halCommonMemMove
    193              }
    194              else{
    195              }
    196          }
   \                     ??CallTaskBlinkLed_0: (+1)
   \   00000042   0xBD7F             POP      {R0-R6,PC}       ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2: (+1)
   \   00000000   0xF8BD 0x0006      LDRH     R0,[SP, #+6]
   \   00000004   0x1C40             ADDS     R0,R0,#+1
   \                     ??Subroutine2_0: (+1)
   \   00000006   0xF8AD 0x0006      STRH     R0,[SP, #+6]
   \   0000000A   0x.... 0x....      B.W      halCommonGetInt32uMillisecondTick

   \                                 In section .text, align 2, keep-with-next
    197          void ClearAllBlinkTask(void){
   \                     ClearAllBlinkTask: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    198          	ClearTask(TaBlinkLed1);
   \   00000002   0x2001             MOVS     R0,#+1
   \   00000004   0x.... 0x....      BL       ClearTask
    199          	ClearTask(TaBlinkLed2);
   \   00000008   0x2002             MOVS     R0,#+2
   \   0000000A   0x.... 0x....      BL       ClearTask
    200          	ClearTask(TaBlinkLed3);
   \   0000000E   0x2003             MOVS     R0,#+3
   \   00000010   0x.... 0x....      BL       ClearTask
    201          	ClearTask(TaBlinkLed4);
   \   00000014   0x2004             MOVS     R0,#+4
   \   00000016   0x.... 0x....      BL       ClearTask
    202          	ClearTask(TaBlinkLedAll);
   \   0000001A   0xE8BD 0x4002      POP      {R1,LR}
   \   0000001E   0x2005             MOVS     R0,#+5
   \   00000020   0x....             B.N      ClearTask
    203          
    204          }

   \                                 In section .text, align 2, keep-with-next
    205          unsigned char TaskBlinkLed(int16u *Data){
   \                     TaskBlinkLed: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
   \   00000004   0x.... 0x....      BL       ?Subroutine3
    206          	TaskBlinkLedData BlinkLedData;
    207          	int8u Result;
    208          
    209          	MEMCOPY(&BlinkLedData,Data, sizeof(TaskBlinkLedData));
    210          
    211              if(CommonGetDurationTime(BlinkLedData.BeforeTimer) > BlinkLedData.DelayTime){
   \                     ??CrossCallReturnLabel_6: (+1)
   \   00000008   0xF8BD 0x000A      LDRH     R0,[SP, #+10]
   \   0000000C   0x.... 0x....      BL       CommonGetDurationTime
   \   00000010   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000014   0x4281             CMP      R1,R0
   \   00000016   0xD218             BCS.N    ??TaskBlinkLed_0
    212          		switch (BlinkLedData.BlinkLedID){
   \   00000018   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   0000001C   0x2801             CMP      R0,#+1
   \   0000001E   0xD00E             BEQ.N    ??TaskBlinkLed_1
   \   00000020   0xD30F             BCC.N    ??TaskBlinkLed_2
   \   00000022   0x2803             CMP      R0,#+3
   \   00000024   0xD006             BEQ.N    ??TaskBlinkLed_3
   \   00000026   0xD303             BCC.N    ??TaskBlinkLed_4
   \   00000028   0x2805             CMP      R0,#+5
   \   0000002A   0xD007             BEQ.N    ??TaskBlinkLed_5
   \   0000002C   0xD304             BCC.N    ??TaskBlinkLed_6
   \   0000002E   0xE008             B.N      ??TaskBlinkLed_2
    213          			case TaBlinkLed1:
    214          				UartSendToggleLed(1);
    215          			break;
    216          			case TaBlinkLed2:
    217          				UartSendToggleLed(2);
   \                     ??TaskBlinkLed_4: (+1)
   \   00000030   0x2002             MOVS     R0,#+2
   \   00000032   0xE004             B.N      ??TaskBlinkLed_1
    218          			break;
    219          			case TaBlinkLed3:
    220          				UartSendToggleLed(4);
   \                     ??TaskBlinkLed_3: (+1)
   \   00000034   0x2004             MOVS     R0,#+4
   \   00000036   0xE002             B.N      ??TaskBlinkLed_1
    221          			break;
    222          			case TaBlinkLed4:
    223          				UartSendToggleLed(8);
   \                     ??TaskBlinkLed_6: (+1)
   \   00000038   0x2008             MOVS     R0,#+8
   \   0000003A   0xE000             B.N      ??TaskBlinkLed_1
    224          			break;
    225          			case TaBlinkLedAll:
    226          				UartSendToggleLed(0xF);
   \                     ??TaskBlinkLed_5: (+1)
   \   0000003C   0x200F             MOVS     R0,#+15
   \                     ??TaskBlinkLed_1: (+1)
   \   0000003E   0x.... 0x....      BL       UartSendToggleLed
    227          			break;
    228          			default:
    229          			break;
    230          		}
    231                 	BlinkLedData.BlinkCnt++;
   \                     ??TaskBlinkLed_2: (+1)
   \   00000042   0x.... 0x....      BL       ?Subroutine2
    232                  BlinkLedData.BeforeTimer = (int16u)halCommonGetInt32uMillisecondTick();
    233              }
   \                     ??CrossCallReturnLabel_3: (+1)
   \   00000046   0xF8AD 0x000A      STRH     R0,[SP, #+10]
    234          
    235              if(BlinkLedData.BlinkCnt > BlinkLedData.MaxCnt){
   \                     ??TaskBlinkLed_0: (+1)
   \   0000004A   0xF8BD 0x0008      LDRH     R0,[SP, #+8]
   \   0000004E   0xF8BD 0x1006      LDRH     R1,[SP, #+6]
   \   00000052   0x4288             CMP      R0,R1
   \   00000054   0xBF38             IT       CC 
    236                  Result =  CompleteTask;
   \   00000056   0x2001             MOVCC    R0,#+1
   \   00000058   0xD305             BCC.N    ??TaskBlinkLed_7
    237          	}else{
    238          		MEMCOPY(Data, &BlinkLedData, sizeof(TaskBlinkLedData));
   \   0000005A   0x220C             MOVS     R2,#+12
   \   0000005C   0xA900             ADD      R1,SP,#+0
   \   0000005E   0x4620             MOV      R0,R4
   \   00000060   0x.... 0x....      BL       halCommonMemMove
    239          		Result =  ContinuteTask;
   \   00000064   0x2002             MOVS     R0,#+2
    240          	}
    241          	return Result;
   \                     ??TaskBlinkLed_7: (+1)
   \   00000066   0xB004             ADD      SP,SP,#+16
   \   00000068   0xBD10             POP      {R4,PC}          ;; return
    242          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3: (+1)
   \   00000000   0x4604             MOV      R4,R0
   \                     ??Subroutine3_0: (+1)
   \   00000002   0x220C             MOVS     R2,#+12
   \   00000004   0x4621             MOV      R1,R4
   \   00000006   0xA800             ADD      R0,SP,#+0
   \   00000008   0x.... 0x....      B.W      halCommonMemMove
    243          
    244          //-------------------**----------********---------**-------------------//
    245          
    246          
    247          
    248          
    249          
    250          //------------------------------ScanButtonTask-------------------------//
    251          

   \                                 In section .text, align 2, keep-with-next
    252          void CallButtonDetectTask(void){
   \                     CallButtonDetectTask: (+1)
   \   00000000   0xB5E0             PUSH     {R5-R7,LR}
    253              TaskButtonDetectData ButtonDetectData;
    254          
    255              ButtonDetectData.ButtonDetectID = TaButtonDetect;
   \   00000002   0x2006             MOVS     R0,#+6
   \   00000004   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    256              ButtonDetectData.Length = 4;
   \   00000008   0x2004             MOVS     R0,#+4
   \   0000000A   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    257              ButtonDetectData.StateBefore = ((BUTTON0_IN >> 4) & 0x01);
   \   0000000E   0x....             LDR.N    R0,??DataTable11_2  ;; 0x4000b408
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0xF3C0 0x1000      UBFX     R0,R0,#+4,#+1
   \   00000016   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    258              ButtonDetectData.PressCnt = 0;
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x.... 0x....      BL       ??Subroutine2_0
    259              ButtonDetectData.PressOnTime = (int16u)halCommonGetInt32uMillisecondTick();
   \                     ??CrossCallReturnLabel_0: (+1)
   \   00000020   0xF8AD 0x0008      STRH     R0,[SP, #+8]
    260          	ButtonDetectData.ComboPressCnt = 0;
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0xF8AD 0x000A      STRH     R0,[SP, #+10]
    261          
    262              MEMCOPY(&TaskData[GetLastTask()],&ButtonDetectData, sizeof(TaskButtonDetectData));
   \   0000002A   0x.... 0x....      BL       GetLastTask
   \   0000002E   0x220C             MOVS     R2,#+12
   \   00000030   0x....             B.N      ??Subroutine5_0
    263          }

   \                                 In section .text, align 2, keep-with-next
   \                     ??Subroutine5_0: (+1)
   \   00000000   0x....             LDR.N    R3,??DataTable11_1
   \                     ??Subroutine5_1: (+1)
   \   00000002   0xA900             ADD      R1,SP,#+0
   \   00000004   0xEB03 0x0040      ADD      R0,R3,R0, LSL #+1
   \   00000008   0x.... 0x....      BL       halCommonMemMove
   \   0000000C   0xBD07             POP      {R0-R2,PC}       ;; return

   \                                 In section .text, align 2, keep-with-next
    264          unsigned char TaskButtonDetect (int16u *Data){
   \                     TaskButtonDetect: (+1)
   \   00000000   0xB53E             PUSH     {R1-R5,LR}
   \   00000002   0x.... 0x....      BL       ?Subroutine3
    265          	unsigned int ButtonStateCurrent;
    266          	TaskButtonDetectData ButtonDetectData;
    267          	MEMCOPY(&ButtonDetectData, Data, sizeof(TaskButtonDetectData));
    268          
    269              ButtonStateCurrent =  ((BUTTON0_IN >> 4) & 0x01);
   \                     ??CrossCallReturnLabel_5: (+1)
   \   00000006   0x....             LDR.N    R5,??DataTable11_2  ;; 0x4000b408
   \   00000008   0x6828             LDR      R0,[R5, #+0]
    270          
    271              if((ButtonStateCurrent == 0) && (ButtonDetectData.StateBefore ==1)){
   \   0000000A   0xF3C0 0x1000      UBFX     R0,R0,#+4,#+1
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xF8BD 0x0004      LDRH     R0,[SP, #+4]
   \   00000014   0xD12E             BNE.N    ??TaskButtonDetect_0
   \   00000016   0x2801             CMP      R0,#+1
   \   00000018   0xD11B             BNE.N    ??TaskButtonDetect_1
    272                  if(ButtonDetectData.PressCnt == 0){
   \   0000001A   0xF8BD 0x0006      LDRH     R0,[SP, #+6]
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD13F             BNE.N    ??TaskButtonDetect_2
    273                      //--------------Check Combo button-------------//
    274          			if((CommonGetDurationTime(ButtonDetectData.PressOnTime) < 500) &&
    275          			   				(CommonGetDurationTime (ButtonDetectData.PressOnTime) > 100)){
   \   00000022   0x.... 0x....      BL       ?Subroutine4
   \                     ??CrossCallReturnLabel_10: (+1)
   \   00000026   0xF5B0 0x7FFA      CMP      R0,#+500
   \   0000002A   0xDA07             BGE.N    ??TaskButtonDetect_3
   \   0000002C   0x.... 0x....      BL       ?Subroutine4
   \                     ??CrossCallReturnLabel_9: (+1)
   \   00000030   0x2865             CMP      R0,#+101
   \   00000032   0xDB03             BLT.N    ??TaskButtonDetect_3
    276          				ButtonDetectData.ComboPressCnt++;
   \   00000034   0xF8BD 0x000A      LDRH     R0,[SP, #+10]
   \   00000038   0x1C40             ADDS     R0,R0,#+1
   \   0000003A   0xE000             B.N      ??TaskButtonDetect_4
    277          			}
    278          			else{
    279          				ButtonDetectData.ComboPressCnt = 0;
   \                     ??TaskButtonDetect_3: (+1)
   \   0000003C   0x2000             MOVS     R0,#+0
   \                     ??TaskButtonDetect_4: (+1)
   \   0000003E   0xF8AD 0x000A      STRH     R0,[SP, #+10]
    280          			}
    281          			//--------------End Check----------------------//
    282                      ButtonDetectData.PressOnTime = (int16u)halCommonGetInt32uMillisecondTick();
   \   00000042   0x.... 0x....      BL       halCommonGetInt32uMillisecondTick
   \   00000046   0xF8AD 0x0008      STRH     R0,[SP, #+8]
    283          
    284                      ButtonDetectData.PressCnt += 1;
   \   0000004A   0xF8BD 0x0006      LDRH     R0,[SP, #+6]
   \   0000004E   0x1C40             ADDS     R0,R0,#+1
   \   00000050   0xE00D             B.N      ??TaskButtonDetect_5
    285                  }
    286              }
   \                     ??TaskButtonDetect_1: (+1)
   \   00000052   0x2800             CMP      R0,#+0
   \   00000054   0xBF04             ITT      EQ 
    287              else if((ButtonStateCurrent == 0) && (ButtonDetectData.StateBefore == 0)){
    288                 if(ButtonDetectData.PressCnt == 1){
   \   00000056   0xF8BD 0x0006      LDRHEQ   R0,[SP, #+6]
   \   0000005A   0x2801             CMPEQ    R0,#+1
   \   0000005C   0xD121             BNE.N    ??TaskButtonDetect_2
    289                      if(CommonGetDurationTime(ButtonDetectData.PressOnTime) > 100){
   \   0000005E   0x.... 0x....      BL       ?Subroutine4
   \                     ??CrossCallReturnLabel_8: (+1)
   \   00000062   0x2865             CMP      R0,#+101
   \   00000064   0xDB1D             BLT.N    ??TaskButtonDetect_2
    290          
    291          				beButtonPress(1);
   \   00000066   0x2001             MOVS     R0,#+1
   \   00000068   0x.... 0x....      BL       beButtonPress
    292          
    293                          ButtonDetectData.PressCnt = 0;
   \   0000006C   0x2000             MOVS     R0,#+0
   \                     ??TaskButtonDetect_5: (+1)
   \   0000006E   0xF8AD 0x0006      STRH     R0,[SP, #+6]
   \   00000072   0xE016             B.N      ??TaskButtonDetect_2
    294                      }
    295                  }
    296              }
   \                     ??TaskButtonDetect_0: (+1)
   \   00000074   0x2801             CMP      R0,#+1
   \   00000076   0xD114             BNE.N    ??TaskButtonDetect_2
    297          	else if((ButtonStateCurrent == 0) && (ButtonDetectData.StateBefore == 1)){
    298          
    299          	}
    300          	else if((ButtonStateCurrent == 1) && (ButtonDetectData.StateBefore == 1)){
    301          		//-----------------ComboButtonExe------------------//
    302          		if(CommonGetDurationTime (ButtonDetectData.PressOnTime) > 1500){
   \   00000078   0x.... 0x....      BL       ?Subroutine4
   \                     ??CrossCallReturnLabel_7: (+1)
   \   0000007C   0xF240 0x51DD      MOVW     R1,#+1501
   \   00000080   0x4288             CMP      R0,R1
   \   00000082   0xDB0E             BLT.N    ??TaskButtonDetect_2
    303          			if(ButtonDetectData.ComboPressCnt == 1){
   \   00000084   0xF8BD 0x000A      LDRH     R0,[SP, #+10]
   \   00000088   0x2801             CMP      R0,#+1
   \   0000008A   0xD102             BNE.N    ??TaskButtonDetect_6
    304          //					BindDevice
    305          				beButtonPress2Time(1);
   \   0000008C   0x.... 0x....      BL       beButtonPress2Time
    306          
    307          				ButtonDetectData.ComboPressCnt = 0;
   \   00000090   0xE004             B.N      ??TaskButtonDetect_7
    308          			}
    309          			else if (ButtonDetectData.ComboPressCnt == 2){
   \                     ??TaskButtonDetect_6: (+1)
   \   00000092   0x2802             CMP      R0,#+2
   \   00000094   0xD105             BNE.N    ??TaskButtonDetect_2
    310          //					JoinNwk
    311          				beButtonPress3Time(1);
   \   00000096   0x2001             MOVS     R0,#+1
   \   00000098   0x.... 0x....      BL       beButtonPress3Time
    312          
    313          				ButtonDetectData.ComboPressCnt = 0;
   \                     ??TaskButtonDetect_7: (+1)
   \   0000009C   0x2000             MOVS     R0,#+0
   \   0000009E   0xF8AD 0x000A      STRH     R0,[SP, #+10]
   \                     ??TaskButtonDetect_2: (+1)
   \   000000A2   0x220C             MOVS     R2,#+12
    314          			}
    315          		}
    316          		//-----------------ComboButtonExe------------------//
    317          	}
    318              ButtonDetectData.StateBefore = ((BUTTON0_IN >> 4) & 0x01);
   \   000000A4   0x6828             LDR      R0,[R5, #+0]
   \   000000A6   0xF3C0 0x1000      UBFX     R0,R0,#+4,#+1
   \   000000AA   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    319              MEMCOPY(Data,&ButtonDetectData, sizeof(TaskButtonDetectData));
   \   000000AE                      REQUIRE ?Subroutine1
   \   000000AE                      ;; // Fall through to label ?Subroutine1
    320              return ContinuteTask;
    321          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \   00000000   0xA900             ADD      R1,SP,#+0
   \   00000002   0x4620             MOV      R0,R4
   \   00000004   0x.... 0x....      BL       halCommonMemMove
   \   00000008   0x2002             MOVS     R0,#+2
   \   0000000A   0xBD3E             POP      {R1-R5,PC}       ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine4: (+1)
   \   00000000   0xF8BD 0x0008      LDRH     R0,[SP, #+8]
   \   00000004   0x.... 0x....      B.W      CommonGetDurationTime
    322          
    323          //-----------------------------************--------------------------//
    324          
    325          
    326          //-----------------------------FindAndJoinTask--------------------------//

   \                                 In section .text, align 2, keep-with-next
    327          void CallJoinTask(int8u JoinTime, int16u JoinCycle){
   \                     CallJoinTask: (+1)
   \   00000000   0xB5E0             PUSH     {R5-R7,LR}
    328          	// if Jointime = 0xFF: join forever, MinJoinCycle is 500ms, for safe, use 5000ms to join again
    329          
    330          	TaskJoinData JoinData;
    331          
    332          	JoinData.ID = TaJoin;
   \   00000002   0x2207             MOVS     R2,#+7
   \   00000004   0xF8AD 0x2000      STRH     R2,[SP, #+0]
    333          	JoinData.Length = 4;
    334          	JoinData.TimeMax =  JoinTime;
   \   00000008   0xF8AD 0x0004      STRH     R0,[SP, #+4]
   \   0000000C   0x2204             MOVS     R2,#+4
    335          	JoinData.TimeCnt =  0;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0xF8AD 0x2002      STRH     R2,[SP, #+2]
   \   00000014   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    336          	JoinData.Cycle = JoinCycle;
   \   00000018   0xF8AD 0x1008      STRH     R1,[SP, #+8]
    337          	JoinData.BeforeTimer =  (int16u)halCommonGetInt32uMillisecondTick();
   \   0000001C   0x.... 0x....      BL       halCommonGetInt32uMillisecondTick
   \   00000020   0xF8AD 0x000A      STRH     R0,[SP, #+10]
    338          //		Clear blink led if out of time out---------------------//
    339          		ClearAllBlinkTask();
   \   00000024   0x.... 0x....      BL       ClearAllBlinkTask
    340          //		alway blink all led to display joining task//
    341          		CallTaskBlinkLed(TaBlinkLedAll,10000,0xFF);
   \   00000028   0x22FF             MOVS     R2,#+255
   \   0000002A   0xF242 0x7110      MOVW     R1,#+10000
   \   0000002E   0x2005             MOVS     R0,#+5
   \   00000030   0x.... 0x....      BL       CallTaskBlinkLed
    342          //-------------------------------------------------//
    343          
    344          	MEMCOPY(&TaskData[GetLastTask()],&JoinData, sizeof(TaskJoinData));
   \   00000034   0x.... 0x....      BL       GetLastTask
   \   00000038   0x....             LDR.N    R3,??DataTable11_1
   \   0000003A   0x220C             MOVS     R2,#+12
   \   0000003C   0x....             B.N      ??Subroutine5_1
    345          
    346          }

   \                                 In section .text, align 2, keep-with-next
    347          unsigned char TaskJoin (int16u *Data){
   \                     TaskJoin: (+1)
   \   00000000   0xB53E             PUSH     {R1-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    348              EmberNetworkStatus NetworkStatus;
    349              TaskJoinData JoinData;
    350          
    351          
    352          	NetworkStatus = emberAfNetworkState();
   \   00000004   0x.... 0x....      BL       emberAfNetworkState
   \   00000008   0x4605             MOV      R5,R0
    353          	MEMCOPY(&JoinData,Data, sizeof(TaskJoinData));
   \   0000000A   0x.... 0x....      BL       ??Subroutine3_0
    354          
    355          	if( NetworkStatus == EMBER_NO_NETWORK ){
   \                     ??CrossCallReturnLabel_4: (+1)
   \   0000000E   0xB9BD             CBNZ.N   R5,??TaskJoin_0
    356          		if((JoinData.TimeMax == 0xFF) || (JoinData.TimeCnt < JoinData.TimeMax )){
   \   00000010   0xF8BD 0x0004      LDRH     R0,[SP, #+4]
   \   00000014   0x28FF             CMP      R0,#+255
   \   00000016   0xD003             BEQ.N    ??TaskJoin_1
   \   00000018   0xF8BD 0x1006      LDRH     R1,[SP, #+6]
   \   0000001C   0x4281             CMP      R1,R0
   \   0000001E   0xD211             BCS.N    ??TaskJoin_2
    357          			if((CommonGetDurationTime (JoinData.BeforeTimer)) > JoinData.Cycle){
   \                     ??TaskJoin_1: (+1)
   \   00000020   0xF8BD 0x000A      LDRH     R0,[SP, #+10]
   \   00000024   0x.... 0x....      BL       CommonGetDurationTime
   \   00000028   0xF8BD 0x1008      LDRH     R1,[SP, #+8]
   \   0000002C   0x4281             CMP      R1,R0
   \   0000002E   0xD205             BCS.N    ??TaskJoin_3
    358          				emberAfStartSearchForJoinableNetwork();
   \   00000030   0x.... 0x....      BL       emberAfStartSearchForJoinableNetworkCallback
    359          				JoinData.TimeCnt ++;
   \   00000034   0x.... 0x....      BL       ?Subroutine2
    360          				JoinData.BeforeTimer = (int16u)halCommonGetInt32uMillisecondTick();
    361          			}
    362          		}
    363          		else{
    364          			//Clear blink led if out of time out---------------------//
    365          			ClearAllBlinkTask();
    366          	   	    return CompleteTask;
    367          	   	}
    368          
    369          	}
   \                     ??CrossCallReturnLabel_2: (+1)
   \   00000038   0xF8AD 0x000A      STRH     R0,[SP, #+10]
    370          	else if( NetworkStatus == EMBER_JOINED_NETWORK){
    371          			//Clear blink Led if device join a nwk
    372          			ClearAllBlinkTask();
    373          			return CompleteTask;
    374          
    375          	}
    376          
    377          
    378              MEMCOPY(Data,&JoinData,(sizeof(TaskJoinData)));
   \                     ??TaskJoin_3: (+1)
   \   0000003C   0x220C             MOVS     R2,#+12
   \   0000003E   0x....             B.N      ?Subroutine1
   \                     ??TaskJoin_0: (+1)
   \   00000040   0x2D02             CMP      R5,#+2
   \   00000042   0xD1FB             BNE.N    ??TaskJoin_3
   \                     ??TaskJoin_2: (+1)
   \   00000044   0x.... 0x....      BL       ClearAllBlinkTask
   \   00000048   0x2001             MOVS     R0,#+1
   \   0000004A   0xBD3E             POP      {R1-R5,PC}
    379          	return ContinuteTask;
    380          
    381          }
    382          //-----------------------------************--------------------------//
    383          
    384          
    385          //-----------------------------ResetMCU------------------------------//

   \                                 In section .text, align 2, keep-with-next
    386          void CallResetMCU(int16u ResetTimeCountdown){
   \                     CallResetMCU: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    387          	TaskResetMCUData ResetMCUData;
    388          	ResetMCUData.ID = TaResetMCU;
   \   00000004   0x2109             MOVS     R1,#+9
   \   00000006   0xF8AD 0x1000      STRH     R1,[SP, #+0]
    389          	ResetMCUData.Length = 2;
    390          	ResetMCUData.TimeCountDown = ResetTimeCountdown;
   \   0000000A   0xF8AD 0x0004      STRH     R0,[SP, #+4]
   \   0000000E   0x2102             MOVS     R1,#+2
   \   00000010   0xF8AD 0x1002      STRH     R1,[SP, #+2]
    391          	ResetMCUData.BeforeTimer = (int16u)halCommonGetInt32uMillisecondTick();
   \   00000014   0x.... 0x....      BL       halCommonGetInt32uMillisecondTick
   \   00000018   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    392          
    393          	MEMCOPY(&TaskData[GetLastTask()],&ResetMCUData, sizeof(TaskResetMCUData));
   \   0000001C   0x....             B.N      ?Subroutine0
    394          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0x.... 0x....      BL       GetLastTask
   \   00000004   0x2208             MOVS     R2,#+8
   \   00000006                      REQUIRE ??Subroutine5_0
   \   00000006                      ;; // Fall through to label ??Subroutine5_0

   \                                 In section .text, align 2, keep-with-next
    395          int8u TaskResetMCU(int16u *Data){
   \                     TaskResetMCU: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    396          	TaskResetMCUData ResetMCUData;
    397          
    398          
    399          	MEMCOPY(&ResetMCUData,Data, sizeof(TaskResetMCUData));
   \   00000004   0x4601             MOV      R1,R0
   \   00000006   0x2208             MOVS     R2,#+8
   \   00000008   0xA800             ADD      R0,SP,#+0
   \   0000000A   0x.... 0x....      BL       halCommonMemMove
    400          
    401              if(CommonGetDurationTime(ResetMCUData.BeforeTimer) > ResetMCUData.TimeCountDown){
   \   0000000E   0xF8BD 0x0006      LDRH     R0,[SP, #+6]
   \   00000012   0x.... 0x....      BL       CommonGetDurationTime
   \   00000016   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   0000001A   0x4281             CMP      R1,R0
   \   0000001C   0xD203             BCS.N    ??TaskResetMCU_0
    402          		halReboot();
   \   0000001E   0x.... 0x....      BL       halReboot
    403          		return CompleteTask;
   \   00000022   0x2001             MOVS     R0,#+1
   \   00000024   0xBD0E             POP      {R1-R3,PC}
    404          	}
    405          	else{
    406          		return ContinuteTask;
   \                     ??TaskResetMCU_0: (+1)
   \   00000026   0x2002             MOVS     R0,#+2
   \   00000028   0xBD0E             POP      {R1-R3,PC}       ;; return
    407          	}
    408          }
    409          
    410          
    411          //-----------------------------************--------------------------//
    412          
    413          
    414          
    415          
    416          //----------------------On-Off Attribute Change----------------------//
    417          
    418          
    419          
    420          
    421          //-----------------------------************--------------------------//

   \                                 In section .text, align 2, keep-with-next
    422          void CallTaskOnOffAttributeChange (int8u endpoint, int8u value){
   \                     CallTaskOnOffAttributeChange: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    423          
    424          
    425          		TaskOnOffAttributeChangeData OnOffAttributeChangeData;
    426          		OnOffAttributeChangeData.ID = TaOnOffAttributeChange;
   \   00000004   0x2208             MOVS     R2,#+8
   \   00000006   0xF8AD 0x2000      STRH     R2,[SP, #+0]
    427          		OnOffAttributeChangeData.Length = 2;
    428          		OnOffAttributeChangeData.Endpoint = endpoint;
   \   0000000A   0xF8AD 0x0004      STRH     R0,[SP, #+4]
   \   0000000E   0x2202             MOVS     R2,#+2
   \   00000010   0xF8AD 0x2002      STRH     R2,[SP, #+2]
    429          		OnOffAttributeChangeData.Value = value;
   \   00000014   0xF8AD 0x1006      STRH     R1,[SP, #+6]
    430          		MEMCOPY(&TaskData[GetLastTask()],&OnOffAttributeChangeData, sizeof(TaskOnOffAttributeChangeData));
   \   00000018                      REQUIRE ?Subroutine0
   \   00000018                      ;; // Fall through to label ?Subroutine0
    431          
    432          }
    433          

   \                                 In section .text, align 2, keep-with-next
    434          int8u TaskOnOffAttributeChange(int16u *Data){
   \                     TaskOnOffAttributeChange: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
    435          	EmberStatus sendStatus;
                 	            ^
Warning[Pe550]: variable "sendStatus" was set but never used
    436          	EmberNetworkStatus	NetworkStatus;
    437          	TaskOnOffAttributeChangeData OnOffAttributeChangeData;
    438          
    439          
    440          	MEMCOPY(&OnOffAttributeChangeData,Data, sizeof(TaskOnOffAttributeChangeData));
   \   00000004   0x4601             MOV      R1,R0
   \   00000006   0x2208             MOVS     R2,#+8
   \   00000008   0xA802             ADD      R0,SP,#+8
   \   0000000A   0x.... 0x....      BL       halCommonMemMove
    441          
    442          //	Check NetWork Status, if no network, do not send, any thing to zigbee, and complete task
    443          //	If have network, first, send update to ZC.
    444          //	Second Check have any bind device, if had, send change attribute to bind device.
    445          //	Last, check status of massage send, if fall, try once time again, if still fall, complete task
    446          //	If Success, go to complete task.
    447          	NetworkStatus = emberAfNetworkState();
    448          
    449          	if(NetworkStatus == EMBER_JOINED_NETWORK) {
   \   0000000E   0x.... 0x....      BL       emberAfNetworkState
   \   00000012   0x2802             CMP      R0,#+2
   \   00000014   0xD127             BNE.N    ??TaskOnOffAttributeChange_0
    450          
    451          //	 	Send to Bind Device
    452          
    453          		sendStatus = SendViaBindingTable(OnOffAttributeChangeData.Value,OnOffAttributeChangeData.Endpoint);
   \   00000016   0xF8BD 0x100C      LDRH     R1,[SP, #+12]
   \   0000001A   0xF8BD 0x000E      LDRH     R0,[SP, #+14]
   \   0000001E   0xB2C9             UXTB     R1,R1
   \   00000020   0xB2C0             UXTB     R0,R0
   \   00000022   0x.... 0x....      BL       SendViaBindingTable
    454          //		if(sendStatus != EMBER_SUCCESS){
    455          //			return ContinuteTask;
    456          //		}
    457          
    458          //		Send On-Off AttributeResponse, Zipato stupid update :D-----------------------------//
    459          		EmberOnOffAttributeResponse OnOffAttributeResponse;
    460          		OnOffAttributeResponse.AttributeID = 0x0000;  // on-off
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0xF8AD 0x0010      STRH     R0,[SP, #+16]
    461          		OnOffAttributeResponse.Status = 0x00;   // success
   \   0000002C   0xF88D 0x0012      STRB     R0,[SP, #+18]
    462          		OnOffAttributeResponse.DataType = 0x10; //bool
    463          		OnOffAttributeResponse.Value = OnOffAttributeChangeData.Value;
    464          
    465          		emberAfFillCommandGlobalServerToClientReadAttributesResponse(0x0006,&OnOffAttributeResponse, EmberOnOffAttributeResponseLength);
   \   00000030   0x....             ADR.N    R3,??DataTable11  ;; "b"
   \   00000032   0x2010             MOVS     R0,#+16
   \   00000034   0xF88D 0x0013      STRB     R0,[SP, #+19]
   \   00000038   0x2201             MOVS     R2,#+1
   \   0000003A   0xF8BD 0x000E      LDRH     R0,[SP, #+14]
   \   0000003E   0xF88D 0x0014      STRB     R0,[SP, #+20]
   \   00000042   0x2106             MOVS     R1,#+6
   \   00000044   0x2005             MOVS     R0,#+5
   \   00000046   0x9001             STR      R0,[SP, #+4]
   \   00000048   0xA804             ADD      R0,SP,#+16
   \   0000004A   0x9000             STR      R0,[SP, #+0]
   \   0000004C   0x2008             MOVS     R0,#+8
   \   0000004E   0x.... 0x....      BL       emberAfFillExternalBuffer
    466          		emberAfSetCommandEndpoints(OnOffAttributeChangeData.Endpoint,0x0C);
   \   00000052   0xF8BD 0x000C      LDRH     R0,[SP, #+12]
   \   00000056   0x210C             MOVS     R1,#+12
   \   00000058   0xB2C0             UXTB     R0,R0
   \   0000005A   0x.... 0x....      BL       emberAfSetCommandEndpoints
    467          		sendStatus =  emberAfSendCommandUnicast(EMBER_OUTGOING_DIRECT, 0x0000);
   \   0000005E   0x2100             MOVS     R1,#+0
   \   00000060   0x2000             MOVS     R0,#+0
   \   00000062   0x.... 0x....      BL       emberAfSendCommandUnicast
    468          
    469          //		if(sendStatus != EMBER_SUCCESS){
    470          //			return ContinuteTask;
    471          //		}
    472          	}
    473          
    474          	 // on-off led
    475          
    476          		if(OnOffAttributeChangeData.Value == 1){
   \                     ??TaskOnOffAttributeChange_0: (+1)
   \   00000066   0xF8BD 0x000C      LDRH     R0,[SP, #+12]
   \   0000006A   0xF8BD 0x100E      LDRH     R1,[SP, #+14]
   \   0000006E   0x2901             CMP      R1,#+1
   \   00000070   0xB2C0             UXTB     R0,R0
   \   00000072   0xD102             BNE.N    ??TaskOnOffAttributeChange_1
    477          			CommonSetLed(OnOffAttributeChangeData.Endpoint);
   \   00000074   0x.... 0x....      BL       CommonSetLed
   \   00000078   0xE001             B.N      ??TaskOnOffAttributeChange_2
    478          		}
    479          		else{
    480          			CommonClearLed(OnOffAttributeChangeData.Endpoint);
   \                     ??TaskOnOffAttributeChange_1: (+1)
   \   0000007A   0x.... 0x....      BL       CommonClearLed
    481          		}
    482          		return CompleteTask;
   \                     ??TaskOnOffAttributeChange_2: (+1)
   \   0000007E   0x2001             MOVS     R0,#+1
   \   00000080   0xB007             ADD      SP,SP,#+28
   \   00000082   0xBD00             POP      {PC}             ;; return
    483          
    484          }
    485          
    486          
    487          
    488          
    489          
    490          //-----------------------------************--------------------------//
    491          
    492          
    493          //-----------------------------TaskRun-------------------------------//

   \                                 In section .text, align 2, keep-with-next
    494          void TaskRun (void){
   \                     TaskRun: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
    495          
    496              unsigned char TaskID;
    497              unsigned char Head;
    498              unsigned char TaskStatus;
    499          
    500              Head = 0;
   \   00000002   0x2500             MOVS     R5,#+0
    501              TaskID = TaskData[Head];
   \   00000004   0x....             LDR.N    R6,??DataTable11_1
   \                     ??TaskRun_0: (+1)
   \   00000006   0x8830             LDRH     R0,[R6, #+0]
   \   00000008   0xE005             B.N      ??TaskRun_1
    502              while (TaskID !=0){
    503                  switch (TaskID){
    504                      case TaBlinkLed1:
    505                          TaskStatus = TaskBlinkLed(&TaskData[Head]);
    506                          break;
    507                      case TaBlinkLed2:
    508                          TaskStatus = TaskBlinkLed(&TaskData[Head]);
    509                          break;
    510                      case TaBlinkLed3:
    511                          TaskStatus = TaskBlinkLed(&TaskData[Head]);
    512                          break;
    513          			case TaBlinkLed4:
    514                          TaskStatus = TaskBlinkLed(&TaskData[Head]);
    515                          break;
    516                      case TaBlinkLedAll:
    517                          TaskStatus = TaskBlinkLed(&TaskData[Head]);
    518                          break;
    519                      case TaButtonDetect:
    520                          TaskStatus = TaskButtonDetect(&TaskData[Head]);
    521          				break;
    522          			case TaJoin:
    523          				TaskStatus = TaskJoin(&TaskData[Head]);
    524          				break;
    525          			case TaOnOffAttributeChange:
    526          				TaskStatus = TaskOnOffAttributeChange(&TaskData[Head]);
    527          				break;
    528          			case TaResetMCU:
    529          				TaskStatus = TaskResetMCU(&TaskData[Head]);
    530          				break;
    531                      default:
    532                          break;
    533                  }
    534                  if(TaskStatus != CompleteTask){
    535                      Head = Head + TaskData[Head + 1]+2;
   \                     ??TaskRun_2: (+1)
   \   0000000A   0x8878             LDRH     R0,[R7, #+2]
   \   0000000C   0x1940             ADDS     R0,R0,R5
   \   0000000E   0x1C85             ADDS     R5,R0,#+2
   \   00000010   0xB2ED             UXTB     R5,R5
    536                      TaskID = TaskData[Head];
   \   00000012   0xF836 0x0015      LDRH     R0,[R6, R5, LSL #+1]
    537                  }
   \                     ??TaskRun_1: (+1)
   \   00000016   0xB2C0             UXTB     R0,R0
   \   00000018   0xB348             CBZ.N    R0,??TaskRun_3
   \   0000001A   0x1E40             SUBS     R0,R0,#+1
   \   0000001C   0xEB06 0x0745      ADD      R7,R6,R5, LSL #+1
   \   00000020   0x2804             CMP      R0,#+4
   \   00000022   0xD908             BLS.N    ??TaskRun_4
   \   00000024   0x1F40             SUBS     R0,R0,#+5
   \   00000026   0xD00A             BEQ.N    ??TaskRun_5
   \   00000028   0x1E40             SUBS     R0,R0,#+1
   \   0000002A   0xD00C             BEQ.N    ??TaskRun_6
   \   0000002C   0x1E40             SUBS     R0,R0,#+1
   \   0000002E   0xD00E             BEQ.N    ??TaskRun_7
   \   00000030   0x1E40             SUBS     R0,R0,#+1
   \   00000032   0xD010             BEQ.N    ??TaskRun_8
   \   00000034   0xE013             B.N      ??TaskRun_9
   \                     ??TaskRun_4: (+1)
   \   00000036   0x4638             MOV      R0,R7
   \   00000038   0x.... 0x....      BL       TaskBlinkLed
   \   0000003C   0xE00E             B.N      ??TaskRun_10
   \                     ??TaskRun_5: (+1)
   \   0000003E   0x4638             MOV      R0,R7
   \   00000040   0x.... 0x....      BL       TaskButtonDetect
   \   00000044   0xE00A             B.N      ??TaskRun_10
   \                     ??TaskRun_6: (+1)
   \   00000046   0x4638             MOV      R0,R7
   \   00000048   0x.... 0x....      BL       TaskJoin
   \   0000004C   0xE006             B.N      ??TaskRun_10
   \                     ??TaskRun_7: (+1)
   \   0000004E   0x4638             MOV      R0,R7
   \   00000050   0x.... 0x....      BL       TaskOnOffAttributeChange
   \   00000054   0xE002             B.N      ??TaskRun_10
   \                     ??TaskRun_8: (+1)
   \   00000056   0x4638             MOV      R0,R7
   \   00000058   0x.... 0x....      BL       TaskResetMCU
   \                     ??TaskRun_10: (+1)
   \   0000005C   0x4604             MOV      R4,R0
   \                     ??TaskRun_9: (+1)
   \   0000005E   0xB2E4             UXTB     R4,R4
   \   00000060   0x2C01             CMP      R4,#+1
   \   00000062   0xD1D2             BNE.N    ??TaskRun_2
    538                  else{
    539                      TaskDelete(Head);
   \   00000064   0x4628             MOV      R0,R5
   \   00000066   0x.... 0x....      BL       TaskDelete
    540                      Head = 0;
   \   0000006A   0x2500             MOVS     R5,#+0
    541                      TaskID = TaskData[0];
   \   0000006C   0xE7CB             B.N      ??TaskRun_0
    542                  }
    543              }
    544          }
   \                     ??TaskRun_3: (+1)
   \   0000006E   0xBDF1             POP      {R0,R4-R7,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   0x00 0x00          DC8      "",0x0,0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   0x62 0x00          DC8      "b",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_1:
   \   00000000   0x........         DC32     TaskData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_2:
   \   00000000   0x4000B408         DC32     0x4000b408

   \                                 In section .rodata, align 1, keep-with-next
   \                     `?<Constant "">`:
   \   00000000   0x00               DC8 ""

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "b">`:
   \   00000000   0x62 0x00          DC8 "b"
    545          
    546          
    547          //-----------------------------************----------------------------//
    548          
    549          
    550          //-----------------------------***END-FILE***--------------------------//
    551          
    552          
    553          
    554          
    555          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   CallButtonDetectTask
        16   -> GetLastTask
        16   -> halCommonGetInt32uMillisecondTick
        16   -> halCommonMemMove
      16   CallJoinTask
        16   -> CallTaskBlinkLed
        16   -> ClearAllBlinkTask
        16   -> GetLastTask
        16   -> halCommonGetInt32uMillisecondTick
        16   -> halCommonMemMove
      16   CallResetMCU
        16   -> GetLastTask
        16   -> halCommonGetInt32uMillisecondTick
        16   -> halCommonMemMove
      32   CallTaskBlinkLed
        32   -> FindTaskID
        32   -> GetLastTask
        32   -> halCommonGetInt32uMillisecondTick
        32   -> halCommonMemMove
      16   CallTaskOnOffAttributeChange
        16   -> GetLastTask
        16   -> halCommonMemMove
       8   ClearAllBlinkTask
         0   -> ClearTask
         8   -> ClearTask
       8   ClearTask
         8   -> FindTaskID
         8   -> TaskDelete
       0   FindTaskID
       0   GetLastTask
      40   SendViaBindingTable
        40   -> emberAfFillExternalBuffer
        40   -> emberAfSendCommandUnicast
        40   -> emberGetBinding
      24   TaskBlinkLed
        24   -> CommonGetDurationTime
        24   -> UartSendToggleLed
        24   -> halCommonGetInt32uMillisecondTick
        24   -> halCommonMemMove
      24   TaskButtonDetect
        24   -> CommonGetDurationTime
        24   -> beButtonPress
        24   -> beButtonPress2Time
        24   -> beButtonPress3Time
        24   -> halCommonGetInt32uMillisecondTick
        24   -> halCommonMemMove
      16   TaskDelete
         0   -> halCommonMemMove
      24   TaskJoin
        24   -> ClearAllBlinkTask
        24   -> CommonGetDurationTime
        24   -> emberAfNetworkState
        24   -> emberAfStartSearchForJoinableNetworkCallback
        24   -> halCommonGetInt32uMillisecondTick
        24   -> halCommonMemMove
      32   TaskOnOffAttributeChange
        32   -> CommonClearLed
        32   -> CommonSetLed
        32   -> SendViaBindingTable
        32   -> emberAfFillExternalBuffer
        32   -> emberAfNetworkState
        32   -> emberAfSendCommandUnicast
        32   -> emberAfSetCommandEndpoints
        32   -> halCommonMemMove
      16   TaskResetMCU
        16   -> CommonGetDurationTime
        16   -> halCommonMemMove
        16   -> halReboot
      24   TaskRun
        24   -> TaskBlinkLed
        24   -> TaskButtonDetect
        24   -> TaskDelete
        24   -> TaskJoin
        24   -> TaskOnOffAttributeChange
        24   -> TaskResetMCU


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Constant "">
       2  ?<Constant "b">
       4  ??DataTable11
       4  ??DataTable11_1
       4  ??DataTable11_2
       4  ??DataTable9
      14  ??Subroutine5_0
       6  ?Subroutine0
      12  ?Subroutine1
      14  ?Subroutine2
      12  ?Subroutine3
       8  ?Subroutine4
      50  CallButtonDetectTask
      62  CallJoinTask
      30  CallResetMCU
      68  CallTaskBlinkLed
      24  CallTaskOnOffAttributeChange
      34  ClearAllBlinkTask
      22  ClearTask
      40  FindTaskID
      30  GetLastTask
      92  SendViaBindingTable
     106  TaskBlinkLed
     174  TaskButtonDetect
     128  TaskData
      44  TaskDelete
      76  TaskJoin
     132  TaskOnOffAttributeChange
      42  TaskResetMCU
     112  TaskRun

 
   128 bytes in section .bss
     3 bytes in section .rodata
 1 220 bytes in section .text
 
 1 220 bytes of CODE  memory
     3 bytes of CONST memory
   128 bytes of DATA  memory

Errors: none
Warnings: 1
