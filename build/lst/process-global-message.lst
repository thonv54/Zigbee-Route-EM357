###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        10/Sep/2015  09:00:21
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\Zigbee\EmberZNet5.6.0-GA\app\framework\util\process-global-message.c
#    Command line =  
#        E:\Zigbee\EmberZNet5.6.0-GA\app\framework\util\process-global-message.c
#        -D NULL_BTL -D CORTEXM3 -D CORTEXM3_EMBER_MICRO -D CORTEXM3_EM357 -D
#        PHY_EM3XX -D
#        "APPLICATION_TOKEN_HEADER=\"app/framework/util/tokens.h\"" -D
#        "ATTRIBUTE_STORAGE_CONFIGURATION=\"app/builder/ZigbeeRoute/ZigbeeRoute_endpoint_config.h\""
#        -D "BOARD_HEADER=\"app\builder\ZigbeeRoute\ZigbeeRoute_board.h\"" -D
#        "CONFIGURATION_HEADER=\"app/framework/util/config.h\"" -D
#        "GENERATED_TOKEN_HEADER=\"app/builder/ZigbeeRoute/ZigbeeRoute_tokens.h\""
#        -D "PLATFORM_HEADER=\"hal/micro/cortexm3/compiler/iar.h\"" -D
#        "ZA_GENERATED_HEADER=\"app/builder/ZigbeeRoute/ZigbeeRoute.h\"" -D
#        "__SOURCEFILE__=\"process-global-message.c\"" -lC
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\build\lst\
#        --diag_suppress Pa050 -o
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\build\obj\ --debug
#        --endian=little --cpu=Cortex-M3 --no_path_in_file_macros
#        --separate_cluster_for_initialized_variables -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\framework\util\ -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\ -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\ -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\app\framework\include\
#        -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\app\util\
#        -I E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\stack\
#        -I E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\hal\
#        -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\hal\..\
#        -Ohz --use_c++_inline
#    List file    =  
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\build\lst\process-global-message.lst
#    Object file  =  
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\build\obj\process-global-message.o
#
###############################################################################

E:\Zigbee\EmberZNet5.6.0-GA\app\framework\util\process-global-message.c
      1          // *******************************************************************
      2          // * process-global-message.c
      3          // *
      4          // * This file contains function that processes global ZCL message.
      5          // *
      6          // * Copyright 2007 by Ember Corporation. All rights reserved.              *80*
      7          // *******************************************************************
      8          
      9          #include "../include/af.h"
     10          #include "common.h"
     11          #include "../plugin/ias-zone-client/ias-zone-client.h"
     12          #include "../plugin/key-establishment/key-establishment.h"
     13          #include "../plugin/smart-energy-registration/smart-energy-registration.h"
     14          #include "../plugin/trust-center-keepalive/trust-center-keepalive.h"
     15          #include "../plugin/test-harness/test-harness.h"
     16          #include "../plugin/simple-metering-server/simple-metering-server.h"
     17          // flag to keep track of the fact that we just sent a read attr for time and
     18          // we should set our time to the result of the read attr response.

   \                                 In section .bss, align 1
     19          boolean emAfSyncingTime = FALSE;
   \                     emAfSyncingTime:
   \   00000000                      DS8 1
     20          
     21          #ifndef EMBER_AF_DISCOVER_ATTRIBUTES_RESPONSE_MAXIMUM_ATTRIBUTE_LIMIT
     22            #define EMBER_AF_DISCOVER_ATTRIBUTES_RESPONSE_MAXIMUM_ATTRIBUTE_LIMIT 5
     23          #endif
     24          
     25          #if defined(EMBER_AF_SUPPORT_COMMAND_DISCOVERY)

   \                                 In section .text, align 2, keep-with-next
     26          static void printDiscoverCommandsResponse(boolean generated,
     27                                                    int16u clusterId,
     28                                                    boolean discoveryComplete,
     29                                                    int8u* buffer,
     30                                                    int16u length)
     31          {
     32            int8u i;
     33            emberAfServiceDiscoveryPrint("Discover Commands response (complete: %c), %p IDs: ",
     34                                         (discoveryComplete
     35                                          ? 'y'
     36                                          : 'n'),
     37                                         (generated 
     38                                          ? "Generated"
     39                                          : "Received" ));
     40            for (i = 0; i < length; i++) {
   \                     printDiscoverCommandsResponse: (+1)
   \   00000000   0x9800             LDR      R0,[SP, #+0]
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0xE000             B.N      ??printDiscoverCommandsResponse_0
   \                     ??printDiscoverCommandsResponse_1: (+1)
   \   00000006   0x1C49             ADDS     R1,R1,#+1
   \                     ??printDiscoverCommandsResponse_0: (+1)
   \   00000008   0xB2CA             UXTB     R2,R1
   \   0000000A   0x4282             CMP      R2,R0
   \   0000000C   0xD3FB             BCC.N    ??printDiscoverCommandsResponse_1
     41              emberAfServiceDiscoveryPrint("0x%X ", buffer[i]);
     42            }
     43            emberAfServiceDiscoveryPrintln("");
     44          }
   \   0000000E   0x4770             BX       LR               ;; return
     45          #endif
     46          

   \                                 In section .text, align 4, keep-with-next
     47          boolean emAfProcessGlobalCommand(EmberAfClusterCommand *cmd)
     48          {
   \                     emAfProcessGlobalCommand: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0xB085             SUB      SP,SP,#+20
     49            int16u attrId;
     50            int8u frameControl;
     51            // This is a little clumsy but easier to read and port
     52            // from earlier implementation.
     53            EmberAfClusterId clusterId = cmd->apsFrame->clusterId;
   \   00000008   0x6820             LDR      R0,[R4, #+0]
     54            int8u zclCmd = cmd->commandId;
     55            int8u *message = cmd->buffer;
     56            int16u msgLen = cmd->bufLen;
     57            int16u msgIndex = cmd->payloadStartIndex;
     58            int8u clientServerMask = (cmd->direction == ZCL_DIRECTION_CLIENT_TO_SERVER
     59                                      ? CLUSTER_MASK_SERVER
     60                                      : CLUSTER_MASK_CLIENT);
   \   0000000A   0x7D61             LDRB     R1,[R4, #+21]
   \   0000000C   0xF8B0 0x8002      LDRH     R8,[R0, #+2]
   \   00000010   0x7CE6             LDRB     R6,[R4, #+19]
   \   00000012   0xF8D4 0x9008      LDR      R9,[R4, #+8]
   \   00000016   0x89A7             LDRH     R7,[R4, #+12]
   \   00000018   0x7D25             LDRB     R5,[R4, #+20]
   \   0000001A   0x2900             CMP      R1,#+0
   \   0000001C   0xBF0C             ITE      EQ 
   \   0000001E   0x2140             MOVEQ    R1,#+64
   \   00000020   0x2180             MOVNE    R1,#+128
   \   00000022   0xF88D 0x100C      STRB     R1,[SP, #+12]
   \   00000026   0x7940             LDRB     R0,[R0, #+5]
     61          
     62            // If we are disabled then we can only respond to read or write commands
     63            // or identify cluster (see device enabled attr of basic cluster)
     64            if (!emberAfIsDeviceEnabled(cmd->apsFrame->destinationEndpoint)
     65                && zclCmd != ZCL_READ_ATTRIBUTES_COMMAND_ID
     66                && zclCmd != ZCL_WRITE_ATTRIBUTES_COMMAND_ID
     67                && zclCmd != ZCL_WRITE_ATTRIBUTES_UNDIVIDED_COMMAND_ID
     68                && zclCmd != ZCL_WRITE_ATTRIBUTES_NO_RESPONSE_COMMAND_ID
     69                && clusterId != ZCL_IDENTIFY_CLUSTER_ID) {
   \   00000028   0x.... 0x....      BL       emberAfIsDeviceEnabled
   \   0000002C   0xB968             CBNZ.N   R0,??emAfProcessGlobalCommand_1
   \   0000002E   0x2E00             CMP      R6,#+0
   \   00000030   0xBF18             IT       NE 
   \   00000032   0x2E02             CMPNE    R6,#+2
   \   00000034   0xD009             BEQ.N    ??emAfProcessGlobalCommand_1
   \   00000036   0x2E03             CMP      R6,#+3
   \   00000038   0xBF18             IT       NE 
   \   0000003A   0x2E05             CMPNE    R6,#+5
   \   0000003C   0xD005             BEQ.N    ??emAfProcessGlobalCommand_1
   \   0000003E   0xF1B8 0x0F03      CMP      R8,#+3
   \   00000042   0xBF18             IT       NE 
     70              emberAfCorePrintln("disabled");
     71              emberAfDebugPrintln("%pd, dropping global cmd:%x", "disable", zclCmd);
     72              emberAfSendDefaultResponse(cmd, EMBER_ZCL_STATUS_FAILURE);
   \   00000044   0x2101             MOVNE    R1,#+1
   \   00000046   0xF040 0x81B9      BNE.W    ??emAfProcessGlobalCommand_2
     73              return TRUE;
     74            }
     75          
     76            // If a manufacturer-specific command arrives using our special internal "not
     77            // manufacturer specific" code, we need to reject it outright without letting
     78            // it pass through to the rest of the code.  The internal read and write APIs
     79            // would interpret it as a standard attribute or cluster and return incorrect
     80            // results.
     81            if (cmd->mfgSpecific && cmd->mfgCode == EMBER_AF_NULL_MANUFACTURER_CODE) {
   \                     ??emAfProcessGlobalCommand_1: (+1)
   \   0000004A   0x7BE0             LDRB     R0,[R4, #+15]
   \   0000004C   0xB118             CBZ.N    R0,??emAfProcessGlobalCommand_3
   \   0000004E   0x8A20             LDRH     R0,[R4, #+16]
   \   00000050   0x2800             CMP      R0,#+0
   \   00000052   0xF000 0x8108      BEQ.W    ??emAfProcessGlobalCommand_4
   \                     ??emAfProcessGlobalCommand_3: (+1)
   \   00000056   0x.... 0x....      LDR.W    R1,??DataTable0
   \   0000005A   0x2000             MOVS     R0,#+0
   \   0000005C   0x8008             STRH     R0,[R1, #+0]
     82              goto kickout;
     83            }
     84          
     85            // Clear out the response buffer by setting its length to zero
     86            appResponseLength = 0;
     87          
     88            // Make the ZCL header for the response
     89            // note: cmd byte is set below
     90            frameControl = (ZCL_PROFILE_WIDE_COMMAND
     91                            | (cmd->direction == ZCL_DIRECTION_CLIENT_TO_SERVER
     92                               ? ZCL_FRAME_CONTROL_SERVER_TO_CLIENT 
     93                                 | EMBER_AF_DEFAULT_RESPONSE_POLICY_RESPONSES
     94                               : ZCL_FRAME_CONTROL_CLIENT_TO_SERVER 
     95                                 | EMBER_AF_DEFAULT_RESPONSE_POLICY_RESPONSES));
   \   0000005E   0x7D60             LDRB     R0,[R4, #+21]
   \   00000060   0x2800             CMP      R0,#+0
   \   00000062   0xBF0C             ITE      EQ 
   \   00000064   0x2008             MOVEQ    R0,#+8
   \   00000066   0x2000             MOVNE    R0,#+0
     96            if (cmd->mfgSpecific) {
   \   00000068   0x7BE1             LDRB     R1,[R4, #+15]
   \   0000006A   0xB109             CBZ.N    R1,??emAfProcessGlobalCommand_5
     97              frameControl |= ZCL_MANUFACTURER_SPECIFIC_MASK;
   \   0000006C   0xF040 0x0004      ORR      R0,R0,#0x4
     98            }
     99            emberAfPutInt8uInResp(frameControl);
   \                     ??emAfProcessGlobalCommand_5: (+1)
   \   00000070   0x.... 0x....      BL       emberAfPutInt8uInResp
    100            if (cmd->mfgSpecific) {
   \   00000074   0x7BE0             LDRB     R0,[R4, #+15]
   \   00000076   0xB110             CBZ.N    R0,??emAfProcessGlobalCommand_6
    101              emberAfPutInt16uInResp(cmd->mfgCode);
   \   00000078   0x8A20             LDRH     R0,[R4, #+16]
   \   0000007A   0x.... 0x....      BL       emberAfPutInt16uInResp
    102            }
    103            emberAfPutInt8uInResp(cmd->seqNum);
   \                     ??emAfProcessGlobalCommand_6: (+1)
   \   0000007E   0x7CA0             LDRB     R0,[R4, #+18]
   \   00000080   0x.... 0x....      BL       emberAfPutInt8uInResp
    104          
    105          
    106            switch (zclCmd) {
   \   00000084   0x1C68             ADDS     R0,R5,#+1
   \   00000086   0xB280             UXTH     R0,R0
   \   00000088   0xEBA7 0x0A05      SUB      R10,R7,R5
   \   0000008C   0xEB05 0x0B09      ADD      R11,R5,R9
   \   00000090   0x2E16             CMP      R6,#+22
   \   00000092   0xF200 0x80E4      BHI.W    ??emAfProcessGlobalCommand_7
   \   00000096   0xE8DF 0xF016      TBH      [PC, R6, LSL #+1]
   \                     ??emAfProcessGlobalCommand_0:
   \   0000009A   0x0017 0x00EE      DC16     0x17,0xEE,0x6E,0x31
   \              0x006E 0x0031
   \   000000A2   0x0114 0x006E      DC16     0x114,0x6E,0xDD,0x119
   \              0x00DD 0x0119
   \   000000AA   0x00E8 0x011E      DC16     0xE8,0x11E,0x123,0x128
   \              0x0123 0x0128
   \   000000B2   0x00B6 0x013C      DC16     0xB6,0x13C,0xE2,0xE2
   \              0x00E2 0x00E2
   \   000000BA   0x00E2 0x014C      DC16     0xE2,0x14C,0x176,0x14C
   \              0x0176 0x014C
   \   000000C2   0x0183 0x00B6      DC16     0x183,0xB6,0x13C
   \              0x013C       
    107          
    108            // The format of the read attributes cmd is:
    109            // ([attr ID:2]) * N
    110            // The format of the read attributes response is:
    111            // ([attr ID:2] [status:1] [data type:0/1] [data:0/N]) * N
    112            case ZCL_READ_ATTRIBUTES_COMMAND_ID:
    113              {
    114                emberAfAttributesPrintln("%p: clus %2x", "READ_ATTR", clusterId);
    115                // Set the cmd byte - this is byte 3 index 2, but since we have
    116                // already incremented past the 3 byte ZCL header (our index is at 3),
    117                // this gets written to "-1" since 3 - 1 = 2.
    118                emberAfPutInt8uInResp(ZCL_READ_ATTRIBUTES_RESPONSE_COMMAND_ID);
   \                     ??emAfProcessGlobalCommand_8: (+1)
   \   000000C8   0x2001             MOVS     R0,#+1
   \   000000CA   0x.... 0x....      BL       emberAfPutInt8uInResp
    119          
    120                // This message contains N 2-byte attr IDs after the 3 byte ZCL header,
    121                // for each one we need to look it up and make a response
    122                while (msgIndex + 2 <= msgLen) {
   \                     ??emAfProcessGlobalCommand_9: (+1)
   \   000000CE   0x1CA8             ADDS     R0,R5,#+2
   \   000000D0   0x4287             CMP      R7,R0
   \   000000D2   0xF2C0 0x8095      BLT.W    ??emAfProcessGlobalCommand_10
    123                  // Get the attribute ID and store it in the response buffer
    124                  // least significant byte is first OTA
    125                  attrId = emberAfGetInt16u(message, msgIndex, msgLen);
   \   000000D6   0x.... 0x....      BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_4: (+1)
   \   000000DA   0x4602             MOV      R2,R0
    126          
    127                  // This function reads the attribute and creates the correct response
    128                  // in the response buffer
    129                  emberAfRetrieveAttributeAndCraftResponse(cmd->apsFrame->destinationEndpoint,
    130                                                           clusterId,
    131                                                           attrId,
    132                                                           clientServerMask,
    133                                                           cmd->mfgCode,
    134                                                           (EMBER_AF_RESPONSE_BUFFER_LEN
    135                                                            - appResponseLength));
   \   000000DC   0x....             LDR.N    R0,??DataTable0
   \   000000DE   0x8800             LDRH     R0,[R0, #+0]
   \   000000E0   0xF89D 0x300C      LDRB     R3,[SP, #+12]
   \   000000E4   0xF1C0 0x0052      RSB      R0,R0,#+82
   \   000000E8   0xB280             UXTH     R0,R0
   \   000000EA   0x9001             STR      R0,[SP, #+4]
   \   000000EC   0x4641             MOV      R1,R8
   \   000000EE   0x.... 0x....      BL       ??Subroutine6_0
   \                     ??CrossCallReturnLabel_16: (+1)
   \   000000F2   0x.... 0x....      BL       emberAfRetrieveAttributeAndCraftResponse
    136          
    137                  // Go to next attrID
    138                  msgIndex += 2;
   \   000000F6   0x1CA8             ADDS     R0,R5,#+2
   \   000000F8   0xB285             UXTH     R5,R0
   \   000000FA   0xE7E8             B.N      ??emAfProcessGlobalCommand_9
    139                }
    140              }
    141              emberAfSendResponse();
    142              return TRUE;
    143          
    144            // Write undivided means all attributes must be written in order to write
    145            // any of them. So first do a check. If the check fails, send back a fail
    146            // response. If it works, fall through to the normal write attr code.
    147            // write attr responses are the same for undivided and normal writes.
    148            case ZCL_WRITE_ATTRIBUTES_UNDIVIDED_COMMAND_ID:
    149              {
    150                int8u numFailures = 0;
   \                     ??emAfProcessGlobalCommand_11: (+1)
   \   000000FC   0xF04F 0x0A00      MOV      R10,#+0
    151                int8u dataType;
    152                int8u dataSize;
    153                EmberAfStatus status;
    154          
    155                emberAfPutInt8uInResp(ZCL_WRITE_ATTRIBUTES_RESPONSE_COMMAND_ID);
   \   00000100   0x2004             MOVS     R0,#+4
   \   00000102   0x.... 0x....      BL       emberAfPutInt8uInResp
   \   00000106   0xE01B             B.N      ??emAfProcessGlobalCommand_12
    156          
    157                // Go through the message until there are no more attrID/type/data
    158                while (msgLen > msgIndex + 3) {
    159                  attrId = emberAfGetInt16u(message, msgIndex, msgLen);
    160                  dataType = emberAfGetInt8u(message, msgIndex + 2, msgLen);
    161          
    162                  // For strings, the data size is the length of the string (specified by
    163                  // the first byte of data) plus one for the length byte itself.  For
    164                  // everything else, the size is just the size of the data type.
    165                  dataSize = (emberAfIsThisDataTypeAStringType(dataType)
    166                              ? emberAfStringLength(message + msgIndex + 3) + 1
    167                              : emberAfGetDataSize(dataType));
   \                     ??emAfProcessGlobalCommand_13: (+1)
   \   00000108   0xF89D 0x000D      LDRB     R0,[SP, #+13]
   \   0000010C   0x.... 0x....      BL       emberAfGetDataSize
    168          
    169                  status = emberAfVerifyAttributeWrite(cmd->apsFrame->destinationEndpoint,
    170                                                       clusterId,
    171                                                       attrId,
    172                                                       clientServerMask,
    173                                                       cmd->mfgCode,
    174                                                       &(message[msgIndex + 3]),
    175                                                       dataType);
   \                     ??emAfProcessGlobalCommand_14: (+1)
   \   00000110   0xF89D 0x300C      LDRB     R3,[SP, #+12]
   \   00000114   0xF88D 0x000E      STRB     R0,[SP, #+14]
   \   00000118   0x465A             MOV      R2,R11
   \   0000011A   0xF89D 0x000D      LDRB     R0,[SP, #+13]
   \   0000011E   0x.... 0x....      BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_17: (+1)
   \   00000122   0x.... 0x....      BL       emberAfVerifyAttributeWrite
    176                  if (status != EMBER_ZCL_STATUS_SUCCESS) {
   \   00000126   0xB130             CBZ.N    R0,??emAfProcessGlobalCommand_15
    177                    numFailures++;
   \   00000128   0xF10A 0x0A01      ADD      R10,R10,#+1
    178                    // Write to the response buffer - status and then attrID
    179                    emberAfPutInt8uInResp(status);
   \   0000012C   0x.... 0x....      BL       emberAfPutInt8uInResp
    180                    emberAfPutInt16uInResp(attrId);
   \   00000130   0x4658             MOV      R0,R11
   \   00000132   0x.... 0x....      BL       emberAfPutInt16uInResp
    181          
    182                    emberAfAttributesPrintln("WRITE: clus %2x attr %2x ", clusterId, attrId);
    183                    emberAfAttributesPrintln("FAIL %x", status);
    184                    emberAfCoreFlush();
    185                  }
    186          
    187                  // Increment past the attribute id (two bytes), the type (one byte), and
    188                  // the data (N bytes, including the length byte for strings).
    189                  msgIndex += 3 + dataSize;
   \                     ??emAfProcessGlobalCommand_15: (+1)
   \   00000136   0xF89D 0x000E      LDRB     R0,[SP, #+14]
   \   0000013A   0x1940             ADDS     R0,R0,R5
   \   0000013C   0x1CC0             ADDS     R0,R0,#+3
   \   0000013E   0xB285             UXTH     R5,R0
   \                     ??emAfProcessGlobalCommand_12: (+1)
   \   00000140   0x1CE8             ADDS     R0,R5,#+3
   \   00000142   0x42B8             CMP      R0,R7
   \   00000144   0xDA0B             BGE.N    ??emAfProcessGlobalCommand_16
   \   00000146   0x.... 0x....      BL       ?Subroutine0
    190                }
   \                     ??CrossCallReturnLabel_3: (+1)
   \   0000014A   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_6: (+1)
   \   0000014E   0x2800             CMP      R0,#+0
   \   00000150   0xD0DA             BEQ.N    ??emAfProcessGlobalCommand_13
   \   00000152   0x9804             LDR      R0,[SP, #+16]
   \   00000154   0x1CC0             ADDS     R0,R0,#+3
   \   00000156   0x.... 0x....      BL       emberAfStringLength
   \   0000015A   0x1C40             ADDS     R0,R0,#+1
   \   0000015C   0xE7D8             B.N      ??emAfProcessGlobalCommand_14
    191                // If there are any failures, send the response and exit
    192                if (numFailures > 0) {
   \                     ??emAfProcessGlobalCommand_16: (+1)
   \   0000015E   0xFA5F 0xF08A      UXTB     R0,R10
   \   00000162   0x2800             CMP      R0,#+0
   \   00000164   0xD14C             BNE.N    ??emAfProcessGlobalCommand_10
    193                  emberAfSendResponse();
    194                  return TRUE;
    195                }
    196              }
    197              // Reset message back to start
    198              msgIndex = cmd->payloadStartIndex;
    199              appResponseLength = (cmd->mfgSpecific ? 4 : 2);
   \   00000166   0x7BE0             LDRB     R0,[R4, #+15]
   \   00000168   0x7D25             LDRB     R5,[R4, #+20]
   \   0000016A   0x2800             CMP      R0,#+0
   \   0000016C   0xBF14             ITE      NE 
   \   0000016E   0x2004             MOVNE    R0,#+4
   \   00000170   0x2002             MOVEQ    R0,#+2
   \   00000172   0x....             LDR.N    R1,??DataTable0
   \   00000174   0x8008             STRH     R0,[R1, #+0]
    200              // DO NOT BREAK from this case
    201          
    202            // the format of the write attributes cmd is:
    203            // ([attr ID:2] [data type:1] [data:N]) * N
    204            // the format of the write attributes response is:
    205            // ([status 1] [attr ID 2]) * n
    206            // ONLY errors are reported unless all are successful then a single success
    207            // is sent. write attr no response is handled by just executing the same
    208            // code but not setting the flag that sends the response at the end.
    209            case ZCL_WRITE_ATTRIBUTES_NO_RESPONSE_COMMAND_ID:
    210            case ZCL_WRITE_ATTRIBUTES_COMMAND_ID:
    211              {
    212                int8u numFailures = 0;
   \                     ??emAfProcessGlobalCommand_17: (+1)
   \   00000176   0x2000             MOVS     R0,#+0
   \   00000178   0xF88D 0x000E      STRB     R0,[SP, #+14]
    213                int8u numSuccess = 0;
   \   0000017C   0x4682             MOV      R10,R0
    214                int8u dataType;
    215                int8u dataSize;
    216          #if (BIGENDIAN_CPU)
    217                int8u writeData[ATTRIBUTE_LARGEST];
    218          #endif //(BIGENDIAN_CPU)
    219                EmberAfStatus status;
    220          
    221                // set the cmd byte - this is byte 3 index 2, but since we have
    222                // already incremented past the 3 byte ZCL header (our index is at 3),
    223                // this gets written to "-1" since 3 - 1 = 2.
    224                emberAfPutInt8uInResp(ZCL_WRITE_ATTRIBUTES_RESPONSE_COMMAND_ID);
   \   0000017E   0x2004             MOVS     R0,#+4
   \   00000180   0x.... 0x....      BL       emberAfPutInt8uInResp
   \   00000184   0xE00E             B.N      ??emAfProcessGlobalCommand_18
    225          
    226                // go through the message until there are no more attrID/type/data
    227                while (msgLen > msgIndex + 3) {
    228                  attrId = emberAfGetInt16u(message, msgIndex, msgLen);
    229                  dataType = emberAfGetInt8u(message, msgIndex + 2, msgLen);
    230          
    231                  // For strings, the data size is the length of the string (specified by
    232                  // the first byte of data) plus one for the length byte itself.  For
    233                  // everything else, the size is just the size of the data type.
    234                  dataSize = (emberAfIsThisDataTypeAStringType(dataType)
    235                              ? emberAfStringLength(message + msgIndex + 3) + 1
    236                              : emberAfGetDataSize(dataType));
    237          
    238                  // the data is sent little endian over-the-air, it needs to be
    239                  // inserted into the table big endian for the EM250 and little
    240                  // endian for the EZSP hosts. This means for the EM250 the data
    241                  // needs to be reversed before sending to writeAttributes
    242          #if (BIGENDIAN_CPU)
    243                    // strings go over the air as length byte and then in human
    244                    // readable format. These should not be flipped.
    245                    if (emberAfIsThisDataTypeAStringType(dataType)) {
    246                      MEMMOVE(writeData, message + msgIndex + 3, dataSize);
    247                    } else {
    248                      // the data is sent little endian over-the-air, it needs to be
    249                      // inserted into the table big endian
    250                      int8u i;
    251                      for (i = 0; i < dataSize; i++) {
    252                        writeData[i] = message[msgIndex + 3 + dataSize - i - 1];
    253                      }
    254                    }
    255          #endif //(BIGENDIAN_CPU)
    256          
    257                    status = emberAfWriteAttributeExternal(cmd->apsFrame->destinationEndpoint,
    258                                                           clusterId,
    259                                                           attrId,
    260                                                           clientServerMask,
    261                                                           cmd->mfgCode,
    262          #if (BIGENDIAN_CPU)
    263                                                           writeData,
    264          #else //(BIGENDIAN_CPU)
    265                                                           &(message[msgIndex + 3]),
    266          #endif //(BIGENDIAN_CPU)
    267                                                           dataType);
    268                    emberAfAttributesPrint("WRITE: clus %2x attr %2x ",
    269                                             clusterId,
    270                                             attrId);
    271                    if (status == EMBER_ZCL_STATUS_SUCCESS) {
    272                      numSuccess++;
    273                      emberAfAttributesPrintln("OK");
    274                    } else {
    275                      numFailures++;
   \                     ??emAfProcessGlobalCommand_19: (+1)
   \   00000186   0xF89D 0x100E      LDRB     R1,[SP, #+14]
   \   0000018A   0x1C49             ADDS     R1,R1,#+1
   \   0000018C   0xF88D 0x100E      STRB     R1,[SP, #+14]
    276                      // write to the response buffer - status and then attrID
    277                      emberAfPutInt8uInResp(status);
   \   00000190   0x.... 0x....      BL       emberAfPutInt8uInResp
    278                      emberAfPutInt16uInResp(attrId);
   \   00000194   0x4658             MOV      R0,R11
   \   00000196   0x.... 0x....      BL       emberAfPutInt16uInResp
    279                      emberAfAttributesPrintln("FAIL %x",  status);
    280                    }
    281                    emberAfCoreFlush();
    282          
    283                  // Increment past the attribute id (two bytes), the type (one byte), and
    284                  // the data (N bytes, including the length byte for strings).
    285                  msgIndex += 3 + dataSize;
   \                     ??emAfProcessGlobalCommand_20: (+1)
   \   0000019A   0xF89D 0x000F      LDRB     R0,[SP, #+15]
   \   0000019E   0x1940             ADDS     R0,R0,R5
   \   000001A0   0x1CC0             ADDS     R0,R0,#+3
   \   000001A2   0xB285             UXTH     R5,R0
   \                     ??emAfProcessGlobalCommand_18: (+1)
   \   000001A4   0x1CE8             ADDS     R0,R5,#+3
   \   000001A6   0x42B8             CMP      R0,R7
   \   000001A8   0xDA1E             BGE.N    ??emAfProcessGlobalCommand_21
   \   000001AA   0x.... 0x....      BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_2: (+1)
   \   000001AE   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_5: (+1)
   \   000001B2   0xB128             CBZ.N    R0,??emAfProcessGlobalCommand_22
   \   000001B4   0x9804             LDR      R0,[SP, #+16]
   \   000001B6   0x1CC0             ADDS     R0,R0,#+3
   \   000001B8   0x.... 0x....      BL       emberAfStringLength
   \   000001BC   0x1C40             ADDS     R0,R0,#+1
   \   000001BE   0xE003             B.N      ??emAfProcessGlobalCommand_23
   \                     ??emAfProcessGlobalCommand_22: (+1)
   \   000001C0   0xF89D 0x000D      LDRB     R0,[SP, #+13]
   \   000001C4   0x.... 0x....      BL       emberAfGetDataSize
   \                     ??emAfProcessGlobalCommand_23: (+1)
   \   000001C8   0xF88D 0x000F      STRB     R0,[SP, #+15]
   \   000001CC   0x465A             MOV      R2,R11
   \   000001CE   0xF89D 0x000D      LDRB     R0,[SP, #+13]
   \   000001D2   0xF89D 0x300C      LDRB     R3,[SP, #+12]
   \   000001D6   0x.... 0x....      BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_18: (+1)
   \   000001DA   0x.... 0x....      BL       emberAfWriteAttributeExternal
   \   000001DE   0x2800             CMP      R0,#+0
   \   000001E0   0xD1D1             BNE.N    ??emAfProcessGlobalCommand_19
   \   000001E2   0xF10A 0x0A01      ADD      R10,R10,#+1
   \   000001E6   0xE7D8             B.N      ??emAfProcessGlobalCommand_20
    286                }
    287          
    288                // always send a response unless the cmd requested no response
    289                if (zclCmd == ZCL_WRITE_ATTRIBUTES_NO_RESPONSE_COMMAND_ID) {
   \                     ??emAfProcessGlobalCommand_21: (+1)
   \   000001E8   0x2E05             CMP      R6,#+5
   \   000001EA   0xD00B             BEQ.N    ??emAfProcessGlobalCommand_24
    290                  return TRUE;
    291                }
    292          
    293                if (numFailures == 0) {
   \   000001EC   0xF89D 0x000E      LDRB     R0,[SP, #+14]
   \   000001F0   0xB930             CBNZ.N   R0,??emAfProcessGlobalCommand_10
    294                  // if no failures and no success this means the packet was too short
    295                  // print an error message but still return TRUE as we consumed the
    296                  // message
    297                  if (numSuccess == 0) {
   \   000001F2   0xFA5F 0xF18A      UXTB     R1,R10
   \   000001F6   0xB909             CBNZ.N   R1,??emAfProcessGlobalCommand_25
    298                    emberAfAttributesPrintln("WRITE: too short");
    299                    emberAfSendDefaultResponse(cmd, EMBER_ZCL_STATUS_MALFORMED_COMMAND);
   \   000001F8   0x2180             MOVS     R1,#+128
   \   000001FA   0xE0DF             B.N      ??emAfProcessGlobalCommand_2
    300                    return TRUE;
    301                  }
    302                  // if no failures and at least one success, write a success status
    303                  // that means everything worked
    304                  else {
    305                    emberAfPutInt8uInResp(EMBER_ZCL_STATUS_SUCCESS);
   \                     ??emAfProcessGlobalCommand_25: (+1)
   \   000001FC   0x.... 0x....      BL       emberAfPutInt8uInResp
    306                  }
    307                }
    308                emberAfSendResponse();
   \                     ??emAfProcessGlobalCommand_10: (+1)
   \   00000200   0x.... 0x....      BL       emberAfSendResponse
   \                     ??emAfProcessGlobalCommand_24: (+1)
   \   00000204   0xE0DD             B.N      ??emAfProcessGlobalCommand_26
    309                return TRUE;
    310              }
    311          
    312            // the format of discover is: [start attr ID:2] [max attr IDs:1]
    313            // the format of the response is: [done:1] ([attrID:2] [type:1]) * N
    314            case ZCL_DISCOVER_ATTRIBUTES_COMMAND_ID:
    315            case ZCL_DISCOVER_ATTRIBUTES_EXTENDED_COMMAND_ID:
    316              {
    317                EmberAfAttributeId startingAttributeId;
    318                int8u numberAttributes;
    319                boolean *complete;
    320          
    321                emberAfAttributesPrintln("%p%p: clus %2x", "DISC_ATTR",
    322                    (zclCmd == ZCL_DISCOVER_ATTRIBUTES_EXTENDED_COMMAND_ID ? "_EXT" : ""), 
    323                    clusterId);
    324          
    325                // set the cmd byte - this is byte 3 index 2, but since we have
    326                // already incremented past the 3 byte ZCL header (our index is at 3),
    327                // this gets written to "-1" since 3 - 1 = 2.
    328                emberAfPutInt8uInResp(
    329                  (zclCmd == ZCL_DISCOVER_ATTRIBUTES_COMMAND_ID ? 
    330                   ZCL_DISCOVER_ATTRIBUTES_RESPONSE_COMMAND_ID :
    331                   ZCL_DISCOVER_ATTRIBUTES_EXTENDED_RESPONSE_COMMAND_ID));
   \                     ??emAfProcessGlobalCommand_27: (+1)
   \   00000206   0x2E0C             CMP      R6,#+12
   \   00000208   0xBF0C             ITE      EQ 
   \   0000020A   0x200D             MOVEQ    R0,#+13
   \   0000020C   0x2016             MOVNE    R0,#+22
   \   0000020E   0x.... 0x....      BL       emberAfPutInt8uInResp
    332          
    333                // get the attrId to start on and the max count
    334                startingAttributeId = emberAfGetInt16u(message, msgIndex, msgLen);
   \   00000212   0x.... 0x....      BL       ?Subroutine0
    335                numberAttributes = emberAfGetInt8u(message, msgIndex + 2, msgLen);
   \                     ??CrossCallReturnLabel_1: (+1)
   \   00000216   0xF89B 0x7002      LDRB     R7,[R11, #+2]
   \   0000021A   0x4681             MOV      R9,R0
    336          
    337                // BUGZID: EMAPPFWKV2-828
    338                // If we try to return more than 5 attributes at a time we run the
    339                // risk of a) building a tx buffer that is too large and failing to respond
    340                // or b) responding that we have completed discovery with a truncated buffer. 
    341                // Therefore we are throttling attribute discovery to !>5 attributes in a response.
    342                if (numberAttributes > EMBER_AF_DISCOVER_ATTRIBUTES_RESPONSE_MAXIMUM_ATTRIBUTE_LIMIT)
   \   0000021C   0x2F06             CMP      R7,#+6
   \   0000021E   0xBFA8             IT       GE 
    343          		  numberAttributes = EMBER_AF_DISCOVER_ATTRIBUTES_RESPONSE_MAXIMUM_ATTRIBUTE_LIMIT;
   \   00000220   0x2705             MOVGE    R7,#+5
    344          
    345                // The response has a one-byte field indicating whether discovery is
    346                // complete.  We can't populate that field until we've finished going
    347                // through all the attributes, so save a placeholder, write a temporary
    348                // value for now (so that the offset moves forward), and write the real
    349                // value when we're done.
    350                complete = &(appResponseData[appResponseLength]);
   \   00000222   0x....             LDR.N    R0,??DataTable0
   \   00000224   0x....             LDR.N    R1,??DataTable0_1
   \   00000226   0x8800             LDRH     R0,[R0, #+0]
   \   00000228   0x1845             ADDS     R5,R0,R1
    351                emberAfPutInt8uInResp(FALSE);
   \   0000022A   0x2000             MOVS     R0,#+0
   \   0000022C   0x.... 0x....      BL       emberAfPutInt8uInResp
    352                *complete = emberAfReadSequentialAttributesAddToResponse(
    353                              cmd->apsFrame->destinationEndpoint,
    354                              clusterId,
    355                              startingAttributeId,
    356                              clientServerMask,
    357                              cmd->mfgCode,
    358                              numberAttributes,
    359                              (zclCmd == ZCL_DISCOVER_ATTRIBUTES_EXTENDED_COMMAND_ID));
   \   00000230   0x2E15             CMP      R6,#+21
   \   00000232   0xBF0C             ITE      EQ 
   \   00000234   0x2001             MOVEQ    R0,#+1
   \   00000236   0x2000             MOVNE    R0,#+0
   \   00000238   0x9002             STR      R0,[SP, #+8]
   \   0000023A   0x9701             STR      R7,[SP, #+4]
   \   0000023C   0x464A             MOV      R2,R9
   \   0000023E   0x8A20             LDRH     R0,[R4, #+16]
   \   00000240   0xF89D 0x300C      LDRB     R3,[SP, #+12]
   \   00000244   0x9000             STR      R0,[SP, #+0]
   \   00000246   0x4641             MOV      R1,R8
   \   00000248   0x6820             LDR      R0,[R4, #+0]
   \   0000024A   0x7940             LDRB     R0,[R0, #+5]
   \   0000024C   0x.... 0x....      BL       emberAfReadSequentialAttributesAddToResponse
   \   00000250   0x7028             STRB     R0,[R5, #+0]
   \   00000252   0xE7D5             B.N      ??emAfProcessGlobalCommand_10
    360                emberAfSendResponse();
    361                return TRUE;
    362              }
    363          
    364            case ZCL_CONFIGURE_REPORTING_COMMAND_ID:
    365              if (emberAfConfigureReportingCommandCallback(cmd)) {
   \                     ??emAfProcessGlobalCommand_28: (+1)
   \   00000254   0x4620             MOV      R0,R4
   \   00000256   0x.... 0x....      BL       emberAfConfigureReportingCommandCallback
   \   0000025A   0x2800             CMP      R0,#+0
   \   0000025C   0xD1D2             BNE.N    ??emAfProcessGlobalCommand_24
    366                return TRUE;
    367              }
    368              break;
    369          
    370            case ZCL_READ_REPORTING_CONFIGURATION_COMMAND_ID:
    371              if (emberAfReadReportingConfigurationCommandCallback(cmd)) {
    372                return TRUE;
    373              }
    374              break;
    375          
    376            // ([attribute id:2] [status:1] [type:0/1] [value:0/V])+
    377            case ZCL_READ_ATTRIBUTES_RESPONSE_COMMAND_ID:
    378              // The "timesync" command in the CLI sends a Read Attributes command for the
    379              // Time attribute on another device and then sets a flag.  If that flag is
    380              // set and a Read Attributes Response command for the time comes in, we set
    381              // the time to the value in the message.
    382              if (clusterId == ZCL_TIME_CLUSTER_ID) {
    383                if (emAfSyncingTime
    384                    && !cmd->mfgSpecific
    385                    && msgLen - msgIndex == 8 // attr:2 status:1 type:1 data:4
    386                    && (emberAfGetInt16u(message, msgIndex, msgLen)
    387                        == ZCL_TIME_ATTRIBUTE_ID)
    388                    && (emberAfGetInt8u(message, msgIndex + 2, msgLen)
    389                        == EMBER_ZCL_STATUS_SUCCESS)
    390                    && (emberAfGetInt8u(message, msgIndex + 3, msgLen)
    391                        == ZCL_UTC_TIME_ATTRIBUTE_TYPE)) {
    392                  emberAfSetTime(emberAfGetInt32u(message, msgIndex + 4, msgLen));
    393                  emberAfDebugPrintln("time sync ok, time: %4x", emberAfGetCurrentTime());
    394                  emAfSyncingTime = FALSE;
    395                }
    396          #ifdef EMBER_AF_PLUGIN_SMART_ENERGY_REGISTRATION_ESI_DISCOVERY_REQUIRED
    397                emAfPluginSmartEnergyRegistrationReadAttributesResponseCallback(message + msgIndex,
    398                                                                                msgLen - msgIndex);
    399          #endif //EMBER_AF_PLUGIN_SMART_ENERGY_REGISTRATION_ESI_DISCOVERY_REQUIRED
    400              }
    401          
    402          #ifdef EMBER_AF_PLUGIN_TRUST_CENTER_KEEPALIVE
    403              if (clusterId == ZCL_KEY_ESTABLISHMENT_CLUSTER_ID
    404                  && !cmd->mfgSpecific
    405                  && msgLen - msgIndex == 6 // attr:2 status:1 type:1 data:2
    406                  && (emberAfGetInt16u(message, msgIndex, msgLen)
    407                      == ZCL_KEY_ESTABLISHMENT_SUITE_SERVER_ATTRIBUTE_ID)) {
    408                emAfPluginTrustCenterKeepaliveReadAttributesResponseCallback(message + msgIndex,
    409                                                                             msgLen - msgIndex);
    410              }
    411          #endif //EMBER_AF_PLUGIN_TRUST_CENTER_KEEPALIVE
    412          
    413          #if defined(EMBER_AF_PLUGIN_KEY_ESTABLISHMENT)
    414              if (clusterId == ZCL_KEY_ESTABLISHMENT_CLUSTER_ID
    415                  && !cmd->mfgSpecific
    416                  && msgLen - msgIndex == 6 //attr:2 status:1 type:1 data:2
    417                  && (emberAfGetInt16u(message,msgIndex,msgLen)
    418                      == ZCL_KEY_ESTABLISHMENT_SUITE_CLIENT_ATTRIBUTE_ID)
    419                  && (emberAfGetInt8u(message, msgIndex + 2, msgLen)
    420                      == EMBER_ZCL_STATUS_SUCCESS)
    421                  && ((emberAfGetInt8u(message,msgIndex + 3,msgLen) == ZCL_ENUM16_ATTRIBUTE_TYPE)
    422                      || (emberAfGetInt8u(message,msgIndex + 3,msgLen) == ZCL_BITMAP16_ATTRIBUTE_TYPE))){
    423                int16u suite = emberAfGetInt16u(message,msgIndex+4,msgLen);
    424                emberAfPluginKeyEstablishmentReadAttributesCallback(suite);
    425              }
    426          #endif
    427          
    428          #if defined(EMBER_AF_PLUGIN_TEST_HARNESS)
    429              emberAfPluginTestHarnessReadAttributesResponseCallback(clusterId,
    430                                                                     message + msgIndex,
    431                                                                     msgLen - msgIndex);
    432          #endif
    433          
    434          #if defined(EMBER_AF_PLUGIN_IAS_ZONE_CLIENT)
    435              emberAfPluginIasZoneClientReadAttributesResponseCallback(clusterId,
    436                                                                       message + msgIndex,
    437                                                                       msgLen - msgIndex);
    438          #endif
    439          
    440          #if defined(EMBER_AF_PLUGIN_SIMPLE_METERING_SERVER)
    441              emberAfPluginSimpleMeteringClusterReadAttributesResponseCallback(clusterId,
    442                                                                               message + msgIndex,
    443                                                                               msgLen - msgIndex);
    444          #endif
    445              if (!emberAfReadAttributesResponseCallback(clusterId,
    446                                                         message + msgIndex,
    447                                                         msgLen - msgIndex)) {
    448                emberAfSendDefaultResponse(cmd, EMBER_ZCL_STATUS_SUCCESS);
    449              }
    450              return TRUE;
    451          
    452            // ([status:1] [attribute id:2])+
    453            case ZCL_WRITE_ATTRIBUTES_RESPONSE_COMMAND_ID:
    454          
    455            #if defined(EMBER_AF_PLUGIN_TEST_HARNESS)
    456              emberAfPluginTestHarnessWriteAttributesResponseCallback(clusterId,
    457                                                                      message + msgIndex,
    458                                                                      msgLen - msgIndex);
    459            #endif
    460          
    461            #if defined(EMBER_AF_PLUGIN_IAS_ZONE_CLIENT)
    462              emberAfPluginIasZoneClientWriteAttributesResponseCallback(clusterId,
    463                                                                        message + msgIndex,
    464                                                                        msgLen - msgIndex);
    465            #endif
    466          
    467              if (!emberAfWriteAttributesResponseCallback(clusterId,
    468                                                          message + msgIndex,
    469                                                          msgLen - msgIndex)) {
    470                emberAfSendDefaultResponse(cmd, EMBER_ZCL_STATUS_SUCCESS);
    471              }
    472              return TRUE;
    473          
    474            // ([status:1] [direction:1] [attribute id:2])+
    475            case ZCL_CONFIGURE_REPORTING_RESPONSE_COMMAND_ID:
    476              if (!emberAfConfigureReportingResponseCallback(clusterId,
    477                                                             message + msgIndex,
    478                                                             msgLen - msgIndex)) {
    479                emberAfSendDefaultResponse(cmd, EMBER_ZCL_STATUS_SUCCESS);
    480              }
    481              return TRUE;
    482          
    483          
    484            // ([status:1] [direction:1] [attribute id:2] [type:0/1] ...
    485            // ... [min interval:0/2] [max interval:0/2] [reportable change:0/V] ...
    486            // ... [timeout:0/2])+
    487            case ZCL_READ_REPORTING_CONFIGURATION_RESPONSE_COMMAND_ID:
    488              if (!emberAfReadReportingConfigurationResponseCallback(clusterId,
    489                                                                     message + msgIndex,
    490                                                                     msgLen - msgIndex)) {
    491                emberAfSendDefaultResponse(cmd, EMBER_ZCL_STATUS_SUCCESS);
    492              }
    493              return TRUE;
    494          
    495            // ([attribute id:2] [type:1] [data:V])+
    496            case ZCL_REPORT_ATTRIBUTES_COMMAND_ID:
    497              if (!emberAfReportAttributesCallback(clusterId,
    498                                                   message + msgIndex,
    499                                                   msgLen - msgIndex)) {
    500                emberAfSendDefaultResponse(cmd, EMBER_ZCL_STATUS_SUCCESS);
    501              }
    502              return TRUE;
    503          
    504            // [command id:1] [status:1]
    505            case ZCL_DEFAULT_RESPONSE_COMMAND_ID:
    506              {
    507                EmberAfStatus status;
    508                int8u commandId;
    509                commandId = emberAfGetInt8u(message, msgIndex, msgLen);
    510                msgIndex++;
    511                status = (EmberAfStatus)emberAfGetInt8u(message, msgIndex, msgLen);
    512          
    513                emberAfClusterDefaultResponseCallback(cmd->apsFrame->destinationEndpoint,
    514                                                      clusterId,
    515                                                      commandId,
    516                                                      status,
    517                                                      clientServerMask);
    518                emberAfDefaultResponseCallback(clusterId, commandId, status);
    519                return TRUE;
    520              }
    521          
    522            // [discovery complete:1] ([attribute id:2] [type:1])*
    523            case ZCL_DISCOVER_ATTRIBUTES_RESPONSE_COMMAND_ID:
    524            case ZCL_DISCOVER_ATTRIBUTES_EXTENDED_RESPONSE_COMMAND_ID:
    525              {
    526                boolean discoveryComplete = emberAfGetInt8u(message, msgIndex, msgLen);
    527                msgIndex++;
    528                if (!emberAfDiscoverAttributesResponseCallback(clusterId,
    529                                                               discoveryComplete,
    530                                                               message + msgIndex,
    531                                                               msgLen - msgIndex,
    532          												     (zclCmd == 
    533          												      ZCL_DISCOVER_ATTRIBUTES_EXTENDED_RESPONSE_COMMAND_ID))) {
    534                  emberAfSendDefaultResponse(cmd, EMBER_ZCL_STATUS_SUCCESS);
    535                }
    536                return TRUE;
    537              }
    538          
    539          #ifdef EMBER_AF_SUPPORT_COMMAND_DISCOVERY
    540              // Command discovery takes a bit of flash because we need to add structs 
    541              // for commands into the generated hader. Hence it's all configurable.
    542            case ZCL_DISCOVER_COMMANDS_RECEIVED_COMMAND_ID:
    543            case ZCL_DISCOVER_COMMANDS_GENERATED_COMMAND_ID:
    544              {
    545                int8u startCommandIdentifier = emberAfGetInt8u(message, msgIndex, msgLen);
    546                int8u maximumCommandIdentifiers = emberAfGetInt8u(message, msgIndex+1, msgLen);
    547                int16u savedIndex;
    548                boolean flag;
    549                
    550                // Ok. This is the command that matters.
    551                if ( zclCmd == ZCL_DISCOVER_COMMANDS_RECEIVED_COMMAND_ID ) {
    552                  emberAfPutInt8uInResp(ZCL_DISCOVER_COMMANDS_RECEIVED_RESPONSE_COMMAND_ID);
    553                  flag = FALSE;
    554                } else {
    555                  emberAfPutInt8uInResp(ZCL_DISCOVER_COMMANDS_GENERATED_RESPONSE_COMMAND_ID);
    556                  flag = TRUE;
    557                }
    558                savedIndex = appResponseLength;
    559                flag = emberAfExtractCommandIds(flag,
    560                                                cmd,
    561                                                clusterId,
    562                                                appResponseData + appResponseLength + 1,
    563                                                EMBER_AF_RESPONSE_BUFFER_LEN - appResponseLength - 1,
    564                                                &appResponseLength,
    565                                                startCommandIdentifier,
    566                                                maximumCommandIdentifiers);
    567                appResponseData[savedIndex] = ( flag ? 1 : 0 );
    568                appResponseLength++;
    569                emberAfSendResponse();
    570                return TRUE;
    571              }
    572            case ZCL_DISCOVER_COMMANDS_RECEIVED_RESPONSE_COMMAND_ID:
    573              {
    574                boolean discoveryComplete = emberAfGetInt8u(message, msgIndex, msgLen);
    575                msgIndex++;
    576                printDiscoverCommandsResponse(FALSE,  // is ZCL command generated?
    577                                              clusterId,
    578                                              discoveryComplete,
    579                                              message + msgIndex,
    580                                              msgLen - msgIndex);
    581                if(!emberAfDiscoverCommandsReceivedResponseCallback(clusterId,
    582                                                                    cmd->mfgCode,
    583                                                                    discoveryComplete,
    584                                                                    message+msgIndex,
    585                                                                    msgLen-msgIndex)) {
    586                  emberAfSendDefaultResponse(cmd, EMBER_ZCL_STATUS_SUCCESS);
    587                }
    588                return TRUE;
    589              }
    590            case ZCL_DISCOVER_COMMANDS_GENERATED_RESPONSE_COMMAND_ID:
    591              {
    592                boolean discoveryComplete = emberAfGetInt8u(message, msgIndex, msgLen);
    593                msgIndex++;
    594                printDiscoverCommandsResponse(TRUE,  // is ZCL command generated?
    595                                              clusterId,
    596                                              discoveryComplete,
    597                                              message + msgIndex,
    598                                              msgLen - msgIndex);
    599                if(!emberAfDiscoverCommandsGeneratedResponseCallback(clusterId,
    600                                                                     cmd->mfgCode,
    601                                                                     discoveryComplete,
    602                                                                     message+msgIndex,
    603                                                                     msgLen-msgIndex)) {
    604                  emberAfSendDefaultResponse(cmd, EMBER_ZCL_STATUS_SUCCESS);
    605                }
    606                return TRUE;
    607              }
    608              
    609          #endif
    610            }
    611          
    612          kickout:
    613            emberAfSendDefaultResponse(cmd,
    614                                       (cmd->mfgSpecific
    615                                        ? EMBER_ZCL_STATUS_UNSUP_MANUF_GENERAL_COMMAND
    616                                        : EMBER_ZCL_STATUS_UNSUP_GENERAL_COMMAND));
   \                     ??emAfProcessGlobalCommand_7: (+1)
   \   0000025E   0x7BE0             LDRB     R0,[R4, #+15]
   \   00000260   0x2800             CMP      R0,#+0
   \   00000262   0xF000 0x80B2      BEQ.W    ??emAfProcessGlobalCommand_29
   \                     ??emAfProcessGlobalCommand_4: (+1)
   \   00000266   0x2184             MOVS     R1,#+132
   \   00000268   0xE0A8             B.N      ??emAfProcessGlobalCommand_2
   \                     ??emAfProcessGlobalCommand_30: (+1)
   \   0000026A   0x4620             MOV      R0,R4
   \   0000026C   0x.... 0x....      BL       emberAfReadReportingConfigurationCommandCallback
   \   00000270   0x2800             CMP      R0,#+0
   \   00000272   0xD1C7             BNE.N    ??emAfProcessGlobalCommand_24
   \   00000274   0xE7F3             B.N      ??emAfProcessGlobalCommand_7
   \                     ??emAfProcessGlobalCommand_31: (+1)
   \   00000276   0xF1B8 0x0F0A      CMP      R8,#+10
   \   0000027A   0xD11D             BNE.N    ??emAfProcessGlobalCommand_32
   \   0000027C   0x....             LDR.N    R6,??DataTable0_2
   \   0000027E   0x7830             LDRB     R0,[R6, #+0]
   \   00000280   0xB1D0             CBZ.N    R0,??emAfProcessGlobalCommand_32
   \   00000282   0x7BE0             LDRB     R0,[R4, #+15]
   \   00000284   0x2800             CMP      R0,#+0
   \   00000286   0xBF04             ITT      EQ 
   \   00000288   0x1B78             SUBEQ    R0,R7,R5
   \   0000028A   0x2808             CMPEQ    R0,#+8
   \   0000028C   0xD114             BNE.N    ??emAfProcessGlobalCommand_32
   \   0000028E   0x.... 0x....      BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_0: (+1)
   \   00000292   0x2800             CMP      R0,#+0
   \   00000294   0xBF01             ITTTT    EQ 
   \   00000296   0xF89B 0x0002      LDRBEQ   R0,[R11, #+2]
   \   0000029A   0x2800             CMPEQ    R0,#+0
   \   0000029C   0xF89B 0x0003      LDRBEQ   R0,[R11, #+3]
   \   000002A0   0x28E2             CMPEQ    R0,#+226
   \   000002A2   0xD109             BNE.N    ??emAfProcessGlobalCommand_32
   \   000002A4   0x1D29             ADDS     R1,R5,#+4
   \   000002A6   0x463A             MOV      R2,R7
   \   000002A8   0xB289             UXTH     R1,R1
   \   000002AA   0x4648             MOV      R0,R9
   \   000002AC   0x.... 0x....      BL       emberAfGetInt32u
   \   000002B0   0x.... 0x....      BL       emberAfSetTime
   \   000002B4   0x2000             MOVS     R0,#+0
   \   000002B6   0x7030             STRB     R0,[R6, #+0]
   \                     ??emAfProcessGlobalCommand_32: (+1)
   \   000002B8   0x.... 0x....      BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_7: (+1)
   \   000002BC   0x.... 0x....      BL       emberAfReadAttributesResponseCallback
   \   000002C0   0xE07A             B.N      ??emAfProcessGlobalCommand_33
   \                     ??emAfProcessGlobalCommand_34: (+1)
   \   000002C2   0x.... 0x....      BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_8: (+1)
   \   000002C6   0x.... 0x....      BL       emberAfWriteAttributesResponseCallback
   \   000002CA   0xE075             B.N      ??emAfProcessGlobalCommand_33
   \                     ??emAfProcessGlobalCommand_35: (+1)
   \   000002CC   0x.... 0x....      BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_9: (+1)
   \   000002D0   0x.... 0x....      BL       emberAfConfigureReportingResponseCallback
   \   000002D4   0xE070             B.N      ??emAfProcessGlobalCommand_33
   \                     ??emAfProcessGlobalCommand_36: (+1)
   \   000002D6   0x.... 0x....      BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_10: (+1)
   \   000002DA   0x.... 0x....      BL       emberAfReadReportingConfigurationResponseCallback
   \   000002DE   0xE06B             B.N      ??emAfProcessGlobalCommand_33
   \                     ??emAfProcessGlobalCommand_37: (+1)
   \   000002E0   0x.... 0x....      BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_11: (+1)
   \   000002E4   0x.... 0x....      BL       emberAfReportAttributesCallback
   \   000002E8   0xE066             B.N      ??emAfProcessGlobalCommand_33
   \                     ??emAfProcessGlobalCommand_38: (+1)
   \   000002EA   0xF815 0x7009      LDRB     R7,[R5, R9]
   \   000002EE   0xF810 0x5009      LDRB     R5,[R0, R9]
   \   000002F2   0xF89D 0x000C      LDRB     R0,[SP, #+12]
   \   000002F6   0x9000             STR      R0,[SP, #+0]
   \   000002F8   0x462B             MOV      R3,R5
   \   000002FA   0x6820             LDR      R0,[R4, #+0]
   \   000002FC   0x7940             LDRB     R0,[R0, #+5]
   \   000002FE   0x463A             MOV      R2,R7
   \   00000300   0x4641             MOV      R1,R8
   \   00000302   0x.... 0x....      BL       emberAfClusterDefaultResponseCallback
   \   00000306   0x462A             MOV      R2,R5
   \   00000308   0x4639             MOV      R1,R7
   \   0000030A   0x4640             MOV      R0,R8
   \   0000030C   0x.... 0x....      BL       emberAfDefaultResponseCallback
   \   00000310   0xE057             B.N      ??emAfProcessGlobalCommand_26
   \                     ??emAfProcessGlobalCommand_39: (+1)
   \   00000312   0xF815 0x1009      LDRB     R1,[R5, R9]
   \   00000316   0x4605             MOV      R5,R0
   \   00000318   0x2E16             CMP      R6,#+22
   \   0000031A   0xBF0C             ITE      EQ 
   \   0000031C   0x2001             MOVEQ    R0,#+1
   \   0000031E   0x2000             MOVNE    R0,#+0
   \   00000320   0x9000             STR      R0,[SP, #+0]
   \   00000322   0x1B7B             SUBS     R3,R7,R5
   \   00000324   0xB29B             UXTH     R3,R3
   \   00000326   0xEB05 0x0209      ADD      R2,R5,R9
   \   0000032A   0x4640             MOV      R0,R8
   \   0000032C   0x.... 0x....      BL       emberAfDiscoverAttributesResponseCallback
   \   00000330   0xE042             B.N      ??emAfProcessGlobalCommand_33
   \                     ??emAfProcessGlobalCommand_40: (+1)
   \   00000332   0xF815 0x9009      LDRB     R9,[R5, R9]
   \   00000336   0xF89B 0x5001      LDRB     R5,[R11, #+1]
   \   0000033A   0x2E11             CMP      R6,#+17
   \   0000033C   0xD104             BNE.N    ??emAfProcessGlobalCommand_41
   \   0000033E   0x2012             MOVS     R0,#+18
   \   00000340   0x.... 0x....      BL       emberAfPutInt8uInResp
   \   00000344   0x2000             MOVS     R0,#+0
   \   00000346   0xE003             B.N      ??emAfProcessGlobalCommand_42
   \                     ??emAfProcessGlobalCommand_41: (+1)
   \   00000348   0x2014             MOVS     R0,#+20
   \   0000034A   0x.... 0x....      BL       emberAfPutInt8uInResp
   \   0000034E   0x2001             MOVS     R0,#+1
   \                     ??emAfProcessGlobalCommand_42: (+1)
   \   00000350   0x....             LDR.N    R1,??DataTable0
   \   00000352   0x880F             LDRH     R7,[R1, #+0]
   \   00000354   0x9503             STR      R5,[SP, #+12]
   \   00000356   0x9101             STR      R1,[SP, #+4]
   \   00000358   0xF8CD 0x9008      STR      R9,[SP, #+8]
   \   0000035C   0xF1C7 0x0151      RSB      R1,R7,#+81
   \   00000360   0xB289             UXTH     R1,R1
   \   00000362   0x9100             STR      R1,[SP, #+0]
   \   00000364   0x4642             MOV      R2,R8
   \   00000366   0x....             LDR.N    R1,??DataTable0_1
   \   00000368   0x1879             ADDS     R1,R7,R1
   \   0000036A   0x1C4B             ADDS     R3,R1,#+1
   \   0000036C   0x4621             MOV      R1,R4
   \   0000036E   0x.... 0x....      BL       emberAfExtractCommandIds
   \   00000372   0xB100             CBZ.N    R0,??emAfProcessGlobalCommand_43
   \   00000374   0x2001             MOVS     R0,#+1
   \                     ??emAfProcessGlobalCommand_43: (+1)
   \   00000376   0x....             LDR.N    R1,??DataTable0_1
   \   00000378   0x5478             STRB     R0,[R7, R1]
   \   0000037A   0x....             LDR.N    R1,??DataTable0
   \   0000037C   0x....             LDR.N    R0,??DataTable0
   \   0000037E   0x8800             LDRH     R0,[R0, #+0]
   \   00000380   0x1C40             ADDS     R0,R0,#+1
   \   00000382   0x8008             STRH     R0,[R1, #+0]
   \   00000384   0xE73C             B.N      ??emAfProcessGlobalCommand_10
   \                     ??emAfProcessGlobalCommand_44: (+1)
   \   00000386   0x1A3F             SUBS     R7,R7,R0
   \   00000388   0xF815 0x6009      LDRB     R6,[R5, R9]
   \   0000038C   0x.... 0x....      BL       ?Subroutine4
   \                     ??CrossCallReturnLabel_12: (+1)
   \   00000390   0x2000             MOVS     R0,#+0
   \   00000392   0x.... 0x....      BL       printDiscoverCommandsResponse
   \   00000396   0x.... 0x....      BL       ?Subroutine5
   \                     ??CrossCallReturnLabel_14: (+1)
   \   0000039A   0x.... 0x....      BL       emberAfDiscoverCommandsReceivedResponseCallback
   \   0000039E   0xE00B             B.N      ??emAfProcessGlobalCommand_33
   \                     ??emAfProcessGlobalCommand_45: (+1)
   \   000003A0   0xF815 0x6009      LDRB     R6,[R5, R9]
   \   000003A4   0x1A3F             SUBS     R7,R7,R0
   \   000003A6   0x.... 0x....      BL       ?Subroutine4
   \                     ??CrossCallReturnLabel_13: (+1)
   \   000003AA   0x2001             MOVS     R0,#+1
   \   000003AC   0x.... 0x....      BL       printDiscoverCommandsResponse
   \   000003B0   0x.... 0x....      BL       ?Subroutine5
   \                     ??CrossCallReturnLabel_15: (+1)
   \   000003B4   0x.... 0x....      BL       emberAfDiscoverCommandsGeneratedResponseCallback
   \                     ??emAfProcessGlobalCommand_33: (+1)
   \   000003B8   0xB918             CBNZ.N   R0,??emAfProcessGlobalCommand_26
   \   000003BA   0x2100             MOVS     R1,#+0
   \                     ??emAfProcessGlobalCommand_2: (+1)
   \   000003BC   0x4620             MOV      R0,R4
   \   000003BE   0x.... 0x....      BL       emberAfSendDefaultResponse
   \                     ??emAfProcessGlobalCommand_26: (+1)
   \   000003C2   0x2001             MOVS     R0,#+1
   \   000003C4   0xB005             ADD      SP,SP,#+20
   \   000003C6   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   \                     ??emAfProcessGlobalCommand_29: (+1)
   \   000003CA   0x2182             MOVS     R1,#+130
   \   000003CC   0xE7F6             B.N      ??emAfProcessGlobalCommand_2
    617            return TRUE;
    618          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine5: (+1)
   \   00000000   0x9700             STR      R7,[SP, #+0]
   \   00000002   0x464B             MOV      R3,R9
   \   00000004   0x8A21             LDRH     R1,[R4, #+16]
   \   00000006   0x4632             MOV      R2,R6
   \   00000008   0x4640             MOV      R0,R8
   \   0000000A   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine4: (+1)
   \   00000000   0x4481             ADD      R9,R0,R9
   \   00000002   0xB2BF             UXTH     R7,R7
   \   00000004   0x9700             STR      R7,[SP, #+0]
   \   00000006   0x464B             MOV      R3,R9
   \   00000008   0x4632             MOV      R2,R6
   \   0000000A   0x4641             MOV      R1,R8
   \   0000000C   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3: (+1)
   \   00000000   0xFA1F 0xF28A      UXTH     R2,R10
   \   00000004   0x4659             MOV      R1,R11
   \   00000006   0x4640             MOV      R0,R8
   \   00000008   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2: (+1)
   \   00000000   0x4683             MOV      R11,R0
   \   00000002   0xEB05 0x0009      ADD      R0,R5,R9
   \   00000006   0x9004             STR      R0,[SP, #+16]
   \   00000008   0x7880             LDRB     R0,[R0, #+2]
   \   0000000A   0xF88D 0x000D      STRB     R0,[SP, #+13]
   \   0000000E   0x.... 0x....      B.W      emberAfIsThisDataTypeAStringType

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \   00000000   0x9002             STR      R0,[SP, #+8]
   \   00000002   0x4641             MOV      R1,R8
   \   00000004   0x9804             LDR      R0,[SP, #+16]
   \   00000006   0x1CC0             ADDS     R0,R0,#+3
   \   00000008   0x9001             STR      R0,[SP, #+4]
   \   0000000A                      REQUIRE ??Subroutine6_0
   \   0000000A                      ;; // Fall through to label ??Subroutine6_0

   \                                 In section .text, align 2, keep-with-next
   \                     ??Subroutine6_0: (+1)
   \   00000000   0x8A20             LDRH     R0,[R4, #+16]
   \   00000002   0x9000             STR      R0,[SP, #+0]
   \   00000004   0x6820             LDR      R0,[R4, #+0]
   \   00000006   0x7940             LDRB     R0,[R0, #+5]
   \   00000008   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0x463A             MOV      R2,R7
   \   00000002   0x4629             MOV      R1,R5
   \   00000004   0x4648             MOV      R0,R9
   \   00000006   0x.... 0x....      B.W      emberAfGetInt16u

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   0x........         DC32     appResponseLength

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_1:
   \   00000000   0x........         DC32     appResponseData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_2:
   \   00000000   0x........         DC32     emAfSyncingTime
    619          
    620          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      56   emAfProcessGlobalCommand
        56   -> emberAfClusterDefaultResponseCallback
        56   -> emberAfConfigureReportingCommandCallback
        56   -> emberAfConfigureReportingResponseCallback
        56   -> emberAfDefaultResponseCallback
        56   -> emberAfDiscoverAttributesResponseCallback
        56   -> emberAfDiscoverCommandsGeneratedResponseCallback
        56   -> emberAfDiscoverCommandsReceivedResponseCallback
        56   -> emberAfExtractCommandIds
        56   -> emberAfGetDataSize
        56   -> emberAfGetInt16u
        56   -> emberAfGetInt32u
        56   -> emberAfIsDeviceEnabled
        56   -> emberAfIsThisDataTypeAStringType
        56   -> emberAfPutInt16uInResp
        56   -> emberAfPutInt8uInResp
        56   -> emberAfReadAttributesResponseCallback
        56   -> emberAfReadReportingConfigurationCommandCallback
        56   -> emberAfReadReportingConfigurationResponseCallback
        56   -> emberAfReadSequentialAttributesAddToResponse
        56   -> emberAfReportAttributesCallback
        56   -> emberAfRetrieveAttributeAndCraftResponse
        56   -> emberAfSendDefaultResponse
        56   -> emberAfSendResponse
        56   -> emberAfSetTime
        56   -> emberAfStringLength
        56   -> emberAfVerifyAttributeWrite
        56   -> emberAfWriteAttributeExternal
        56   -> emberAfWriteAttributesResponseCallback
        56   -> printDiscoverCommandsResponse
       0   printDiscoverCommandsResponse


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
       4  ??DataTable0_1
       4  ??DataTable0_2
      10  ??Subroutine6_0
      10  ?Subroutine0
      10  ?Subroutine1
      18  ?Subroutine2
      10  ?Subroutine3
      14  ?Subroutine4
      12  ?Subroutine5
     974  emAfProcessGlobalCommand
       1  emAfSyncingTime
      16  printDiscoverCommandsResponse

 
     1 byte  in section .bss
 1 086 bytes in section .text
 
 1 086 bytes of CODE memory
     1 byte  of DATA memory

Errors: none
Warnings: none
