// This file is generated by Ember Desktop.  Please do not edit manually.
//
//

// This file contains the tokens for attributes stored in flash


// Identifier tags for tokens
// Creator for attribute: ZCL version, singleton.
#define CREATOR_VERSION_SINGLETON 0xB000
// Creator for attribute: manufacturer name, singleton.
#define CREATOR_MANUFACTURER_NAME_SINGLETON 0xB001
// Creator for attribute: model identifier, singleton.
#define CREATOR_MODEL_IDENTIFIER_SINGLETON 0xB002
// Creator for attribute: power source, singleton.
#define CREATOR_POWER_SOURCE_SINGLETON 0xB003


// Types for the tokens
#ifdef DEFINETYPES
typedef int8u  tokType_version;
typedef int8u  tokType_manufacturer_name[33];
typedef int8u  tokType_model_identifier[33];
typedef int8u  tokType_power_source;
#endif // DEFINETYPES


// Actual token definitions
#ifdef DEFINETOKENS
DEFINE_BASIC_TOKEN(VERSION_SINGLETON, tokType_version, 0x01)
DEFINE_BASIC_TOKEN(MANUFACTURER_NAME_SINGLETON, tokType_manufacturer_name, {4,'L','u','m','i',0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0})
DEFINE_BASIC_TOKEN(MODEL_IDENTIFIER_SINGLETON, tokType_model_identifier, {3,'C','T','4',0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0})
DEFINE_BASIC_TOKEN(POWER_SOURCE_SINGLETON, tokType_power_source, 0x00)
#endif // DEFINETOKENS


// Macro snippet that loads all the attributes from tokens
#define GENERATED_TOKEN_LOADER(endpoint) do {\
  int8u ptr[33]; \
  int8u curNetwork = emberGetCurrentNetwork(); \
  int8u epNetwork; \
  halCommonGetToken((tokType_version *)ptr, TOKEN_VERSION_SINGLETON); \
  emberAfWriteServerAttribute(1, ZCL_BASIC_CLUSTER_ID, ZCL_VERSION_ATTRIBUTE_ID, (int8u*)ptr, ZCL_INT8U_ATTRIBUTE_TYPE); \
  halCommonGetToken((tokType_manufacturer_name *)ptr, TOKEN_MANUFACTURER_NAME_SINGLETON); \
  emberAfWriteServerAttribute(1, ZCL_BASIC_CLUSTER_ID, ZCL_MANUFACTURER_NAME_ATTRIBUTE_ID, (int8u*)ptr, ZCL_CHAR_STRING_ATTRIBUTE_TYPE); \
  halCommonGetToken((tokType_model_identifier *)ptr, TOKEN_MODEL_IDENTIFIER_SINGLETON); \
  emberAfWriteServerAttribute(1, ZCL_BASIC_CLUSTER_ID, ZCL_MODEL_IDENTIFIER_ATTRIBUTE_ID, (int8u*)ptr, ZCL_CHAR_STRING_ATTRIBUTE_TYPE); \
  halCommonGetToken((tokType_power_source *)ptr, TOKEN_POWER_SOURCE_SINGLETON); \
  emberAfWriteServerAttribute(1, ZCL_BASIC_CLUSTER_ID, ZCL_POWER_SOURCE_ATTRIBUTE_ID, (int8u*)ptr, ZCL_ENUM8_ATTRIBUTE_TYPE); \
} while(FALSE)


// Macro snippet that saves the attribute to token
#define GENERATED_TOKEN_SAVER do {\
  int8u allZeroData[33]; \
  MEMSET(allZeroData, 0, 33); \
  if ( data == NULL ) data = allZeroData; \
  if ( clusterId == 0x00 ) { \
    if ( metadata->attributeId == 0x0000 && !emberAfAttributeIsClient(metadata) ) \
      halCommonSetToken(TOKEN_VERSION_SINGLETON, data); \
    if ( metadata->attributeId == 0x0004 && !emberAfAttributeIsClient(metadata) ) \
      halCommonSetToken(TOKEN_MANUFACTURER_NAME_SINGLETON, data); \
    if ( metadata->attributeId == 0x0005 && !emberAfAttributeIsClient(metadata) ) \
      halCommonSetToken(TOKEN_MODEL_IDENTIFIER_SINGLETON, data); \
    if ( metadata->attributeId == 0x0007 && !emberAfAttributeIsClient(metadata) ) \
      halCommonSetToken(TOKEN_POWER_SOURCE_SINGLETON, data); \
  }\
} while(FALSE)


