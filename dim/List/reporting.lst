###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        22/Oct/2015  09:33:58
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\Zigbee\EmberZNet5.6.0-GA\app\framework\plugin\reporting\reporting.c
#    Command line =  
#        E:\Zigbee\EmberZNet5.6.0-GA\app\framework\plugin\reporting\reporting.c
#        -D DIMMER -D NULL_BTL -D CORTEXM3 -D CORTEXM3_EMBER_MICRO -D
#        CORTEXM3_EM357 -D PHY_EM3XX -D
#        "APPLICATION_TOKEN_HEADER=\"app/framework/util/tokens.h\"" -D
#        "ATTRIBUTE_STORAGE_CONFIGURATION=\"app/builder/ZigbeeRoute/ZigbeeRoute_endpoint_config.h\""
#        -D "BOARD_HEADER=\"app\builder\ZigbeeRoute\ZigbeeRoute_board.h\"" -D
#        "CONFIGURATION_HEADER=\"app/framework/util/config.h\"" -D
#        "GENERATED_TOKEN_HEADER=\"app/builder/ZigbeeRoute/ZigbeeRoute_tokens.h\""
#        -D "PLATFORM_HEADER=\"hal/micro/cortexm3/compiler/iar.h\"" -D
#        "ZA_GENERATED_HEADER=\"app/builder/ZigbeeRoute/ZigbeeRoute.h\"" -D
#        "__SOURCEFILE__=\"reporting.c\"" -lC
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\dim\List\
#        --diag_suppress Pa050 -o
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\dim\Obj\ --debug
#        --endian=little --cpu=Cortex-M3 --no_path_in_file_macros
#        --separate_cluster_for_initialized_variables -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\framework\plugin\reporting\ -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\ -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\ -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\app\framework\include\
#        -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\app\util\
#        -I E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\stack\
#        -I E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\hal\
#        -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\hal\..\
#        -Ohz --use_c++_inline
#    List file    =  
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\dim\List\reporting.lst
#    Object file  =  
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\dim\Obj\reporting.o
#
###############################################################################

E:\Zigbee\EmberZNet5.6.0-GA\app\framework\plugin\reporting\reporting.c
      1          // *******************************************************************
      2          // * reporting.c
      3          // *
      4          // *
      5          // * Copyright 2014 Silicon Laboratories, Inc.                              *80*
      6          // *******************************************************************
      7          
      8          #include "app/framework/include/af.h"
      9          #include "app/framework/util/common.h"
     10          #include "app/framework/util/attribute-storage.h"
     11          #include "reporting.h"
     12          
     13          #ifdef ATTRIBUTE_LARGEST
     14          #define READ_DATA_SIZE ATTRIBUTE_LARGEST
     15          #else
     16          #define READ_DATA_SIZE 8 // max size if attributes aren't present
     17          #endif
     18          
     19          #define NULL_INDEX 0xFF
     20          
     21          static void conditionallySendReport(int8u endpoint, EmberAfClusterId clusterId);
     22          static void scheduleTick(void);
     23          static void removeConfiguration(int8u index);
     24          static void removeConfigurationAndScheduleTick(int8u index);
     25          static EmberAfStatus configureReceivedAttribute(const EmberAfClusterCommand *cmd,
     26                                                          EmberAfAttributeId attributeId,
     27                                                          int8u mask,
     28                                                          int16u timeout);
     29          static void putReportableChangeInResp(const EmberAfPluginReportingEntry *entry,
     30                                                EmberAfAttributeType dataType);
     31          static void retrySendReport(EmberOutgoingMessageType type,
     32                                      int16u indexOrDestination,
     33                                      EmberApsFrame *apsFrame,
     34                                      int16u msgLen,
     35                                      int8u *message,
     36                                      EmberStatus status);
     37          

   \                                 In section .bss, align 4
     38          EmberEventControl emberAfPluginReportingTickEventControl;
   \                     emberAfPluginReportingTickEventControl:
   \   00000000                      DS8 8
     39          
     40          typedef struct {
     41            int32u lastReportTimeMs;
     42            int32u lastReportValue;
     43            boolean reportableChange;
     44          } VolatileData;

   \                                 In section .bss, align 4
     45          static VolatileData volatileData[EMBER_AF_PLUGIN_REPORTING_TABLE_SIZE];
   \                     volatileData:
   \   00000000                      DS8 240
     46          

   \                                 In section .text, align 2, keep-with-next
     47          static void retrySendReport(EmberOutgoingMessageType type,
     48                                      int16u indexOrDestination,
     49                                      EmberApsFrame *apsFrame,
     50                                      int16u msgLen,
     51                                      int8u *message,
     52                                      EmberStatus status)
     53          {
   \                     retrySendReport: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
     54            // Retry once, and do so by unicasting without a pointer to this callback
     55            if (status != EMBER_SUCCESS) {
   \   00000004   0x9C05             LDR      R4,[SP, #+20]
   \   00000006   0xB11C             CBZ.N    R4,??retrySendReport_0
     56              emberAfSendUnicast(type, indexOrDestination, apsFrame, msgLen, message);
   \   00000008   0x9C04             LDR      R4,[SP, #+16]
   \   0000000A   0x9400             STR      R4,[SP, #+0]
   \   0000000C   0x.... 0x....      BL       emberAfSendUnicast
     57            }
     58          }
   \                     ??retrySendReport_0: (+1)
   \   00000010   0xBD13             POP      {R0,R1,R4,PC}    ;; return
     59          
     60          #ifdef EZSP_HOST
     61          static EmberAfPluginReportingEntry table[EMBER_AF_PLUGIN_REPORTING_TABLE_SIZE];
     62          void emAfPluginReportingGetEntry(int8u index, EmberAfPluginReportingEntry *result)
     63          {
     64            MEMMOVE(result, &table[index], sizeof(EmberAfPluginReportingEntry));
     65          }
     66          void emAfPluginReportingSetEntry(int8u index, EmberAfPluginReportingEntry *value)
     67          {
     68            MEMMOVE(&table[index], value, sizeof(EmberAfPluginReportingEntry));
     69          }
     70          #else

   \                                 In section .text, align 2, keep-with-next
     71          void emAfPluginReportingGetEntry(int8u index, EmberAfPluginReportingEntry *result)
     72          {
   \                     emAfPluginReportingGetEntry: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x460C             MOV      R4,R1
     73            halCommonGetIndexedToken(result, TOKEN_REPORT_TABLE, index);
   \   00000004   0x4602             MOV      R2,R0
   \   00000006   0x4620             MOV      R0,R4
   \   00000008   0xE8BD 0x4010      POP      {R4,LR}
   \   0000000C   0x2314             MOVS     R3,#+20
   \   0000000E   0x2125             MOVS     R1,#+37
   \   00000010   0x.... 0x....      B.W      halInternalGetTokenData
     74          }

   \                                 In section .text, align 2, keep-with-next
     75          void emAfPluginReportingSetEntry(int8u index, EmberAfPluginReportingEntry *value)
     76          {
     77            halCommonSetIndexedToken(TOKEN_REPORT_TABLE, index, value);
   \                     emAfPluginReportingSetEntry: (+1)
   \   00000000   0x460A             MOV      R2,R1
   \   00000002   0x4601             MOV      R1,R0
   \   00000004   0x2314             MOVS     R3,#+20
   \   00000006   0x2025             MOVS     R0,#+37
   \   00000008   0x.... 0x....      B.W      halInternalSetTokenData
     78          }
     79          #endif
     80          

   \                                 In section .text, align 2, keep-with-next
     81          void emberAfPluginReportingInitCallback(void)
     82          {
     83            scheduleTick();
   \                     emberAfPluginReportingInitCallback: (+1)
   \   00000000   0x....             B.N      scheduleTick
     84          }
     85          

   \                                 In section .text, align 2, keep-with-next
     86          void emberAfPluginReportingTickEventHandler(void)
     87          {
   \                     emberAfPluginReportingTickEventHandler: (+1)
   \   00000000   0xE92D 0x4BF0      PUSH     {R4-R9,R11,LR}
   \   00000004   0xB094             SUB      SP,SP,#+80
     88            EmberApsFrame *apsFrame = NULL;
   \   00000006   0x2400             MOVS     R4,#+0
     89            EmberAfStatus status;
     90            EmberAfAttributeType dataType;
     91            int16u manufacturerCode;
     92            int8u readData[READ_DATA_SIZE];
     93            int8u i, dataSize;
     94            boolean clientToServer;
     95          
     96            for (i = 0; i < EMBER_AF_PLUGIN_REPORTING_TABLE_SIZE; i++) {
   \   00000008   0x2500             MOVS     R5,#+0
   \   0000000A   0x.... 0x....      ADR.W    R9,??DataTable3  ;; ""
   \   0000000E   0x.... 0x....      LDR.W    R11,??DataTable8
     97              EmberAfPluginReportingEntry entry;
     98              int32u elapsedMs;
     99              emAfPluginReportingGetEntry(i, &entry);
   \                     ??emberAfPluginReportingTickEventHandler_0: (+1)
   \   00000012   0xA905             ADD      R1,SP,#+20
   \   00000014   0xB2E8             UXTB     R0,R5
   \   00000016   0x.... 0x....      BL       emAfPluginReportingGetEntry
    100          
    101              // We will only send reports for active reported attributes and only if a
    102              // reportable change has occurred and the minimum interval has elapsed or
    103              // if the maximum interval is set and has elapsed.
    104              elapsedMs = elapsedTimeInt32u(volatileData[i].lastReportTimeMs,
    105                                            halCommonGetInt32uMillisecondTick());
   \   0000001A   0x.... 0x....      BL       halCommonGetInt32uMillisecondTick
   \   0000001E   0x210C             MOVS     R1,#+12
   \   00000020   0xFB01 0xF805      MUL      R8,R1,R5
   \   00000024   0xF858 0x100B      LDR      R1,[R8, R11]
   \   00000028   0x1A41             SUBS     R1,R0,R1
    106              if (entry.endpoint == EMBER_AF_PLUGIN_REPORTING_UNUSED_ENDPOINT_ID
    107                  || entry.direction != EMBER_ZCL_REPORTING_DIRECTION_REPORTED
    108                  || (elapsedMs
    109                      < entry.data.reported.minInterval * MILLISECOND_TICKS_PER_SECOND)
    110                  || (!volatileData[i].reportableChange
    111                      && (entry.data.reported.maxInterval == 0
    112                          || (elapsedMs
    113                              < (entry.data.reported.maxInterval
    114                                 * MILLISECOND_TICKS_PER_SECOND))))) {
   \   0000002A   0xF89D 0x0015      LDRB     R0,[SP, #+21]
   \   0000002E   0x2800             CMP      R0,#+0
   \   00000030   0xD00F             BEQ.N    ??emberAfPluginReportingTickEventHandler_1
   \   00000032   0xF89D 0x2014      LDRB     R2,[SP, #+20]
   \   00000036   0x2A00             CMP      R2,#+0
   \   00000038   0xD121             BNE.N    ??emberAfPluginReportingTickEventHandler_2
   \   0000003A   0xF8BD 0x2020      LDRH     R2,[SP, #+32]
   \   0000003E   0xEBB1 0x2F82      CMP      R1,R2, LSL #+10
   \   00000042   0xD309             BCC.N    ??emberAfPluginReportingTickEventHandler_3
   \   00000044   0xEB08 0x060B      ADD      R6,R8,R11
   \   00000048   0x7A32             LDRB     R2,[R6, #+8]
   \   0000004A   0xB932             CBNZ.N   R2,??emberAfPluginReportingTickEventHandler_4
   \   0000004C   0xF8BD 0x2022      LDRH     R2,[SP, #+34]
   \   00000050   0x2A00             CMP      R2,#+0
   \                     ??emberAfPluginReportingTickEventHandler_1: (+1)
   \   00000052   0xD078             BEQ.N    ??emberAfPluginReportingTickEventHandler_5
   \   00000054   0xEBB1 0x2F82      CMP      R1,R2, LSL #+10
   \                     ??emberAfPluginReportingTickEventHandler_3: (+1)
   \   00000058   0xD375             BCC.N    ??emberAfPluginReportingTickEventHandler_5
    115                continue;
    116              }
    117          
    118              status = emAfReadAttribute(entry.endpoint,
    119                                         entry.clusterId,
    120                                         entry.attributeId,
    121                                         entry.mask,
    122                                         entry.manufacturerCode,
    123                                         (int8u *)&readData,
    124                                         READ_DATA_SIZE,
    125                                         &dataType);
    126              if (status != EMBER_ZCL_STATUS_SUCCESS) {
   \                     ??emberAfPluginReportingTickEventHandler_4: (+1)
   \   0000005A   0xA904             ADD      R1,SP,#+16
   \   0000005C   0x9103             STR      R1,[SP, #+12]
   \   0000005E   0x2121             MOVS     R1,#+33
   \   00000060   0x9102             STR      R1,[SP, #+8]
   \   00000062   0xA90A             ADD      R1,SP,#+40
   \   00000064   0x9101             STR      R1,[SP, #+4]
   \   00000066   0xF8BD 0x101C      LDRH     R1,[SP, #+28]
   \   0000006A   0xF89D 0x301A      LDRB     R3,[SP, #+26]
   \   0000006E   0xF8BD 0x2018      LDRH     R2,[SP, #+24]
   \   00000072   0x9100             STR      R1,[SP, #+0]
   \   00000074   0xF8BD 0x1016      LDRH     R1,[SP, #+22]
   \   00000078   0x.... 0x....      BL       emAfReadAttribute
   \   0000007C   0x2800             CMP      R0,#+0
   \                     ??emberAfPluginReportingTickEventHandler_2: (+1)
   \   0000007E   0xD162             BNE.N    ??emberAfPluginReportingTickEventHandler_5
    127                emberAfReportingPrintln("ERR: reading cluster 0x%2x attribute 0x%2x: 0x%x",
    128                                        entry.clusterId,
    129                                        entry.attributeId,
    130                                        status);
    131                continue;
    132              }
    133          
    134              // If we have already started a report for a different attribute or
    135              // destination, send it and create a new one.
    136              if (apsFrame != NULL &&
    137                  !(entry.endpoint == apsFrame->sourceEndpoint
    138                    && entry.clusterId == apsFrame->clusterId
    139                    && emberAfClusterIsClient(&entry) == clientToServer
    140                    && entry.manufacturerCode == manufacturerCode)) {
   \   00000080   0xB1C4             CBZ.N    R4,??emberAfPluginReportingTickEventHandler_6
   \   00000082   0x7920             LDRB     R0,[R4, #+4]
   \   00000084   0xF89D 0x2015      LDRB     R2,[SP, #+21]
   \   00000088   0x8861             LDRH     R1,[R4, #+2]
   \   0000008A   0x4282             CMP      R2,R0
   \   0000008C   0xBF04             ITT      EQ 
   \   0000008E   0xF8BD 0x2016      LDRHEQ   R2,[SP, #+22]
   \   00000092   0x428A             CMPEQ    R2,R1
   \   00000094   0xD10C             BNE.N    ??emberAfPluginReportingTickEventHandler_7
   \   00000096   0xF89D 0x201A      LDRB     R2,[SP, #+26]
   \   0000009A   0xF89D 0x3011      LDRB     R3,[SP, #+17]
   \   0000009E   0x09D2             LSRS     R2,R2,#+7
   \   000000A0   0x429A             CMP      R2,R3
   \   000000A2   0xBF02             ITTT     EQ 
   \   000000A4   0xF8BD 0x201C      LDRHEQ   R2,[SP, #+28]
   \   000000A8   0xF8BD 0x3012      LDRHEQ   R3,[SP, #+18]
   \   000000AC   0x429A             CMPEQ    R2,R3
   \   000000AE   0xD01F             BEQ.N    ??emberAfPluginReportingTickEventHandler_8
    141                conditionallySendReport(apsFrame->sourceEndpoint, apsFrame->clusterId);
   \                     ??emberAfPluginReportingTickEventHandler_7: (+1)
   \   000000B0   0x.... 0x....      BL       conditionallySendReport
    142                apsFrame = NULL;
    143              }
    144          
    145              // If we haven't made the message header, make it.
    146              if (apsFrame == NULL) {
    147                apsFrame = emberAfGetCommandApsFrame();
   \                     ??emberAfPluginReportingTickEventHandler_6: (+1)
   \   000000B4   0x.... 0x....      BL       emberAfGetCommandApsFrame
   \   000000B8   0x4604             MOV      R4,R0
    148                clientToServer = emberAfClusterIsClient(&entry);
   \   000000BA   0xF89D 0x001A      LDRB     R0,[SP, #+26]
   \   000000BE   0x09C0             LSRS     R0,R0,#+7
   \   000000C0   0xF88D 0x0011      STRB     R0,[SP, #+17]
    149                // The manufacturer-specfic version of the fill API only creates a
    150                // manufacturer-specfic command if the manufacturer code is set.  For
    151                // non-manufacturer-specfic reports, the manufacturer code is unset, so
    152                // we can get away with using this API for both cases.
    153                emberAfFillExternalManufacturerSpecificBuffer((clientToServer
    154                                                               ? (ZCL_PROFILE_WIDE_COMMAND
    155                                                                  | ZCL_FRAME_CONTROL_CLIENT_TO_SERVER
    156                                                                  | EMBER_AF_DEFAULT_RESPONSE_POLICY_REQUESTS)
    157                                                               : (ZCL_PROFILE_WIDE_COMMAND
    158                                                                  | ZCL_FRAME_CONTROL_SERVER_TO_CLIENT
    159                                                                  | EMBER_AF_DEFAULT_RESPONSE_POLICY_REQUESTS)),
    160                                                              entry.clusterId,
    161                                                              entry.manufacturerCode,
    162                                                              ZCL_REPORT_ATTRIBUTES_COMMAND_ID,
    163                                                              "");
   \   000000C4   0xBF14             ITE      NE 
   \   000000C6   0x2010             MOVNE    R0,#+16
   \   000000C8   0x2018             MOVEQ    R0,#+24
   \   000000CA   0xF8BD 0x201C      LDRH     R2,[SP, #+28]
   \   000000CE   0xF8BD 0x1016      LDRH     R1,[SP, #+22]
   \   000000D2   0xF8CD 0x9000      STR      R9,[SP, #+0]
   \   000000D6   0x230A             MOVS     R3,#+10
   \   000000D8   0x.... 0x....      BL       emberAfFillExternalManufacturerSpecificBuffer
    164                apsFrame->sourceEndpoint = entry.endpoint;
   \   000000DC   0xF89D 0x0015      LDRB     R0,[SP, #+21]
   \   000000E0   0x7120             STRB     R0,[R4, #+4]
    165                apsFrame->options = EMBER_AF_DEFAULT_APS_OPTIONS;
   \   000000E2   0xF44F 0x5088      MOV      R0,#+4352
   \   000000E6   0x80E0             STRH     R0,[R4, #+6]
    166                manufacturerCode = entry.manufacturerCode;
   \   000000E8   0xF8BD 0x001C      LDRH     R0,[SP, #+28]
   \   000000EC   0xF8AD 0x0012      STRH     R0,[SP, #+18]
    167              }
    168          
    169              // Payload is [attribute id:2] [type:1] [data:N].
    170              emberAfPutInt16uInResp(entry.attributeId);
   \                     ??emberAfPluginReportingTickEventHandler_8: (+1)
   \   000000F0   0xF8BD 0x0018      LDRH     R0,[SP, #+24]
   \   000000F4   0x.... 0x....      BL       emberAfPutInt16uInResp
    171              emberAfPutInt8uInResp(dataType);
   \   000000F8   0xF89D 0x0010      LDRB     R0,[SP, #+16]
   \   000000FC   0x.... 0x....      BL       emberAfPutInt8uInResp
    172          
    173              dataSize = (emberAfIsThisDataTypeAStringType(dataType)
    174                          ? emberAfStringLength(readData) + 1
    175                          : emberAfGetDataSize(dataType));
   \   00000100   0xF89D 0x0010      LDRB     R0,[SP, #+16]
   \   00000104   0x.... 0x....      BL       emberAfIsThisDataTypeAStringType
   \   00000108   0xB120             CBZ.N    R0,??emberAfPluginReportingTickEventHandler_9
   \   0000010A   0xA80A             ADD      R0,SP,#+40
   \   0000010C   0x.... 0x....      BL       emberAfStringLength
   \   00000110   0x1C47             ADDS     R7,R0,#+1
   \   00000112   0xE004             B.N      ??emberAfPluginReportingTickEventHandler_10
   \                     ??emberAfPluginReportingTickEventHandler_9: (+1)
   \   00000114   0xF89D 0x0010      LDRB     R0,[SP, #+16]
   \   00000118   0x.... 0x....      BL       emberAfGetDataSize
   \   0000011C   0x4607             MOV      R7,R0
   \                     ??emberAfPluginReportingTickEventHandler_10: (+1)
   \   0000011E   0xB2FF             UXTB     R7,R7
    176          #if (BIGENDIAN_CPU)
    177              if (isThisDataTypeSentLittleEndianOTA(dataType)) {
    178                int8u i;
    179                for (i = 0; i < dataSize; i++) {
    180                  emberAfPutInt8uInResp(readData[dataSize - i - 1]);
    181                }
    182              } else {
    183                emberAfPutBlockInResp(readData, dataSize);
    184              }
    185          #else
    186              emberAfPutBlockInResp(readData, dataSize);
   \   00000120   0x4639             MOV      R1,R7
   \   00000122   0xA80A             ADD      R0,SP,#+40
   \   00000124   0x.... 0x....      BL       emberAfPutBlockInResp
    187          #endif
    188          
    189              // Store the last reported time and value so that we can track intervals
    190              // and changes.  We only track changes for data types that are small enough
    191              // for us to compare.
    192              volatileData[i].reportableChange = FALSE;
   \   00000128   0x2000             MOVS     R0,#+0
   \   0000012A   0x7230             STRB     R0,[R6, #+8]
    193              volatileData[i].lastReportTimeMs = halCommonGetInt32uMillisecondTick();
   \   0000012C   0x.... 0x....      BL       halCommonGetInt32uMillisecondTick
   \   00000130   0xF848 0x000B      STR      R0,[R8, R11]
    194              if (dataSize <= sizeof(volatileData[i].lastReportValue)) {
   \   00000134   0x2F05             CMP      R7,#+5
   \   00000136   0xD206             BCS.N    ??emberAfPluginReportingTickEventHandler_5
    195                volatileData[i].lastReportValue = 0;
   \   00000138   0x2000             MOVS     R0,#+0
   \   0000013A   0x6070             STR      R0,[R6, #+4]
    196          #if (BIGENDIAN_CPU)
    197                MEMMOVE(((int8u *)&volatileData[i].lastReportValue
    198                         + sizeof(volatileData[i].lastReportValue)
    199                         - dataSize),
    200                        readData,
    201                        dataSize);
    202          #else
    203                MEMMOVE(&volatileData[i].lastReportValue, readData, dataSize);
   \   0000013C   0x463A             MOV      R2,R7
   \   0000013E   0xA90A             ADD      R1,SP,#+40
   \   00000140   0x1D30             ADDS     R0,R6,#+4
   \   00000142   0x.... 0x....      BL       halCommonMemMove
    204          #endif
    205              }
    206            }
   \                     ??emberAfPluginReportingTickEventHandler_5: (+1)
   \   00000146   0x1C6D             ADDS     R5,R5,#+1
   \   00000148   0x2D14             CMP      R5,#+20
   \   0000014A   0xF6FF 0xAF62      BLT.W    ??emberAfPluginReportingTickEventHandler_0
    207          
    208            if (apsFrame != NULL) {
   \   0000014E   0xB11C             CBZ.N    R4,??emberAfPluginReportingTickEventHandler_11
    209              conditionallySendReport(apsFrame->sourceEndpoint, apsFrame->clusterId);
   \   00000150   0x8861             LDRH     R1,[R4, #+2]
   \   00000152   0x7920             LDRB     R0,[R4, #+4]
   \   00000154   0x.... 0x....      BL       conditionallySendReport
    210            }
    211            scheduleTick();
   \                     ??emberAfPluginReportingTickEventHandler_11: (+1)
   \   00000158   0x.... 0x....      BL       scheduleTick
    212          }
   \   0000015C   0xB014             ADD      SP,SP,#+80
   \   0000015E   0xE8BD 0x8BF0      POP      {R4-R9,R11,PC}   ;; return
    213          

   \                                 In section .text, align 2, keep-with-next
    214          static void conditionallySendReport(int8u endpoint, EmberAfClusterId clusterId)
    215          {
   \                     conditionallySendReport: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x460C             MOV      R4,R1
    216            if (emberAfIsDeviceEnabled(endpoint)
    217                || clusterId == ZCL_IDENTIFY_CLUSTER_ID) {
   \   00000004   0x.... 0x....      BL       emberAfIsDeviceEnabled
   \   00000008   0xB908             CBNZ.N   R0,??conditionallySendReport_0
   \   0000000A   0x2C03             CMP      R4,#+3
   \   0000000C   0xD105             BNE.N    ??conditionallySendReport_1
    218              emberAfSendCommandUnicastToBindingsWithCallback((EmberAfMessageSentFunction)(&retrySendReport));
   \                     ??conditionallySendReport_0: (+1)
   \   0000000E   0xE8BD 0x4010      POP      {R4,LR}
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable8_1
   \   00000016   0x.... 0x....      B.W      emberAfSendCommandUnicastToBindingsWithCallback
    219            }
    220          }
   \                     ??conditionallySendReport_1: (+1)
   \   0000001A   0xBD10             POP      {R4,PC}          ;; return
    221          

   \                                 In section .text, align 2, keep-with-next
    222          boolean emberAfConfigureReportingCommandCallback(const EmberAfClusterCommand *cmd)
    223          {
   \                     emberAfConfigureReportingCommandCallback: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0xB087             SUB      SP,SP,#+28
    224            int16u bufIndex = cmd->payloadStartIndex;
    225            int8u frameControl, mask;
    226            boolean failures = FALSE;
    227          
    228            emberAfReportingPrint("%p: ", "CFG_RPT");
    229            emberAfReportingDebugExec(emberAfDecodeAndPrintCluster(cmd->apsFrame->clusterId));
    230            emberAfReportingPrintln("");
    231            emberAfReportingFlush();
    232          
    233            if (cmd->direction == ZCL_DIRECTION_CLIENT_TO_SERVER) {
   \   00000008   0x7D60             LDRB     R0,[R4, #+21]
   \   0000000A   0x7D26             LDRB     R6,[R4, #+20]
   \   0000000C   0x2700             MOVS     R7,#+0
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xBF07             ITTEE    EQ 
    234              frameControl = (ZCL_PROFILE_WIDE_COMMAND
    235                              | ZCL_FRAME_CONTROL_SERVER_TO_CLIENT
    236                              | EMBER_AF_DEFAULT_RESPONSE_POLICY_REQUESTS);
   \   00000012   0x2018             MOVEQ    R0,#+24
    237              mask = CLUSTER_MASK_SERVER;
   \   00000014   0x2140             MOVEQ    R1,#+64
    238            } else {
    239              frameControl = (ZCL_PROFILE_WIDE_COMMAND
    240                              | ZCL_FRAME_CONTROL_CLIENT_TO_SERVER
    241                              | EMBER_AF_DEFAULT_RESPONSE_POLICY_REQUESTS);
   \   00000016   0x2010             MOVNE    R0,#+16
    242              mask = CLUSTER_MASK_CLIENT;
   \   00000018   0x2180             MOVNE    R1,#+128
   \   0000001A   0xF88D 0x1004      STRB     R1,[SP, #+4]
    243            }
    244          
    245            // The manufacturer-specfic version of the fill API only creates a
    246            // manufacturer-specfic command if the manufacturer code is set.  For non-
    247            // manufacturer-specfic reports, the manufacturer code is unset, so we can
    248            // get away with using this API for both cases.
    249            emberAfFillExternalManufacturerSpecificBuffer(frameControl,
    250                                                          cmd->apsFrame->clusterId,
    251                                                          cmd->mfgCode,
    252                                                          ZCL_CONFIGURE_REPORTING_RESPONSE_COMMAND_ID,
    253                                                          "");
   \   0000001E   0x2307             MOVS     R3,#+7
   \   00000020   0x....             ADR.N    R1,??DataTable3  ;; ""
   \   00000022   0x9100             STR      R1,[SP, #+0]
   \   00000024   0x.... 0x....      BL       ?Subroutine2
    254          
    255            // Each record in the command has at least a one-byte direction and a two-
    256            // byte attribute id.  Additional fields are present depending on the value
    257            // of the direction field.
    258            while (bufIndex + 3 < cmd->bufLen) {
   \                     ??CrossCallReturnLabel_4: (+1)
   \   00000028   0x89A2             LDRH     R2,[R4, #+12]
   \   0000002A   0xB2B6             UXTH     R6,R6
   \   0000002C   0x1CF0             ADDS     R0,R6,#+3
   \   0000002E   0x4290             CMP      R0,R2
   \   00000030   0xDA78             BGE.N    ??emberAfConfigureReportingCommandCallback_0
    259              EmberAfAttributeId attributeId;
    260              EmberAfReportingDirection direction;
    261              EmberAfStatus status;
    262          
    263              direction = (EmberAfReportingDirection)emberAfGetInt8u(cmd->buffer,
    264                                                                     bufIndex,
    265                                                                     cmd->bufLen);
   \   00000032   0x68A0             LDR      R0,[R4, #+8]
   \   00000034   0x5C31             LDRB     R1,[R6, R0]
   \   00000036   0xF88D 0x1006      STRB     R1,[SP, #+6]
    266              bufIndex++;
   \   0000003A   0x1C76             ADDS     R6,R6,#+1
    267              attributeId = (EmberAfAttributeId)emberAfGetInt16u(cmd->buffer,
    268                                                                 bufIndex,
    269                                                                 cmd->bufLen);
   \   0000003C   0x.... 0x....      BL       ??Subroutine3_0
   \                     ??CrossCallReturnLabel_7: (+1)
   \   00000040   0x4680             MOV      R8,R0
    270              bufIndex += 2;
    271          
    272              emberAfReportingPrintln(" - direction:%x, attr:%2x", direction, attributeId);
    273          
    274              switch (direction) {
   \   00000042   0xF89D 0x0006      LDRB     R0,[SP, #+6]
   \   00000046   0x1CB6             ADDS     R6,R6,#+2
   \   00000048   0xB110             CBZ.N    R0,??emberAfConfigureReportingCommandCallback_1
   \   0000004A   0x2801             CMP      R0,#+1
   \   0000004C   0xD05D             BEQ.N    ??emberAfConfigureReportingCommandCallback_2
   \   0000004E   0xE067             B.N      ??emberAfConfigureReportingCommandCallback_3
    275              case EMBER_ZCL_REPORTING_DIRECTION_REPORTED:
    276                {
    277                  EmberAfAttributeMetadata* metadata;
    278                  EmberAfAttributeType dataType;
    279                  int16u minInterval, maxInterval;
    280                  int32u reportableChange = 0;
    281                  EmberAfPluginReportingEntry newEntry;
    282          
    283                  dataType = (EmberAfAttributeType)emberAfGetInt8u(cmd->buffer,
    284                                                                   bufIndex,
    285                                                                   cmd->bufLen);
   \                     ??emberAfConfigureReportingCommandCallback_1: (+1)
   \   00000050   0x68A0             LDR      R0,[R4, #+8]
   \   00000052   0xB2B6             UXTH     R6,R6
   \   00000054   0x2500             MOVS     R5,#+0
   \   00000056   0x5C31             LDRB     R1,[R6, R0]
   \   00000058   0xF88D 0x1005      STRB     R1,[SP, #+5]
    286                  bufIndex++;
   \   0000005C   0x1C76             ADDS     R6,R6,#+1
    287                  minInterval = emberAfGetInt16u(cmd->buffer, bufIndex, cmd->bufLen);
   \   0000005E   0x89A2             LDRH     R2,[R4, #+12]
   \   00000060   0x.... 0x....      BL       ??Subroutine3_0
   \                     ??CrossCallReturnLabel_6: (+1)
   \   00000064   0x4681             MOV      R9,R0
    288                  bufIndex += 2;
   \   00000066   0x1CB6             ADDS     R6,R6,#+2
    289                  maxInterval = emberAfGetInt16u(cmd->buffer, bufIndex, cmd->bufLen);
   \   00000068   0x.... 0x....      BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_9: (+1)
   \   0000006C   0x4682             MOV      R10,R0
    290                  bufIndex += 2;
    291          
    292                  emberAfReportingPrintln("   type:%x, min:%2x, max:%2x",
    293                                          dataType,
    294                                          minInterval,
    295                                          maxInterval);
    296                  emberAfReportingFlush();
    297          
    298                  if (emberAfGetAttributeAnalogOrDiscreteType(dataType)
    299                      == EMBER_AF_DATA_TYPE_ANALOG) {
   \   0000006E   0xF89D 0x0005      LDRB     R0,[SP, #+5]
   \   00000072   0x1CB6             ADDS     R6,R6,#+2
   \   00000074   0x.... 0x....      BL       emberAfGetAttributeAnalogOrDiscreteType
   \   00000078   0xB960             CBNZ.N   R0,??emberAfConfigureReportingCommandCallback_4
    300                    int8u dataSize = emberAfGetDataSize(dataType);
   \   0000007A   0xF89D 0x0005      LDRB     R0,[SP, #+5]
   \   0000007E   0x.... 0x....      BL       emberAfGetDataSize
   \   00000082   0x4683             MOV      R11,R0
    301                    reportableChange = emberAfGetInt(cmd->buffer,
    302                                                     bufIndex,
    303                                                     cmd->bufLen,
    304                                                     dataSize);
   \   00000084   0x89A2             LDRH     R2,[R4, #+12]
   \   00000086   0x68A0             LDR      R0,[R4, #+8]
   \   00000088   0x465B             MOV      R3,R11
   \   0000008A   0xB2B1             UXTH     R1,R6
   \   0000008C   0x.... 0x....      BL       emberAfGetInt
   \   00000090   0x4605             MOV      R5,R0
    305          
    306                    emberAfReportingPrint("   change:");
    307                    emberAfReportingPrintBuffer(cmd->buffer + bufIndex, dataSize, FALSE);
    308                    emberAfReportingPrintln("");
    309          
    310                    bufIndex += dataSize;
   \   00000092   0x445E             ADD      R6,R11,R6
    311                  }
    312          
    313                  // emberAfPluginReportingConfigureReportedAttribute handles non-
    314                  // existent attributes, but does not verify the attribute data type, so
    315                  // we need to check it here.
    316                  metadata = emberAfLocateAttributeMetadata(cmd->apsFrame->destinationEndpoint,
    317                                                            cmd->apsFrame->clusterId,
    318                                                            attributeId,
    319                                                            mask,
    320                                                            cmd->mfgCode);
   \                     ??emberAfConfigureReportingCommandCallback_4: (+1)
   \   00000094   0x6820             LDR      R0,[R4, #+0]
   \   00000096   0x8A21             LDRH     R1,[R4, #+16]
   \   00000098   0xF89D 0x3004      LDRB     R3,[SP, #+4]
   \   0000009C   0x9100             STR      R1,[SP, #+0]
   \   0000009E   0x4642             MOV      R2,R8
   \   000000A0   0x8841             LDRH     R1,[R0, #+2]
   \   000000A2   0x7940             LDRB     R0,[R0, #+5]
   \   000000A4   0x.... 0x....      BL       emberAfLocateAttributeMetadata
    321                  if (metadata != NULL && metadata->attributeType != dataType) {
   \   000000A8   0x2800             CMP      R0,#+0
   \   000000AA   0xBF1F             ITTTT    NE 
   \   000000AC   0x7880             LDRBNE   R0,[R0, #+2]
   \   000000AE   0xF89D 0x1005      LDRBNE   R1,[SP, #+5]
   \   000000B2   0x4288             CMPNE    R0,R1
    322                    status = EMBER_ZCL_STATUS_INVALID_DATA_TYPE;
   \   000000B4   0x258D             MOVNE    R5,#+141
   \   000000B6   0xD11A             BNE.N    ??emberAfConfigureReportingCommandCallback_5
    323                  } else {
    324                    // Add a reporting entry for a reported attribute.  The reports will
    325                    // be sent from us to the source of the Configure Reporting command.
    326                    newEntry.endpoint = cmd->apsFrame->destinationEndpoint;
   \   000000B8   0x6820             LDR      R0,[R4, #+0]
   \   000000BA   0x7940             LDRB     R0,[R0, #+5]
   \   000000BC   0xF88D 0x0009      STRB     R0,[SP, #+9]
    327                    newEntry.clusterId = cmd->apsFrame->clusterId;
   \   000000C0   0x6820             LDR      R0,[R4, #+0]
   \   000000C2   0x8840             LDRH     R0,[R0, #+2]
   \   000000C4   0xF8AD 0x000A      STRH     R0,[SP, #+10]
    328                    newEntry.attributeId = attributeId;
   \   000000C8   0xF8AD 0x800C      STRH     R8,[SP, #+12]
    329                    newEntry.mask = mask;
   \   000000CC   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   000000D0   0xF88D 0x000E      STRB     R0,[SP, #+14]
    330                    newEntry.manufacturerCode = cmd->mfgCode;
   \   000000D4   0x8A20             LDRH     R0,[R4, #+16]
   \   000000D6   0xF8AD 0x0010      STRH     R0,[SP, #+16]
    331                    newEntry.data.reported.minInterval = minInterval;
   \   000000DA   0xF8AD 0x9014      STRH     R9,[SP, #+20]
    332                    newEntry.data.reported.maxInterval = maxInterval;
   \   000000DE   0xF8AD 0xA016      STRH     R10,[SP, #+22]
    333                    newEntry.data.reported.reportableChange = reportableChange;
   \   000000E2   0x9506             STR      R5,[SP, #+24]
    334                    status = emberAfPluginReportingConfigureReportedAttribute(&newEntry);
   \   000000E4   0xA802             ADD      R0,SP,#+8
   \   000000E6   0x.... 0x....      BL       emberAfPluginReportingConfigureReportedAttribute
   \                     ??emberAfConfigureReportingCommandCallback_6: (+1)
   \   000000EA   0x0005             MOVS     R5,R0
    335                  }
    336                  break;
    337                }
    338              case EMBER_ZCL_REPORTING_DIRECTION_RECEIVED:
    339                {
    340                  int16u timeout = emberAfGetInt16u(cmd->buffer, bufIndex, cmd->bufLen);
    341                  bufIndex += 2;
    342          
    343                  emberAfReportingPrintln("   timeout:%2x", timeout);
    344          
    345                  // Add a reporting entry from a received attribute.  The reports
    346                  // will be sent to us from the source of the Configure Reporting
    347                  // command.
    348                  status = configureReceivedAttribute(cmd,
    349                                                      attributeId,
    350                                                      mask,
    351                                                      timeout);
    352                  break;
    353                }
    354              default:
    355                // This will abort the processing (see below).
    356                status = EMBER_ZCL_STATUS_INVALID_FIELD;
    357                break;
    358              }
    359          
    360              // If a report cannot be configured, the status, direction, and
    361              // attribute are added to the response.  If the failure was due to an
    362              // invalid field, we have to abort after this record because we don't
    363              // know how to interpret the rest of the data in the request.
    364              if (status != EMBER_ZCL_STATUS_SUCCESS) {
   \   000000EC   0xD09C             BEQ.N    ??CrossCallReturnLabel_4
    365                emberAfPutInt8uInResp(status);
   \                     ??emberAfConfigureReportingCommandCallback_5: (+1)
   \   000000EE   0x4628             MOV      R0,R5
   \   000000F0   0x.... 0x....      BL       emberAfPutInt8uInResp
    366                emberAfPutInt8uInResp(direction);
   \   000000F4   0xF89D 0x0006      LDRB     R0,[SP, #+6]
   \   000000F8   0x.... 0x....      BL       emberAfPutInt8uInResp
    367                emberAfPutInt16uInResp(attributeId);
   \   000000FC   0x4640             MOV      R0,R8
   \   000000FE   0x.... 0x....      BL       emberAfPutInt16uInResp
    368                failures = TRUE;
   \   00000102   0x2701             MOVS     R7,#+1
    369                if (status == EMBER_ZCL_STATUS_INVALID_FIELD) {
   \   00000104   0x2D85             CMP      R5,#+133
   \   00000106   0xD18F             BNE.N    ??CrossCallReturnLabel_4
   \   00000108   0xE010             B.N      ??emberAfConfigureReportingCommandCallback_7
    370                  break;
    371                }
    372              }
   \                     ??emberAfConfigureReportingCommandCallback_2: (+1)
   \   0000010A   0x.... 0x....      BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_8: (+1)
   \   0000010E   0x4603             MOV      R3,R0
   \   00000110   0xF89D 0x2004      LDRB     R2,[SP, #+4]
   \   00000114   0x1CB6             ADDS     R6,R6,#+2
   \   00000116   0x4641             MOV      R1,R8
   \   00000118   0x4620             MOV      R0,R4
   \   0000011A   0x.... 0x....      BL       configureReceivedAttribute
   \   0000011E   0xE7E4             B.N      ??emberAfConfigureReportingCommandCallback_6
   \                     ??emberAfConfigureReportingCommandCallback_3: (+1)
   \   00000120   0x2585             MOVS     R5,#+133
   \   00000122   0xE7E4             B.N      ??emberAfConfigureReportingCommandCallback_5
    373            }
    374          
    375            // We just respond with SUCCESS if we made it through without failures.
    376            if (!failures) {
   \                     ??emberAfConfigureReportingCommandCallback_0: (+1)
   \   00000124   0xB917             CBNZ.N   R7,??emberAfConfigureReportingCommandCallback_7
    377              emberAfPutInt8uInResp(EMBER_ZCL_STATUS_SUCCESS);
   \   00000126   0x2000             MOVS     R0,#+0
   \   00000128   0x.... 0x....      BL       emberAfPutInt8uInResp
    378            }
    379          
    380            emberAfSendResponse();
   \                     ??emberAfConfigureReportingCommandCallback_7: (+1)
   \   0000012C   0x.... 0x....      BL       emberAfSendResponse
    381            return TRUE;
   \   00000130   0x2001             MOVS     R0,#+1
   \   00000132   0xB007             ADD      SP,SP,#+28
   \   00000134   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    382          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3: (+1)
   \   00000000   0x89A2             LDRH     R2,[R4, #+12]
   \   00000002   0x68A0             LDR      R0,[R4, #+8]
   \                     ??Subroutine3_0: (+1)
   \   00000004   0xB2B1             UXTH     R1,R6
   \   00000006   0x.... 0x....      B.W      emberAfGetInt16u

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2: (+1)
   \   00000000   0x6821             LDR      R1,[R4, #+0]
   \   00000002   0x8A22             LDRH     R2,[R4, #+16]
   \   00000004   0x8849             LDRH     R1,[R1, #+2]
   \   00000006   0x.... 0x....      B.W      emberAfFillExternalManufacturerSpecificBuffer
    383          

   \                                 In section .text, align 2, keep-with-next
    384          boolean emberAfReadReportingConfigurationCommandCallback(const EmberAfClusterCommand *cmd)
    385          {
   \                     emberAfReadReportingConfigurationCommandCallback: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0xB086             SUB      SP,SP,#+24
    386            int16u bufIndex = cmd->payloadStartIndex;
    387            int8u frameControl, mask;
    388          
    389            emberAfReportingPrint("%p: ", "READ_RPT_CFG");
    390            emberAfReportingDebugExec(emberAfDecodeAndPrintCluster(cmd->apsFrame->clusterId));
    391            emberAfReportingPrintln("");
    392            emberAfReportingFlush();
    393          
    394            if (cmd->direction == ZCL_DIRECTION_CLIENT_TO_SERVER) {
   \   00000008   0x7D60             LDRB     R0,[R4, #+21]
   \   0000000A   0x7D26             LDRB     R6,[R4, #+20]
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xBF07             ITTEE    EQ 
    395              frameControl = (ZCL_PROFILE_WIDE_COMMAND
    396                              | ZCL_FRAME_CONTROL_SERVER_TO_CLIENT
    397                              | EMBER_AF_DEFAULT_RESPONSE_POLICY_REQUESTS);
   \   00000010   0x2018             MOVEQ    R0,#+24
    398              mask = CLUSTER_MASK_SERVER;
   \   00000012   0xF04F 0x0840      MOVEQ    R8,#+64
    399            } else {
    400              frameControl = (ZCL_PROFILE_WIDE_COMMAND
    401                              | ZCL_FRAME_CONTROL_CLIENT_TO_SERVER
    402                              | EMBER_AF_DEFAULT_RESPONSE_POLICY_REQUESTS);
   \   00000016   0x2010             MOVNE    R0,#+16
    403              mask = CLUSTER_MASK_CLIENT;
   \   00000018   0xF04F 0x0880      MOVNE    R8,#+128
    404            }
    405          
    406            // The manufacturer-specfic version of the fill API only creates a
    407            // manufacturer-specfic command if the manufacturer code is set.  For non-
    408            // manufacturer-specfic reports, the manufacturer code is unset, so we can
    409            // get away with using this API for both cases.
    410            emberAfFillExternalManufacturerSpecificBuffer(frameControl,
    411                                                          cmd->apsFrame->clusterId,
    412                                                          cmd->mfgCode,
    413                                                          ZCL_READ_REPORTING_CONFIGURATION_RESPONSE_COMMAND_ID,
    414                                                          "");
   \   0000001C   0x....             ADR.N    R1,??DataTable7  ;; ""
   \   0000001E   0x9100             STR      R1,[SP, #+0]
   \   00000020   0x2309             MOVS     R3,#+9
   \   00000022   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_3: (+1)
   \   00000026   0xE014             B.N      ??emberAfReadReportingConfigurationCommandCallb_0
    415          
    416            // Each record in the command has a one-byte direction and a two-byte
    417            // attribute id.
    418            while (bufIndex + 3 <= cmd->bufLen) {
    419              EmberAfAttributeId attributeId;
    420              EmberAfAttributeMetadata *metadata;
    421              EmberAfPluginReportingEntry entry;
    422              EmberAfReportingDirection direction;
    423              int8u i;
    424              boolean found = FALSE;
    425          
    426              direction = (EmberAfReportingDirection)emberAfGetInt8u(cmd->buffer,
    427                                                                     bufIndex,
    428                                                                     cmd->bufLen);
    429              bufIndex++;
    430              attributeId = (EmberAfAttributeId)emberAfGetInt16u(cmd->buffer,
    431                                                                 bufIndex,
    432                                                                 cmd->bufLen);
    433              bufIndex += 2;
    434          
    435              switch (direction) {
    436              case EMBER_ZCL_REPORTING_DIRECTION_REPORTED:
    437                metadata = emberAfLocateAttributeMetadata(cmd->apsFrame->destinationEndpoint,
    438                                                          cmd->apsFrame->clusterId,
    439                                                          attributeId,
    440                                                          mask,
    441                                                          cmd->mfgCode);
   \                     ??emberAfReadReportingConfigurationCommandCallb_1: (+1)
   \   00000028   0x6820             LDR      R0,[R4, #+0]
   \   0000002A   0x8A21             LDRH     R1,[R4, #+16]
   \   0000002C   0x9100             STR      R1,[SP, #+0]
   \   0000002E   0x4643             MOV      R3,R8
   \   00000030   0x8841             LDRH     R1,[R0, #+2]
   \   00000032   0x7940             LDRB     R0,[R0, #+5]
   \   00000034   0x4652             MOV      R2,R10
   \   00000036   0x.... 0x....      BL       emberAfLocateAttributeMetadata
   \   0000003A   0xEA5F 0x0900      MOVS     R9,R0
    442                if (metadata == NULL) {
   \   0000003E   0xD11D             BNE.N    ??emberAfReadReportingConfigurationCommandCallb_2
    443                  emberAfPutInt8uInResp(EMBER_ZCL_STATUS_UNSUPPORTED_ATTRIBUTE);
   \   00000040   0x2086             MOVS     R0,#+134
   \   00000042   0x.... 0x....      BL       emberAfPutInt8uInResp
    444                  emberAfPutInt8uInResp(direction);
   \   00000046   0x2000             MOVS     R0,#+0
   \                     ??emberAfReadReportingConfigurationCommandCallb_3: (+1)
   \   00000048   0x.... 0x....      BL       emberAfPutInt8uInResp
    445                  emberAfPutInt16uInResp(attributeId);
   \   0000004C   0x4650             MOV      R0,R10
   \                     ??emberAfReadReportingConfigurationCommandCallb_4: (+1)
   \   0000004E   0x.... 0x....      BL       emberAfPutInt16uInResp
    446                  continue;
    447                }
   \                     ??emberAfReadReportingConfigurationCommandCallb_0: (+1)
   \   00000052   0x89A2             LDRH     R2,[R4, #+12]
   \   00000054   0xB2B6             UXTH     R6,R6
   \   00000056   0x1CF0             ADDS     R0,R6,#+3
   \   00000058   0x4282             CMP      R2,R0
   \   0000005A   0xDB74             BLT.N    ??emberAfReadReportingConfigurationCommandCallb_5
   \   0000005C   0x68A0             LDR      R0,[R4, #+8]
   \   0000005E   0x5C35             LDRB     R5,[R6, R0]
   \   00000060   0x1C76             ADDS     R6,R6,#+1
   \   00000062   0x.... 0x....      BL       ??Subroutine3_0
   \                     ??CrossCallReturnLabel_5: (+1)
   \   00000066   0x1CB6             ADDS     R6,R6,#+2
   \   00000068   0x4682             MOV      R10,R0
   \   0000006A   0x2D00             CMP      R5,#+0
   \   0000006C   0xD0DC             BEQ.N    ??emberAfReadReportingConfigurationCommandCallb_1
   \   0000006E   0x2D01             CMP      R5,#+1
   \   00000070   0xD004             BEQ.N    ??emberAfReadReportingConfigurationCommandCallb_2
    448                break;
    449              case EMBER_ZCL_REPORTING_DIRECTION_RECEIVED:
    450                break;
    451              default:
    452                emberAfPutInt8uInResp(EMBER_ZCL_STATUS_INVALID_FIELD);
   \   00000072   0x2085             MOVS     R0,#+133
   \                     ??emberAfReadReportingConfigurationCommandCallb_6: (+1)
   \   00000074   0x.... 0x....      BL       emberAfPutInt8uInResp
    453                emberAfPutInt8uInResp(direction);
   \   00000078   0x4628             MOV      R0,R5
   \   0000007A   0xE7E5             B.N      ??emberAfReadReportingConfigurationCommandCallb_3
    454                emberAfPutInt16uInResp(attributeId);
    455                continue;
    456              }
    457          
    458              // 075123r03 seems to suggest that SUCCESS is returned even if reporting
    459              // isn't configured for the requested attribute.  The individual fields
    460              // of the response for this attribute get populated with defaults.
    461              // CCB 1854 removes the ambiguity and requires NOT_FOUND to be returned in
    462              // the status field and all fields except direction and attribute identifier
    463              // to be omitted if there is no report configuration found.
    464              for (i = 0; i < EMBER_AF_PLUGIN_REPORTING_TABLE_SIZE; i++) {
   \                     ??emberAfReadReportingConfigurationCommandCallb_2: (+1)
   \   0000007C   0x2700             MOVS     R7,#+0
    465                emAfPluginReportingGetEntry(i, &entry);
   \                     ??emberAfReadReportingConfigurationCommandCallb_7: (+1)
   \   0000007E   0x.... 0x....      BL       ?Subroutine1
    466                if (entry.direction == direction
    467                    && entry.endpoint == cmd->apsFrame->destinationEndpoint
    468                    && entry.clusterId == cmd->apsFrame->clusterId
    469                    && entry.attributeId == attributeId
    470                    && entry.mask == mask
    471                    && entry.manufacturerCode == cmd->mfgCode
    472                    && (entry.direction == EMBER_ZCL_REPORTING_DIRECTION_REPORTED
    473                        || (entry.data.received.source == cmd->source
    474                            && entry.data.received.endpoint == cmd->apsFrame->sourceEndpoint))) {
   \                     ??CrossCallReturnLabel_2: (+1)
   \   00000082   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   00000086   0x42A8             CMP      R0,R5
   \   00000088   0xBF01             ITTTT    EQ 
   \   0000008A   0x6820             LDREQ    R0,[R4, #+0]
   \   0000008C   0xF89D 0x1005      LDRBEQ   R1,[SP, #+5]
   \   00000090   0x7942             LDRBEQ   R2,[R0, #+5]
   \   00000092   0x4291             CMPEQ    R1,R2
   \   00000094   0xD14E             BNE.N    ??emberAfReadReportingConfigurationCommandCallb_8
   \   00000096   0xF8BD 0x1006      LDRH     R1,[SP, #+6]
   \   0000009A   0x8842             LDRH     R2,[R0, #+2]
   \   0000009C   0x4291             CMP      R1,R2
   \   0000009E   0xBF04             ITT      EQ 
   \   000000A0   0xF8BD 0x1008      LDRHEQ   R1,[SP, #+8]
   \   000000A4   0x4551             CMPEQ    R1,R10
   \   000000A6   0xD145             BNE.N    ??emberAfReadReportingConfigurationCommandCallb_8
   \   000000A8   0xF89D 0x100A      LDRB     R1,[SP, #+10]
   \   000000AC   0x4541             CMP      R1,R8
   \   000000AE   0xBF02             ITTT     EQ 
   \   000000B0   0xF8BD 0x100C      LDRHEQ   R1,[SP, #+12]
   \   000000B4   0x8A22             LDRHEQ   R2,[R4, #+16]
   \   000000B6   0x4291             CMPEQ    R1,R2
   \   000000B8   0xD13C             BNE.N    ??emberAfReadReportingConfigurationCommandCallb_8
   \   000000BA   0xF89D 0x1004      LDRB     R1,[SP, #+4]
   \   000000BE   0xB149             CBZ.N    R1,??emberAfReadReportingConfigurationCommandCallb_9
   \   000000C0   0xF8BD 0x1010      LDRH     R1,[SP, #+16]
   \   000000C4   0x88E2             LDRH     R2,[R4, #+6]
   \   000000C6   0x4291             CMP      R1,R2
   \   000000C8   0xBF02             ITTT     EQ 
   \   000000CA   0xF89D 0x1012      LDRBEQ   R1,[SP, #+18]
   \   000000CE   0x7900             LDRBEQ   R0,[R0, #+4]
   \   000000D0   0x4281             CMPEQ    R1,R0
   \   000000D2   0xD12F             BNE.N    ??emberAfReadReportingConfigurationCommandCallb_8
    475                  found = TRUE;
    476                  break;
    477                }
    478              }
    479              // Attribute supported, reportable, no report configuration was found.
    480              if (found == FALSE) {
    481                emberAfPutInt8uInResp(EMBER_ZCL_STATUS_NOT_FOUND);
    482                emberAfPutInt8uInResp(direction);
    483                emberAfPutInt16uInResp(attributeId);
    484                continue;
    485              }
    486              // Attribute supported, reportable, report configuration was found.
    487              emberAfPutInt8uInResp(EMBER_ZCL_STATUS_SUCCESS);
   \                     ??emberAfReadReportingConfigurationCommandCallb_9: (+1)
   \   000000D4   0x2000             MOVS     R0,#+0
   \   000000D6   0x.... 0x....      BL       emberAfPutInt8uInResp
    488              emberAfPutInt8uInResp(direction);
   \   000000DA   0x4628             MOV      R0,R5
   \   000000DC   0x.... 0x....      BL       emberAfPutInt8uInResp
    489              emberAfPutInt16uInResp(attributeId);
   \   000000E0   0x4650             MOV      R0,R10
   \   000000E2   0x.... 0x....      BL       emberAfPutInt16uInResp
    490              switch (direction) {
   \   000000E6   0xB115             CBZ.N    R5,??emberAfReadReportingConfigurationCommandCallb_10
   \   000000E8   0x2D01             CMP      R5,#+1
   \   000000EA   0xD029             BEQ.N    ??emberAfReadReportingConfigurationCommandCallb_11
   \   000000EC   0xE7B1             B.N      ??emberAfReadReportingConfigurationCommandCallb_0
    491                case EMBER_ZCL_REPORTING_DIRECTION_REPORTED:
    492                  emberAfPutInt8uInResp(metadata->attributeType);
   \                     ??emberAfReadReportingConfigurationCommandCallb_10: (+1)
   \   000000EE   0xF899 0x0002      LDRB     R0,[R9, #+2]
   \   000000F2   0x.... 0x....      BL       emberAfPutInt8uInResp
    493                  emberAfPutInt16uInResp(entry.data.reported.minInterval);
   \   000000F6   0xF8BD 0x0010      LDRH     R0,[SP, #+16]
   \   000000FA   0x.... 0x....      BL       emberAfPutInt16uInResp
    494                  emberAfPutInt16uInResp(entry.data.reported.maxInterval);
   \   000000FE   0xF8BD 0x0012      LDRH     R0,[SP, #+18]
   \   00000102   0x.... 0x....      BL       emberAfPutInt16uInResp
    495                  if (emberAfGetAttributeAnalogOrDiscreteType(metadata->attributeType)
    496                      == EMBER_AF_DATA_TYPE_ANALOG) {
   \   00000106   0xF899 0x0002      LDRB     R0,[R9, #+2]
   \   0000010A   0x.... 0x....      BL       emberAfGetAttributeAnalogOrDiscreteType
   \   0000010E   0x2800             CMP      R0,#+0
   \   00000110   0xD19F             BNE.N    ??emberAfReadReportingConfigurationCommandCallb_0
    497                    putReportableChangeInResp(&entry, metadata->attributeType);
   \   00000112   0xF899 0x0002      LDRB     R0,[R9, #+2]
   \   00000116   0x.... 0x....      BL       emberAfGetDataSize
   \   0000011A   0x9D05             LDR      R5,[SP, #+20]
   \   0000011C   0x4682             MOV      R10,R0
   \                     ??emberAfReadReportingConfigurationCommandCallb_12: (+1)
   \   0000011E   0xFA5F 0xF78A      UXTB     R7,R10
   \   00000122   0x2F00             CMP      R7,#+0
   \   00000124   0xD095             BEQ.N    ??emberAfReadReportingConfigurationCommandCallb_0
   \   00000126   0xB2E8             UXTB     R0,R5
   \   00000128   0x.... 0x....      BL       emberAfPutInt8uInResp
   \   0000012C   0x0A2D             LSRS     R5,R5,#+8
   \   0000012E   0xF1A7 0x0A01      SUB      R10,R7,#+1
   \   00000132   0xE7F4             B.N      ??emberAfReadReportingConfigurationCommandCallb_12
    498                  }
   \                     ??emberAfReadReportingConfigurationCommandCallb_8: (+1)
   \   00000134   0x1C78             ADDS     R0,R7,#+1
   \   00000136   0xB2C7             UXTB     R7,R0
   \   00000138   0x2F14             CMP      R7,#+20
   \   0000013A   0xDBA0             BLT.N    ??emberAfReadReportingConfigurationCommandCallb_7
   \   0000013C   0x208B             MOVS     R0,#+139
   \   0000013E   0xE799             B.N      ??emberAfReadReportingConfigurationCommandCallb_6
    499                  break;
    500                case EMBER_ZCL_REPORTING_DIRECTION_RECEIVED:
    501                  emberAfPutInt16uInResp(entry.data.received.timeout);
   \                     ??emberAfReadReportingConfigurationCommandCallb_11: (+1)
   \   00000140   0xF8BD 0x0014      LDRH     R0,[SP, #+20]
   \   00000144   0xE783             B.N      ??emberAfReadReportingConfigurationCommandCallb_4
    502                  break;
    503              }
    504            }
    505          
    506            emberAfSendResponse();
   \                     ??emberAfReadReportingConfigurationCommandCallb_5: (+1)
   \   00000146   0x.... 0x....      BL       emberAfSendResponse
    507            return TRUE;
   \   0000014A   0x2001             MOVS     R0,#+1
   \   0000014C   0x....             B.N      ?Subroutine0
    508          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \   00000000   0xA901             ADD      R1,SP,#+4
   \                     ??Subroutine1_0: (+1)
   \   00000002   0x4638             MOV      R0,R7
   \   00000004   0x....             B.N      emAfPluginReportingGetEntry

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0xB006             ADD      SP,SP,#+24
   \   00000002   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
    509          

   \                                 In section .text, align 2, keep-with-next
    510          EmberStatus emberAfClearReportTableCallback(void)
    511          {
   \                     emberAfClearReportTableCallback: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    512            int8u i;
    513            for (i = 0; i < EMBER_AF_PLUGIN_REPORTING_TABLE_SIZE; i++) {
   \   00000002   0x2400             MOVS     R4,#+0
    514              removeConfiguration(i);
   \                     ??emberAfClearReportTableCallback_0: (+1)
   \   00000004   0x4620             MOV      R0,R4
   \   00000006   0x.... 0x....      BL       removeConfiguration
    515            }
   \   0000000A   0x1C64             ADDS     R4,R4,#+1
   \   0000000C   0x2C14             CMP      R4,#+20
   \   0000000E   0xDBF9             BLT.N    ??emberAfClearReportTableCallback_0
    516            emberEventControlSetInactive(emberAfPluginReportingTickEventControl);
   \   00000010   0x....             LDR.N    R1,??DataTable8_2
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x7008             STRB     R0,[R1, #+0]
    517            return EMBER_SUCCESS;
   \   00000016   0xBD10             POP      {R4,PC}          ;; return
    518          }
    519          

   \                                 In section .text, align 2, keep-with-next
    520          EmberStatus emAfPluginReportingRemoveEntry(int8u index)
    521          {
   \                     emAfPluginReportingRemoveEntry: (+1)
   \   00000000   0x4601             MOV      R1,R0
    522            EmberStatus status = EMBER_INDEX_OUT_OF_RANGE;
   \   00000002   0x20B1             MOVS     R0,#+177
    523            if (index < EMBER_AF_PLUGIN_REPORTING_TABLE_SIZE) {
   \   00000004   0x2914             CMP      R1,#+20
   \   00000006   0xDB00             BLT.N    ??emAfPluginReportingRemoveEntry_0
   \   00000008   0x4770             BX       LR
    524              removeConfigurationAndScheduleTick(index);
   \                     ??emAfPluginReportingRemoveEntry_0: (+1)
   \   0000000A   0xB580             PUSH     {R7,LR}
   \   0000000C   0x4608             MOV      R0,R1
   \   0000000E   0x.... 0x....      BL       removeConfigurationAndScheduleTick
    525              status = EMBER_SUCCESS;
   \   00000012   0x2000             MOVS     R0,#+0
    526            }
    527            return status;
   \   00000014   0xBD02             POP      {R1,PC}          ;; return
    528          }
    529          

   \                                 In section .text, align 2, keep-with-next
    530          void emberAfReportingAttributeChangeCallback(int8u endpoint,
    531                                                       EmberAfClusterId clusterId,
    532                                                       EmberAfAttributeId attributeId,
    533                                                       int8u mask,
    534                                                       int16u manufacturerCode,
    535                                                       EmberAfAttributeType type,
    536                                                       int8u *data)
    537          {
   \                     emberAfReportingAttributeChangeCallback: (+1)
   \   00000000   0xE92D 0x43F0      PUSH     {R4-R9,LR}
   \   00000004   0xB085             SUB      SP,SP,#+20
   \   00000006   0x4606             MOV      R6,R0
    538            int8u i;
    539            for (i = 0; i < EMBER_AF_PLUGIN_REPORTING_TABLE_SIZE; i++) {
   \   00000008   0x9C0C             LDR      R4,[SP, #+48]
   \   0000000A   0x460F             MOV      R7,R1
   \   0000000C   0x4690             MOV      R8,R2
   \   0000000E   0x4699             MOV      R9,R3
   \   00000010   0x2500             MOVS     R5,#+0
    540              EmberAfPluginReportingEntry entry;
    541              emAfPluginReportingGetEntry(i, &entry);
   \                     ??emberAfReportingAttributeChangeCallback_0: (+1)
   \   00000012   0xA900             ADD      R1,SP,#+0
   \   00000014   0x4628             MOV      R0,R5
   \   00000016   0x.... 0x....      BL       emAfPluginReportingGetEntry
    542              if (entry.direction == EMBER_ZCL_REPORTING_DIRECTION_REPORTED
    543                  && entry.endpoint == endpoint
    544                  && entry.clusterId == clusterId
    545                  && entry.attributeId == attributeId
    546                  && entry.mask == mask
    547                  && entry.manufacturerCode == manufacturerCode) {
   \   0000001A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xBF04             ITT      EQ 
   \   00000022   0xF89D 0x0001      LDRBEQ   R0,[SP, #+1]
   \   00000026   0x42B0             CMPEQ    R0,R6
   \   00000028   0xD12D             BNE.N    ??emberAfReportingAttributeChangeCallback_1
   \   0000002A   0xF8BD 0x0002      LDRH     R0,[SP, #+2]
   \   0000002E   0x42B8             CMP      R0,R7
   \   00000030   0xBF04             ITT      EQ 
   \   00000032   0xF8BD 0x0004      LDRHEQ   R0,[SP, #+4]
   \   00000036   0x4540             CMPEQ    R0,R8
   \   00000038   0xD125             BNE.N    ??emberAfReportingAttributeChangeCallback_1
   \   0000003A   0xF89D 0x0006      LDRB     R0,[SP, #+6]
   \   0000003E   0x4548             CMP      R0,R9
   \   00000040   0xBF04             ITT      EQ 
   \   00000042   0xF8BD 0x0008      LDRHEQ   R0,[SP, #+8]
   \   00000046   0x42A0             CMPEQ    R0,R4
   \   00000048   0xD11D             BNE.N    ??emberAfReportingAttributeChangeCallback_1
   \   0000004A   0x9C0D             LDR      R4,[SP, #+52]
    548                // If we are reporting this particular attribute, we only care whether
    549                // the new value meets the reportable change criteria.  If it does, we
    550                // mark the entry as ready to report and reschedule the tick.  Whether
    551                // the tick will be scheduled for immediate or delayed execution depends
    552                // on the minimum reporting interval.  This is handled in the scheduler.
    553                int32u difference = emberAfGetDifference(data,
    554                                                         volatileData[i].lastReportValue,
    555                                                         emberAfGetDataSize(type));
   \   0000004C   0x4620             MOV      R0,R4
   \   0000004E   0x.... 0x....      BL       emberAfGetDataSize
   \   00000052   0x210C             MOVS     R1,#+12
   \   00000054   0x....             LDR.N    R2,??DataTable8
   \   00000056   0xFB01 0x2505      MLA      R5,R1,R5,R2
   \   0000005A   0x4602             MOV      R2,R0
   \   0000005C   0x6869             LDR      R1,[R5, #+4]
   \   0000005E   0x980E             LDR      R0,[SP, #+56]
   \   00000060   0x.... 0x....      BL       emberAfGetDifference
   \   00000064   0x4606             MOV      R6,R0
    556                int8u analogOrDiscrete = emberAfGetAttributeAnalogOrDiscreteType(type);
   \   00000066   0x4620             MOV      R0,R4
   \   00000068   0x.... 0x....      BL       emberAfGetAttributeAnalogOrDiscreteType
    557                if ((analogOrDiscrete == EMBER_AF_DATA_TYPE_DISCRETE && difference != 0)
    558                    || (analogOrDiscrete == EMBER_AF_DATA_TYPE_ANALOG
    559                        && entry.data.reported.reportableChange <= difference)) {
   \   0000006C   0x2801             CMP      R0,#+1
   \   0000006E   0xD101             BNE.N    ??emberAfReportingAttributeChangeCallback_2
   \   00000070   0xB926             CBNZ.N   R6,??emberAfReportingAttributeChangeCallback_3
   \   00000072   0xE00C             B.N      ??emberAfReportingAttributeChangeCallback_4
   \                     ??emberAfReportingAttributeChangeCallback_2: (+1)
   \   00000074   0xB958             CBNZ.N   R0,??emberAfReportingAttributeChangeCallback_4
   \   00000076   0x9804             LDR      R0,[SP, #+16]
   \   00000078   0x4286             CMP      R6,R0
   \   0000007A   0xD308             BCC.N    ??emberAfReportingAttributeChangeCallback_4
    560                  volatileData[i].reportableChange = TRUE;
   \                     ??emberAfReportingAttributeChangeCallback_3: (+1)
   \   0000007C   0x2001             MOVS     R0,#+1
   \   0000007E   0x7228             STRB     R0,[R5, #+8]
    561                  scheduleTick();
   \   00000080   0x.... 0x....      BL       scheduleTick
   \   00000084   0xE003             B.N      ??emberAfReportingAttributeChangeCallback_4
    562                }
    563                break;
    564              }
    565            }
   \                     ??emberAfReportingAttributeChangeCallback_1: (+1)
   \   00000086   0x1C6D             ADDS     R5,R5,#+1
   \   00000088   0xB2ED             UXTB     R5,R5
   \   0000008A   0x2D14             CMP      R5,#+20
   \   0000008C   0xDBC1             BLT.N    ??emberAfReportingAttributeChangeCallback_0
    566          }
   \                     ??emberAfReportingAttributeChangeCallback_4: (+1)
   \   0000008E   0xB005             ADD      SP,SP,#+20
   \   00000090   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return
    567          

   \                                 In section .text, align 2, keep-with-next
    568          static void scheduleTick(void)
    569          {
   \                     scheduleTick: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
    570            int32u delayMs = MAX_INT32U_VALUE;
   \   00000004   0xF04F 0x38FF      MOV      R8,#-1
   \   00000008   0xB086             SUB      SP,SP,#+24
   \   0000000A   0x4644             MOV      R4,R8
    571            int8u i;
    572            for (i = 0; i < EMBER_AF_PLUGIN_REPORTING_TABLE_SIZE; i++) {
   \   0000000C   0x2600             MOVS     R6,#+0
   \   0000000E   0x....             LDR.N    R7,??DataTable8
    573              EmberAfPluginReportingEntry entry;
    574              emAfPluginReportingGetEntry(i, &entry);
   \                     ??scheduleTick_0: (+1)
   \   00000010   0xA900             ADD      R1,SP,#+0
   \   00000012   0x4630             MOV      R0,R6
   \   00000014   0x.... 0x....      BL       emAfPluginReportingGetEntry
    575              if (entry.endpoint != EMBER_AF_PLUGIN_REPORTING_UNUSED_ENDPOINT_ID
    576                  && entry.direction == EMBER_ZCL_REPORTING_DIRECTION_REPORTED) {
   \   00000018   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   0000001C   0xB1E0             CBZ.N    R0,??scheduleTick_1
   \   0000001E   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000022   0xB9C8             CBNZ.N   R0,??scheduleTick_1
    577                int32u minIntervalMs = (entry.data.reported.minInterval
    578                                        * MILLISECOND_TICKS_PER_SECOND);
   \   00000024   0xF8BD 0x000C      LDRH     R0,[SP, #+12]
   \   00000028   0x0285             LSLS     R5,R0,#+10
    579                int32u elapsedMs = elapsedTimeInt32u(volatileData[i].lastReportTimeMs,
    580                                                     halCommonGetInt32uMillisecondTick());
   \   0000002A   0x.... 0x....      BL       halCommonGetInt32uMillisecondTick
   \   0000002E   0x210C             MOVS     R1,#+12
   \   00000030   0x4371             MULS     R1,R1,R6
   \   00000032   0x59CA             LDR      R2,[R1, R7]
    581                int32u remainingMs = MAX_INT32U_VALUE;
    582                if (volatileData[i].reportableChange) {
   \   00000034   0x19C9             ADDS     R1,R1,R7
   \   00000036   0x1A80             SUBS     R0,R0,R2
   \   00000038   0x7A09             LDRB     R1,[R1, #+8]
   \   0000003A   0x4642             MOV      R2,R8
   \   0000003C   0xB121             CBZ.N    R1,??scheduleTick_2
    583                  remainingMs = (minIntervalMs < elapsedMs
    584                                 ? 0
    585                                 : minIntervalMs - elapsedMs);
   \   0000003E   0x4285             CMP      R5,R0
   \   00000040   0xBF2C             ITE      CS 
   \   00000042   0x1A2A             SUBCS    R2,R5,R0
   \   00000044   0x2200             MOVCC    R2,#+0
   \   00000046   0xE004             B.N      ??scheduleTick_3
    586                } else if (entry.data.reported.maxInterval != 0x0000) {
   \                     ??scheduleTick_2: (+1)
   \   00000048   0xF8BD 0x100E      LDRH     R1,[SP, #+14]
   \   0000004C   0xB109             CBZ.N    R1,??scheduleTick_3
    587                  remainingMs = (entry.data.reported.maxInterval
    588                                 * MILLISECOND_TICKS_PER_SECOND
    589                                 - elapsedMs);
   \   0000004E   0xEBC0 0x2281      RSB      R2,R0,R1, LSL #+10
    590                }
    591                if (remainingMs < delayMs) {
   \                     ??scheduleTick_3: (+1)
   \   00000052   0x42A2             CMP      R2,R4
   \   00000054   0xBF98             IT       LS 
   \   00000056   0x4614             MOVLS    R4,R2
    592                  delayMs = remainingMs;
    593                }
    594              }
    595            }
   \                     ??scheduleTick_1: (+1)
   \   00000058   0x1C76             ADDS     R6,R6,#+1
   \   0000005A   0x2E14             CMP      R6,#+20
   \   0000005C   0xDBD8             BLT.N    ??scheduleTick_0
    596            if (delayMs != MAX_INT32U_VALUE) {
   \   0000005E   0x....             LDR.N    R0,??DataTable8_2
   \   00000060   0xF114 0x0F01      CMN      R4,#+1
   \   00000064   0xD003             BEQ.N    ??scheduleTick_4
    597              emberAfDebugPrintln("sched report event for: 0x%4x", delayMs);
    598              emberAfEventControlSetDelayMS(&emberAfPluginReportingTickEventControl,
    599                                            delayMs);
   \   00000066   0x4621             MOV      R1,R4
   \   00000068   0x.... 0x....      BL       emberAfEventControlSetDelayMS
   \   0000006C   0xE001             B.N      ??scheduleTick_5
    600            } else {
    601              emberAfDebugPrintln("deactivate report event");
    602              emberEventControlSetInactive(emberAfPluginReportingTickEventControl);
   \                     ??scheduleTick_4: (+1)
   \   0000006E   0x2100             MOVS     R1,#+0
   \   00000070   0x7001             STRB     R1,[R0, #+0]
    603            }
    604          }
   \                     ??scheduleTick_5: (+1)
   \   00000072   0xB006             ADD      SP,SP,#+24
   \   00000074   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    605          

   \                                 In section .text, align 2, keep-with-next
    606          static void removeConfiguration(int8u index)
    607          {
   \                     removeConfiguration: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
   \   00000004   0x4604             MOV      R4,R0
    608            EmberAfPluginReportingEntry entry;
    609            emAfPluginReportingGetEntry(index, &entry);
   \   00000006   0xA900             ADD      R1,SP,#+0
   \   00000008   0x.... 0x....      BL       emAfPluginReportingGetEntry
    610            entry.endpoint = EMBER_AF_PLUGIN_REPORTING_UNUSED_ENDPOINT_ID;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0xF88D 0x0001      STRB     R0,[SP, #+1]
    611            emAfPluginReportingSetEntry(index, &entry);
   \   00000012   0xA900             ADD      R1,SP,#+0
   \   00000014   0x4620             MOV      R0,R4
   \   00000016   0x.... 0x....      BL       emAfPluginReportingSetEntry
    612            emberAfPluginReportingConfiguredCallback(&entry);
   \   0000001A   0xA800             ADD      R0,SP,#+0
   \   0000001C   0x.... 0x....      BL       emberAfPluginReportingConfiguredCallback
    613          }
   \   00000020   0xB006             ADD      SP,SP,#+24
   \   00000022   0xBD10             POP      {R4,PC}          ;; return
    614          

   \                                 In section .text, align 2, keep-with-next
    615          static void removeConfigurationAndScheduleTick(int8u index)
    616          {
   \                     removeConfigurationAndScheduleTick: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    617            removeConfiguration(index);
   \   00000002   0x.... 0x....      BL       removeConfiguration
    618            scheduleTick();
   \   00000006   0xE8BD 0x4001      POP      {R0,LR}
   \   0000000A   0x....             B.N      scheduleTick
    619          }
    620          

   \                                 In section .text, align 2, keep-with-next
    621          EmberAfStatus emberAfPluginReportingConfigureReportedAttribute(const EmberAfPluginReportingEntry* newEntry)
    622          {
   \                     emberAfPluginReportingConfigureReportedAttribute: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0xB087             SUB      SP,SP,#+28
    623            EmberAfAttributeMetadata *metadata;
    624            EmberAfPluginReportingEntry entry;
    625            EmberAfStatus status;
    626            int8u i, index = NULL_INDEX;
    627            boolean initialize = TRUE;
    628          
    629            // Verify that we support the attribute and that the data type matches.
    630            metadata = emberAfLocateAttributeMetadata(newEntry->endpoint,
    631                                                      newEntry->clusterId,
    632                                                      newEntry->attributeId,
    633                                                      newEntry->mask,
    634                                                      newEntry->manufacturerCode);
    635            if (metadata == NULL) {
   \   00000006   0x8920             LDRH     R0,[R4, #+8]
   \   00000008   0x9000             STR      R0,[SP, #+0]
   \   0000000A   0x79A3             LDRB     R3,[R4, #+6]
   \   0000000C   0x88A2             LDRH     R2,[R4, #+4]
   \   0000000E   0x8861             LDRH     R1,[R4, #+2]
   \   00000010   0x7860             LDRB     R0,[R4, #+1]
   \   00000012   0x25FF             MOVS     R5,#+255
   \   00000014   0x2601             MOVS     R6,#+1
   \   00000016   0x.... 0x....      BL       emberAfLocateAttributeMetadata
   \   0000001A   0xB908             CBNZ.N   R0,??emberAfPluginReportingConfigureReportedAttrib_0
    636              return EMBER_ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
   \   0000001C   0x2086             MOVS     R0,#+134
   \   0000001E   0xE071             B.N      ??emberAfPluginReportingConfigureReportedAttrib_1
    637            }
    638          
    639            // Verify the minimum and maximum intervals make sense.
    640            if (newEntry->data.reported.maxInterval != 0
    641                && (newEntry->data.reported.maxInterval
    642                    < newEntry->data.reported.minInterval)) {
   \                     ??emberAfPluginReportingConfigureReportedAttrib_0: (+1)
   \   00000020   0x89E0             LDRH     R0,[R4, #+14]
   \   00000022   0xB120             CBZ.N    R0,??emberAfPluginReportingConfigureReportedAttrib_2
   \   00000024   0x89A1             LDRH     R1,[R4, #+12]
   \   00000026   0x4288             CMP      R0,R1
   \   00000028   0xBF38             IT       CC 
    643              return EMBER_ZCL_STATUS_INVALID_VALUE;
   \   0000002A   0x2087             MOVCC    R0,#+135
   \   0000002C   0xD36A             BCC.N    ??emberAfPluginReportingConfigureReportedAttrib_1
    644            }
    645          
    646            // Check the table for an entry that matches this request and also watch for
    647            // empty slots along the way.  If a report exists, it will be overwritten
    648            // with the new configuration.  Otherwise, a new entry will be created and
    649            // initialized.
    650            for (i = 0; i < EMBER_AF_PLUGIN_REPORTING_TABLE_SIZE; i++) {
   \                     ??emberAfPluginReportingConfigureReportedAttrib_2: (+1)
   \   0000002E   0x2700             MOVS     R7,#+0
    651              emAfPluginReportingGetEntry(i, &entry);
   \                     ??emberAfPluginReportingConfigureReportedAttrib_3: (+1)
   \   00000030   0x.... 0x....      BL       ?Subroutine1
    652              if (entry.direction == EMBER_ZCL_REPORTING_DIRECTION_REPORTED
    653                  && entry.endpoint == newEntry->endpoint
    654                  && entry.clusterId == newEntry->clusterId
    655                  && entry.attributeId == newEntry->attributeId
    656                  && entry.mask == newEntry->mask
    657                  && entry.manufacturerCode == newEntry->manufacturerCode) {
   \                     ??CrossCallReturnLabel_1: (+1)
   \   00000034   0xF89D 0x1004      LDRB     R1,[SP, #+4]
   \   00000038   0xF89D 0x0005      LDRB     R0,[SP, #+5]
   \   0000003C   0x2900             CMP      R1,#+0
   \   0000003E   0xBF04             ITT      EQ 
   \   00000040   0x7861             LDRBEQ   R1,[R4, #+1]
   \   00000042   0x4288             CMPEQ    R0,R1
   \   00000044   0xD116             BNE.N    ??emberAfPluginReportingConfigureReportedAttrib_4
   \   00000046   0xF8BD 0x1006      LDRH     R1,[SP, #+6]
   \   0000004A   0x8862             LDRH     R2,[R4, #+2]
   \   0000004C   0x4291             CMP      R1,R2
   \   0000004E   0xBF02             ITTT     EQ 
   \   00000050   0xF8BD 0x1008      LDRHEQ   R1,[SP, #+8]
   \   00000054   0x88A2             LDRHEQ   R2,[R4, #+4]
   \   00000056   0x4291             CMPEQ    R1,R2
   \   00000058   0xD10C             BNE.N    ??emberAfPluginReportingConfigureReportedAttrib_4
   \   0000005A   0xF89D 0x100A      LDRB     R1,[SP, #+10]
   \   0000005E   0x79A2             LDRB     R2,[R4, #+6]
   \   00000060   0x4291             CMP      R1,R2
   \   00000062   0xBF02             ITTT     EQ 
   \   00000064   0xF8BD 0x100C      LDRHEQ   R1,[SP, #+12]
   \   00000068   0x8922             LDRHEQ   R2,[R4, #+8]
   \   0000006A   0x4291             CMPEQ    R1,R2
   \   0000006C   0xD102             BNE.N    ??emberAfPluginReportingConfigureReportedAttrib_4
    658                initialize = FALSE;
   \   0000006E   0x2600             MOVS     R6,#+0
    659                index = i;
   \   00000070   0x463D             MOV      R5,R7
    660                break;
   \   00000072   0xE007             B.N      ??emberAfPluginReportingConfigureReportedAttrib_5
    661              } else if (entry.endpoint == EMBER_AF_PLUGIN_REPORTING_UNUSED_ENDPOINT_ID
    662                         && index == NULL_INDEX) {
   \                     ??emberAfPluginReportingConfigureReportedAttrib_4: (+1)
   \   00000074   0x2800             CMP      R0,#+0
   \   00000076   0xBF04             ITT      EQ 
   \   00000078   0x2DFF             CMPEQ    R5,#+255
    663                index = i;
   \   0000007A   0x463D             MOVEQ    R5,R7
    664              }
    665            }
   \   0000007C   0x1C7F             ADDS     R7,R7,#+1
   \   0000007E   0xB2FF             UXTB     R7,R7
   \   00000080   0x2F14             CMP      R7,#+20
   \   00000082   0xDBD5             BLT.N    ??emberAfPluginReportingConfigureReportedAttrib_3
    666          
    667            // If the maximum reporting interval is 0xFFFF, the device shall not issue
    668            // reports for the attribute and the configuration information for that
    669            // attribute need not be maintained.
    670            if (newEntry->data.reported.maxInterval == 0xFFFF) {
   \                     ??emberAfPluginReportingConfigureReportedAttrib_5: (+1)
   \   00000084   0x89E0             LDRH     R0,[R4, #+14]
   \   00000086   0xF64F 0x71FF      MOVW     R1,#+65535
   \   0000008A   0x4288             CMP      R0,R1
   \   0000008C   0xD105             BNE.N    ??emberAfPluginReportingConfigureReportedAttrib_6
    671              if (!initialize) {
   \   0000008E   0xB916             CBNZ.N   R6,??emberAfPluginReportingConfigureReportedAttrib_7
    672                removeConfigurationAndScheduleTick(index);
   \   00000090   0x4628             MOV      R0,R5
   \   00000092   0x.... 0x....      BL       removeConfigurationAndScheduleTick
    673              }
    674              return EMBER_ZCL_STATUS_SUCCESS;
   \                     ??emberAfPluginReportingConfigureReportedAttrib_7: (+1)
   \   00000096   0x2000             MOVS     R0,#+0
   \   00000098   0xE034             B.N      ??emberAfPluginReportingConfigureReportedAttrib_1
    675            }
    676          
    677            if (index == NULL_INDEX) {
   \                     ??emberAfPluginReportingConfigureReportedAttrib_6: (+1)
   \   0000009A   0x2DFF             CMP      R5,#+255
   \   0000009C   0xBF08             IT       EQ 
    678              return EMBER_ZCL_STATUS_INSUFFICIENT_SPACE;
   \   0000009E   0x2089             MOVEQ    R0,#+137
   \   000000A0   0xD030             BEQ.N    ??emberAfPluginReportingConfigureReportedAttrib_1
    679            } else if (initialize) {
   \   000000A2   0xB1DE             CBZ.N    R6,??emberAfPluginReportingConfigureReportedAttrib_8
    680              entry.direction = EMBER_ZCL_REPORTING_DIRECTION_REPORTED;
   \   000000A4   0x2100             MOVS     R1,#+0
   \   000000A6   0xF88D 0x1004      STRB     R1,[SP, #+4]
    681              entry.endpoint = newEntry->endpoint;
    682              entry.clusterId = newEntry->clusterId;
    683              entry.attributeId = newEntry->attributeId;
    684              entry.mask = newEntry->mask;
    685              entry.manufacturerCode = newEntry->manufacturerCode;
   \   000000AA   0x....             LDR.N    R7,??DataTable8
   \   000000AC   0x7861             LDRB     R1,[R4, #+1]
   \   000000AE   0xF88D 0x1005      STRB     R1,[SP, #+5]
   \   000000B2   0x8861             LDRH     R1,[R4, #+2]
   \   000000B4   0xF8AD 0x1006      STRH     R1,[SP, #+6]
   \   000000B8   0x88A1             LDRH     R1,[R4, #+4]
   \   000000BA   0xF8AD 0x1008      STRH     R1,[SP, #+8]
   \   000000BE   0x79A1             LDRB     R1,[R4, #+6]
   \   000000C0   0xF88D 0x100A      STRB     R1,[SP, #+10]
   \   000000C4   0x8921             LDRH     R1,[R4, #+8]
   \   000000C6   0xF8AD 0x100C      STRH     R1,[SP, #+12]
   \   000000CA   0x210C             MOVS     R1,#+12
   \   000000CC   0xFB01 0xF605      MUL      R6,R1,R5
    686              volatileData[index].lastReportTimeMs = halCommonGetInt32uMillisecondTick();
   \   000000D0   0x.... 0x....      BL       halCommonGetInt32uMillisecondTick
   \   000000D4   0x51F0             STR      R0,[R6, R7]
    687              volatileData[index].lastReportValue = 0;
   \   000000D6   0x19F1             ADDS     R1,R6,R7
   \   000000D8   0x2000             MOVS     R0,#+0
   \   000000DA   0x6048             STR      R0,[R1, #+4]
    688            }
    689          
    690            // For new or updated entries, set the intervals and reportable change.
    691            // Updated entries will retain all other settings configured previously.
    692            entry.data.reported.minInterval = newEntry->data.reported.minInterval;
   \                     ??emberAfPluginReportingConfigureReportedAttrib_8: (+1)
   \   000000DC   0x89A0             LDRH     R0,[R4, #+12]
   \   000000DE   0xF8AD 0x0010      STRH     R0,[SP, #+16]
    693            entry.data.reported.maxInterval = newEntry->data.reported.maxInterval;
   \   000000E2   0x89E0             LDRH     R0,[R4, #+14]
   \   000000E4   0xF8AD 0x0012      STRH     R0,[SP, #+18]
    694            entry.data.reported.reportableChange = newEntry->data.reported.reportableChange;
   \   000000E8   0x6920             LDR      R0,[R4, #+16]
   \   000000EA   0x9005             STR      R0,[SP, #+20]
    695          
    696            // Give the application a chance to review the configuration that we have
    697            // been building up.  If the application rejects it, we just do not save the
    698            // record.  If we were supposed to add a new configuration, it will not be
    699            // created.  If we were supposed to update an existing configuration, we will
    700            // keep the old one and just discard any changes.  So, in either case, life
    701            // continues unchanged if the application rejects the configuration.
    702            status = emberAfPluginReportingConfiguredCallback(&entry);
   \   000000EC   0xA801             ADD      R0,SP,#+4
   \   000000EE   0x.... 0x....      BL       emberAfPluginReportingConfiguredCallback
   \   000000F2   0x0004             MOVS     R4,R0
    703            if (status == EMBER_ZCL_STATUS_SUCCESS) {
   \   000000F4   0xD105             BNE.N    ??emberAfPluginReportingConfigureReportedAttrib_9
    704              emAfPluginReportingSetEntry(index, &entry);
   \   000000F6   0xA901             ADD      R1,SP,#+4
   \   000000F8   0x4628             MOV      R0,R5
   \   000000FA   0x.... 0x....      BL       emAfPluginReportingSetEntry
    705              scheduleTick();
   \   000000FE   0x.... 0x....      BL       scheduleTick
    706            }
    707            return status;
   \                     ??emberAfPluginReportingConfigureReportedAttrib_9: (+1)
   \   00000102   0x4620             MOV      R0,R4
   \                     ??emberAfPluginReportingConfigureReportedAttrib_1: (+1)
   \   00000104   0xB007             ADD      SP,SP,#+28
   \   00000106   0xBDF0             POP      {R4-R7,PC}       ;; return
    708          }
    709          

   \                                 In section .text, align 2, keep-with-next
    710          static EmberAfStatus configureReceivedAttribute(const EmberAfClusterCommand *cmd,
    711                                                          EmberAfAttributeId attributeId,
    712                                                          int8u mask,
    713                                                          int16u timeout)
    714          {
   \                     configureReceivedAttribute: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0xB086             SUB      SP,SP,#+24
   \   00000006   0x4604             MOV      R4,R0
   \   00000008   0x4688             MOV      R8,R1
   \   0000000A   0x4691             MOV      R9,R2
   \   0000000C   0x469A             MOV      R10,R3
    715            EmberAfPluginReportingEntry entry;
    716            EmberAfStatus status;
    717            int8u i, index = NULL_INDEX;
   \   0000000E   0x25FF             MOVS     R5,#+255
    718            boolean initialize = TRUE;
   \   00000010   0x2601             MOVS     R6,#+1
    719          
    720            // Check the table for an entry that matches this request and also watch for
    721            // empty slots along the way.  If a report exists, it will be overwritten
    722            // with the new configuration.  Otherwise, a new entry will be created and
    723            // initialized.
    724            for (i = 0; i < EMBER_AF_PLUGIN_REPORTING_TABLE_SIZE; i++) {
   \   00000012   0x2700             MOVS     R7,#+0
    725              emAfPluginReportingGetEntry(i, &entry);
   \                     ??configureReceivedAttribute_0: (+1)
   \   00000014   0xA900             ADD      R1,SP,#+0
   \   00000016   0x.... 0x....      BL       ??Subroutine1_0
    726              if (entry.direction == EMBER_ZCL_REPORTING_DIRECTION_RECEIVED
    727                  && entry.endpoint == cmd->apsFrame->destinationEndpoint
    728                  && entry.clusterId == cmd->apsFrame->clusterId
    729                  && entry.attributeId == attributeId
    730                  && entry.mask == mask
    731                  && entry.manufacturerCode == cmd->mfgCode
    732                  && entry.data.received.source == cmd->source
    733                  && entry.data.received.endpoint == cmd->apsFrame->sourceEndpoint) {
   \                     ??CrossCallReturnLabel_0: (+1)
   \   0000001A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001E   0x2801             CMP      R0,#+1
   \   00000020   0xBF01             ITTTT    EQ 
   \   00000022   0x6820             LDREQ    R0,[R4, #+0]
   \   00000024   0xF89D 0x1001      LDRBEQ   R1,[SP, #+1]
   \   00000028   0x7942             LDRBEQ   R2,[R0, #+5]
   \   0000002A   0x4291             CMPEQ    R1,R2
   \   0000002C   0xD11E             BNE.N    ??configureReceivedAttribute_1
   \   0000002E   0xF8BD 0x1002      LDRH     R1,[SP, #+2]
   \   00000032   0x8842             LDRH     R2,[R0, #+2]
   \   00000034   0x4291             CMP      R1,R2
   \   00000036   0xBF04             ITT      EQ 
   \   00000038   0xF8BD 0x1004      LDRHEQ   R1,[SP, #+4]
   \   0000003C   0x4541             CMPEQ    R1,R8
   \   0000003E   0xD115             BNE.N    ??configureReceivedAttribute_1
   \   00000040   0xF89D 0x1006      LDRB     R1,[SP, #+6]
   \   00000044   0x4549             CMP      R1,R9
   \   00000046   0xBF02             ITTT     EQ 
   \   00000048   0xF8BD 0x1008      LDRHEQ   R1,[SP, #+8]
   \   0000004C   0x8A22             LDRHEQ   R2,[R4, #+16]
   \   0000004E   0x4291             CMPEQ    R1,R2
   \   00000050   0xD10C             BNE.N    ??configureReceivedAttribute_1
   \   00000052   0xF8BD 0x100C      LDRH     R1,[SP, #+12]
   \   00000056   0x88E2             LDRH     R2,[R4, #+6]
   \   00000058   0x4291             CMP      R1,R2
   \   0000005A   0xBF02             ITTT     EQ 
   \   0000005C   0xF89D 0x100E      LDRBEQ   R1,[SP, #+14]
   \   00000060   0x7900             LDRBEQ   R0,[R0, #+4]
   \   00000062   0x4281             CMPEQ    R1,R0
   \   00000064   0xD102             BNE.N    ??configureReceivedAttribute_1
    734                initialize = FALSE;
   \   00000066   0x2600             MOVS     R6,#+0
    735                index = i;
   \   00000068   0x463D             MOV      R5,R7
    736                break;
   \   0000006A   0xE009             B.N      ??configureReceivedAttribute_2
    737              } else if (entry.endpoint == EMBER_AF_PLUGIN_REPORTING_UNUSED_ENDPOINT_ID
    738                         && index == NULL_INDEX) {
   \                     ??configureReceivedAttribute_1: (+1)
   \   0000006C   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   00000070   0x2800             CMP      R0,#+0
   \   00000072   0xBF04             ITT      EQ 
   \   00000074   0x2DFF             CMPEQ    R5,#+255
    739                index = i;
   \   00000076   0x463D             MOVEQ    R5,R7
    740              }
    741            }
   \   00000078   0x1C78             ADDS     R0,R7,#+1
   \   0000007A   0xB2C7             UXTB     R7,R0
   \   0000007C   0x2F14             CMP      R7,#+20
   \   0000007E   0xDBC9             BLT.N    ??configureReceivedAttribute_0
    742          
    743            if (index == NULL_INDEX) {
   \                     ??configureReceivedAttribute_2: (+1)
   \   00000080   0x2DFF             CMP      R5,#+255
   \   00000082   0xBF08             IT       EQ 
    744              return EMBER_ZCL_STATUS_INSUFFICIENT_SPACE;
   \   00000084   0x2089             MOVEQ    R0,#+137
   \   00000086   0xD025             BEQ.N    ??configureReceivedAttribute_3
    745            } else if (initialize) {
   \   00000088   0xB1C6             CBZ.N    R6,??configureReceivedAttribute_4
    746              entry.direction = EMBER_ZCL_REPORTING_DIRECTION_RECEIVED;
   \   0000008A   0x2001             MOVS     R0,#+1
   \   0000008C   0xF88D 0x0000      STRB     R0,[SP, #+0]
    747              entry.endpoint = cmd->apsFrame->destinationEndpoint;
   \   00000090   0x6820             LDR      R0,[R4, #+0]
   \   00000092   0x7940             LDRB     R0,[R0, #+5]
   \   00000094   0xF88D 0x0001      STRB     R0,[SP, #+1]
    748              entry.clusterId = cmd->apsFrame->clusterId;
   \   00000098   0x6820             LDR      R0,[R4, #+0]
   \   0000009A   0x8840             LDRH     R0,[R0, #+2]
   \   0000009C   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    749              entry.attributeId = attributeId;
   \   000000A0   0xF8AD 0x8004      STRH     R8,[SP, #+4]
    750              entry.mask = mask;
   \   000000A4   0xF88D 0x9006      STRB     R9,[SP, #+6]
    751              entry.manufacturerCode = cmd->mfgCode;
   \   000000A8   0x8A20             LDRH     R0,[R4, #+16]
   \   000000AA   0xF8AD 0x0008      STRH     R0,[SP, #+8]
    752              entry.data.received.source = cmd->source;
   \   000000AE   0x88E0             LDRH     R0,[R4, #+6]
   \   000000B0   0xF8AD 0x000C      STRH     R0,[SP, #+12]
    753              entry.data.received.endpoint = cmd->apsFrame->sourceEndpoint;
   \   000000B4   0x6820             LDR      R0,[R4, #+0]
   \   000000B6   0x7900             LDRB     R0,[R0, #+4]
   \   000000B8   0xF88D 0x000E      STRB     R0,[SP, #+14]
    754            }
    755          
    756            // For new or updated entries, set the timeout.  Updated entries will retain
    757            // all other settings configured previously.
    758            entry.data.received.timeout = timeout;
   \                     ??configureReceivedAttribute_4: (+1)
   \   000000BC   0xF8AD 0xA010      STRH     R10,[SP, #+16]
    759          
    760            // Give the application a chance to review the configuration that we have
    761            // been building up.  If the application rejects it, we just do not save the
    762            // record.  If we were supposed to add a new configuration, it will not be
    763            // created.  If we were supposed to update an existing configuration, we will
    764            // keep the old one and just discard any changes.  So, in either case, life
    765            // continues unchanged if the application rejects the configuration.  If the
    766            // application accepts the change, the tick does not have to be rescheduled
    767            // here because we don't do anything with received reports.
    768            status = emberAfPluginReportingConfiguredCallback(&entry);
   \   000000C0   0xA800             ADD      R0,SP,#+0
   \   000000C2   0x.... 0x....      BL       emberAfPluginReportingConfiguredCallback
   \   000000C6   0x0004             MOVS     R4,R0
    769            if (status == EMBER_ZCL_STATUS_SUCCESS) {
   \   000000C8   0xD103             BNE.N    ??configureReceivedAttribute_5
    770              emAfPluginReportingSetEntry(index, &entry);
   \   000000CA   0xA900             ADD      R1,SP,#+0
   \   000000CC   0x4628             MOV      R0,R5
   \   000000CE   0x.... 0x....      BL       emAfPluginReportingSetEntry
    771            }
    772            return status;
   \                     ??configureReceivedAttribute_5: (+1)
   \   000000D2   0x4620             MOV      R0,R4
   \                     ??configureReceivedAttribute_3: (+1)
   \   000000D4                      REQUIRE ?Subroutine0
   \   000000D4                      ;; // Fall through to label ?Subroutine0
    773          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x00 0x00          DC8      "",0x0,0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x00 0x00          DC8      "",0x0,0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   0x........         DC32     volatileData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \   00000000   0x........         DC32     retrySendReport

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_2:
   \   00000000   0x........         DC32     emberAfPluginReportingTickEventControl

   \                                 In section .rodata, align 1, keep-with-next
   \                     `?<Constant "">`:
   \   00000000   0x00               DC8 ""
    774          
    775          static void putReportableChangeInResp(const EmberAfPluginReportingEntry *entry,
    776                                                EmberAfAttributeType dataType)
    777          {
    778            int8u bytes = emberAfGetDataSize(dataType);
    779            if (entry == NULL) { // default, 0xFF...UL or 0x80...L
    780              for (; bytes > 0; bytes--) {
    781                int8u b = 0xFF;
    782                if (emberAfIsTypeSigned(dataType)) {
    783                  b = (bytes == 1 ? 0x80 : 0x00);
    784                }
    785                emberAfPutInt8uInResp(b);
    786              }
    787            } else { // reportable change value
    788              int32u value = entry->data.reported.reportableChange;
    789              for (; bytes > 0; bytes--) {
    790                int8u b = BYTE_0(value);
    791                emberAfPutInt8uInResp(b);
    792                value >>= 8;
    793              }
    794            }
    795          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   conditionallySendReport
         8   -> emberAfIsDeviceEnabled
         0   -> emberAfSendCommandUnicastToBindingsWithCallback
      56   configureReceivedAttribute
        56   -> emAfPluginReportingGetEntry
        56   -> emAfPluginReportingSetEntry
        56   -> emberAfPluginReportingConfiguredCallback
       8   emAfPluginReportingGetEntry
         0   -> halInternalGetTokenData
       8   emAfPluginReportingRemoveEntry
         8   -> removeConfigurationAndScheduleTick
       0   emAfPluginReportingSetEntry
         0   -> halInternalSetTokenData
       8   emberAfClearReportTableCallback
         8   -> removeConfiguration
      64   emberAfConfigureReportingCommandCallback
        64   -> configureReceivedAttribute
        64   -> emberAfFillExternalManufacturerSpecificBuffer
        64   -> emberAfGetAttributeAnalogOrDiscreteType
        64   -> emberAfGetDataSize
        64   -> emberAfGetInt
        64   -> emberAfGetInt16u
        64   -> emberAfLocateAttributeMetadata
        64   -> emberAfPluginReportingConfigureReportedAttribute
        64   -> emberAfPutInt16uInResp
        64   -> emberAfPutInt8uInResp
        64   -> emberAfSendResponse
      48   emberAfPluginReportingConfigureReportedAttribute
        48   -> emAfPluginReportingGetEntry
        48   -> emAfPluginReportingSetEntry
        48   -> emberAfLocateAttributeMetadata
        48   -> emberAfPluginReportingConfiguredCallback
        48   -> halCommonGetInt32uMillisecondTick
        48   -> removeConfigurationAndScheduleTick
        48   -> scheduleTick
       0   emberAfPluginReportingInitCallback
         0   -> scheduleTick
     112   emberAfPluginReportingTickEventHandler
       112   -> conditionallySendReport
       112   -> emAfPluginReportingGetEntry
       112   -> emAfReadAttribute
       112   -> emberAfFillExternalManufacturerSpecificBuffer
       112   -> emberAfGetCommandApsFrame
       112   -> emberAfGetDataSize
       112   -> emberAfIsThisDataTypeAStringType
       112   -> emberAfPutBlockInResp
       112   -> emberAfPutInt16uInResp
       112   -> emberAfPutInt8uInResp
       112   -> emberAfStringLength
       112   -> halCommonGetInt32uMillisecondTick
       112   -> halCommonMemMove
       112   -> scheduleTick
      56   emberAfReadReportingConfigurationCommandCallback
        56   -> emAfPluginReportingGetEntry
        56   -> emberAfFillExternalManufacturerSpecificBuffer
        56   -> emberAfGetAttributeAnalogOrDiscreteType
        56   -> emberAfGetDataSize
        56   -> emberAfGetInt16u
        56   -> emberAfLocateAttributeMetadata
        56   -> emberAfPutInt16uInResp
        56   -> emberAfPutInt8uInResp
        56   -> emberAfSendResponse
      48   emberAfReportingAttributeChangeCallback
        48   -> emAfPluginReportingGetEntry
        48   -> emberAfGetAttributeAnalogOrDiscreteType
        48   -> emberAfGetDataSize
        48   -> emberAfGetDifference
        48   -> scheduleTick
      32   removeConfiguration
        32   -> emAfPluginReportingGetEntry
        32   -> emAfPluginReportingSetEntry
        32   -> emberAfPluginReportingConfiguredCallback
       8   removeConfigurationAndScheduleTick
         8   -> removeConfiguration
         0   -> scheduleTick
      16   retrySendReport
        16   -> emberAfSendUnicast
      48   scheduleTick
        48   -> emAfPluginReportingGetEntry
        48   -> emberAfEventControlSetDelayMS
        48   -> halCommonGetInt32uMillisecondTick


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Constant "">
       4  ??DataTable3
       4  ??DataTable7
       4  ??DataTable8
       4  ??DataTable8_1
       4  ??DataTable8_2
       6  ?Subroutine0
       6  ?Subroutine1
      10  ?Subroutine2
      10  ?Subroutine3
      28  conditionallySendReport
     212  configureReceivedAttribute
      20  emAfPluginReportingGetEntry
      22  emAfPluginReportingRemoveEntry
      12  emAfPluginReportingSetEntry
      24  emberAfClearReportTableCallback
     312  emberAfConfigureReportingCommandCallback
     264  emberAfPluginReportingConfigureReportedAttribute
       2  emberAfPluginReportingInitCallback
       8  emberAfPluginReportingTickEventControl
     354  emberAfPluginReportingTickEventHandler
     334  emberAfReadReportingConfigurationCommandCallback
     148  emberAfReportingAttributeChangeCallback
      36  removeConfiguration
      12  removeConfigurationAndScheduleTick
      18  retrySendReport
     120  scheduleTick
     240  volatileData

 
   248 bytes in section .bss
     1 byte  in section .rodata
 1 970 bytes in section .text
 
 1 970 bytes of CODE  memory
     1 byte  of CONST memory
   248 bytes of DATA  memory

Errors: none
Warnings: none
