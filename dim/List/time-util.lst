###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        22/Oct/2015  09:34:13
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  E:\Zigbee\EmberZNet5.6.0-GA\app\framework\util\time-util.c
#    Command line =  
#        E:\Zigbee\EmberZNet5.6.0-GA\app\framework\util\time-util.c -D DIMMER
#        -D NULL_BTL -D CORTEXM3 -D CORTEXM3_EMBER_MICRO -D CORTEXM3_EM357 -D
#        PHY_EM3XX -D
#        "APPLICATION_TOKEN_HEADER=\"app/framework/util/tokens.h\"" -D
#        "ATTRIBUTE_STORAGE_CONFIGURATION=\"app/builder/ZigbeeRoute/ZigbeeRoute_endpoint_config.h\""
#        -D "BOARD_HEADER=\"app\builder\ZigbeeRoute\ZigbeeRoute_board.h\"" -D
#        "CONFIGURATION_HEADER=\"app/framework/util/config.h\"" -D
#        "GENERATED_TOKEN_HEADER=\"app/builder/ZigbeeRoute/ZigbeeRoute_tokens.h\""
#        -D "PLATFORM_HEADER=\"hal/micro/cortexm3/compiler/iar.h\"" -D
#        "ZA_GENERATED_HEADER=\"app/builder/ZigbeeRoute/ZigbeeRoute.h\"" -D
#        "__SOURCEFILE__=\"time-util.c\"" -lC
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\dim\List\
#        --diag_suppress Pa050 -o
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\dim\Obj\ --debug
#        --endian=little --cpu=Cortex-M3 --no_path_in_file_macros
#        --separate_cluster_for_initialized_variables -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\framework\util\ -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\ -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\ -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\app\framework\include\
#        -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\app\util\
#        -I E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\stack\
#        -I E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\hal\
#        -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\hal\..\
#        -Ohz --use_c++_inline
#    List file    =  
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\dim\List\time-util.lst
#    Object file  =  
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\dim\Obj\time-util.o
#
###############################################################################

E:\Zigbee\EmberZNet5.6.0-GA\app\framework\util\time-util.c
      1          // * The actual compiled version of this code will vary depending on
      2          // * #defines for clusters included in the built application.
      3          // *
      4          // * Copyright 2014 Silicon Laboratories, Inc.                              *80*
      5          // *******************************************************************
      6          
      7          #include "../include/af.h"
      8          #include "af-main.h"
      9          #include "common.h"
     10          #include "time-util.h"
     11          
     12          #define mYEAR_IS_LEAP_YEAR(year)  ( (year % 4 == 0) && ((year % 100 != 0) || (year % 400 == 0)) )
     13          

   \                                 In section .text, align 4, keep-with-next
     14          PGM int8u emberAfDaysInMonth[] =
   \                     emberAfDaysInMonth:
   \   00000000   0x1F 0x1C          DC8 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
   \              0x1F 0x1E    
   \              0x1F 0x1E    
   \              0x1F 0x1F    
   \              0x1E 0x1F    
   \              0x1E 0x1F    
     15            { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };
     16          

   \                                 In section .text, align 2, keep-with-next
     17          int8u emberAfGetNumberDaysInMonth( EmberAfTimeStruct *time ){
   \                     emberAfGetNumberDaysInMonth: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4601             MOV      R1,R0
     18            int8u daysInMonth = 0;
   \   00000004   0x2000             MOVS     R0,#+0
     19            if( (time->month > 0) && (time->month < 13) ){
   \   00000006   0x788A             LDRB     R2,[R1, #+2]
   \   00000008   0xB1EA             CBZ.N    R2,??emberAfGetNumberDaysInMonth_0
   \   0000000A   0x2A0D             CMP      R2,#+13
   \   0000000C   0xDA1B             BGE.N    ??emberAfGetNumberDaysInMonth_0
     20              daysInMonth = emberAfDaysInMonth[time->month-1];
   \   0000000E   0x.... 0x....      ADR.W    R0,emberAfDaysInMonth
     21              if( mYEAR_IS_LEAP_YEAR(time->year) && (time->month == 2) ){
   \   00000012   0x8809             LDRH     R1,[R1, #+0]
   \   00000014   0x1810             ADDS     R0,R2,R0
   \   00000016   0x2303             MOVS     R3,#+3
   \   00000018   0xF810 0x0C01      LDRB     R0,[R0, #-1]
   \   0000001C   0x4219             TST      R1,R3
   \   0000001E   0xD112             BNE.N    ??emberAfGetNumberDaysInMonth_0
   \   00000020   0x2364             MOVS     R3,#+100
   \   00000022   0xFB91 0xF3F3      SDIV     R3,R1,R3
   \   00000026   0x2464             MOVS     R4,#+100
   \   00000028   0xFB04 0x1313      MLS      R3,R4,R3,R1
   \   0000002C   0xB943             CBNZ.N   R3,??emberAfGetNumberDaysInMonth_1
   \   0000002E   0xF44F 0x73C8      MOV      R3,#+400
   \   00000032   0xFB91 0xF3F3      SDIV     R3,R1,R3
   \   00000036   0xF44F 0x74C8      MOV      R4,#+400
   \   0000003A   0xFB04 0x1113      MLS      R1,R4,R3,R1
   \   0000003E   0xB911             CBNZ.N   R1,??emberAfGetNumberDaysInMonth_0
   \                     ??emberAfGetNumberDaysInMonth_1: (+1)
   \   00000040   0x2A02             CMP      R2,#+2
   \   00000042   0xBF08             IT       EQ 
     22                daysInMonth++;
   \   00000044   0x1C40             ADDEQ    R0,R0,#+1
     23              }
     24            }
     25            return daysInMonth;
   \                     ??emberAfGetNumberDaysInMonth_0: (+1)
   \   00000046   0xB2C0             UXTB     R0,R0
   \   00000048   0xBD10             POP      {R4,PC}          ;; return
     26          }
     27          
     28          

   \                                 In section .text, align 2, keep-with-next
     29          void emberAfCopyDate(int8u *data, int16u index, EmberAfDate *src)
     30          {
     31            data[index]   = src->year;
   \                     emberAfCopyDate: (+1)
   \   00000000   0x7813             LDRB     R3,[R2, #+0]
   \   00000002   0x540B             STRB     R3,[R1, R0]
     32            data[index+1] = src->month;
   \   00000004   0x1808             ADDS     R0,R1,R0
   \   00000006   0x7851             LDRB     R1,[R2, #+1]
   \   00000008   0x7041             STRB     R1,[R0, #+1]
     33            data[index+2] = src->dayOfMonth;
   \   0000000A   0x7891             LDRB     R1,[R2, #+2]
   \   0000000C   0x7081             STRB     R1,[R0, #+2]
     34            data[index+3] = src->dayOfWeek;
   \   0000000E   0x78D1             LDRB     R1,[R2, #+3]
   \   00000010   0x70C1             STRB     R1,[R0, #+3]
     35          }
   \   00000012   0x4770             BX       LR               ;; return
     36          

   \                                 In section .text, align 2, keep-with-next
     37          int8s emberAfCompareDates(EmberAfDate* date1, EmberAfDate* date2)
     38          {
   \                     emberAfCompareDates: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x460C             MOV      R4,R1
     39            int32u val1 = emberAfEncodeDate(date1);
   \   00000004   0x.... 0x....      BL       emberAfEncodeDate
   \   00000008   0x4605             MOV      R5,R0
     40            int32u val2 = emberAfEncodeDate(date2);
   \   0000000A   0x4620             MOV      R0,R4
   \   0000000C   0x.... 0x....      BL       emberAfEncodeDate
     41            return (val1 == val2) ? 0 : ((val1 < val2) ? -1 : 1);
   \   00000010   0x4285             CMP      R5,R0
   \   00000012   0xD101             BNE.N    ??emberAfCompareDates_0
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0xBD32             POP      {R1,R4,R5,PC}
   \                     ??emberAfCompareDates_0: (+1)
   \   00000018   0xD202             BCS.N    ??emberAfCompareDates_1
   \   0000001A   0xF04F 0x30FF      MOV      R0,#-1
   \   0000001E   0xBD32             POP      {R1,R4,R5,PC}
   \                     ??emberAfCompareDates_1: (+1)
   \   00000020   0x2001             MOVS     R0,#+1
   \   00000022   0xBD32             POP      {R1,R4,R5,PC}    ;; return
     42          }
     43          

   \                                 In section .text, align 2, keep-with-next
     44          void emberAfFillTimeStructFromUtc(int32u utcTime,
     45                                            EmberAfTimeStruct* returnTime)
     46          {
   \                     emberAfFillTimeStructFromUtc: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
     47            boolean isLeapYear = TRUE; // 2000 was a leap year
     48            int32u i;
     49            int32u daysSince2000 = utcTime / SECONDS_IN_DAY;
   \   00000002   0x....             LDR.N    R3,??DataTable5_1  ;; 0x15180
     50            int32u secToday = utcTime - (daysSince2000 * SECONDS_IN_DAY);
   \   00000004   0x....             LDR.N    R4,??DataTable5_1  ;; 0x15180
   \   00000006   0xFBB0 0xF3F3      UDIV     R3,R0,R3
   \   0000000A   0xFB04 0x0013      MLS      R0,R4,R3,R0
     51            returnTime->hours = (int8u)(secToday / SECONDS_IN_HOUR);
   \   0000000E   0xF44F 0x6461      MOV      R4,#+3600
   \   00000012   0xFBB0 0xF4F4      UDIV     R4,R0,R4
   \   00000016   0x710C             STRB     R4,[R1, #+4]
   \   00000018   0xF44F 0x6561      MOV      R5,#+3600
   \   0000001C   0x790C             LDRB     R4,[R1, #+4]
   \   0000001E   0x436C             MULS     R4,R5,R4
   \   00000020   0x1B05             SUBS     R5,R0,R4
   \   00000022   0x263C             MOVS     R6,#+60
   \   00000024   0xFBB5 0xF5F6      UDIV     R5,R5,R6
   \   00000028   0x714D             STRB     R5,[R1, #+5]
   \   0000002A   0x2201             MOVS     R2,#+1
     52            returnTime->minutes = (int8u)((secToday
     53                                          - (returnTime->hours * SECONDS_IN_HOUR)) / 60);
     54            returnTime->seconds = (int8u)(secToday
     55                                          - ((returnTime->hours * SECONDS_IN_HOUR)
     56                                             + (returnTime->minutes * 60)));
   \   0000002C   0x794D             LDRB     R5,[R1, #+5]
   \   0000002E   0xFB06 0x4405      MLA      R4,R6,R5,R4
   \   00000032   0x1B00             SUBS     R0,R0,R4
   \   00000034   0x7188             STRB     R0,[R1, #+6]
     57            returnTime->year = 2000;
     58            returnTime->month = 1;
     59            returnTime->day = 1;
     60          
     61            // march through the calendar, counting months, days and years
     62            // being careful to account for leapyears.
     63            for (i = 0; i < daysSince2000; i++) {
   \   00000036   0x2400             MOVS     R4,#+0
   \   00000038   0xF44F 0x60FA      MOV      R0,#+2000
   \   0000003C   0x8008             STRH     R0,[R1, #+0]
   \   0000003E   0x708A             STRB     R2,[R1, #+2]
   \   00000040   0x70CA             STRB     R2,[R1, #+3]
   \   00000042   0x.... 0x....      ADR.W    R0,emberAfDaysInMonth
   \   00000046   0xE001             B.N      ??emberAfFillTimeStructFromUtc_0
     64              int8u daysInMonth;
     65              if (isLeapYear && (returnTime->month == 2)) {
     66                daysInMonth = 29;
     67              } else {
     68                daysInMonth = emberAfDaysInMonth[returnTime->month - 1];
     69              }
     70              if (daysInMonth == returnTime->day) {
     71                returnTime->month++;
     72                returnTime->day = 1;
     73              } else {
     74                returnTime->day++;
     75              }
     76              if (returnTime->month == 13) {
     77                returnTime->year++;
     78                returnTime->month = 1;
     79                if (returnTime->year % 4 == 0 &&
     80                    (returnTime->year % 100 != 0 ||
     81                     (returnTime->year % 400 == 0)))
     82                  isLeapYear = TRUE;
     83                else
     84                  isLeapYear = FALSE;
   \                     ??emberAfFillTimeStructFromUtc_1: (+1)
   \   00000048   0x2200             MOVS     R2,#+0
   \                     ??emberAfFillTimeStructFromUtc_2: (+1)
   \   0000004A   0x1C64             ADDS     R4,R4,#+1
   \                     ??emberAfFillTimeStructFromUtc_0: (+1)
   \   0000004C   0x429C             CMP      R4,R3
   \   0000004E   0xD231             BCS.N    ??emberAfFillTimeStructFromUtc_3
   \   00000050   0x788D             LDRB     R5,[R1, #+2]
   \   00000052   0xB11A             CBZ.N    R2,??emberAfFillTimeStructFromUtc_4
   \   00000054   0x2D02             CMP      R5,#+2
   \   00000056   0xBF08             IT       EQ 
   \   00000058   0x261D             MOVEQ    R6,#+29
   \   0000005A   0xD002             BEQ.N    ??emberAfFillTimeStructFromUtc_5
   \                     ??emberAfFillTimeStructFromUtc_4: (+1)
   \   0000005C   0x182E             ADDS     R6,R5,R0
   \   0000005E   0xF816 0x6C01      LDRB     R6,[R6, #-1]
   \                     ??emberAfFillTimeStructFromUtc_5: (+1)
   \   00000062   0x78CF             LDRB     R7,[R1, #+3]
   \   00000064   0x42BE             CMP      R6,R7
   \   00000066   0xBF03             ITTTE    EQ 
   \   00000068   0x1C6D             ADDEQ    R5,R5,#+1
   \   0000006A   0x708D             STRBEQ   R5,[R1, #+2]
   \   0000006C   0x2501             MOVEQ    R5,#+1
   \   0000006E   0x1C7D             ADDNE    R5,R7,#+1
   \   00000070   0x70CD             STRB     R5,[R1, #+3]
   \   00000072   0x788D             LDRB     R5,[R1, #+2]
   \   00000074   0x2D0D             CMP      R5,#+13
   \   00000076   0xD1E8             BNE.N    ??emberAfFillTimeStructFromUtc_2
   \   00000078   0x880A             LDRH     R2,[R1, #+0]
   \   0000007A   0x1C52             ADDS     R2,R2,#+1
   \   0000007C   0x800A             STRH     R2,[R1, #+0]
   \   0000007E   0x2501             MOVS     R5,#+1
   \   00000080   0x708D             STRB     R5,[R1, #+2]
   \   00000082   0x2503             MOVS     R5,#+3
   \   00000084   0x422A             TST      R2,R5
   \   00000086   0xD1DF             BNE.N    ??emberAfFillTimeStructFromUtc_1
   \   00000088   0xB292             UXTH     R2,R2
   \   0000008A   0x2564             MOVS     R5,#+100
   \   0000008C   0xFB92 0xF5F5      SDIV     R5,R2,R5
   \   00000090   0x2664             MOVS     R6,#+100
   \   00000092   0xFB06 0x2515      MLS      R5,R6,R5,R2
   \   00000096   0xB95D             CBNZ.N   R5,??emberAfFillTimeStructFromUtc_6
   \   00000098   0xF44F 0x75C8      MOV      R5,#+400
   \   0000009C   0xFB92 0xF5F5      SDIV     R5,R2,R5
   \   000000A0   0xF44F 0x76C8      MOV      R6,#+400
   \   000000A4   0xFB06 0x2215      MLS      R2,R6,R5,R2
   \   000000A8   0x1E52             SUBS     R2,R2,#+1
   \   000000AA   0x4192             SBCS     R2,R2,R2
   \   000000AC   0x0FD2             LSRS     R2,R2,#+31
   \   000000AE   0xE7CC             B.N      ??emberAfFillTimeStructFromUtc_2
   \                     ??emberAfFillTimeStructFromUtc_6: (+1)
   \   000000B0   0x2201             MOVS     R2,#+1
   \   000000B2   0xE7CA             B.N      ??emberAfFillTimeStructFromUtc_2
     85              }
     86            }
     87          }
   \                     ??emberAfFillTimeStructFromUtc_3: (+1)
   \   000000B4   0xBDF0             POP      {R4-R7,PC}       ;; return
     88          

   \                                 In section .text, align 2, keep-with-next
     89          int32u emberAfGetUtcFromTimeStruct( EmberAfTimeStruct *time ){
   \                     emberAfGetUtcFromTimeStruct: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
     90            // Construct a UTC timestamp given an EmberAfTimeStruct structure.
     91            int32u utcTime = 0;
   \   00000004   0x2200             MOVS     R2,#+0
     92            int16u daysThisYear;
     93            int32u i;
     94          
     95            if( (time == NULL) || (time->year < 2000) || (time->month == 0) ||
     96                (time->month > 12) || (time->day == 0) || (time->day > 31) ){
   \   00000006   0xB178             CBZ.N    R0,??emberAfGetUtcFromTimeStruct_0
   \   00000008   0x8803             LDRH     R3,[R0, #+0]
   \   0000000A   0xF5B3 0x6FFA      CMP      R3,#+2000
   \   0000000E   0xDB0B             BLT.N    ??emberAfGetUtcFromTimeStruct_0
   \   00000010   0xF890 0xE002      LDRB     LR,[R0, #+2]
   \   00000014   0xF1BE 0x0F00      CMP      LR,#+0
   \   00000018   0xD006             BEQ.N    ??emberAfGetUtcFromTimeStruct_0
   \   0000001A   0xF1BE 0x0F0D      CMP      LR,#+13
   \   0000001E   0xDA03             BGE.N    ??emberAfGetUtcFromTimeStruct_0
   \   00000020   0x78C5             LDRB     R5,[R0, #+3]
   \   00000022   0xB10D             CBZ.N    R5,??emberAfGetUtcFromTimeStruct_0
   \   00000024   0x2D20             CMP      R5,#+32
   \   00000026   0xDB02             BLT.N    ??emberAfGetUtcFromTimeStruct_1
     97              return 0xFFFFFFFF;    // Invalid parameters
   \                     ??emberAfGetUtcFromTimeStruct_0: (+1)
   \   00000028   0xF04F 0x30FF      MOV      R0,#-1
   \   0000002C   0xE050             B.N      ??emberAfGetUtcFromTimeStruct_2
     98            }
     99          
    100            for( i=2000; i<time->year; i++ ){
   \                     ??emberAfGetUtcFromTimeStruct_1: (+1)
   \   0000002E   0xF44F 0x61FA      MOV      R1,#+2000
   \   00000032   0xF44F 0x7AC8      MOV      R10,#+400
   \   00000036   0x.... 0x....      LDR.W    R12,??DataTable5_1  ;; 0x15180
   \   0000003A   0xE012             B.N      ??emberAfGetUtcFromTimeStruct_3
    101              utcTime += ( 365 * SECONDS_IN_DAY );
   \                     ??emberAfGetUtcFromTimeStruct_4: (+1)
   \   0000003C   0x....             LDR.N    R4,??DataTable5_2  ;; 0x1e13380
   \   0000003E   0x18A2             ADDS     R2,R4,R2
    102              if( mYEAR_IS_LEAP_YEAR(i) ){
   \   00000040   0xF011 0x0F03      TST      R1,#0x3
   \   00000044   0xD10C             BNE.N    ??emberAfGetUtcFromTimeStruct_5
   \   00000046   0x2464             MOVS     R4,#+100
   \   00000048   0xFBB1 0xF4F4      UDIV     R4,R1,R4
   \   0000004C   0xFB06 0x1614      MLS      R6,R6,R4,R1
   \   00000050   0xB92E             CBNZ.N   R6,??emberAfGetUtcFromTimeStruct_6
   \   00000052   0x4656             MOV      R6,R10
   \   00000054   0xFBB1 0xF6F6      UDIV     R6,R1,R6
   \   00000058   0xFB0A 0x1616      MLS      R6,R10,R6,R1
   \   0000005C   0xB906             CBNZ.N   R6,??emberAfGetUtcFromTimeStruct_5
    103                utcTime += SECONDS_IN_DAY;
   \                     ??emberAfGetUtcFromTimeStruct_6: (+1)
   \   0000005E   0x4462             ADD      R2,R12,R2
    104              }
    105            }
   \                     ??emberAfGetUtcFromTimeStruct_5: (+1)
   \   00000060   0x1C49             ADDS     R1,R1,#+1
   \                     ??emberAfGetUtcFromTimeStruct_3: (+1)
   \   00000062   0x2664             MOVS     R6,#+100
   \   00000064   0x4299             CMP      R1,R3
   \   00000066   0xD3E9             BCC.N    ??emberAfGetUtcFromTimeStruct_4
    106            emberAfAppPrintln("Seconds in %d years=%d", i, utcTime );
    107            // Utc Time now reflects seconds up to Jan 1 00:00:00 of current year.
    108            daysThisYear = 0;
    109            for( i=0; i<time->month -1 ; i++ ){
   \   00000068   0x.... 0x....      ADR.W    R9,emberAfDaysInMonth
   \   0000006C   0x2700             MOVS     R7,#+0
   \   0000006E   0x2400             MOVS     R4,#+0
   \   00000070   0xF04F 0x0B03      MOV      R11,#+3
   \   00000074   0xE015             B.N      ??emberAfGetUtcFromTimeStruct_7
    110              daysThisYear += emberAfDaysInMonth[i];
   \                     ??emberAfGetUtcFromTimeStruct_8: (+1)
   \   00000076   0xF814 0x1009      LDRB     R1,[R4, R9]
   \   0000007A   0x19CF             ADDS     R7,R1,R7
    111              if( (i == 1) && (mYEAR_IS_LEAP_YEAR(time->year)) ){
   \   0000007C   0x2C01             CMP      R4,#+1
   \   0000007E   0xBF08             IT       EQ 
   \   00000080   0xEA13 0x0F0B      TSTEQ    R3,R11
   \   00000084   0xD10C             BNE.N    ??emberAfGetUtcFromTimeStruct_9
   \   00000086   0x2164             MOVS     R1,#+100
   \   00000088   0xFB93 0xF1F1      SDIV     R1,R3,R1
   \   0000008C   0xFB06 0x3111      MLS      R1,R6,R1,R3
   \   00000090   0xB929             CBNZ.N   R1,??emberAfGetUtcFromTimeStruct_10
   \   00000092   0x4651             MOV      R1,R10
   \   00000094   0xFB93 0xF1F1      SDIV     R1,R3,R1
   \   00000098   0xFB0A 0x3111      MLS      R1,R10,R1,R3
   \   0000009C   0xB901             CBNZ.N   R1,??emberAfGetUtcFromTimeStruct_9
    112                daysThisYear++;
   \                     ??emberAfGetUtcFromTimeStruct_10: (+1)
   \   0000009E   0x1C7F             ADDS     R7,R7,#+1
    113              }
    114            }
   \                     ??emberAfGetUtcFromTimeStruct_9: (+1)
   \   000000A0   0x1C64             ADDS     R4,R4,#+1
   \                     ??emberAfGetUtcFromTimeStruct_7: (+1)
   \   000000A2   0xF1AE 0x0101      SUB      R1,LR,#+1
   \   000000A6   0x428C             CMP      R4,R1
   \   000000A8   0xD3E5             BCC.N    ??emberAfGetUtcFromTimeStruct_8
    115            daysThisYear += time->day -1;
    116            utcTime += SECONDS_IN_DAY * daysThisYear;
   \   000000AA   0x19E9             ADDS     R1,R5,R7
   \   000000AC   0x1E49             SUBS     R1,R1,#+1
   \   000000AE   0xB289             UXTH     R1,R1
   \   000000B0   0xFB0C 0x2201      MLA      R2,R12,R1,R2
    117            emberAfAppPrintln("daysThisYear=%d, total Sec=%d (0x%4x)", daysThisYear, utcTime, utcTime );
    118          
    119            // Utc Time now reflects seconds up to last completed day of current year.
    120            for( i=0; i<time->hours; i++ ){
   \   000000B4   0x2100             MOVS     R1,#+0
   \   000000B6   0xE002             B.N      ??emberAfGetUtcFromTimeStruct_11
    121              utcTime += SECONDS_IN_HOUR;
   \                     ??emberAfGetUtcFromTimeStruct_12: (+1)
   \   000000B8   0xF502 0x6261      ADD      R2,R2,#+3600
    122            }
   \   000000BC   0x1C49             ADDS     R1,R1,#+1
   \                     ??emberAfGetUtcFromTimeStruct_11: (+1)
   \   000000BE   0x7903             LDRB     R3,[R0, #+4]
   \   000000C0   0x4299             CMP      R1,R3
   \   000000C2   0xD3F9             BCC.N    ??emberAfGetUtcFromTimeStruct_12
    123            //for( i=0; i<time->minutes; i++ ){
    124              //iutcTime += 60;
    125            //}
    126            utcTime += (60 * time->minutes);
    127            utcTime += time->seconds;
    128            return utcTime;
   \   000000C4   0x7941             LDRB     R1,[R0, #+5]
   \   000000C6   0x7980             LDRB     R0,[R0, #+6]
   \   000000C8   0x233C             MOVS     R3,#+60
   \   000000CA   0xFB03 0x2101      MLA      R1,R3,R1,R2
   \   000000CE   0x1840             ADDS     R0,R0,R1
   \                     ??emberAfGetUtcFromTimeStruct_2: (+1)
   \   000000D0   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    129          }
    130          
    131          #define SECONDS_IN_WEEK  (SECONDS_IN_DAY * 7)
    132          // Determine which day of the week it is, from a given utc timestamp.
    133          // Return 0=MON, 1=TUES, etc.

   \                                 In section .text, align 2, keep-with-next
    134          int8u emberAfGetWeekdayFromUtc( int32u utcTime ){
    135            int8u dayIndex;
    136            utcTime %= SECONDS_IN_WEEK;
   \                     emberAfGetWeekdayFromUtc: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable5_3  ;; 0x93a80
   \   00000002   0x....             LDR.N    R2,??DataTable5_3  ;; 0x93a80
   \   00000004   0xFBB0 0xF1F1      UDIV     R1,R0,R1
   \   00000008   0xFB02 0x0011      MLS      R0,R2,R1,R0
    137          
    138            for( dayIndex = 0; dayIndex < 7; dayIndex++ ){
   \   0000000C   0x2100             MOVS     R1,#+0
    139              if( utcTime < SECONDS_IN_DAY ){
   \                     ??emberAfGetWeekdayFromUtc_0: (+1)
   \   0000000E   0x....             LDR.N    R2,??DataTable5_1  ;; 0x15180
   \   00000010   0x4290             CMP      R0,R2
   \   00000012   0xD305             BCC.N    ??emberAfGetWeekdayFromUtc_1
    140                break;
    141              }
    142              utcTime -= SECONDS_IN_DAY;
   \   00000014   0x....             LDR.N    R2,??DataTable5_4  ;; 0xfffeae80
    143            }
   \   00000016   0x1C49             ADDS     R1,R1,#+1
   \   00000018   0x1810             ADDS     R0,R2,R0
   \   0000001A   0xB2C9             UXTB     R1,R1
   \   0000001C   0x2907             CMP      R1,#+7
   \   0000001E   0xDBF6             BLT.N    ??emberAfGetWeekdayFromUtc_0
    144            // Note:  Jan 1, 2000 is a SATURDAY.
    145            // Do some translation work so 0=MONDAY, 5=SATURDAY, 6=SUNDAY
    146            if( dayIndex < 2 ){
   \                     ??emberAfGetWeekdayFromUtc_1: (+1)
   \   00000020   0x2902             CMP      R1,#+2
   \   00000022   0xBFB4             ITE      LT 
    147              dayIndex += 5;
   \   00000024   0x1D48             ADDLT    R0,R1,#+5
    148            }
    149            else{
    150              dayIndex -= 2;
   \   00000026   0x1E88             SUBGE    R0,R1,#+2
    151            }
    152            return dayIndex;
   \   00000028   0xB2C0             UXTB     R0,R0
   \   0000002A   0x4770             BX       LR               ;; return
    153          }
    154          
    155          

   \                                 In section .text, align 2, keep-with-next
    156          void emberAfDecodeDate(int32u src, EmberAfDate* dest)
    157          {
    158            dest->year       = (int8u)((src & 0xFF000000) >> 24);
   \                     emberAfDecodeDate: (+1)
   \   00000000   0x0E02             LSRS     R2,R0,#+24
   \   00000002   0x700A             STRB     R2,[R1, #+0]
    159            dest->month      = (int8u)((src & 0x00FF0000) >> 16);
   \   00000004   0x0C02             LSRS     R2,R0,#+16
   \   00000006   0x704A             STRB     R2,[R1, #+1]
    160            dest->dayOfMonth = (int8u)((src & 0x0000FF00) >>  8);
   \   00000008   0x0A02             LSRS     R2,R0,#+8
   \   0000000A   0x708A             STRB     R2,[R1, #+2]
    161            dest->dayOfWeek  = (int8u) (src & 0x000000FF);
   \   0000000C   0x70C8             STRB     R0,[R1, #+3]
    162          }
   \   0000000E   0x4770             BX       LR               ;; return
    163          

   \                                 In section .text, align 2, keep-with-next
    164          int32u emberAfEncodeDate(EmberAfDate* date)
    165          {
    166            int32u result = ((((int32u)date->year) << 24)
    167                            + (((int32u)date->month) << 16)
    168                            + (((int32u)date->dayOfMonth) << 8)
    169                            + (((int32u)date->dayOfWeek)));
    170            return result;
   \                     emberAfEncodeDate: (+1)
   \   00000000   0x7842             LDRB     R2,[R0, #+1]
   \   00000002   0x7801             LDRB     R1,[R0, #+0]
   \   00000004   0x0412             LSLS     R2,R2,#+16
   \   00000006   0xEB02 0x6101      ADD      R1,R2,R1, LSL #+24
   \   0000000A   0x7882             LDRB     R2,[R0, #+2]
   \   0000000C   0x78C0             LDRB     R0,[R0, #+3]
   \   0000000E   0xEB01 0x2102      ADD      R1,R1,R2, LSL #+8
   \   00000012   0x1840             ADDS     R0,R0,R1
   \   00000014   0x4770             BX       LR               ;; return
    171          }
    172          
    173          
    174          // emberAfPrintTime expects to be passed a ZigBee time which is the number
    175          // of seconds since the year 2000, it prints out a human readable time
    176          // from that value.

   \                                 In section .text, align 2, keep-with-next
    177          void emberAfPrintTime(int32u utcTime)
    178          {
    179          #ifdef EMBER_AF_PRINT_ENABLE
    180            EmberAfTimeStruct time;
    181            emberAfFillTimeStructFromUtc(utcTime, &time);
    182            emberAfPrintln(emberAfPrintActiveArea,
    183                           "UTC time: %d/%d/%d %d:%d:%d (%4x)",
    184                           time.month,
    185                           time.day,
    186                           time.year,
    187                           time.hours,
    188                           time.minutes,
    189                           time.seconds,
    190                           utcTime);
    191          #endif //EMBER_AF_PRINT_ENABLE
    192          }
   \                     emberAfPrintTime: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    193          

   \                                 In section .text, align 2, keep-with-next
    194          void emberAfPrintDate(const EmberAfDate * date)
    195          {
    196          #ifdef EMBER_AF_PRINT_ENABLE
    197            int32u zigbeeDate = ((((int32u)date->year) << 24)
    198                                + (((int32u)date->month) << 16)
    199                                + (((int32u)date->dayOfMonth) << 8)
    200                                + (((int32u)date->dayOfWeek)));
    201          
    202            emberAfPrint(emberAfPrintActiveArea, 
    203                         "0x%4X (%d/%p%d/%p%d)",
    204                         zigbeeDate,
    205                         date->year + 1900,
    206                         (date->month < 10 ? "0" : ""),
    207                         date->month,
    208                         (date->dayOfMonth < 10 ? "0" : ""),
    209                         date->dayOfMonth);
    210          #endif //EMBER_AF_PRINT_ENABLE
    211          }
   \                     emberAfPrintDate: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    212          

   \                                 In section .text, align 2, keep-with-next
    213          void emberAfPrintDateln(const EmberAfDate * date)
    214          {
    215            emberAfPrintDate(date);
    216            emberAfPrintln(emberAfPrintActiveArea, "");
   \                     emberAfPrintDateln: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable5_5
   \   00000002   0x8800             LDRH     R0,[R0, #+0]
   \   00000004   0x....             ADR.N    R1,??DataTable5  ;; ""
   \   00000006   0x.... 0x....      B.W      emberAfPrintln
    217          }
    218          
    219          // *******************************************************
    220          // emberAfPrintTime and emberAfSetTime are convienience methods for setting
    221          // and displaying human readable times.
    222          
    223          // Expects to be passed a ZigBee time which is the number of seconds
    224          // since the year 2000

   \                                 In section .text, align 2, keep-with-next
    225          void emberAfSetTime(int32u utcTime) {
    226          #ifdef EMBER_AF_PLUGIN_TIME_SERVER
    227            emAfTimeClusterServerSetCurrentTime(utcTime);
    228          #endif //EMBER_AF_PLUGIN_TIME_SERVER
    229            emberAfSetTimeCallback(utcTime);
   \                     emberAfSetTime: (+1)
   \   00000000   0x.... 0x....      B.W      emberAfSetTimeCallback
    230          }
    231          

   \                                 In section .text, align 2, keep-with-next
    232          int32u emberAfGetCurrentTime(void)
    233          {
    234          #ifdef EMBER_AF_PLUGIN_TIME_SERVER
    235            return emAfTimeClusterServerGetCurrentTime();
    236          #else
    237            return emberAfGetCurrentTimeCallback();
   \                     emberAfGetCurrentTime: (+1)
   \   00000000   0x.... 0x....      B.W      emberAfGetCurrentTimeCallback
    238          #endif
    239          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x00 0x00          DC8      "",0x0,0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x00015180         DC32     0x15180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x01E13380         DC32     0x1e13380

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x00093A80         DC32     0x93a80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0xFFFEAE80         DC32     0xfffeae80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x........         DC32     emberAfPrintActiveArea

   \                                 In section .rodata, align 1, keep-with-next
   \                     `?<Constant "">`:
   \   00000000   0x00               DC8 ""
    240          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   emberAfCompareDates
        16   -> emberAfEncodeDate
       0   emberAfCopyDate
       0   emberAfDecodeDate
       0   emberAfEncodeDate
      20   emberAfFillTimeStructFromUtc
       0   emberAfGetCurrentTime
         0   -> emberAfGetCurrentTimeCallback
       8   emberAfGetNumberDaysInMonth
      36   emberAfGetUtcFromTimeStruct
       0   emberAfGetWeekdayFromUtc
       0   emberAfPrintDate
       0   emberAfPrintDateln
         0   -> emberAfPrintln
       0   emberAfPrintTime
       0   emberAfSetTime
         0   -> emberAfSetTimeCallback


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Constant "">
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
      36  emberAfCompareDates
      20  emberAfCopyDate
      12  emberAfDaysInMonth
      16  emberAfDecodeDate
      22  emberAfEncodeDate
     182  emberAfFillTimeStructFromUtc
       4  emberAfGetCurrentTime
      74  emberAfGetNumberDaysInMonth
     212  emberAfGetUtcFromTimeStruct
      44  emberAfGetWeekdayFromUtc
       2  emberAfPrintDate
      10  emberAfPrintDateln
       2  emberAfPrintTime
       4  emberAfSetTime

 
   1 byte  in section .rodata
 664 bytes in section .text
 
 664 bytes of CODE  memory
   1 byte  of CONST memory

Errors: none
Warnings: none
