###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        22/Oct/2015  09:32:29
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  E:\Zigbee\EmberZNet5.6.0-GA\hal\micro\cortexm3\adc.c
#    Command line =  
#        E:\Zigbee\EmberZNet5.6.0-GA\hal\micro\cortexm3\adc.c -D DIMMER -D
#        NULL_BTL -D CORTEXM3 -D CORTEXM3_EMBER_MICRO -D CORTEXM3_EM357 -D
#        PHY_EM3XX -D
#        "APPLICATION_TOKEN_HEADER=\"app/framework/util/tokens.h\"" -D
#        "ATTRIBUTE_STORAGE_CONFIGURATION=\"app/builder/ZigbeeRoute/ZigbeeRoute_endpoint_config.h\""
#        -D "BOARD_HEADER=\"app\builder\ZigbeeRoute\ZigbeeRoute_board.h\"" -D
#        "CONFIGURATION_HEADER=\"app/framework/util/config.h\"" -D
#        "GENERATED_TOKEN_HEADER=\"app/builder/ZigbeeRoute/ZigbeeRoute_tokens.h\""
#        -D "PLATFORM_HEADER=\"hal/micro/cortexm3/compiler/iar.h\"" -D
#        "ZA_GENERATED_HEADER=\"app/builder/ZigbeeRoute/ZigbeeRoute.h\"" -D
#        "__SOURCEFILE__=\"adc.c\"" -lC
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\dim\List\
#        --diag_suppress Pa050 -o
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\dim\Obj\ --debug
#        --endian=little --cpu=Cortex-M3 --no_path_in_file_macros
#        --separate_cluster_for_initialized_variables -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\Zigbee\EmberZNet5.6.0-GA\hal\micro\cortexm3\ -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\ -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\ -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\app\framework\include\
#        -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\app\util\
#        -I E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\stack\
#        -I E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\hal\
#        -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\hal\..\
#        -Ohz --use_c++_inline
#    List file    =  
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\dim\List\adc.lst
#    Object file  =  
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\dim\Obj\adc.o
#
###############################################################################

E:\Zigbee\EmberZNet5.6.0-GA\hal\micro\cortexm3\adc.c
      1          /*
      2           * File: adc.c
      3           * Description: EM3XX-specific ADC HAL functions
      4           *
      5           *
      6           * Copyright 2008 by Ember Corporation. All rights reserved.                *80*
      7           */
      8          #include PLATFORM_HEADER
      9          #include "stack/include/error.h"
     10          #include "hal/micro/micro-common.h"
     11          #include "hal/micro/cortexm3/micro-common.h"
     12          #include "micro/adc.h"
     13          #include "../include/af.h"
     14          
     15          #if (NUM_ADC_USERS > 8)
     16            #error NUM_ADC_USERS must not be greater than 8, or int8u variables in adc.c must be changed
     17          #endif
     18          
     19          
     20          
     21          
     22          
     23          

   \                                 In section .bss, align 4
     24          static int16u adcData;             // conversion result written by DMA
     25          static int8u adcPendingRequests;   // bitmap of pending requests
   \                     adcPendingRequests:
   \   00000000                      DS8 1
   \   00000001                      DS8 1
   \   00000002                      DS8 1
   \   00000003                      DS8 1
   \   00000004                      DS8 2
   \   00000006                      DS8 2
   \   00000008                      DS8 2
   \   0000000A                      DS8 2
   \   0000000C                      DS8 8
   \   00000014                      DS8 8
   \   0000001C                      DS8 2
     26          static volatile int8u adcPendingConversion; // id of pending conversion
     27          static int8u adcReadingValid;      // bitmap of valid adcReadings
     28          static int16u adcReadings[NUM_ADC_USERS];
     29          static int16u adcConfig[NUM_ADC_USERS];
     30          static boolean adcCalibrated;
     31          static int16s Nvss;
     32          static int16s Nvdd;
     33          static int16u adcStaticConfig;
     34          

   \                                 In section .text, align 2, keep-with-next
     35          void halAdcSetClock(boolean slow)
     36          {
     37            if (slow) {
   \                     halAdcSetClock: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable9
   \   00000002   0x890A             LDRH     R2,[R1, #+8]
   \   00000004   0x2800             CMP      R0,#+0
   \   00000006   0xBF12             ITEE     NE 
     38              adcStaticConfig |= ADC_1MHZCLK_MASK;
   \   00000008   0xF042 0x0004      ORRNE    R0,R2,#0x4
     39            } else {
     40              adcStaticConfig &= ~ADC_1MHZCLK_MASK;
   \   0000000C   0xF64F 0x70FB      MOVWEQ   R0,#+65531
   \   00000010   0x4010             ANDEQ    R0,R0,R2
   \   00000012   0x8108             STRH     R0,[R1, #+8]
     41            }
     42          }
   \   00000014   0x4770             BX       LR               ;; return
     43          

   \                                 In section .text, align 2, keep-with-next
     44          boolean halAdcGetClock(void)
     45          {
     46            return (boolean)(adcStaticConfig & ADC_1MHZCLK_MASK);
   \                     halAdcGetClock: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable9
   \   00000002   0x7A00             LDRB     R0,[R0, #+8]
   \   00000004   0xF000 0x0004      AND      R0,R0,#0x4
   \   00000008   0x4770             BX       LR               ;; return
     47          }
     48          
     49          
     50          // Define a channel field that combines ADC_MUXP and ADC_MUXN
     51          #define ADC_CHAN        (ADC_MUXP | ADC_MUXN)
     52          #define ADC_CHAN_BIT    ADC_MUXN_BIT
     53          

   \                                 In section .text, align 4, keep-with-next
     54          void halAdcIsr(void)
     55          {
   \                     halAdcIsr: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
     56            int8u i;
     57            int8u conversion = adcPendingConversion; //fix 'volatile' warning; costs no flash
   \   00000002   0x....             LDR.N    R0,??DataTable9
     58          
     59            // make sure data is ready and the desired conversion is valid
     60            if ( (INT_ADCFLAG & INT_ADCULDFULL)
     61                  && (conversion < NUM_ADC_USERS) ) {
   \   00000004   0x....             LDR.N    R1,??DataTable9_1  ;; 0x4000a810
   \   00000006   0x7842             LDRB     R2,[R0, #+1]
   \   00000008   0x680B             LDR      R3,[R1, #+0]
   \   0000000A   0x075B             LSLS     R3,R3,#+29
   \   0000000C   0xD524             BPL.N    ??halAdcIsr_0
   \   0000000E   0x2A03             CMP      R2,#+3
   \   00000010   0xDA22             BGE.N    ??halAdcIsr_0
     62              adcReadings[conversion] = adcData;
   \   00000012   0x8883             LDRH     R3,[R0, #+4]
   \   00000014   0xEB00 0x0442      ADD      R4,R0,R2, LSL #+1
   \   00000018   0x81A3             STRH     R3,[R4, #+12]
     63              adcReadingValid |= BIT(conversion); // mark the reading as valid
   \   0000001A   0x2301             MOVS     R3,#+1
   \   0000001C   0x7884             LDRB     R4,[R0, #+2]
   \   0000001E   0xFA03 0xF202      LSL      R2,R3,R2
   \   00000022   0x4322             ORRS     R2,R2,R4
   \   00000024   0x7082             STRB     R2,[R0, #+2]
     64              // setup the next conversion if any
     65              if (adcPendingRequests) {
   \   00000026   0x....             LDR.N    R4,??DataTable9_2  ;; 0x4000d004
   \   00000028   0x7802             LDRB     R2,[R0, #+0]
   \   0000002A   0xB192             CBZ.N    R2,??halAdcIsr_1
     66                for (i = 0; i < NUM_ADC_USERS; i++) {
   \   0000002C   0x2500             MOVS     R5,#+0
     67                  if (BIT(i) & adcPendingRequests) {
   \                     ??halAdcIsr_2: (+1)
   \   0000002E   0xFA22 0xF605      LSR      R6,R2,R5
   \   00000032   0x07F6             LSLS     R6,R6,#+31
   \   00000034   0xD508             BPL.N    ??halAdcIsr_3
     68                    adcPendingConversion = i;     // set pending conversion
   \   00000036   0x7045             STRB     R5,[R0, #+1]
     69                    adcPendingRequests ^= BIT(i); //clear request: conversion is starting
   \   00000038   0x40AB             LSLS     R3,R3,R5
   \   0000003A   0x405A             EORS     R2,R3,R2
   \   0000003C   0x7002             STRB     R2,[R0, #+0]
     70                    ADC_CFG = adcConfig[i];
   \   0000003E   0xEB00 0x0045      ADD      R0,R0,R5, LSL #+1
   \   00000042   0x8A80             LDRH     R0,[R0, #+20]
   \   00000044   0x6020             STR      R0,[R4, #+0]
     71                    break; //conversion started, so we're done here (only one at a time)
   \   00000046   0xE007             B.N      ??halAdcIsr_0
     72                  }
     73                }
   \                     ??halAdcIsr_3: (+1)
   \   00000048   0x1C6D             ADDS     R5,R5,#+1
   \   0000004A   0xB2ED             UXTB     R5,R5
   \   0000004C   0x2D03             CMP      R5,#+3
   \   0000004E   0xDBEE             BLT.N    ??halAdcIsr_2
   \   00000050   0xE002             B.N      ??halAdcIsr_0
     74              } else {                                // no conversion to do
     75                ADC_CFG = 0;                          // disable adc
   \                     ??halAdcIsr_1: (+1)
   \   00000052   0x6022             STR      R2,[R4, #+0]
     76                adcPendingConversion = NUM_ADC_USERS; //nothing pending, so go "idle"
   \   00000054   0x2203             MOVS     R2,#+3
   \   00000056   0x7042             STRB     R2,[R0, #+1]
     77              }
     78            }
     79            INT_ADCFLAG = 0xFFFF;
   \                     ??halAdcIsr_0: (+1)
   \   00000058   0xF64F 0x70FF      MOVW     R0,#+65535
   \   0000005C   0x6008             STR      R0,[R1, #+0]
     80            asm("DMB");
   \   0000005E   0xF3BF 0x8F5F      DMB
     81          }
   \   00000062   0xBD70             POP      {R4-R6,PC}       ;; return
     82          
     83          // An internal support routine called from functions below.
     84          // Returns the user number of the started conversion, or NUM_ADC_USERS
     85          // otherwise.

   \                                 In section .text, align 2, keep-with-next
     86          ADCUser startNextConversion(void)
     87          {
   \                     startNextConversion: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
     88            int8u i;
     89          
     90            ATOMIC (
     91              // start the next requested conversion if any
     92              if (adcPendingRequests && !(ADC_CFG & ADC_ENABLE)) {
     93                for (i = 0; i < NUM_ADC_USERS; i++) {
     94                  if ( BIT(i) & adcPendingRequests) {
     95                    adcPendingConversion = i;     // set pending conversion
     96                    adcPendingRequests ^= BIT(i); // clear request
     97                    ADC_CFG = adcConfig[i];       // set the configuration to desired
     98                    INT_ADCFLAG = 0xFFFF;
     99                    INT_CFGSET = INT_ADC;
    100                    break;
    101                  }
    102                }
    103              } else {
    104                i = NUM_ADC_USERS;
    105              }
    106            )
   \   00000002   0x.... 0x....      BL       _disableBasePri
   \   00000006   0x....             LDR.N    R1,??DataTable9
   \   00000008   0x780A             LDRB     R2,[R1, #+0]
   \   0000000A   0xB1FA             CBZ.N    R2,??startNextConversion_0
   \   0000000C   0x....             LDR.N    R3,??DataTable9_2  ;; 0x4000d004
   \   0000000E   0x681C             LDR      R4,[R3, #+0]
   \   00000010   0x07E4             LSLS     R4,R4,#+31
   \   00000012   0xD41B             BMI.N    ??startNextConversion_0
   \   00000014   0x2400             MOVS     R4,#+0
   \                     ??startNextConversion_1: (+1)
   \   00000016   0xFA22 0xF504      LSR      R5,R2,R4
   \   0000001A   0x07ED             LSLS     R5,R5,#+31
   \   0000001C   0xD511             BPL.N    ??startNextConversion_2
   \   0000001E   0x2501             MOVS     R5,#+1
   \   00000020   0x40A5             LSLS     R5,R5,R4
   \   00000022   0x704C             STRB     R4,[R1, #+1]
   \   00000024   0x406A             EORS     R2,R5,R2
   \   00000026   0x700A             STRB     R2,[R1, #+0]
   \   00000028   0xEB01 0x0144      ADD      R1,R1,R4, LSL #+1
   \   0000002C   0x....             LDR.N    R2,??DataTable9_1  ;; 0x4000a810
   \   0000002E   0x8A89             LDRH     R1,[R1, #+20]
   \   00000030   0x6019             STR      R1,[R3, #+0]
   \   00000032   0xF64F 0x71FF      MOVW     R1,#+65535
   \   00000036   0x6011             STR      R1,[R2, #+0]
   \   00000038   0xF44F 0x6100      MOV      R1,#+2048
   \   0000003C   0x....             LDR.N    R2,??DataTable9_3  ;; 0xe000e100
   \   0000003E   0x6011             STR      R1,[R2, #+0]
   \   00000040   0xE005             B.N      ??startNextConversion_3
   \                     ??startNextConversion_2: (+1)
   \   00000042   0x1C64             ADDS     R4,R4,#+1
   \   00000044   0xB2E4             UXTB     R4,R4
   \   00000046   0x2C03             CMP      R4,#+3
   \   00000048   0xDBE5             BLT.N    ??startNextConversion_1
   \   0000004A   0xE000             B.N      ??startNextConversion_3
   \                     ??startNextConversion_0: (+1)
   \   0000004C   0x2403             MOVS     R4,#+3
   \                     ??startNextConversion_3: (+1)
   \   0000004E   0x.... 0x....      BL       _writeBasePri
    107            return i;
   \   00000052   0x4620             MOV      R0,R4
   \   00000054   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    108          }
    109          

   \                                 In section .text, align 2, keep-with-next
    110          void halInternalInitAdc(void)
    111          {
    112            // reset the state variables
    113            adcPendingRequests = 0;
   \                     halInternalInitAdc: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable9
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x7001             STRB     R1,[R0, #+0]
   \   00000006   0x2200             MOVS     R2,#+0
    114            adcPendingConversion = NUM_ADC_USERS;
   \   00000008   0x2103             MOVS     R1,#+3
   \   0000000A   0x7041             STRB     R1,[R0, #+1]
    115            adcCalibrated = FALSE;
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x70C1             STRB     R1,[R0, #+3]
    116            adcStaticConfig = ADC_1MHZCLK | ADC_ENABLE; // init config: 1MHz, low voltage
   \   00000010   0x2105             MOVS     R1,#+5
   \   00000012   0x8101             STRH     R1,[R0, #+8]
    117          
    118            // set all adcReadings as invalid
    119            adcReadingValid = 0;
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0x7081             STRB     R1,[R0, #+2]
   \   00000018   0x1D00             ADDS     R0,R0,#+4
    120          
    121            // turn off the ADC
    122            ADC_CFG = 0;                   // disable ADC, turn off HV buffers
   \   0000001A   0x....             LDR.N    R1,??DataTable9_2  ;; 0x4000d004
   \   0000001C   0x600A             STR      R2,[R1, #+0]
    123            ADC_OFFSET = ADC_OFFSET_RESET;
   \   0000001E   0x604A             STR      R2,[R1, #+4]
    124            ADC_GAIN = ADC_GAIN_RESET;
   \   00000020   0xF44F 0x4200      MOV      R2,#+32768
   \   00000024   0x608A             STR      R2,[R1, #+8]
    125            ADC_DMACFG = ADC_DMARST;
   \   00000026   0x2210             MOVS     R2,#+16
   \   00000028   0x60CA             STR      R2,[R1, #+12]
    126            ADC_DMABEG = (int32u)&adcData;
   \   0000002A   0x6148             STR      R0,[R1, #+20]
    127            ADC_DMASIZE = 1;
   \   0000002C   0x2001             MOVS     R0,#+1
   \   0000002E   0x6188             STR      R0,[R1, #+24]
    128            ADC_DMACFG = (ADC_DMAAUTOWRAP | ADC_DMALOAD);
   \   00000030   0x2003             MOVS     R0,#+3
   \   00000032   0x60C8             STR      R0,[R1, #+12]
    129          
    130            // clear the ADC interrupts and enable
    131            INT_ADCCFG = INT_ADCULDFULL;
   \   00000034   0x2104             MOVS     R1,#+4
   \   00000036   0x....             LDR.N    R0,??DataTable9_1  ;; 0x4000a810
   \   00000038   0x6401             STR      R1,[R0, #+64]
    132            INT_ADCFLAG = 0xFFFF;
   \   0000003A   0xF64F 0x71FF      MOVW     R1,#+65535
   \   0000003E   0x6001             STR      R1,[R0, #+0]
    133            INT_CFGSET = INT_ADC;
   \   00000040   0xF44F 0x6000      MOV      R0,#+2048
   \   00000044   0x....             LDR.N    R1,??DataTable9_3  ;; 0xe000e100
   \   00000046   0x6008             STR      R0,[R1, #+0]
    134          
    135            emberCalibrateVref();
   \   00000048   0x.... 0x....      B.W      emberCalibrateVref
    136          }
    137          

   \                                 In section .text, align 2, keep-with-next
    138          EmberStatus halStartAdcConversion(ADCUser id,
    139                                            ADCReferenceType reference,
    140                                            ADCChannelType channel,
    141                                            ADCRateType rate)
    142          {
   \                     halStartAdcConversion: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
    143          
    144             if(reference != ADC_REF_INT)
   \   00000004   0x292A             CMP      R1,#+42
   \   00000006   0xD001             BEQ.N    ??halStartAdcConversion_0
    145              return EMBER_ERR_FATAL;
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0xBD70             POP      {R4-R6,PC}
    146          
    147            // save the chosen configuration for this user
    148            adcConfig[id] = ( ((rate << ADC_PERIOD_BIT) & ADC_PERIOD)
    149                            | ((channel << ADC_CHAN_BIT) & ADC_CHAN)
    150                            | adcStaticConfig);
   \                     ??halStartAdcConversion_0: (+1)
   \   0000000C   0x....             LDR.N    R5,??DataTable9
   \   0000000E   0x8929             LDRH     R1,[R5, #+8]
   \   00000010   0x00D0             LSLS     R0,R2,#+3
   \   00000012   0xEA40 0x3043      ORR      R0,R0,R3, LSL #+13
   \   00000016   0x4308             ORRS     R0,R1,R0
   \   00000018   0xEB05 0x0144      ADD      R1,R5,R4, LSL #+1
   \   0000001C   0x8288             STRH     R0,[R1, #+20]
   \   0000001E   0x2001             MOVS     R0,#+1
   \   00000020   0xFA00 0xF604      LSL      R6,R0,R4
   \   00000024   0x7828             LDRB     R0,[R5, #+0]
   \   00000026   0x4230             TST      R0,R6
   \   00000028   0xD10F             BNE.N    ??halStartAdcConversion_1
    151          
    152            // if the user already has a pending request, overwrite params
    153            if (adcPendingRequests & BIT(id)) {
    154              return EMBER_ADC_CONVERSION_DEFERRED;
    155            }
    156          
    157            ATOMIC (
    158              // otherwise, queue the transaction
    159              adcPendingRequests |= BIT(id);
    160              // try and start the conversion if there is not one happening
    161              adcReadingValid &= ~BIT(id);
    162            )
   \   0000002A   0x.... 0x....      BL       _disableBasePri
   \   0000002E   0x7829             LDRB     R1,[R5, #+0]
   \   00000030   0x4331             ORRS     R1,R6,R1
   \   00000032   0x7029             STRB     R1,[R5, #+0]
   \   00000034   0x78A9             LDRB     R1,[R5, #+2]
   \   00000036   0x43B1             BICS     R1,R1,R6
   \   00000038   0x70A9             STRB     R1,[R5, #+2]
   \   0000003A   0x.... 0x....      BL       _writeBasePri
    163            if (startNextConversion() == id)
   \   0000003E   0x.... 0x....      BL       startNextConversion
   \   00000042   0x42A0             CMP      R0,R4
   \   00000044   0xD101             BNE.N    ??halStartAdcConversion_1
    164              return EMBER_ADC_CONVERSION_BUSY;
   \   00000046   0x2081             MOVS     R0,#+129
   \   00000048   0xBD70             POP      {R4-R6,PC}
    165            else
    166              return EMBER_ADC_CONVERSION_DEFERRED;
   \                     ??halStartAdcConversion_1: (+1)
   \   0000004A   0x2082             MOVS     R0,#+130
   \   0000004C   0xBD70             POP      {R4-R6,PC}       ;; return
    167          }
    168          

   \                                 In section .text, align 2, keep-with-next
    169          EmberStatus halRequestAdcData(ADCUser id, int16u *value)
    170          {
   \                     halRequestAdcData: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x4688             MOV      R8,R1
    171            //Both the ADC interrupt and the global interrupt need to be enabled,
    172            //otherwise the ADC ISR cannot be serviced.
    173            boolean intsAreOff = ( INTERRUPTS_ARE_OFF()
    174                                  || !(INT_CFGSET & INT_ADC)
    175                                  || !(INT_ADCCFG & INT_ADCULDFULL) );
   \   00000008   0x....             LDR.N    R7,??DataTable9_4  ;; 0x4000a850
   \   0000000A   0x....             LDR.N    R5,??DataTable9_3  ;; 0xe000e100
   \   0000000C   0x.... 0x....      BL       _basePriIsDisabled
   \   00000010   0xB948             CBNZ.N   R0,??halRequestAdcData_0
   \   00000012   0x6828             LDR      R0,[R5, #+0]
   \   00000014   0x0500             LSLS     R0,R0,#+20
   \   00000016   0xD506             BPL.N    ??halRequestAdcData_0
   \   00000018   0x6838             LDR      R0,[R7, #+0]
   \   0000001A   0x0880             LSRS     R0,R0,#+2
   \   0000001C   0xF000 0x0001      AND      R0,R0,#0x1
   \   00000020   0xF080 0x0601      EOR      R6,R0,#0x1
   \   00000024   0xE000             B.N      ??halRequestAdcData_1
   \                     ??halRequestAdcData_0: (+1)
   \   00000026   0x2601             MOVS     R6,#+1
    176            EmberStatus stat;
    177          
    178            ATOMIC (
    179              // If interupts are disabled but the flag is set,
    180              // manually run the isr...
    181              //FIXME -= is this valid???
    182              if( intsAreOff
    183                && ( (INT_CFGSET & INT_ADC) && (INT_ADCCFG & INT_ADCULDFULL) )) {
    184                halAdcIsr();
    185              }
    186           
    187              // check if we are done
    188              if (BIT(id) & adcReadingValid) {
    189                *value = adcReadings[id];
    190                adcReadingValid ^= BIT(id);
    191                stat = EMBER_ADC_CONVERSION_DONE;
    192              } else if (adcPendingRequests & BIT(id)) {
    193                stat = EMBER_ADC_CONVERSION_DEFERRED;
    194              } else if (adcPendingConversion == id) {
    195                stat = EMBER_ADC_CONVERSION_BUSY;
    196              } else {
    197                stat = EMBER_ADC_NO_CONVERSION_PENDING;
    198              }
    199            )
   \                     ??halRequestAdcData_1: (+1)
   \   00000028   0x.... 0x....      BL       _disableBasePri
   \   0000002C   0x4681             MOV      R9,R0
   \   0000002E   0xB13E             CBZ.N    R6,??halRequestAdcData_2
   \   00000030   0x6828             LDR      R0,[R5, #+0]
   \   00000032   0x0500             LSLS     R0,R0,#+20
   \   00000034   0xD504             BPL.N    ??halRequestAdcData_2
   \   00000036   0x6838             LDR      R0,[R7, #+0]
   \   00000038   0x0740             LSLS     R0,R0,#+29
   \   0000003A   0xBF48             IT       MI 
   \   0000003C   0x.... 0x....      BLMI     halAdcIsr
   \                     ??halRequestAdcData_2: (+1)
   \   00000040   0x....             LDR.N    R1,??DataTable9
   \   00000042   0x788A             LDRB     R2,[R1, #+2]
   \   00000044   0x2001             MOVS     R0,#+1
   \   00000046   0x40A0             LSLS     R0,R0,R4
   \   00000048   0xFA22 0xF304      LSR      R3,R2,R4
   \   0000004C   0x07DB             LSLS     R3,R3,#+31
   \   0000004E   0xD508             BPL.N    ??halRequestAdcData_3
   \   00000050   0xEB01 0x0344      ADD      R3,R1,R4, LSL #+1
   \   00000054   0x4050             EORS     R0,R0,R2
   \   00000056   0x899B             LDRH     R3,[R3, #+12]
   \   00000058   0xF8A8 0x3000      STRH     R3,[R8, #+0]
   \   0000005C   0x7088             STRB     R0,[R1, #+2]
   \   0000005E   0x2480             MOVS     R4,#+128
   \   00000060   0xE009             B.N      ??halRequestAdcData_4
   \                     ??halRequestAdcData_3: (+1)
   \   00000062   0x780A             LDRB     R2,[R1, #+0]
   \   00000064   0x4202             TST      R2,R0
   \   00000066   0xBF18             IT       NE 
   \   00000068   0x2482             MOVNE    R4,#+130
   \   0000006A   0xD104             BNE.N    ??halRequestAdcData_4
   \   0000006C   0x7848             LDRB     R0,[R1, #+1]
   \   0000006E   0x42A0             CMP      R0,R4
   \   00000070   0xBF0C             ITE      EQ 
   \   00000072   0x2481             MOVEQ    R4,#+129
   \   00000074   0x2484             MOVNE    R4,#+132
   \                     ??halRequestAdcData_4: (+1)
   \   00000076   0x4648             MOV      R0,R9
   \   00000078   0x.... 0x....      BL       _writeBasePri
    200            return stat;
   \   0000007C   0x4620             MOV      R0,R4
   \   0000007E   0xE8BD 0x83F2      POP      {R1,R4-R9,PC}    ;; return
    201          }
    202          

   \                                 In section .text, align 2, keep-with-next
    203          EmberStatus halReadAdcBlocking(ADCUser id, int16u *value)
    204          {
   \                     halReadAdcBlocking: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    205            EmberStatus stat;
    206          
    207            do {
    208              stat = halRequestAdcData(id, value);
   \                     ??halReadAdcBlocking_0: (+1)
   \   00000006   0x4629             MOV      R1,R5
   \   00000008   0x4620             MOV      R0,R4
   \   0000000A   0x.... 0x....      BL       halRequestAdcData
    209              if (stat == EMBER_ADC_NO_CONVERSION_PENDING)
   \   0000000E   0x2884             CMP      R0,#+132
   \   00000010   0xBF18             IT       NE 
    210                break;
    211            } while(stat != EMBER_ADC_CONVERSION_DONE);
   \   00000012   0x2880             CMPNE    R0,#+128
   \   00000014   0xD1F7             BNE.N    ??halReadAdcBlocking_0
    212            return stat;
   \   00000016   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    213          }
    214          

   \                                 In section .text, align 2, keep-with-next
    215          EmberStatus halAdcCalibrate(ADCUser id)
    216          {
   \                     halAdcCalibrate: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    217            EmberStatus stat;
    218          
    219            halStartAdcConversion(id,
    220                                  ADC_REF_INT,
    221                                  ADC_SOURCE_GND_VREF2,
    222                                  ADC_CONVERSION_TIME_US_4096);
   \   00000004   0x2307             MOVS     R3,#+7
   \   00000006   0x2289             MOVS     R2,#+137
   \   00000008   0x212A             MOVS     R1,#+42
   \   0000000A   0x.... 0x....      BL       halStartAdcConversion
    223            stat = halReadAdcBlocking(id, (int16u *)(&Nvss));
   \   0000000E   0x....             LDR.N    R5,??DataTable9
   \   00000010   0xF105 0x011C      ADD      R1,R5,#+28
   \   00000014   0x4620             MOV      R0,R4
   \   00000016   0x.... 0x....      BL       halReadAdcBlocking
    224            if (stat == EMBER_ADC_CONVERSION_DONE) {
   \   0000001A   0x2880             CMP      R0,#+128
   \   0000001C   0xD109             BNE.N    ??halAdcCalibrate_0
    225              halStartAdcConversion(id,
    226                                    ADC_REF_INT,
    227                                    ADC_SOURCE_VREG2_VREF2,
    228                                    ADC_CONVERSION_TIME_US_4096);
   \   0000001E   0x2307             MOVS     R3,#+7
   \   00000020   0x22B9             MOVS     R2,#+185
   \   00000022   0x212A             MOVS     R1,#+42
   \   00000024   0x4620             MOV      R0,R4
   \   00000026   0x.... 0x....      BL       halStartAdcConversion
    229              stat = halReadAdcBlocking(id, (int16u *)(&Nvdd));
   \   0000002A   0x1DA9             ADDS     R1,R5,#+6
   \   0000002C   0x4620             MOV      R0,R4
   \   0000002E   0x.... 0x....      BL       halReadAdcBlocking
    230            }
    231            if (stat == EMBER_ADC_CONVERSION_DONE) {
   \                     ??halAdcCalibrate_0: (+1)
   \   00000032   0x2880             CMP      R0,#+128
   \   00000034   0xD105             BNE.N    ??halAdcCalibrate_1
    232              Nvdd -= Nvss;
   \   00000036   0x88E9             LDRH     R1,[R5, #+6]
   \   00000038   0x8BAA             LDRH     R2,[R5, #+28]
   \   0000003A   0x1A89             SUBS     R1,R1,R2
   \   0000003C   0x80E9             STRH     R1,[R5, #+6]
    233              adcCalibrated = TRUE;
   \   0000003E   0x2101             MOVS     R1,#+1
   \   00000040   0xE001             B.N      ??halAdcCalibrate_2
    234            } else {
    235              adcCalibrated = FALSE;
   \                     ??halAdcCalibrate_1: (+1)
   \   00000042   0x2100             MOVS     R1,#+0
    236              stat = EMBER_ERR_FATAL;
   \   00000044   0x2001             MOVS     R0,#+1
   \                     ??halAdcCalibrate_2: (+1)
   \   00000046   0x70E9             STRB     R1,[R5, #+3]
    237            }
    238            return stat;
   \   00000048   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    239          }
    240          
    241          // Use the ratio of the sample reading to the of VDD_PADSA/2, a 'known'
    242          // value (nominally 900mV in normal mode, but slightly higher in boost mode)
    243          // to convert to 100uV units.
    244          // FIXME: support external Vref
    245          //        use #define of Vref, ignore VDD_PADSA
    246          
    247          
    248          
    249          

   \                                 In section .text, align 2, keep-with-next
    250          int16s halConvertValueToVolts(int16u value)
    251          {
   \                     halConvertValueToVolts: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    252            int32s N;
    253            int16s V;
    254            int32s nvalue;
    255          
    256            if (!adcCalibrated) {
   \   00000002   0x....             LDR.N    R5,??DataTable9
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x78E8             LDRB     R0,[R5, #+3]
   \   00000008   0xB908             CBNZ.N   R0,??halConvertValueToVolts_0
    257              halAdcCalibrate(ADC_USER_LQI);
   \   0000000A   0x.... 0x....      BL       halAdcCalibrate
    258            }
    259            if (adcCalibrated) {
   \                     ??halConvertValueToVolts_0: (+1)
   \   0000000E   0x78E8             LDRB     R0,[R5, #+3]
   \   00000010   0xB1D8             CBZ.N    R0,??halConvertValueToVolts_1
    260              assert(Nvdd);
   \   00000012   0xF9B5 0x0006      LDRSH    R0,[R5, #+6]
   \   00000016   0xB928             CBNZ.N   R0,??halConvertValueToVolts_2
   \   00000018   0x.... 0x....      ADR.W    R0,`?<Constant "adc.c">`
   \   0000001C   0xF44F 0x7182      MOV      R1,#+260
   \   00000020   0x.... 0x....      BL       halInternalAssertFailed
   \                     ??halConvertValueToVolts_2: (+1)
   \   00000024   0xF9B5 0x0006      LDRSH    R0,[R5, #+6]
   \   00000028   0xF9B5 0x101C      LDRSH    R1,[R5, #+28]
   \   0000002C   0xEB00 0x72D0      ADD      R2,R0,R0, LSR #+31
   \   00000030   0x1A61             SUBS     R1,R4,R1
   \   00000032   0x1052             ASRS     R2,R2,#+1
   \   00000034   0xEB02 0x4101      ADD      R1,R2,R1, LSL #+16
   \   00000038   0xFB91 0xF4F0      SDIV     R4,R1,R0
    261              nvalue = value - Nvss;
    262              // Convert input value (minus ground) to a fraction of VDD/2.
    263              N = ((nvalue << 16) + Nvdd/2) / Nvdd;
    264              // Calculate voltage with: V = (N * Vreg/2) / (2^16)
    265              // Mutiplying by Vreg/2*10 makes the result units of 100 uVolts
    266              // (in fixed point E-4 which allows for 13.5 bits vs millivolts
    267              // which is only 10.2 bits).
    268              V = (int16s)((N*((int32s)halInternalGetVreg())*5) >> 16);
   \   0000003C   0x.... 0x....      BL       halInternalGetVreg
   \   00000040   0x4360             MULS     R0,R0,R4
   \   00000042   0xEB00 0x0080      ADD      R0,R0,R0, LSL #+2
   \   00000046   0x1400             ASRS     R0,R0,#+16
   \   00000048   0xBD32             POP      {R1,R4,R5,PC}
    269            } else {
    270               V = -32768;
   \                     ??halConvertValueToVolts_1: (+1)
   \   0000004A   0x....             LDR.N    R0,??DataTable9_5  ;; 0xffff8000
    271            }
    272            return V;
   \   0000004C   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    273          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   0x........         DC32     adcPendingRequests

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_1:
   \   00000000   0x4000A810         DC32     0x4000a810

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_2:
   \   00000000   0x4000D004         DC32     0x4000d004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_3:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_4:
   \   00000000   0x4000A850         DC32     0x4000a850

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_5:
   \   00000000   0xFFFF8000         DC32     0xffff8000

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "adc.c">`:
   \   00000000   0x61 0x64          DC8 "adc.c"
   \              0x63 0x2E    
   \              0x63 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   halAdcCalibrate
        16   -> halReadAdcBlocking
        16   -> halStartAdcConversion
       0   halAdcGetClock
      16   halAdcIsr
       0   halAdcSetClock
      16   halConvertValueToVolts
        16   -> halAdcCalibrate
        16   -> halInternalAssertFailed
        16   -> halInternalGetVreg
       0   halInternalInitAdc
         0   -> emberCalibrateVref
      16   halReadAdcBlocking
        16   -> halRequestAdcData
      32   halRequestAdcData
        32   -> _basePriIsDisabled
        32   -> _disableBasePri
        32   -> _writeBasePri
        32   -> halAdcIsr
      16   halStartAdcConversion
        16   -> _disableBasePri
        16   -> _writeBasePri
        16   -> startNextConversion
      16   startNextConversion
        16   -> _disableBasePri
        16   -> _writeBasePri


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?<Constant "adc.c">
       4  ??DataTable9
       4  ??DataTable9_1
       4  ??DataTable9_2
       4  ??DataTable9_3
       4  ??DataTable9_4
       4  ??DataTable9_5
      30  adcPendingRequests
          adcPendingConversion
          adcReadingValid
          adcCalibrated
          adcData
          Nvdd
          adcStaticConfig
          adcReadings
          adcConfig
          Nvss
      74  halAdcCalibrate
      10  halAdcGetClock
     100  halAdcIsr
      22  halAdcSetClock
      78  halConvertValueToVolts
      76  halInternalInitAdc
      24  halReadAdcBlocking
     130  halRequestAdcData
      78  halStartAdcConversion
      86  startNextConversion

 
  30 bytes in section .bss
 710 bytes in section .text
 
 710 bytes of CODE memory
  30 bytes of DATA memory

Errors: none
Warnings: none
