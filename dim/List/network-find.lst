###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        22/Oct/2015  09:33:47
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\Zigbee\EmberZNet5.6.0-GA\app\framework\plugin\network-find\network-find.c
#    Command line =  
#        E:\Zigbee\EmberZNet5.6.0-GA\app\framework\plugin\network-find\network-find.c
#        -D DIMMER -D NULL_BTL -D CORTEXM3 -D CORTEXM3_EMBER_MICRO -D
#        CORTEXM3_EM357 -D PHY_EM3XX -D
#        "APPLICATION_TOKEN_HEADER=\"app/framework/util/tokens.h\"" -D
#        "ATTRIBUTE_STORAGE_CONFIGURATION=\"app/builder/ZigbeeRoute/ZigbeeRoute_endpoint_config.h\""
#        -D "BOARD_HEADER=\"app\builder\ZigbeeRoute\ZigbeeRoute_board.h\"" -D
#        "CONFIGURATION_HEADER=\"app/framework/util/config.h\"" -D
#        "GENERATED_TOKEN_HEADER=\"app/builder/ZigbeeRoute/ZigbeeRoute_tokens.h\""
#        -D "PLATFORM_HEADER=\"hal/micro/cortexm3/compiler/iar.h\"" -D
#        "ZA_GENERATED_HEADER=\"app/builder/ZigbeeRoute/ZigbeeRoute.h\"" -D
#        "__SOURCEFILE__=\"network-find.c\"" -lC
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\dim\List\
#        --diag_suppress Pa050 -o
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\dim\Obj\ --debug
#        --endian=little --cpu=Cortex-M3 --no_path_in_file_macros
#        --separate_cluster_for_initialized_variables -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\framework\plugin\network-find\ -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\ -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\ -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\app\framework\include\
#        -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\app\util\
#        -I E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\stack\
#        -I E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\hal\
#        -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\hal\..\
#        -Ohz --use_c++_inline
#    List file    =  
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\dim\List\network-find.lst
#    Object file  =  
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\dim\Obj\network-find.o
#
###############################################################################

E:\Zigbee\EmberZNet5.6.0-GA\app\framework\plugin\network-find\network-find.c
      1          // *****************************************************************************
      2          // * network-find.c
      3          // *
      4          // * Routines for finding and joining any viable network via scanning, rather
      5          // * than joining a specific network. 
      6          // *
      7          // * Copyright 2010 by Ember Corporation. All rights reserved.              *80*
      8          // *****************************************************************************
      9          
     10          #include "app/framework/include/af.h"
     11          #include "app/util/common/form-and-join.h"
     12          
     13          //------------------------------------------------------------------------------
     14          // Forward Declaration
     15          
     16          //------------------------------------------------------------------------------
     17          // Globals
     18          
     19          enum {
     20            NETWORK_FIND_NONE,
     21            NETWORK_FIND_FORM,
     22            NETWORK_FIND_JOIN,
     23            NETWORK_FIND_WAIT,
     24          };
     25          #if defined(EMBER_SCRIPTED_TEST)
     26            #define HIDDEN 
     27          #else
     28            #define HIDDEN static
     29          #endif
     30          

   \                                 In section .bss, align 4
     31          HIDDEN int8u state = NETWORK_FIND_NONE;
   \                     state:
   \   00000000                      DS8 1
   \   00000001                      DS8 3
     32          
     33          #if defined(EMBER_SCRIPTED_TEST)
     34            #define EMBER_AF_PLUGIN_NETWORK_FIND_DURATION 5
     35            extern int32u testFrameworkChannelMask;
     36            #define CHANNEL_MASK testFrameworkChannelMask
     37          
     38          #elif defined(EMBER_AF_PLUGIN_TEST_HARNESS)
     39            const int32u testHarnessOriginalChannelMask = EMBER_AF_PLUGIN_NETWORK_FIND_CHANNEL_MASK;
     40            int32u testHarnessChannelMask = EMBER_AF_PLUGIN_NETWORK_FIND_CHANNEL_MASK;
     41            #define CHANNEL_MASK testHarnessChannelMask
     42          
     43          #else
     44            #define CHANNEL_MASK EMBER_AF_PLUGIN_NETWORK_FIND_CHANNEL_MASK
     45          
     46          #endif
     47          
     48          #ifdef  EMBER_AF_PLUGIN_NETWORK_FIND_RADIO_TX_CALLBACK
     49            #define GET_RADIO_TX_POWER(channel) emberAfPluginNetworkFindGetRadioPowerForChannelCallback(channel)
     50          #else
     51            #define GET_RADIO_TX_POWER(channel) EMBER_AF_PLUGIN_NETWORK_FIND_RADIO_TX_POWER
     52          #endif
     53          
     54          static int8u extendedPanIds[EMBER_SUPPORTED_NETWORKS][EXTENDED_PAN_ID_SIZE];
     55          
     56          EmberEventControl emberAfPluginNetworkFindTickEventControl;
   \                     emberAfPluginNetworkFindTickEventControl:
   \   00000004                      DS8 8

   \                                 In section .bss, align 4
   \                     extendedPanIds:
   \   00000000                      DS8 8
     57          
     58          //------------------------------------------------------------------------------
     59          

   \                                 In section .text, align 2, keep-with-next
     60          void emberAfPluginNetworkFindInitCallback(void)
     61          {
   \                     emberAfPluginNetworkFindInitCallback: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
     62            int8u extendedPanId[EXTENDED_PAN_ID_SIZE] = EMBER_AF_PLUGIN_NETWORK_FIND_EXTENDED_PAN_ID;
   \   00000004   0xA800             ADD      R0,SP,#+0
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x2200             MOVS     R2,#+0
   \   0000000A   0xC006             STM      R0!,{R1,R2}
     63            int8u i;
     64            for (i = 0; i < EMBER_SUPPORTED_NETWORKS; i++) {
     65              MEMMOVE(extendedPanIds[i], extendedPanId, EXTENDED_PAN_ID_SIZE);
   \   0000000C   0x2208             MOVS     R2,#+8
   \   0000000E   0xA900             ADD      R1,SP,#+0
   \   00000010   0x....             LDR.N    R0,??DataTable8
   \   00000012   0x.... 0x....      BL       halCommonMemMove
     66            }
     67          }
   \   00000016   0xBD07             POP      {R0-R2,PC}       ;; return
     68          

   \                                 In section .text, align 2, keep-with-next
     69          void emberAfPluginFormAndJoinUnusedPanIdFoundCallback(EmberPanId panId, int8u channel)
   \                     emberAfPluginFormAndJoinUnusedPanIdFoundCallback: (+1)
   \   00000000   0xBF00             Nop      
     70          {
     71            emberAfUnusedPanIdFoundCallback(panId, channel);
   \   00000002                      REQUIRE emberAfUnusedPanIdFoundCallback
   \   00000002                      ;; // Fall through to label emberAfUnusedPanIdFoundCallback
     72          }
     73          

   \                                 In section .text, align 2, keep-with-next
     74          void emberAfUnusedPanIdFoundCallback(EmberPanId panId, int8u channel)
     75          {
   \                     emberAfUnusedPanIdFoundCallback: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
     76            EmberNetworkParameters networkParams;
     77            EmberStatus status;
     78          
     79            MEMSET(&networkParams, 0, sizeof(EmberNetworkParameters));
   \   00000008   0x.... 0x....      BL       ?Subroutine0
     80            emberAfGetFormAndJoinExtendedPanIdCallback(networkParams.extendedPanId);
   \                     ??CrossCallReturnLabel_1: (+1)
   \   0000000C   0xA800             ADD      R0,SP,#+0
   \   0000000E   0x.... 0x....      BL       emberAfGetFormAndJoinExtendedPanIdCallback
     81            networkParams.panId = panId;
     82            networkParams.radioChannel = channel;
     83            networkParams.radioTxPower = GET_RADIO_TX_POWER(channel);
   \   00000012   0x2008             MOVS     R0,#+8
   \   00000014   0xF88D 0x000A      STRB     R0,[SP, #+10]
   \   00000018   0xF8AD 0x4008      STRH     R4,[SP, #+8]
   \   0000001C   0xF88D 0x500B      STRB     R5,[SP, #+11]
     84          
     85            status = emberAfFormNetwork(&networkParams);
   \   00000020   0xA800             ADD      R0,SP,#+0
   \   00000022   0x.... 0x....      BL       emberAfFormNetwork
     86            if (status != EMBER_SUCCESS) {
   \   00000026   0xB108             CBZ.N    R0,??emberAfUnusedPanIdFoundCallback_0
     87              emberAfAppPrintln("%p error 0x%x %p", "Form", 
     88                                status,
     89                                "aborting");
     90              emberAfAppFlush();
     91              emberAfScanErrorCallback(status);
   \   00000028   0x.... 0x....      BL       emberAfScanErrorCallback
     92            }
     93          }
   \                     ??emberAfUnusedPanIdFoundCallback_0: (+1)
   \   0000002C   0xB007             ADD      SP,SP,#+28
   \   0000002E   0xBD30             POP      {R4,R5,PC}       ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0x2218             MOVS     R2,#+24
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0xA800             ADD      R0,SP,#+0
   \   00000006   0x.... 0x....      B.W      halCommonMemSet
     94          

   \                                 In section .text, align 2, keep-with-next
     95          void emberAfJoinableNetworkFoundCallback(EmberZigbeeNetwork *networkFound,
     96                                                   int8u lqi,
     97                                                   int8s rssi)
     98          {
   \                     emberAfJoinableNetworkFoundCallback: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
   \   00000004   0x4604             MOV      R4,R0
     99            EmberStatus status = EMBER_ERR_FATAL;
    100          
    101            // NOTE: It's not necessary to check the networkFound->extendedPanId here
    102            // because the form-and-join utilities ensure this handler is only called
    103            // when the beacon in the found network has the same EPID as what we asked
    104            // for when we initiated the scan.  If the scan was requested for the EPID of
    105            // all zeroes, that's a special case that means any network is OK.  Either
    106            // way we can trust that it's OK to try joining the network params found in
    107            // the beacon.
    108          
    109            if (emberAfPluginNetworkFindJoinCallback(networkFound, lqi, rssi)) {
   \   00000006   0x.... 0x....      BL       emberAfPluginNetworkFindJoinCallback
   \   0000000A   0xB198             CBZ.N    R0,??emberAfJoinableNetworkFoundCallback_0
    110              // Now construct the network parameters to join
    111              EmberNetworkParameters networkParams;
    112              MEMSET(&networkParams, 0, sizeof(EmberNetworkParameters));
   \   0000000C   0x.... 0x....      BL       ?Subroutine0
    113              MEMMOVE(networkParams.extendedPanId,
    114                      networkFound->extendedPanId,
    115                      EXTENDED_PAN_ID_SIZE);
   \                     ??CrossCallReturnLabel_0: (+1)
   \   00000010   0x2208             MOVS     R2,#+8
   \   00000012   0x1D21             ADDS     R1,R4,#+4
   \   00000014   0xA800             ADD      R0,SP,#+0
   \   00000016   0x.... 0x....      BL       halCommonMemMove
    116              networkParams.panId = networkFound->panId;
   \   0000001A   0x8820             LDRH     R0,[R4, #+0]
   \   0000001C   0xF8AD 0x0008      STRH     R0,[SP, #+8]
    117              networkParams.radioChannel = networkFound->channel;
   \   00000020   0x78A0             LDRB     R0,[R4, #+2]
   \   00000022   0xF88D 0x000B      STRB     R0,[SP, #+11]
    118              networkParams.radioTxPower = GET_RADIO_TX_POWER(networkFound->channel);
   \   00000026   0x2008             MOVS     R0,#+8
   \   00000028   0xF88D 0x000A      STRB     R0,[SP, #+10]
    119          
    120              emberAfAppPrintln("Nwk found, ch %d, panId 0x%2X, joining",
    121                                networkFound->channel,
    122                                networkFound->panId);
    123          
    124              status = emberAfJoinNetwork(&networkParams);
    125            }
    126          
    127            // Note that if the application wants to skip this network or if the join
    128            // fails, we can't continue the scan from here (by calling
    129            // emberScanForNextJoinableNetwork) because that's the function that called
    130            // this handler in the first place, and we don't want to recurse.
    131            if (status != EMBER_SUCCESS) {
   \   0000002C   0xA800             ADD      R0,SP,#+0
   \   0000002E   0x.... 0x....      BL       emberAfJoinNetwork
   \   00000032   0xB110             CBZ.N    R0,??emberAfJoinableNetworkFoundCallback_1
    132              emberAfAppPrintln("%p error 0x%x, %p", 
    133                                "Join", 
    134                                status,
    135                                "aborting");
    136              emberAfAppFlush();
    137              emberEventControlSetActive(emberAfPluginNetworkFindTickEventControl);
   \                     ??emberAfJoinableNetworkFoundCallback_0: (+1)
   \   00000034   0x....             LDR.N    R0,??DataTable8_1
   \   00000036   0x.... 0x....      BL       emEventControlSetActive
    138            }
    139          }
   \                     ??emberAfJoinableNetworkFoundCallback_1: (+1)
   \   0000003A   0xB006             ADD      SP,SP,#+24
   \   0000003C   0xBD10             POP      {R4,PC}          ;; return
    140          

   \                                 In section .text, align 2, keep-with-next
    141          void emberAfPluginFormAndJoinNetworkFoundCallback(EmberZigbeeNetwork *networkFound,
    142                                                            int8u lqi,
    143                                                            int8s rssi)
    144          {
    145            emberAfJoinableNetworkFoundCallback(networkFound, lqi, rssi);
   \                     emberAfPluginFormAndJoinNetworkFoundCallback: (+1)
   \   00000000   0x....             B.N      emberAfJoinableNetworkFoundCallback
    146          }
    147          

   \                                 In section .text, align 2, keep-with-next
    148          void emberAfPluginNetworkFindTickEventHandler(void)
    149          {
   \                     emberAfPluginNetworkFindTickEventHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    150            emberEventControlSetInactive(emberAfPluginNetworkFindTickEventControl);
   \   00000002   0x....             LDR.N    R0,??DataTable8_2
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x7101             STRB     R1,[R0, #+4]
    151            if (state == NETWORK_FIND_JOIN) {
   \   00000008   0x7801             LDRB     R1,[R0, #+0]
   \   0000000A   0x2902             CMP      R1,#+2
   \   0000000C   0xBF04             ITT      EQ 
    152              // If the tick fires while we're searching for a joinable network, it means
    153              // we need to keep searching.  This can happen if the join fails or if the
    154              // application decided to leave the network because it was the wrong
    155              // network.
    156              emberAfAppPrintln("Continue %p search", "joinable network");
    157              emberScanForNextJoinableNetwork();
   \   0000000E   0xE8BD 0x4001      POPEQ    {R0,LR}
   \   00000012   0x.... 0x....      BEQ.W    emberScanForNextJoinableNetwork
    158            } else {
    159              // In all other cases, we're done and can clean up.
    160              state = NETWORK_FIND_NONE;
   \   00000016   0x2100             MOVS     R1,#+0
   \   00000018   0x7001             STRB     R1,[R0, #+0]
    161              emberAfAppPrintln("Network find complete");
    162              emberFormAndJoinCleanup(EMBER_SUCCESS);
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x.... 0x....      BL       emberFormAndJoinCleanup
    163              emberAfPluginNetworkFindFinishedCallback(EMBER_SUCCESS);
   \   00000020   0xE8BD 0x4002      POP      {R1,LR}
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x.... 0x....      B.W      emberAfPluginNetworkFindFinishedCallback
    164            }
    165          }
    166          

   \                                 In section .text, align 2, keep-with-next
    167          void emberAfScanErrorCallback(EmberStatus status)
    168          {
    169            if (status == EMBER_NO_BEACONS) {
    170              emberAfCorePrintln("%p and join scan done", "Form");
    171            } else {
    172              emberAfCorePrintln("%p error 0x%x", "Scan", status);
    173            }
    174            emberAfCoreFlush();
    175            state = NETWORK_FIND_NONE;
   \                     emberAfScanErrorCallback: (+1)
   \   00000000   0x....             LDR.N    R2,??DataTable8_2
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x7011             STRB     R1,[R2, #+0]
    176            emberAfAppPrintln("%p (scan error).",
    177                              "Network find complete");
    178            emberAfPluginNetworkFindFinishedCallback(status);
   \   00000006   0x.... 0x....      B.W      emberAfPluginNetworkFindFinishedCallback
    179          }
    180          

   \                                 In section .text, align 2, keep-with-next
    181          EmberStatus emberAfFindUnusedPanIdAndFormCallback(void)
    182          {
    183            EmberStatus status = EMBER_INVALID_CALL;
    184          #ifdef EMBER_AF_HAS_COORDINATOR_NETWORK
    185            if (state != NETWORK_FIND_NONE) {
    186              emberAfAppPrintln("%pForm and join ongoing", "Error: ");
    187              return EMBER_INVALID_CALL;
    188            }
    189          
    190            status = emberScanForUnusedPanId(CHANNEL_MASK,
    191                                             EMBER_AF_PLUGIN_NETWORK_FIND_DURATION);
    192            if (status == EMBER_SUCCESS) {
    193              state = NETWORK_FIND_FORM;
    194            }
    195          #endif
    196            return status;
   \                     emberAfFindUnusedPanIdAndFormCallback: (+1)
   \   00000000   0x2070             MOVS     R0,#+112
   \   00000002   0x4770             BX       LR               ;; return
    197          }
    198          

   \                                 In section .text, align 2, keep-with-next
    199          EmberStatus emberAfStartSearchForJoinableNetworkCallback(void)
    200          {
   \                     emberAfStartSearchForJoinableNetworkCallback: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
    201            EmberStatus status;
    202            int8u extendedPanId[EXTENDED_PAN_ID_SIZE];
    203          
    204            if (state != NETWORK_FIND_NONE) {
   \   00000002   0x....             LDR.N    R4,??DataTable8_2
   \   00000004   0x7820             LDRB     R0,[R4, #+0]
   \   00000006   0xB108             CBZ.N    R0,??emberAfStartSearchForJoinableNetworkCallback_0
    205              emberAfAppPrintln("%pForm and join ongoing", "Error: ");
    206              return EMBER_INVALID_CALL;
   \   00000008   0x2070             MOVS     R0,#+112
   \   0000000A   0xBD16             POP      {R1,R2,R4,PC}
    207            }
    208          
    209            emberAfAppPrint("Search for %p\nChannels: ", "joinable network");
    210            emberAfAppDebugExec(emberAfPrintChannelListFromMask(CHANNEL_MASK));
    211            emberAfAppPrintln("");
    212          
    213            emberAfGetFormAndJoinExtendedPanIdCallback(extendedPanId);
   \                     ??emberAfStartSearchForJoinableNetworkCallback_0: (+1)
   \   0000000C   0xA800             ADD      R0,SP,#+0
   \   0000000E   0x.... 0x....      BL       emberAfGetFormAndJoinExtendedPanIdCallback
    214            status = emberScanForJoinableNetwork(CHANNEL_MASK, extendedPanId);
   \   00000012   0x....             LDR.N    R0,??DataTable8_3  ;; 0x100c800
   \   00000014   0xA900             ADD      R1,SP,#+0
   \   00000016   0x.... 0x....      BL       emberScanForJoinableNetwork
    215            if (status == EMBER_SUCCESS) {
   \   0000001A   0xB908             CBNZ.N   R0,??emberAfStartSearchForJoinableNetworkCallback_1
    216              state = NETWORK_FIND_JOIN;
   \   0000001C   0x2102             MOVS     R1,#+2
   \   0000001E   0x7021             STRB     R1,[R4, #+0]
    217            }
    218            return status;
   \                     ??emberAfStartSearchForJoinableNetworkCallback_1: (+1)
   \   00000020   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    219          }
    220          

   \                                 In section .text, align 2, keep-with-next
    221          void emberAfPluginNetworkFindStackStatusCallback(EmberStatus status)
    222          {
    223            int8u delayMinutes = MAX_INT8U_VALUE;
    224            if (status == EMBER_NETWORK_UP) {
   \                     emberAfPluginNetworkFindStackStatusCallback: (+1)
   \   00000000   0x....             LDR.N    R2,??DataTable8_2
   \   00000002   0x7811             LDRB     R1,[R2, #+0]
   \   00000004   0x2890             CMP      R0,#+144
   \   00000006   0xD10A             BNE.N    ??emberAfPluginNetworkFindStackStatusCallback_0
    225              // If we had been searching for an unused network so that we could form,
    226              // we're done.  If we were searching for a joinable network and have
    227              // successfully joined, we give the application some time to determine if
    228              // this is the correct network.  If so, we'll eventually time out and clean
    229              // up the state machine.  If not, the application will tell the stack to
    230              // leave, we'll get an EMBER_NETWORK_DOWN, and we'll continue searching.
    231              if (state == NETWORK_FIND_FORM) {
   \   00000008   0x2901             CMP      R1,#+1
   \   0000000A   0xD00C             BEQ.N    ??emberAfPluginNetworkFindStackStatusCallback_1
    232                delayMinutes = 0;
    233              } else if (state == NETWORK_FIND_JOIN) {
   \   0000000C   0x2902             CMP      R1,#+2
   \   0000000E   0xD10B             BNE.N    ??emberAfPluginNetworkFindStackStatusCallback_2
    234                state = NETWORK_FIND_WAIT;
   \   00000010   0x2003             MOVS     R0,#+3
   \   00000012   0x7010             STRB     R0,[R2, #+0]
    235                delayMinutes = EMBER_AF_PLUGIN_NETWORK_FIND_JOINABLE_SCAN_TIMEOUT_MINUTES;
    236              }
    237            } else if (NETWORK_FIND_JOIN <= state) {
    238              // If we get something other than EMBER_NETWORK_UP while trying to join or
    239              // while waiting for the application to determine if this is the right
    240              // network, we need to continue searching for a joinable network.
    241              state = NETWORK_FIND_JOIN;
    242              delayMinutes = 0;
    243            }
    244          
    245            if (delayMinutes == 0) {
    246              emberAfPluginNetworkFindTickEventHandler();
    247            } else if (delayMinutes != MAX_INT8U_VALUE) {
    248              emberEventControlSetDelayMinutes(emberAfPluginNetworkFindTickEventControl,
    249                                               delayMinutes);
   \   00000014   0xF44F 0x3140      MOV      R1,#+196608
   \   00000018   0x1D10             ADDS     R0,R2,#+4
   \   0000001A   0x.... 0x....      B.W      emEventControlSetDelayMS
    250            }
   \                     ??emberAfPluginNetworkFindStackStatusCallback_0: (+1)
   \   0000001E   0x2902             CMP      R1,#+2
   \   00000020   0xDB02             BLT.N    ??emberAfPluginNetworkFindStackStatusCallback_2
   \   00000022   0x2002             MOVS     R0,#+2
   \   00000024   0x7010             STRB     R0,[R2, #+0]
   \                     ??emberAfPluginNetworkFindStackStatusCallback_1: (+1)
   \   00000026   0x....             B.N      emberAfPluginNetworkFindTickEventHandler
    251          }
   \                     ??emberAfPluginNetworkFindStackStatusCallback_2: (+1)
   \   00000028   0x4770             BX       LR               ;; return
    252          

   \                                 In section .text, align 2, keep-with-next
    253          void emberAfGetFormAndJoinExtendedPanIdCallback(int8u *resultLocation)
    254          {
   \                     emberAfGetFormAndJoinExtendedPanIdCallback: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    255            int8u networkIndex = emberGetCurrentNetwork();
   \   00000004   0x.... 0x....      BL       emberGetCurrentNetwork
    256            MEMMOVE(resultLocation, extendedPanIds[networkIndex], EXTENDED_PAN_ID_SIZE);
   \   00000008   0x....             LDR.N    R1,??DataTable8
   \   0000000A   0xEB01 0x01C0      ADD      R1,R1,R0, LSL #+3
   \   0000000E   0x4620             MOV      R0,R4
   \   00000010   0xE8BD 0x4010      POP      {R4,LR}
   \   00000014   0x2208             MOVS     R2,#+8
   \   00000016   0x.... 0x....      B.W      halCommonMemMove
    257          }
    258          

   \                                 In section .text, align 2, keep-with-next
    259          void emberAfSetFormAndJoinExtendedPanIdCallback(const int8u *extendedPanId)
    260          {
   \                     emberAfSetFormAndJoinExtendedPanIdCallback: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    261            int8u networkIndex = emberGetCurrentNetwork();
   \   00000004   0x.... 0x....      BL       emberGetCurrentNetwork
    262            MEMMOVE(extendedPanIds[networkIndex], extendedPanId, EXTENDED_PAN_ID_SIZE);
   \   00000008   0x4621             MOV      R1,R4
   \   0000000A   0xE8BD 0x4010      POP      {R4,LR}
   \   0000000E   0x....             LDR.N    R3,??DataTable8
   \   00000010   0x2208             MOVS     R2,#+8
   \   00000012   0xEB03 0x00C0      ADD      R0,R3,R0, LSL #+3
   \   00000016   0x.... 0x....      B.W      halCommonMemMove
    263          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   0x........         DC32     extendedPanIds

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \   00000000   0x........         DC32     state+0x4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_2:
   \   00000000   0x........         DC32     state

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_3:
   \   00000000   0x0100C800         DC32     0x100c800

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant {0, 0, 0, 0, 0, 0, 0, 0}>`:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   emberAfFindUnusedPanIdAndFormCallback
       8   emberAfGetFormAndJoinExtendedPanIdCallback
         8   -> emberGetCurrentNetwork
         0   -> halCommonMemMove
      32   emberAfJoinableNetworkFoundCallback
        32   -> emEventControlSetActive
        32   -> emberAfJoinNetwork
        32   -> emberAfPluginNetworkFindJoinCallback
        32   -> halCommonMemMove
        32   -> halCommonMemSet
       0   emberAfPluginFormAndJoinNetworkFoundCallback
         0   -> emberAfJoinableNetworkFoundCallback
       0   emberAfPluginFormAndJoinUnusedPanIdFoundCallback
         0   -> emberAfUnusedPanIdFoundCallback
      16   emberAfPluginNetworkFindInitCallback
        16   -> halCommonMemMove
       0   emberAfPluginNetworkFindStackStatusCallback
         0   -> emEventControlSetDelayMS
         0   -> emberAfPluginNetworkFindTickEventHandler
       8   emberAfPluginNetworkFindTickEventHandler
         0   -> emberAfPluginNetworkFindFinishedCallback
         8   -> emberFormAndJoinCleanup
         8   -> emberScanForNextJoinableNetwork
       0   emberAfScanErrorCallback
         0   -> emberAfPluginNetworkFindFinishedCallback
       8   emberAfSetFormAndJoinExtendedPanIdCallback
         8   -> emberGetCurrentNetwork
         0   -> halCommonMemMove
      16   emberAfStartSearchForJoinableNetworkCallback
        16   -> emberAfGetFormAndJoinExtendedPanIdCallback
        16   -> emberScanForJoinableNetwork
      40   emberAfUnusedPanIdFoundCallback
        40   -> emberAfFormNetwork
        40   -> emberAfGetFormAndJoinExtendedPanIdCallback
        40   -> emberAfScanErrorCallback
        40   -> halCommonMemSet


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?<Constant {0, 0, 0, 0, 0, 0, 0, 0}>
       4  ??DataTable8
       4  ??DataTable8_1
       4  ??DataTable8_2
       4  ??DataTable8_3
      10  ?Subroutine0
       4  emberAfFindUnusedPanIdAndFormCallback
      26  emberAfGetFormAndJoinExtendedPanIdCallback
      62  emberAfJoinableNetworkFoundCallback
       2  emberAfPluginFormAndJoinNetworkFoundCallback
       2  emberAfPluginFormAndJoinUnusedPanIdFoundCallback
      24  emberAfPluginNetworkFindInitCallback
      42  emberAfPluginNetworkFindStackStatusCallback
      42  emberAfPluginNetworkFindTickEventHandler
      10  emberAfScanErrorCallback
      26  emberAfSetFormAndJoinExtendedPanIdCallback
      34  emberAfStartSearchForJoinableNetworkCallback
      48  emberAfUnusedPanIdFoundCallback
       8  extendedPanIds
      12  state
          emberAfPluginNetworkFindTickEventControl

 
  20 bytes in section .bss
   8 bytes in section .rodata
 348 bytes in section .text
 
 348 bytes of CODE  memory
   8 bytes of CONST memory
  20 bytes of DATA  memory

Errors: none
Warnings: none
