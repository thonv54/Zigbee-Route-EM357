###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        22/Oct/2015  09:33:07
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\Zigbee\EmberZNet5.6.0-GA\app\framework\plugin\counters\counters-soc.c
#    Command line =  
#        E:\Zigbee\EmberZNet5.6.0-GA\app\framework\plugin\counters\counters-soc.c
#        -D DIMMER -D NULL_BTL -D CORTEXM3 -D CORTEXM3_EMBER_MICRO -D
#        CORTEXM3_EM357 -D PHY_EM3XX -D
#        "APPLICATION_TOKEN_HEADER=\"app/framework/util/tokens.h\"" -D
#        "ATTRIBUTE_STORAGE_CONFIGURATION=\"app/builder/ZigbeeRoute/ZigbeeRoute_endpoint_config.h\""
#        -D "BOARD_HEADER=\"app\builder\ZigbeeRoute\ZigbeeRoute_board.h\"" -D
#        "CONFIGURATION_HEADER=\"app/framework/util/config.h\"" -D
#        "GENERATED_TOKEN_HEADER=\"app/builder/ZigbeeRoute/ZigbeeRoute_tokens.h\""
#        -D "PLATFORM_HEADER=\"hal/micro/cortexm3/compiler/iar.h\"" -D
#        "ZA_GENERATED_HEADER=\"app/builder/ZigbeeRoute/ZigbeeRoute.h\"" -D
#        "__SOURCEFILE__=\"counters-soc.c\"" -lC
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\dim\List\
#        --diag_suppress Pa050 -o
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\dim\Obj\ --debug
#        --endian=little --cpu=Cortex-M3 --no_path_in_file_macros
#        --separate_cluster_for_initialized_variables -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\framework\plugin\counters\ -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\ -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\ -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\app\framework\include\
#        -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\app\util\
#        -I E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\stack\
#        -I E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\hal\
#        -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\hal\..\
#        -Ohz --use_c++_inline
#    List file    =  
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\dim\List\counters-soc.lst
#    Object file  =  
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\dim\Obj\counters-soc.o
#
###############################################################################

E:\Zigbee\EmberZNet5.6.0-GA\app\framework\plugin\counters\counters-soc.c
      1          // File: counters-soc.c
      2          //
      3          // Description: implements emberCounterHandler() and keeps a tally
      4          // of the events reported by the stack.  The application must define
      5          // EMBER_APPLICATION_HAS_COUNTER_HANDLER in its configuration header
      6          // to use this file.
      7          //
      8          // Copyright 2013 by Ember Corporation. All rights reserved.                *80*
      9          
     10          #include "app/framework/include/af.h"
     11          #include "app/util/serial/command-interpreter2.h"
     12          #include "app/util/common/common.h"
     13          #include "counters.h"
     14          #include "counters-ota.h"
     15          

   \                                 In section .bss, align 4
     16          int16u emberCounters[EMBER_COUNTER_TYPE_COUNT];
   \                     emberCounters:
   \   00000000                      DS8 68

   \                                 In section .bss, align 4
     17          int16u emberCountersThresholds[EMBER_COUNTER_TYPE_COUNT];
   \                     emberCountersThresholds:
   \   00000000                      DS8 68

   \                                 In section .bss, align 4
     18          int16u emberMultiNetworkCounters[EMBER_SUPPORTED_NETWORKS]
   \                     emberMultiNetworkCounters:
   \   00000000                      DS8 36
     19                                          [MULTI_NETWORK_COUNTER_TYPE_COUNT];
     20          static int8u getMultiNetworkCounterIndex(EmberCounterType type);
     21          static void multiNetworkCounterHandler(EmberCounterType type, int8u data);
     22          

   \                                 In section .text, align 2, keep-with-next
     23          void emberAfPluginCountersInitCallback(void)
     24          {
   \                     emberAfPluginCountersInitCallback: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     25            emberAfPluginCountersClear();
   \   00000002   0x.... 0x....      BL       emberAfPluginCountersClear
     26            emberAfPluginCountersResetThresholds();
   \   00000006   0xE8BD 0x4001      POP      {R0,LR}
   \   0000000A   0x....             B.N      emberAfPluginCountersResetThresholds
     27          }
     28           
     29          // Implement the stack callback by simply tallying up the counts.

   \                                 In section .text, align 2, keep-with-next
     30          void emberCounterHandler(EmberCounterType type, int8u data)
     31          {
   \                     emberCounterHandler: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
     32            //To ensure that we call the counter rollover handler exactly once.
     33            boolean hasCounterExceededThreshold;
     34          
     35            if(emberCounters[type] < emberCountersThresholds[type])
   \   00000004   0x....             LDR.N    R7,??DataTable6
   \   00000006   0x....             LDR.N    R2,??DataTable6_1
   \   00000008   0xF832 0x6010      LDRH     R6,[R2, R0, LSL #+1]
   \   0000000C   0x460D             MOV      R5,R1
   \   0000000E   0xF837 0x1010      LDRH     R1,[R7, R0, LSL #+1]
   \   00000012   0x428E             CMP      R6,R1
   \   00000014   0x419B             SBCS     R3,R3,R3
   \   00000016   0x43DB             MVNS     R3,R3
   \   00000018   0x0FDB             LSRS     R3,R3,#+31
     36              hasCounterExceededThreshold = FALSE;
     37            else
     38              hasCounterExceededThreshold = TRUE;
     39          
     40            if (emberCounters[type] < 0xFFFF)
   \   0000001A   0xF64F 0x74FF      MOVW     R4,#+65535
   \   0000001E   0x4680             MOV      R8,R0
   \   00000020   0x42A6             CMP      R6,R4
   \   00000022   0xBF1C             ITT      NE 
     41              emberCounters[type] += 1;
   \   00000024   0x1C76             ADDNE    R6,R6,#+1
   \   00000026   0xF822 0x6010      STRHNE   R6,[R2, R0, LSL #+1]
     42          
     43            if (EMBER_COUNTER_MAC_TX_UNICAST_SUCCESS == type
     44                || EMBER_COUNTER_MAC_TX_UNICAST_FAILED == type){
   \   0000002A   0x2803             CMP      R0,#+3
   \   0000002C   0xBF18             IT       NE 
   \   0000002E   0x2805             CMPNE    R0,#+5
   \   00000030   0xD107             BNE.N    ??emberCounterHandler_0
     45              if((emberCounters[EMBER_COUNTER_MAC_TX_UNICAST_RETRY] + data)
     46                < emberCountersThresholds[EMBER_COUNTER_MAC_TX_UNICAST_RETRY])
   \   00000032   0x8914             LDRH     R4,[R2, #+8]
   \   00000034   0x893F             LDRH     R7,[R7, #+8]
   \   00000036   0x192E             ADDS     R6,R5,R4
   \   00000038   0x42BE             CMP      R6,R7
   \   0000003A   0xBFAC             ITE      GE 
     47                emberCounters[EMBER_COUNTER_MAC_TX_UNICAST_RETRY] += data;
     48              else
     49                emberCounters[EMBER_COUNTER_MAC_TX_UNICAST_RETRY] = 
     50                  emberCountersThresholds[EMBER_COUNTER_MAC_TX_UNICAST_RETRY];
   \   0000003C   0x8117             STRHGE   R7,[R2, #+8]
   \   0000003E   0x8116             STRHLT   R6,[R2, #+8]
   \   00000040   0xE018             B.N      ??emberCounterHandler_1
     51            }
     52            else if (EMBER_COUNTER_APS_DATA_TX_UNICAST_SUCCESS == type
     53                     || EMBER_COUNTER_APS_DATA_TX_UNICAST_FAILED == type){
   \                     ??emberCounterHandler_0: (+1)
   \   00000042   0x8ABE             LDRH     R6,[R7, #+20]
   \   00000044   0x2809             CMP      R0,#+9
   \   00000046   0xBF18             IT       NE 
   \   00000048   0x280B             CMPNE    R0,#+11
   \   0000004A   0xD105             BNE.N    ??emberCounterHandler_2
     54              if((emberCounters[EMBER_COUNTER_APS_DATA_TX_UNICAST_RETRY] + data) 
     55                < emberCountersThresholds[EMBER_COUNTER_APS_DATA_TX_UNICAST_RETRY])
   \   0000004C   0x8A97             LDRH     R7,[R2, #+20]
   \   0000004E   0x19EC             ADDS     R4,R5,R7
   \   00000050   0x42B4             CMP      R4,R6
   \   00000052   0xDA0E             BGE.N    ??emberCounterHandler_3
     56                emberCounters[EMBER_COUNTER_APS_DATA_TX_UNICAST_RETRY] += data;
   \   00000054   0x19EE             ADDS     R6,R5,R7
   \   00000056   0xE00C             B.N      ??emberCounterHandler_3
     57              else
     58                emberCounters[EMBER_COUNTER_APS_DATA_TX_UNICAST_RETRY] = 
     59                  emberCountersThresholds[EMBER_COUNTER_APS_DATA_TX_UNICAST_RETRY];
     60            }    
     61            else if (EMBER_COUNTER_PHY_TO_MAC_QUEUE_LIMIT_REACHED == type) {
   \                     ??emberCounterHandler_2: (+1)
   \   00000058   0x281D             CMP      R0,#+29
   \   0000005A   0xD10B             BNE.N    ??emberCounterHandler_1
     62              if((emberCounters[EMBER_COUNTER_PHY_TO_MAC_QUEUE_LIMIT_REACHED] + data) 
     63                 < emberCountersThresholds[EMBER_COUNTER_PHY_TO_MAC_QUEUE_LIMIT_REACHED])
   \   0000005C   0x8F54             LDRH     R4,[R2, #+58]
   \   0000005E   0x8F7F             LDRH     R7,[R7, #+58]
   \   00000060   0x442C             ADD      R4,R5,R4
   \   00000062   0x42BC             CMP      R4,R7
   \   00000064   0xDA05             BGE.N    ??emberCounterHandler_3
     64                emberCounters[type] += data;
   \   00000066   0xF832 0x7010      LDRH     R7,[R2, R0, LSL #+1]
   \   0000006A   0x19EE             ADDS     R6,R5,R7
   \   0000006C   0xF822 0x6010      STRH     R6,[R2, R0, LSL #+1]
   \   00000070   0xE000             B.N      ??emberCounterHandler_1
     65              else
     66                emberCounters[EMBER_COUNTER_APS_DATA_TX_UNICAST_RETRY] =
     67                  emberCountersThresholds[EMBER_COUNTER_APS_DATA_TX_UNICAST_RETRY];
   \                     ??emberCounterHandler_3: (+1)
   \   00000072   0x8296             STRH     R6,[R2, #+20]
     68            }
     69          
     70            if(emberCounters[type]>=emberCountersThresholds[type]){
   \                     ??emberCounterHandler_1: (+1)
   \   00000074   0xF832 0x0010      LDRH     R0,[R2, R0, LSL #+1]
   \   00000078   0x4288             CMP      R0,R1
   \   0000007A   0xD303             BCC.N    ??emberCounterHandler_4
     71              if(!hasCounterExceededThreshold){
   \   0000007C   0xB913             CBNZ.N   R3,??emberCounterHandler_4
     72                emberAfPluginCountersRolloverCallback(type);
   \   0000007E   0x4640             MOV      R0,R8
   \   00000080   0x.... 0x....      BL       emberAfPluginCountersRolloverCallback
     73                hasCounterExceededThreshold = TRUE;
     74              }
     75            }
     76          
     77            multiNetworkCounterHandler(type, data);
   \                     ??emberCounterHandler_4: (+1)
   \   00000084   0x4629             MOV      R1,R5
   \   00000086   0x4640             MOV      R0,R8
   \   00000088   0xE8BD 0x41F0      POP      {R4-R8,LR}
   \   0000008C   0x....             B.N      multiNetworkCounterHandler
     78          }
     79          

   \                                 In section .text, align 2, keep-with-next
     80          void emberAfPluginCountersClear(void)
     81          {
     82            MEMSET(emberCounters, 0, sizeof(emberCounters));
   \                     emberAfPluginCountersClear: (+1)
   \   00000000   0x2242             MOVS     R2,#+66
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x....             LDR.N    R0,??DataTable6_1
   \   00000006   0x.... 0x....      B.W      halCommonMemSet
     83          }
     84          

   \                                 In section .text, align 2, keep-with-next
     85          void emberAfPluginCountersResetThresholds(void)
     86          {
     87            MEMSET(emberCountersThresholds,0xFF,sizeof(emberCountersThresholds));  
   \                     emberAfPluginCountersResetThresholds: (+1)
   \   00000000   0x2242             MOVS     R2,#+66
   \   00000002   0x21FF             MOVS     R1,#+255
   \   00000004   0x....             LDR.N    R0,??DataTable6
   \   00000006   0x.... 0x....      B.W      halCommonMemSet
     88          }
     89          

   \                                 In section .text, align 2, keep-with-next
     90          void emberAfPluginCountersSetThreshold(EmberCounterType type, int16u threshold)
     91          {
     92            emberCountersThresholds[type] = threshold;
   \                     emberAfPluginCountersSetThreshold: (+1)
   \   00000000   0x....             LDR.N    R2,??DataTable6
   \   00000002   0xF822 0x1010      STRH     R1,[R2, R0, LSL #+1]
     93          }
   \   00000006   0x4770             BX       LR               ;; return
     94          
     95          /*******************************************************************************
     96           * Multi-network counters support
     97           *
     98           * Some of the counters are per-network. Some of them are implicitly not
     99           * per-network because of the limited multi-network support. i.e., a node can be
    100           * coordinator/router/end device on just one network. The per-network counters
    101           * are defined in a table. The per-network counters are stored in a separate
    102           * two-dimensional array. We keep writing the multi-network counters also in the
    103           * usual single-network counters array.
    104           ******************************************************************************/
    105          extern int8u emSupportedNetworks;
    106          

   \                                 In section .text, align 4, keep-with-next
    107          static PGM EmberCounterType multiNetworkCounterTable[] = {
   \                     multiNetworkCounterTable:
   \   00000000   0x00 0x01          DC8 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 21, 22, 24, 25, 26, 0, 0, 0
   \              0x02 0x03    
   \              0x04 0x05    
   \              0x06 0x07    
   \              0x08 0x09    
   \              0x0A 0x0B    
   \              0x15 0x16    
   \              0x18 0x19    
   \              0x1A 0x00    
   \              0x00 0x00    
    108              EMBER_COUNTER_MAC_RX_BROADCAST,
    109              EMBER_COUNTER_MAC_TX_BROADCAST,
    110              EMBER_COUNTER_MAC_RX_UNICAST,
    111              EMBER_COUNTER_MAC_TX_UNICAST_SUCCESS,
    112              EMBER_COUNTER_MAC_TX_UNICAST_RETRY,
    113              EMBER_COUNTER_MAC_TX_UNICAST_FAILED,
    114              EMBER_COUNTER_APS_DATA_RX_BROADCAST,
    115              EMBER_COUNTER_APS_DATA_TX_BROADCAST,
    116              EMBER_COUNTER_APS_DATA_RX_UNICAST,
    117              EMBER_COUNTER_APS_DATA_TX_UNICAST_SUCCESS,
    118              EMBER_COUNTER_APS_DATA_TX_UNICAST_RETRY,
    119              EMBER_COUNTER_APS_DATA_TX_UNICAST_FAILED,
    120              EMBER_COUNTER_NWK_FRAME_COUNTER_FAILURE,
    121              EMBER_COUNTER_APS_FRAME_COUNTER_FAILURE,
    122              EMBER_COUNTER_APS_LINK_KEY_NOT_AUTHORIZED,
    123              EMBER_COUNTER_NWK_DECRYPTION_FAILURE,
    124              EMBER_COUNTER_APS_DECRYPTION_FAILURE,
    125          };
    126          
    127          static int8u getMultiNetworkCounterIndex(EmberCounterType type)
    128          {
    129            int8u i;
    130            for(i=0; i<MULTI_NETWORK_COUNTER_TYPE_COUNT; i++) {
    131              if (multiNetworkCounterTable[i] == type)
    132                return i;
    133            }
    134            return 0xFF;
    135          }
    136          

   \                                 In section .text, align 2, keep-with-next
    137          static void multiNetworkCounterHandler(EmberCounterType type, int8u data)
    138          {
   \                     multiNetworkCounterHandler: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    139            int8u counterIndex = getMultiNetworkCounterIndex(type);
   \   00000006   0x2600             MOVS     R6,#+0
   \   00000008   0x.... 0x....      ADR.W    R0,multiNetworkCounterTable
   \                     ??multiNetworkCounterHandler_0: (+1)
   \   0000000C   0x5C31             LDRB     R1,[R6, R0]
   \   0000000E   0x42A1             CMP      R1,R4
   \   00000010   0xD004             BEQ.N    ??multiNetworkCounterHandler_1
   \   00000012   0x1C76             ADDS     R6,R6,#+1
   \   00000014   0xB2F6             UXTB     R6,R6
   \   00000016   0x2E11             CMP      R6,#+17
   \   00000018   0xDBF8             BLT.N    ??multiNetworkCounterHandler_0
   \   0000001A   0xBDF1             POP      {R0,R4-R7,PC}
    140          
    141            // This function is always called in a callback context emberCounterHandler().
    142            // Not a multi-network counter, nothing to do.
    143            if (counterIndex == 0xFF)
   \                     ??multiNetworkCounterHandler_1: (+1)
   \   0000001C   0x2EFF             CMP      R6,#+255
   \   0000001E   0xD027             BEQ.N    ??multiNetworkCounterHandler_2
    144              return;
    145          
    146            int8u nwkIndex = emberGetCallbackNetwork();
   \   00000020   0x.... 0x....      BL       emberGetCallbackNetwork
   \   00000024   0x4607             MOV      R7,R0
    147            assert(nwkIndex < emSupportedNetworks);
   \   00000026   0x....             LDR.N    R0,??DataTable6_2
   \   00000028   0x7800             LDRB     R0,[R0, #+0]
   \   0000002A   0x4287             CMP      R7,R0
   \   0000002C   0xDB04             BLT.N    ??multiNetworkCounterHandler_3
   \   0000002E   0x2193             MOVS     R1,#+147
   \   00000030   0x.... 0x....      ADR.W    R0,`?<Constant "counters-soc.c">`
   \   00000034   0x.... 0x....      BL       halInternalAssertFailed
    148          
    149            if (emberMultiNetworkCounters[nwkIndex][counterIndex] < 0xFFFF)
   \                     ??multiNetworkCounterHandler_3: (+1)
   \   00000038   0x....             LDR.N    R1,??DataTable6_3
   \   0000003A   0x2022             MOVS     R0,#+34
   \   0000003C   0xFB00 0x1007      MLA      R0,R0,R7,R1
   \   00000040   0xF64F 0x72FF      MOVW     R2,#+65535
   \   00000044   0xF830 0x1016      LDRH     R1,[R0, R6, LSL #+1]
   \   00000048   0x4291             CMP      R1,R2
   \   0000004A   0xBF1C             ITT      NE 
    150              emberMultiNetworkCounters[nwkIndex][counterIndex] += 1;
   \   0000004C   0x1C49             ADDNE    R1,R1,#+1
   \   0000004E   0xF820 0x1016      STRHNE   R1,[R0, R6, LSL #+1]
    151          
    152            if (EMBER_COUNTER_MAC_TX_UNICAST_SUCCESS == type
    153                 || EMBER_COUNTER_MAC_TX_UNICAST_FAILED == type)
   \   00000052   0x2C03             CMP      R4,#+3
   \   00000054   0xBF18             IT       NE 
   \   00000056   0x2C05             CMPNE    R4,#+5
   \   00000058   0xD103             BNE.N    ??multiNetworkCounterHandler_4
    154              emberMultiNetworkCounters[nwkIndex][EMBER_COUNTER_MAC_TX_UNICAST_RETRY]
    155                                                  += data;
   \   0000005A   0x8901             LDRH     R1,[R0, #+8]
   \   0000005C   0x1869             ADDS     R1,R5,R1
   \   0000005E   0x8101             STRH     R1,[R0, #+8]
   \   00000060   0xBDF1             POP      {R0,R4-R7,PC}
    156            else if (EMBER_COUNTER_APS_DATA_TX_UNICAST_SUCCESS == type
    157                || EMBER_COUNTER_APS_DATA_TX_UNICAST_FAILED == type) {
   \                     ??multiNetworkCounterHandler_4: (+1)
   \   00000062   0x2C09             CMP      R4,#+9
   \   00000064   0xBF18             IT       NE 
   \   00000066   0x2C0B             CMPNE    R4,#+11
   \   00000068   0xD102             BNE.N    ??multiNetworkCounterHandler_2
    158              emberMultiNetworkCounters[nwkIndex][EMBER_COUNTER_APS_DATA_TX_UNICAST_RETRY]
    159                                                  += data;
   \   0000006A   0x8A81             LDRH     R1,[R0, #+20]
   \   0000006C   0x1869             ADDS     R1,R5,R1
   \   0000006E   0x8281             STRH     R1,[R0, #+20]
    160            }
    161          }
   \                     ??multiNetworkCounterHandler_2: (+1)
   \   00000070   0xBDF1             POP      {R0,R4-R7,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x........         DC32     emberCountersThresholds

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0x........         DC32     emberCounters

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   0x........         DC32     emSupportedNetworks

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \   00000000   0x........         DC32     emberMultiNetworkCounters

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "counters-soc.c">`:
   \   00000000   0x63 0x6F          DC8 "counters-soc.c"
   \              0x75 0x6E    
   \              0x74 0x65    
   \              0x72 0x73    
   \              0x2D 0x73    
   \              0x6F 0x63    
   \              0x2E 0x63    
   \              0x00         
   \   0000000F   0x00               DC8 0
    162          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   emberAfPluginCountersClear
         0   -> halCommonMemSet
       8   emberAfPluginCountersInitCallback
         8   -> emberAfPluginCountersClear
         0   -> emberAfPluginCountersResetThresholds
       0   emberAfPluginCountersResetThresholds
         0   -> halCommonMemSet
       0   emberAfPluginCountersSetThreshold
      24   emberCounterHandler
        24   -> emberAfPluginCountersRolloverCallback
         0   -> multiNetworkCounterHandler
      24   multiNetworkCounterHandler
        24   -> emberGetCallbackNetwork
        24   -> halInternalAssertFailed


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      16  ?<Constant "counters-soc.c">
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_2
       4  ??DataTable6_3
      10  emberAfPluginCountersClear
      12  emberAfPluginCountersInitCallback
      10  emberAfPluginCountersResetThresholds
       8  emberAfPluginCountersSetThreshold
     142  emberCounterHandler
      68  emberCounters
      68  emberCountersThresholds
      36  emberMultiNetworkCounters
     114  multiNetworkCounterHandler
      20  multiNetworkCounterTable

 
 172 bytes in section .bss
 348 bytes in section .text
 
 348 bytes of CODE memory
 172 bytes of DATA memory

Errors: none
Warnings: none
