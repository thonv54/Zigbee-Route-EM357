###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        22/Oct/2015  09:32:59
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\callback-stub.c
#    Command line =  
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\callback-stub.c -D
#        DIMMER -D NULL_BTL -D CORTEXM3 -D CORTEXM3_EMBER_MICRO -D
#        CORTEXM3_EM357 -D PHY_EM3XX -D
#        "APPLICATION_TOKEN_HEADER=\"app/framework/util/tokens.h\"" -D
#        "ATTRIBUTE_STORAGE_CONFIGURATION=\"app/builder/ZigbeeRoute/ZigbeeRoute_endpoint_config.h\""
#        -D "BOARD_HEADER=\"app\builder\ZigbeeRoute\ZigbeeRoute_board.h\"" -D
#        "CONFIGURATION_HEADER=\"app/framework/util/config.h\"" -D
#        "GENERATED_TOKEN_HEADER=\"app/builder/ZigbeeRoute/ZigbeeRoute_tokens.h\""
#        -D "PLATFORM_HEADER=\"hal/micro/cortexm3/compiler/iar.h\"" -D
#        "ZA_GENERATED_HEADER=\"app/builder/ZigbeeRoute/ZigbeeRoute.h\"" -D
#        "__SOURCEFILE__=\"callback-stub.c\"" -lC
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\dim\List\
#        --diag_suppress Pa050 -o
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\dim\Obj\ --debug
#        --endian=little --cpu=Cortex-M3 --no_path_in_file_macros
#        --separate_cluster_for_initialized_variables -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\ -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\ -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\ -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\app\framework\include\
#        -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\app\util\
#        -I E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\stack\
#        -I E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\hal\
#        -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\hal\..\
#        -Ohz --use_c++_inline
#    List file    =  
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\dim\List\callback-stub.lst
#    Object file  =  
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\dim\Obj\callback-stub.o
#
###############################################################################

E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\callback-stub.c
      1          // This file is generated by Ember Desktop.  Please do not edit manually.
      2          //
      3          //
      4          
      5          // This c file provides stubs for all callbacks. These stubs
      6          // will be used in the case where user defined implementations
      7          // of the callbacks have not been provided.
      8          #include "app/framework/include/af.h"
      9          
     10          /** @brief Add To Current App Tasks
     11           *
     12           * This function is only useful to sleepy end devices.  This function will note
     13           * the passed item as part of a set of tasks the application has outstanding
     14           * (e.g. message sent requiring APS acknwoledgement).  This will affect how the
     15           * application behaves with regard to sleeping and polling.  Until the
     16           * outstanding task is completed, the device may poll more frequently and sleep
     17           * less often.
     18           *
     19           * @param tasks   Ver.: always
     20           */

   \                                 In section .text, align 2, keep-with-next
     21          void emberAfAddToCurrentAppTasksCallback(EmberAfApplicationTask tasks)
     22          {
     23          }
   \                     emberAfAddToCurrentAppTasksCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
     24          
     25          /** @brief Allow Network Write Attribute
     26           *
     27           * This function is called by the application framework before it writes an
     28           * attribute in response to a write attribute request from an external device.
     29           * The value passed into this callback is the value to which the attribute is to
     30           * be set by the framework.
     31                  Example:	In mirroring simple metering data
     32           * on an Energy Services Interface (ESI) (formerly called Energy Service Portal
     33           * (ESP) in SE 1.0).), a mirrored simple meter needs to write read-only
     34           * attributes on its mirror. The-meter-mirror sample application, located in
     35           * app/framework/sample-apps, uses this callback to allow the mirrored device to
     36           * write simple metering attributes on the mirror regardless of the fact that
     37           * most simple metering attributes are defined as read-only by the ZigBee
     38           * specification.
     39                  Note:	The ZCL specification does not (as of this
     40           * writing) specify any permission-level security for writing writeable
     41           * attributes. As far as the ZCL specification is concerned, if an attribute is
     42           * writeable, any device that has a link key for the device should be able to
     43           * write that attribute. Furthermore if an attribute is read only, it should not
     44           * be written over the air. Thus, if you implement permissions for writing
     45           * attributes as a feature, you MAY be operating outside the specification. This
     46           * is unlikely to be a problem for writing read-only attributes, but it may be a
     47           * problem for attributes that are writeable according to the specification but
     48           * restricted by the application implementing this callback.
     49           *
     50           * @param endpoint   Ver.: always
     51           * @param clusterId   Ver.: always
     52           * @param attributeId   Ver.: always
     53           * @param mask   Ver.: always
     54           * @param manufacturerCode   Ver.: always
     55           * @param value   Ver.: always
     56           * @param type   Ver.: always
     57           */

   \                                 In section .text, align 2, keep-with-next
     58          EmberAfAttributeWritePermission emberAfAllowNetworkWriteAttributeCallback(int8u endpoint,
     59                                                                                    EmberAfClusterId clusterId,
     60                                                                                    EmberAfAttributeId attributeId,
     61                                                                                    int8u mask,
     62                                                                                    int16u manufacturerCode,
     63                                                                                    int8u* value,
     64                                                                                    int8u type)
     65          {
     66            return EMBER_ZCL_ATTRIBUTE_WRITE_PERMISSION_ALLOW_WRITE_NORMAL; // Default
   \                     emberAfAllowNetworkWriteAttributeCallback: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x4770             BX       LR               ;; return
     67          }
     68          
     69          /** @brief Check For Sleep
     70           *
     71           * @deprecated This callback has been deprecated and will be removed in a future
     72           * release.  Customers should use ::emberAfMainTickCallback instead.
     73           *
     74           */

   \                                 In section .text, align 2, keep-with-next
     75          int32u emberAfCheckForSleepCallback(void)
     76          {
     77            return 0;
   \                     emberAfCheckForSleepCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
     78          }
     79          
     80          /** @brief Key Establishment Cluster Client Command Received
     81           *
     82           * This function is called by the application framework when a server-to-client
     83           * key establishment command is received but has yet to be handled by the
     84           * framework code.  This function should return a boolean value indicating
     85           * whether the command has been handled by the application code and should not
     86           * be further processed by the framework.
     87           *
     88           * @param cmd   Ver.: always
     89           */

   \                                 In section .text, align 2, keep-with-next
     90          boolean emberAfKeyEstablishmentClusterClientCommandReceivedCallback(EmberAfClusterCommand *cmd)
     91          {
     92            return FALSE;
   \                     emberAfKeyEstablishmentClusterClientCommandReceivedCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
     93          }
     94          
     95          /** @brief Cluster Init
     96           *
     97           * This function is called when a specific cluster is initialized. It gives the
     98           * application an opportunity to take care of cluster initialization procedures.
     99           * It is called exactly once for each endpoint where cluster is present.
    100           *
    101           * @param endpoint   Ver.: always
    102           * @param clusterId   Ver.: always
    103           */

   \                                 In section .text, align 2, keep-with-next
    104          void emberAfClusterInitCallback(int8u endpoint,
    105                                          EmberAfClusterId clusterId)
    106          {
    107          }
   \                     emberAfClusterInitCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    108          
    109          /** @brief Cluster Security Custom
    110           *
    111           * This callback is fired when determining if APS encryption is required for a
    112           * cluster outside of the specification's required clusters.  In other words,
    113           * for the Smart Energy profile this would be a cluster beyond the list that
    114           * normally requires APS encryption.
    115           *
    116           * @param profileId The profile ID  Ver.: always
    117           * @param clusterId The cluster ID  Ver.: always
    118           * @param incoming Whether this is an incoming or outgoing message.  Ver.:
    119           * always
    120           * @param commandId The ZCL command ID being sent/received.  Ver.: always
    121           */

   \                                 In section .text, align 2, keep-with-next
    122          boolean emberAfClusterSecurityCustomCallback(EmberAfProfileId profileId,
    123                                                       EmberAfClusterId clusterId,
    124                                                       boolean incoming,
    125                                                       int8u commandId)
    126          {
    127            // By default, assume APS encryption is not required.
    128            return FALSE;
   \                     emberAfClusterSecurityCustomCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    129          }
    130          
    131          
    132          /** @brief Discover Commands Generated Response
    133           *
    134           * This function is called by the framework when Discover Commands Generated
    135           * Response is received.
    136           *
    137           * @param clusterId The cluster identifier of this response.  Ver.: always
    138           * @param manufacturerCode Manufacturer code  Ver.: always
    139           * @param discoveryComplete Indicates whether there are more commands to be
    140           * discovered.  Ver.: always
    141           * @param commandIds Buffer containing the list of command identifiers.  Ver.:
    142           * always
    143           * @param commandIdCount The length of bytes of the list, whish is the same as
    144           * the number of identifiers.  Ver.: always
    145           */

   \                                 In section .text, align 2, keep-with-next
    146          boolean emberAfDiscoverCommandsGeneratedResponseCallback(EmberAfClusterId clusterId,
    147                                                                   int16u manufacturerCode,
    148                                                                   boolean discoveryComplete,
    149                                                                   int8u *commandIds,
    150                                                                   int16u commandIdCount)
    151          {
    152            return FALSE;
   \                     emberAfDiscoverCommandsGeneratedResponseCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    153          }
    154          
    155          /** @brief Discover Commands Received Response
    156           *
    157           * This function is called by the framework when Discover Commands Received
    158           * Response is received.
    159           *
    160           * @param clusterId The cluster identifier of this response.  Ver.: always
    161           * @param manufacturerCode Manufacturer code  Ver.: always
    162           * @param discoveryComplete Indicates whether there are more commands to be
    163           * discovered.  Ver.: always
    164           * @param commandIds Buffer containing the list of command identifiers.  Ver.:
    165           * always
    166           * @param commandIdCount The length of bytes of the list, whish is the same as
    167           * the number of identifiers.  Ver.: always
    168           */

   \                                 In section .text, align 2, keep-with-next
    169          boolean emberAfDiscoverCommandsReceivedResponseCallback(EmberAfClusterId clusterId,
    170                                                                  int16u manufacturerCode,
    171                                                                  boolean discoveryComplete,
    172                                                                  int8u *commandIds,
    173                                                                  int16u commandIdCount)
    174          {
    175            return FALSE;
   \                     emberAfDiscoverCommandsReceivedResponseCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    176          }
    177          
    178          /** @brief Eeprom Init
    179           *
    180           * Tells the system to initialize the EEPROM if it is not already initialized.
    181           *
    182           */

   \                                 In section .text, align 2, keep-with-next
    183          void emberAfEepromInitCallback(void)
    184          {
    185          }
   \                     emberAfEepromInitCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    186          
    187          /** @brief Eeprom Note Initialized State
    188           *
    189           * Records the state of the EEPROM so that an intelligent driver (like the
    190           * EEPROM plugin) can re-initialize the driver prior to any calls to it.
    191           *
    192           * @param state The state of the EEPROM, false=re-initalization needed,
    193           * true=no-re-init needed  Ver.: always
    194           */

   \                                 In section .text, align 2, keep-with-next
    195          void emberAfEepromNoteInitializedStateCallback(boolean state)
    196          {
    197          }
   \                     emberAfEepromNoteInitializedStateCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    198          
    199          /** @brief Eeprom Shutdown
    200           *
    201           * Tells the system to shutdown the EEPROM if it is not already shutdown.
    202           *
    203           */

   \                                 In section .text, align 2, keep-with-next
    204          void emberAfEepromShutdownCallback(void)
    205          {
    206          }
   \                     emberAfEepromShutdownCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    207          
    208          /** @brief External Attribute Read
    209           *
    210           * Like emberAfExternalAttributeWriteCallback above, this function is called
    211           * when the framework needs to read an attribute that is not stored within the
    212           * Application Framework's data structures.
    213                  All of the important
    214           * information about the attribute itself is passed as a pointer to an
    215           * EmberAfAttributeMetadata struct, which is stored within the application and
    216           * used to manage the attribute. A complete description of the
    217           * EmberAfAttributeMetadata struct is provided in
    218           * app/framework/include/af-types.h
    219                  This function assumes that the
    220           * application is able to read the attribute, write it into the passed buffer,
    221           * and return immediately. Any attributes that require a state machine for
    222           * reading and writing are not really candidates for externalization at the
    223           * present time. The Application Framework does not currently include a state
    224           * machine for reading or writing attributes that must take place across a
    225           * series of application ticks. Attributes that cannot be read in a timely
    226           * manner should be stored within the Application Framework and updated
    227           * occasionally by the application code from within the
    228           * emberAfMainTickCallback.
    229                  If the application was successfully able to
    230           * read the attribute and write it into the passed buffer, it should return a
    231           * value of EMBER_ZCL_STATUS_SUCCESS. Any other return value indicates the
    232           * application was not able to read the attribute.
    233           *
    234           * @param endpoint   Ver.: always
    235           * @param clusterId   Ver.: always
    236           * @param attributeMetadata   Ver.: always
    237           * @param manufacturerCode   Ver.: always
    238           * @param buffer   Ver.: always
    239           */

   \                                 In section .text, align 2, keep-with-next
    240          EmberAfStatus emberAfExternalAttributeReadCallback(int8u endpoint,
    241                                                             EmberAfClusterId clusterId,
    242                                                             EmberAfAttributeMetadata *attributeMetadata,
    243                                                             int16u manufacturerCode,
    244                                                             int8u *buffer)
    245          {
    246            return EMBER_ZCL_STATUS_FAILURE;
   \                     emberAfExternalAttributeReadCallback: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x4770             BX       LR               ;; return
    247          }
    248          
    249          /** @brief External Attribute Write
    250           *
    251           * This function is called whenever the Application Framework needs to write an
    252           * attribute which is not stored within the data structures of the Application
    253           * Framework itself. One of the new features in Version 2 is the ability to
    254           * store attributes outside the Framework. This is particularly useful for
    255           * attributes that do not need to be stored because they can be read off the
    256           * hardware when they are needed, or are stored in some central location used by
    257           * many modules within the system. In this case, you can indicate that the
    258           * attribute is stored externally. When the framework needs to write an external
    259           * attribute, it makes a call to this callback.
    260                  This callback is very
    261           * useful for host micros which need to store attributes in persistent memory.
    262           * Because each host micro (used with an Ember NCP) has its own type of
    263           * persistent memory storage, the Application Framework does not include the
    264           * ability to mark attributes as stored in flash the way that it does for Ember
    265           * SoCs like the EM35x. On a host micro, any attributes that need to be stored
    266           * in persistent memory should be marked as external and accessed through the
    267           * external read and write callbacks. Any host code associated with the
    268           * persistent storage should be implemented within this callback.
    269                  All of
    270           * the important information about the attribute itself is passed as a pointer
    271           * to an EmberAfAttributeMetadata struct, which is stored within the application
    272           * and used to manage the attribute. A complete description of the
    273           * EmberAfAttributeMetadata struct is provided in
    274           * app/framework/include/af-types.h.
    275                  This function assumes that the
    276           * application is able to write the attribute and return immediately. Any
    277           * attributes that require a state machine for reading and writing are not
    278           * candidates for externalization at the present time. The Application Framework
    279           * does not currently include a state machine for reading or writing attributes
    280           * that must take place across a series of application ticks. Attributes that
    281           * cannot be written immediately should be stored within the Application
    282           * Framework and updated occasionally by the application code from within the
    283           * emberAfMainTickCallback.
    284                  If the application was successfully able to
    285           * write the attribute, it returns a value of EMBER_ZCL_STATUS_SUCCESS. Any
    286           * other return value indicates the application was not able to write the
    287           * attribute.
    288           *
    289           * @param endpoint   Ver.: always
    290           * @param clusterId   Ver.: always
    291           * @param attributeMetadata   Ver.: always
    292           * @param manufacturerCode   Ver.: always
    293           * @param buffer   Ver.: always
    294           */

   \                                 In section .text, align 2, keep-with-next
    295          EmberAfStatus emberAfExternalAttributeWriteCallback(int8u endpoint,
    296                                                              EmberAfClusterId clusterId,
    297                                                              EmberAfAttributeMetadata *attributeMetadata,
    298                                                              int16u manufacturerCode,
    299                                                              int8u *buffer)
    300          {
    301            return EMBER_ZCL_STATUS_FAILURE;
   \                     emberAfExternalAttributeWriteCallback: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x4770             BX       LR               ;; return
    302          }
    303          
    304          /** @brief Get Current App Tasks
    305           *
    306           * This function is only useful to sleepy end devices.  This function will
    307           * return the set of tasks the application has outstanding.  These tasks affect
    308           * how the application behaves with regard to sleeping and polling.
    309           *
    310           */

   \                                 In section .text, align 2, keep-with-next
    311          EmberAfApplicationTask emberAfGetCurrentAppTasksCallback(void)
    312          {
    313            return 0;
   \                     emberAfGetCurrentAppTasksCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    314          }
    315          
    316          /** @brief Get Current Poll Control
    317           *
    318           * This function will retrieve the current poll control that the system is using
    319           * for the current network.  This is determined by examining all the scheduled
    320           * events and obtaining the most restrictive poll control context across all
    321           * events.  The most restrictive poll control is EMBER_AF_SHORT_POLL followed by
    322           * EMBER_AF_LONG_POLL.
    323           *
    324           */

   \                                 In section .text, align 2, keep-with-next
    325          EmberAfEventPollControl emberAfGetCurrentPollControlCallback(void)
    326          {
    327            return EMBER_AF_LONG_POLL;
   \                     emberAfGetCurrentPollControlCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    328          }
    329          
    330          /** @brief Get Current Poll Interval Ms
    331           *
    332           * This function is only useful to end devices.  This function will return the
    333           * current poll interval (in milliseconds) for the current network.  This
    334           * interval is the maximum amount of time a child is currently waiting between
    335           * polls of its parent.
    336           *
    337           */

   \                                 In section .text, align 2, keep-with-next
    338          int32u emberAfGetCurrentPollIntervalMsCallback(void)
    339          {
    340            return 0;
   \                     emberAfGetCurrentPollIntervalMsCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    341          }
    342          
    343          /** @brief Get Current Poll Interval Qs
    344           *
    345           * This function is only useful to end devices.  This function will return the
    346           * current poll interval (in quarter seconds) for the current network.  This
    347           * interval is the maximum amount of time a child is currently waiting between
    348           * polls of its parent.
    349           *
    350           */

   \                                 In section .text, align 2, keep-with-next
    351          int32u emberAfGetCurrentPollIntervalQsCallback(void)
    352          {
    353            return 0;
   \                     emberAfGetCurrentPollIntervalQsCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    354          }
    355          
    356          /** @brief Get Current Time
    357           *
    358           * This callback is called when device attempts to get current time from the
    359           * hardware. If this device has means to retrieve exact time, then this method
    360           * should implement it. If the callback can't provide the exact time it should
    361           * return 0 to indicate failure. Default action is to return 0, which indicates
    362           * that device does not have access to real time.
    363           *
    364           */

   \                                 In section .text, align 2, keep-with-next
    365          int32u emberAfGetCurrentTimeCallback(void)
    366          {
    367            return 0;
   \                     emberAfGetCurrentTimeCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    368          }
    369          
    370          /** @brief Get Default Poll Control
    371           *
    372           * This function will retrieve the default poll control for the current network
    373           * as previously set by emberAfSetDefaultPollControlCallback().  The default
    374           * poll control will limit whether the network can long poll.
    375           *
    376           */

   \                                 In section .text, align 2, keep-with-next
    377          EmberAfEventPollControl emberAfGetDefaultPollControlCallback(void)
    378          {
    379            return EMBER_AF_LONG_POLL;
   \                     emberAfGetDefaultPollControlCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    380          }
    381          
    382          /** @brief Get Endpoint By Index
    383           *
    384           * Get the endpoint number based on the passed index.  By default the framework
    385           * handles this by managing endpoints based on the precompiled configuration
    386           * defined in AppBuilder.  This callback can override this behavior at runtime
    387           * and provide additional endpoints or different data than the compiled values.
    388           * If the index is overridden than the callback shall return TRUE and set the
    389           * endpointReturn parameter accordingly. A value of 0xFF means the endpoint
    390           * doesn't exist at that index.
    391                  Otherwise FALSE must be returned by the
    392           * callback and the default framework behavior will be executed.  This is only
    393           * applicable to the SOC devices.
    394           *
    395           * @param index The index of the endpoint.  Ver.: always
    396           * @param endpointReturn The value of endpoint.  Ver.: always
    397           */

   \                                 In section .text, align 2, keep-with-next
    398          boolean emberAfGetEndpointByIndexCallback(int8u index,
    399                                                    int8u* endpointReturn)
    400          {
    401            return FALSE;
   \                     emberAfGetEndpointByIndexCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    402          }
    403          
    404          /** @brief Get Endpoint Description
    405           *
    406           * This callback is called by the framework whenever it receives a ZDO request
    407           * to enumerate the details about an endpoint.  By default the framework
    408           * provides the information based on the precompiled endpoint information as
    409           * defined in AppBuilder.  This callback can override that behavior at runtime
    410           * and return different information.  If the endpoint information is being
    411           * overridden then the callback must return TRUE.  Otherwise it should return
    412           * FALSE, which allows the framework to perform its default behavior.  This is
    413           * only applicable to SOC devices.
    414           *
    415           * @param endpoint The endpoint number that is being queried.  Ver.: always
    416           * @param result This is a pointer to a data structure where the endpoint
    417           * information is written if the callback is providing the information.  Ver.:
    418           * always
    419           */

   \                                 In section .text, align 2, keep-with-next
    420          boolean emberAfGetEndpointDescriptionCallback(int8u endpoint,
    421                                                        EmberEndpointDescription* result)
    422          {
    423            return FALSE;
   \                     emberAfGetEndpointDescriptionCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    424          }
    425          
    426          /** @brief Get Endpoint Info
    427           *
    428           * This function is a callback to an application implemented endpoint that
    429           * operates outside the normal application framework.  When the framework wishes
    430           * to perform operations with that endpoint it uses this callback to retrieve
    431           * the endpoint's information.  If the endpoint exists and the application can
    432           * provide data then TRUE shall be returned.  Otherwise the callback must return
    433           * FALSE.
    434           *
    435           * @param endpoint The endpoint to retrieve data for.  Ver.: always
    436           * @param returnNetworkIndex The index corresponding to the ZigBee network the
    437           * endpoint belongs to.  If not using a multi-network device, 0 must be
    438           * returned.  Otherwise on a multi-network device the stack will switch to this
    439           * network before sending the message.  Ver.: always
    440           * @param returnEndpointInfo A pointer to a data struct that will be written
    441           * with information about the endpoint.  Ver.: always
    442           */

   \                                 In section .text, align 2, keep-with-next
    443          boolean emberAfGetEndpointInfoCallback(int8u endpoint,
    444                                                 int8u* returnNetworkIndex,
    445                                                 EmberAfEndpointInfoStruct* returnEndpointInfo)
    446          {
    447            return FALSE;
   \                     emberAfGetEndpointInfoCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    448          }
    449          
    450          /** @brief Get Long Poll Interval Ms
    451           *
    452           * This function is only useful to end devices.  This function will return the
    453           * long poll interval (in milliseconds) for the current network.  This interval
    454           * is the maximum amount of time a child will wait between polls of its parent
    455           * when it is not expecting data.
    456           *
    457           */

   \                                 In section .text, align 2, keep-with-next
    458          int32u emberAfGetLongPollIntervalMsCallback(void)
    459          {
    460            return 0;
   \                     emberAfGetLongPollIntervalMsCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    461          }
    462          
    463          /** @brief Get Long Poll Interval Qs
    464           *
    465           * This function is only useful to end devices.  This function will return the
    466           * long poll interval (in quarter seconds) for the current network.  This
    467           * interval is the maximum amount of time a child will wait between polls of its
    468           * parent when it is not expecting data.
    469           *
    470           */

   \                                 In section .text, align 2, keep-with-next
    471          int32u emberAfGetLongPollIntervalQsCallback(void)
    472          {
    473            return 0;
   \                     emberAfGetLongPollIntervalQsCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    474          }
    475          
    476          /** @brief Get Short Poll Interval Ms
    477           *
    478           * This function is only useful to sleepy end devices.  This function will
    479           * return the short poll interval (in milliseconds) for the current network.
    480           * This interval is the maximum amount of time a child will wait between polls
    481           * of its parent when it is expecting data.
    482           *
    483           */

   \                                 In section .text, align 2, keep-with-next
    484          int16u emberAfGetShortPollIntervalMsCallback(void)
    485          {
    486            return 0;
   \                     emberAfGetShortPollIntervalMsCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    487          }
    488          
    489          /** @brief Get Short Poll Interval Qs
    490           *
    491           * This function is only useful to sleepy end devices.  This function will
    492           * return the short poll interval (in quarter seconds) for the current network.
    493           * This interval is the maximum amount of time a child will wait between polls
    494           * of its parent when it is expecting data.
    495           *
    496           */

   \                                 In section .text, align 2, keep-with-next
    497          int16u emberAfGetShortPollIntervalQsCallback(void)
    498          {
    499            return 0;
   \                     emberAfGetShortPollIntervalQsCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    500          }
    501          
    502          /** @brief Get Source Route Overhead
    503           *
    504           * This function is called by the framework to determine the overhead required
    505           * in the network frame for source routing to a particular destination.
    506           *
    507           * @param destination The node id of the destination  Ver.: always
    508           */

   \                                 In section .text, align 2, keep-with-next
    509          int8u emberAfGetSourceRouteOverheadCallback(EmberNodeId destination)
    510          {
    511            return 0;
   \                     emberAfGetSourceRouteOverheadCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    512          }
    513          
    514          /** @brief Get Wake Timeout Bitmask
    515           *
    516           * This function is only useful to sleepy end devices.  This function will
    517           * return the wake timeout bitmask for the current network.  The bitmask
    518           * determines which tasks will timeout automatically and which tasks require
    519           * manual removal from the task list.
    520           *
    521           */

   \                                 In section .text, align 2, keep-with-next
    522          EmberAfApplicationTask emberAfGetWakeTimeoutBitmaskCallback(void)
    523          {
    524            return 0;
   \                     emberAfGetWakeTimeoutBitmaskCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    525          }
    526          
    527          /** @brief Get Wake Timeout Ms
    528           *
    529           * This function is only useful to sleepy end devices.  This function will
    530           * return the wake timeout (in milliseconds) for the current network.  This
    531           * timeout is the maximum amount of time a child will wait for a task in the
    532           * wake bitmask to finish.  While waiting, the device will short poll.
    533           *
    534           */

   \                                 In section .text, align 2, keep-with-next
    535          int16u emberAfGetWakeTimeoutMsCallback(void)
    536          {
    537            return 0;
   \                     emberAfGetWakeTimeoutMsCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    538          }
    539          
    540          /** @brief Get Wake Timeout Qs
    541           *
    542           * This function is only useful to sleepy end devices.  This function will
    543           * return the wake timeout (in quarter seconds) for the current network.  This
    544           * timeout is the maximum amount of time a child will wait for a task in the
    545           * wake bitmask to finish.  While waiting, the device will short poll.
    546           *
    547           */

   \                                 In section .text, align 2, keep-with-next
    548          int16u emberAfGetWakeTimeoutQsCallback(void)
    549          {
    550            return 0;
   \                     emberAfGetWakeTimeoutQsCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    551          }
    552          
    553          /** @brief Hal Button Isr
    554           *
    555           * This callback is called by the framework whenever a button is pressed on the
    556           * device. This callback is called within ISR context.
    557           *
    558           * @param button The button which has changed state, either BUTTON0 or BUTTON1
    559           * as defined in the appropriate BOARD_HEADER.  Ver.: always
    560           * @param state The new state of the button referenced by the button parameter,
    561           * either ::BUTTON_PRESSED if the button has been pressed or ::BUTTON_RELEASED
    562           * if the button has been released.  Ver.: always
    563           */

   \                                 In section .text, align 2, keep-with-next
    564          void emberAfHalButtonIsrCallback(int8u button,
    565                                           int8u state)
    566          {
    567          }
   \                     emberAfHalButtonIsrCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    568          
    569          /** @brief Initiate Inter Pan Key Establishment
    570           *
    571           * This function is called by the framework to initiate key establishment with a
    572           * remote device on a different PAN.  The application should return
    573           * EMBER_SUCCESS if key establishment was initiated successfully.  The
    574           * application should call ::emberAfInterPanKeyEstablishmentCallback as events
    575           * occur.
    576           *
    577           * @param panId The PAN id of the remote device.  Ver.: always
    578           * @param eui64 The EUI64 of the remote device.  Ver.: always
    579           */

   \                                 In section .text, align 2, keep-with-next
    580          EmberStatus emberAfInitiateInterPanKeyEstablishmentCallback(EmberPanId panId,
    581                                                                      const EmberEUI64 eui64)
    582          {
    583            return EMBER_LIBRARY_NOT_PRESENT;
   \                     emberAfInitiateInterPanKeyEstablishmentCallback: (+1)
   \   00000000   0x20B5             MOVS     R0,#+181
   \   00000002   0x4770             BX       LR               ;; return
    584          }
    585          
    586          /** @brief Initiate Key Establishment
    587           *
    588           * This function is called by the framework to initiate key establishment with a
    589           * remote device.  The application should return EMBER_SUCCESS if key
    590           * establishment was initiated successfully.  The application should call
    591           * ::emberAfKeyEstablishmentCallback as events occur.
    592           *
    593           * @param nodeId The node id of the remote device.  Ver.: always
    594           * @param endpoint The endpoint on the remote device.  Ver.: always
    595           */

   \                                 In section .text, align 2, keep-with-next
    596          EmberStatus emberAfInitiateKeyEstablishmentCallback(EmberNodeId nodeId,
    597                                                              int8u endpoint)
    598          {
    599            return EMBER_LIBRARY_NOT_PRESENT;
   \                     emberAfInitiateKeyEstablishmentCallback: (+1)
   \   00000000   0x20B5             MOVS     R0,#+181
   \   00000002   0x4770             BX       LR               ;; return
    600          }
    601          
    602          /** @brief Initiate Partner Link Key Exchange
    603           *
    604           * This function is called by the framework to initiate a partner link key
    605           * exchange with a remote device.  The application should return EMBER_SUCCESS
    606           * if the partner link key exchange was initiated successfully.  When the
    607           * partner link key exchange completes, the application should call the given
    608           * callback.
    609           *
    610           * @param target The node id of the remote device.  Ver.: always
    611           * @param endpoint The key establishment endpoint of the remote device.  Ver.:
    612           * always
    613           * @param callback The callback that should be called when the partner link key
    614           * exchange completse.  Ver.: always
    615           */

   \                                 In section .text, align 2, keep-with-next
    616          EmberStatus emberAfInitiatePartnerLinkKeyExchangeCallback(EmberNodeId target,
    617                                                                    int8u endpoint,
    618                                                                    EmberAfPartnerLinkKeyExchangeCallback *callback)
    619          {
    620            return EMBER_LIBRARY_NOT_PRESENT;
   \                     emberAfInitiatePartnerLinkKeyExchangeCallback: (+1)
   \   00000000   0x20B5             MOVS     R0,#+181
   \   00000002   0x4770             BX       LR               ;; return
    621          }
    622          
    623          /** @brief Inter Pan Key Establishment
    624           *
    625           * A callback by the key-establishment code to indicate an event has occurred.
    626           * For error codes this is purely a notification.  For non-error status codes
    627           * (besides LINK_KEY_ESTABLISHED), it is the application's chance to allow or
    628           * disallow the operation.  If the application returns TRUE then the key
    629           * establishment is allowed to proceed.  If it returns FALSE, then key
    630           * establishment is aborted.  LINK_KEY_ESTABLISHED is a notification of success.
    631           *
    632           * @param status   Ver.: always
    633           * @param amInitiator   Ver.: always
    634           * @param panId   Ver.: always
    635           * @param eui64   Ver.: always
    636           * @param delayInSeconds   Ver.: always
    637           */

   \                                 In section .text, align 2, keep-with-next
    638          boolean emberAfInterPanKeyEstablishmentCallback(EmberAfKeyEstablishmentNotifyMessage status,
    639                                                          boolean amInitiator,
    640                                                          EmberPanId panId,
    641                                                          const EmberEUI64 eui64,
    642                                                          int8u delayInSeconds)
    643          {
    644            return TRUE;
   \                     emberAfInterPanKeyEstablishmentCallback: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x4770             BX       LR               ;; return
    645          }
    646          
    647          /** @brief Interpan Send Message
    648           *
    649           * This function will send a raw MAC message with interpan frame format using
    650           * the passed parameters.
    651           *
    652           * @param header Interpan header info  Ver.: always
    653           * @param messageLength The length of the message received or to send  Ver.:
    654           * always
    655           * @param message The message data received or to send.  Ver.: always
    656           */

   \                                 In section .text, align 2, keep-with-next
    657          EmberStatus emberAfInterpanSendMessageCallback(EmberAfInterpanHeader* header,
    658                                                         int16u messageLength,
    659                                                         int8u* message)
    660          {
    661            return EMBER_LIBRARY_NOT_PRESENT;
   \                     emberAfInterpanSendMessageCallback: (+1)
   \   00000000   0x20B5             MOVS     R0,#+181
   \   00000002   0x4770             BX       LR               ;; return
    662          }
    663          
    664          /** @brief Key Establishment
    665           *
    666           * A callback by the key-establishment code to indicate an event has occurred.
    667           * For error codes this is purely a notification.  For non-error status codes
    668           * (besides LINK_KEY_ESTABLISHED), it is the application's chance to allow or
    669           * disallow the operation.  If the application returns TRUE then the key
    670           * establishment is allowed to proceed.  If it returns FALSE, then key
    671           * establishment is aborted.  LINK_KEY_ESTABLISHED is a notification of success.
    672           *
    673           * @param status   Ver.: always
    674           * @param amInitiator   Ver.: always
    675           * @param partnerShortId   Ver.: always
    676           * @param delayInSeconds   Ver.: always
    677           */

   \                                 In section .text, align 2, keep-with-next
    678          boolean emberAfKeyEstablishmentCallback(EmberAfKeyEstablishmentNotifyMessage status,
    679                                                  boolean amInitiator,
    680                                                  EmberNodeId partnerShortId,
    681                                                  int8u delayInSeconds)
    682          {
    683            return TRUE;
   \                     emberAfKeyEstablishmentCallback: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x4770             BX       LR               ;; return
    684          }
    685          #ifndef DIMMER
    686          /** @brief On/off Cluster Level Control Effect
    687           *
    688           * This is called by the framework when the on/off cluster initiates a command
    689           * that must effect a level control change. The implementation assumes that the
    690           * client will handle any effect on the On/Off Cluster.
    691           *
    692           * @param endpoint   Ver.: always
    693           * @param newValue   Ver.: always
    694           */
    695          void emberAfOnOffClusterLevelControlEffectCallback(int8u endpoint,
    696                                                             boolean newValue)
    697          {
    698          }
    699          #endif
    700          /** @brief Main Start
    701           *
    702           * This function is called at the start of main after the HAL has been
    703           * initialized.  The standard main function arguments of argc and argv are
    704           * passed in.  However not all platforms have support for main() function
    705           * arguments.  Those that do not are passed NULL for argv, therefore argv should
    706           * be checked for NULL before using it.  If the callback determines that the
    707           * program must exit, it should return TRUE.  The value returned by main() will
    708           * be the value written to the returnCode pointer.  Otherwise the callback
    709           * should return FALSE to let normal execution continue.
    710           *
    711           * @param returnCode   Ver.: always
    712           * @param argc   Ver.: always
    713           * @param argv   Ver.: always
    714           */

   \                                 In section .text, align 2, keep-with-next
    715          boolean emberAfMainStartCallback(int* returnCode,
    716                                           int argc,
    717                                           char** argv)
    718          {
    719            // NOTE:  argc and argv may not be supported on all platforms, so argv MUST be
    720            // checked for NULL before referencing it.  On those platforms without argc
    721            // and argv "0" and "NULL" are passed respectively.
    722          
    723            return FALSE;  // exit?
   \                     emberAfMainStartCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    724          }
    725          
    726          /** @brief Message Sent
    727           *
    728           * This function is called by the application framework from the message sent
    729           * handler, when it is informed by the stack regarding the message sent status.
    730           * All of the values passed to the emberMessageSentHandler are passed on to this
    731           * callback. This provides an opportunity for the application to verify that its
    732           * message has been sent successfully and take the appropriate action. This
    733           * callback should return a boolean value of TRUE or FALSE. A value of TRUE
    734           * indicates that the message sent notification has been handled and should not
    735           * be handled by the application framework.
    736           *
    737           * @param type   Ver.: always
    738           * @param indexOrDestination   Ver.: always
    739           * @param apsFrame   Ver.: always
    740           * @param msgLen   Ver.: always
    741           * @param message   Ver.: always
    742           * @param status   Ver.: always
    743           */

   \                                 In section .text, align 2, keep-with-next
    744          boolean emberAfMessageSentCallback(EmberOutgoingMessageType type,
    745                                             int16u indexOrDestination,
    746                                             EmberApsFrame* apsFrame,
    747                                             int16u msgLen,
    748                                             int8u* message,
    749                                             EmberStatus status)
    750          {
    751            return FALSE;
   \                     emberAfMessageSentCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    752          }
    753          
    754          /** @brief Ncp Init
    755           *
    756           * This function is called when the network coprocessor is being initialized,
    757           * either at startup or upon reset.  It provides applications on opportunity to
    758           * perform additional configuration of the NCP.  The function is always called
    759           * twice when the NCP is initialized.  In the first invocation, memoryAllocation
    760           * will be TRUE and the application should only issue EZSP commands that affect
    761           * memory allocation on the NCP.  For example, tables on the NCP can be resized
    762           * in the first call.  In the second invocation, memoryAllocation will be FALSE
    763           * and the application should only issue EZSP commands that do not affect memory
    764           * allocation.  For example, tables on the NCP can be populated in the second
    765           * call.  This callback is not called on SoCs.
    766           *
    767           * @param memoryAllocation   Ver.: always
    768           */

   \                                 In section .text, align 2, keep-with-next
    769          void emberAfNcpInitCallback(boolean memoryAllocation)
    770          {
    771          }
   \                     emberAfNcpInitCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    772          
    773          /** @brief Ncp Is Awake Isr
    774           *
    775           * This function is called IN ISR CONTEXT.  It notes that the NCP is awake after
    776           * sleeping.  Care should be taken to do minimal processing in this ISR handler
    777           * function.
    778           *
    779           */

   \                                 In section .text, align 2, keep-with-next
    780          void emberAfNcpIsAwakeIsrCallback(void)
    781          {
    782          }
   \                     emberAfNcpIsAwakeIsrCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    783          
    784          /** @brief Network Key Update Complete
    785           *
    786           * This is called by the framework when a network key update operation started
    787           * by the trust center is complete.
    788           *
    789           * @param status   Ver.: always
    790           */

   \                                 In section .text, align 2, keep-with-next
    791          void emberAfNetworkKeyUpdateCompleteCallback(EmberStatus status)
    792          {
    793          }
   \                     emberAfNetworkKeyUpdateCompleteCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    794          
    795          /** @brief Ota Bootload
    796           *
    797           * The platform specific routine to bootload the device from a ZigBee
    798           * over-the-air upgrade file.
    799           *
    800           * @param id A pointer to the structure that contains the information about what
    801           * OTA image to bootload.  Ver.: always
    802           * @param ncpUpgradeTagId The tag ID of the upgrade data that will be used to
    803           * bootload the device.  Ver.: always
    804           */

   \                                 In section .text, align 2, keep-with-next
    805          int8u emberAfOtaBootloadCallback(const EmberAfOtaImageId* id,
    806                                           int16u ncpUpgradeTagId)
    807          {
    808            // Please implement me
    809            emberAfCorePrintln("Not supported.");
    810            return 1;
   \                     emberAfOtaBootloadCallback: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x4770             BX       LR               ;; return
    811          }
    812          
    813          /** @brief Ota Client Bootload
    814           *
    815           * This callback is fired when the OTA Client recevies a command to bootload the
    816           * newly downloaded OTA image.  This callback will perform the platform specific
    817           * to bootload their device.
    818           *
    819           * @param id This is the identifier relating to the image that has been
    820           * downloaded and is ready for bootload.  Ver.: always
    821           */

   \                                 In section .text, align 2, keep-with-next
    822          void emberAfOtaClientBootloadCallback(const EmberAfOtaImageId* id)
    823          {
    824            // Any final preperation prior to the bootload should be done here.
    825            // It is assumed that the device will reset in most all cases.
    826            // Please implement me.
    827          }
   \                     emberAfOtaClientBootloadCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    828          
    829          /** @brief Ota Client Custom Verify
    830           *
    831           * This callback is executed by the OTA client after the signature verification
    832           * has successfully completed.  It allows the device to do its own custom
    833           * verification of the image (such as verifying that the EBL is intact).
    834           *
    835           * @param newVerification This indicates if a new verification should be
    836           * started.  Ver.: always
    837           * @param id This is ID of the image to be verified.  Ver.: always
    838           */

   \                                 In section .text, align 2, keep-with-next
    839          EmberAfImageVerifyStatus emberAfOtaClientCustomVerifyCallback(boolean newVerification,
    840                                                                        const EmberAfOtaImageId* id)
    841          {
    842            // Manufacturing specific checks can be made to the image in this function to
    843            // determine if it is valid.  This function is called AFTER cryptographic
    844            // checks have passed.  If the cryptographic checks failed, this function will
    845            // never be called.
    846          
    847            // The function shall return one of the following based on its own
    848            // verification process.
    849            // 1) EMBER_AF_IMAGE_GOOD - the image has passed all checks
    850            // 2) EMBER_AF_IMAGE_BAD  - the image is not valid
    851            // 3) EMBER_AF_IMAGE_VERIFY_IN_PROGRESS - the image is valid so far, but more
    852            //      checks are needed.  This callback shall be re-executed later to
    853            //      continue verification.  This allows other code in the framework to run.
    854            return EMBER_AF_IMAGE_GOOD;
   \                     emberAfOtaClientCustomVerifyCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    855          }
    856          
    857          /** @brief Ota Client Download Complete
    858           *
    859           * This callback indicates that the OTA client has completed the download of a
    860           * file.  If the file has been completely downloaded and cryptographic checks
    861           * have been turned on, then those will be performed prior to this callback and
    862           * that outcome included in the 'success' result.  On failure, this callback is
    863           * merely informative, and the return type is ignored.  On succesful download,
    864           * this callback allows the client to perform any additional verification of the
    865           * downloaded image and return that result to the OTA server.
    866           *
    867           * @param success This indicates the success or failure of the download and
    868           * cryptographic verification process (if applicable).  Ver.: always
    869           * @param id This is the image identifier information that corresponds to the
    870           * download result.  Ver.: always
    871           */

   \                                 In section .text, align 2, keep-with-next
    872          boolean emberAfOtaClientDownloadCompleteCallback(EmberAfOtaDownloadResult success,
    873                                                           const EmberAfOtaImageId* id)
    874          {
    875            // At this point the image has been completely downloaded and cryptographic
    876            // checks (if applicable) have been performed.
    877          
    878            if (!success) {
    879              emberAfOtaBootloadClusterPrintln("Download failed.");
    880              return TRUE;   // return value is ignored
    881            }
    882          
    883            // This is for any additional validation that needs to be performed
    884            // on the image by the application.
    885          
    886            // The results of checks here will be returned back to the OTA server
    887            // in the Upgrade End request.
    888            return TRUE;
   \                     emberAfOtaClientDownloadCompleteCallback: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x4770             BX       LR               ;; return
    889          }
    890          
    891          /** @brief Ota Client Incoming Message Raw
    892           *
    893           * This callback is for processing incoming messages for the Over-the-air
    894           * bootload cluster client.  ZCL will not process the message and instead hand
    895           * the raw over the air data to the callback for its own processing.
    896           *
    897           * @param message A pointer to the structure containing the message buffer and
    898           * other information about it.  Ver.: always
    899           */

   \                                 In section .text, align 2, keep-with-next
    900          boolean emberAfOtaClientIncomingMessageRawCallback(EmberAfClusterCommand *message)
    901          {
    902            return FALSE;
   \                     emberAfOtaClientIncomingMessageRawCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    903          }
    904          
    905          /** @brief Ota Client Start
    906           *
    907           * This callback should be called when the profile specific registration has
    908           * completed successfully.  It will start the client's state machine that will
    909           * find the OTA server, query it for the next image, download the image, wait
    910           * for the bootload message, and kick off the bootload.
    911           *
    912           */

   \                                 In section .text, align 2, keep-with-next
    913          void emberAfOtaClientStartCallback(void)
    914          {
    915          }
   \                     emberAfOtaClientStartCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    916          
    917          /** @brief Ota Client Version Info
    918           *
    919           * This function is called by the OTA client when a new query will occur to the
    920           * server asking what the next version of firmware is.  The client can inform
    921           * the cluster software as to what information to use in the query (and
    922           * subsequent download).
    923           *
    924           * @param currentImageInfo This is the information to use in the next query by
    925           * the client cluster code.  It contains the manufacturer ID, image type ID, and
    926           * the firmware version to be specified in the query message sent to the server.
    927           *  Ver.: always
    928           * @param hardwareVersion This is a pointer to the hardware version to use in
    929           * the query.  If no hardware version should be used, then
    930           * EMBER_AF_INVALID_HARDWARE_VERSION should be used.  Ver.: always
    931           */

   \                                 In section .text, align 2, keep-with-next
    932          void emberAfOtaClientVersionInfoCallback(EmberAfOtaImageId* currentImageInfo,
    933                                                   int16u* hardwareVersion)
    934          {
    935            // Customer will fill in the image info with their manufacturer ID,
    936            // image type ID, and current software version number.
    937            // The deviceSpecificFileEui64 can be ignored.
    938          
    939            // It may be necessary to dynamically determine this by talking to
    940            // another device, as is the case with a host talking to an NCP device.
    941          
    942            // However, this routine will be called repeatedly so it may be wise
    943            // to cache the data!
    944          
    945          /* This is commented out since the #defines below are not defined.
    946          
    947            if (currentImageInfo != NULL) {
    948              MEMSET(currentImageInfo, 0, sizeof(EmberAfOtaImageId));
    949              currentImageInfo->manufacturerId  = EMBER_AF_MANUFACTURER_CODE;
    950              currentImageInfo->imageTypeId     = EMBER_AF_IMAGE_TYPE_ID;
    951              currentImageInfo->firmwareVersion = EMBER_AF_CUSTOM_FIRMWARE_VERSION;
    952            }
    953          
    954            if (hardwareVersion != NULL) {
    955              *hardwareVersion = EMBER_AF_INVALID_HARDWARE_VERSION;
    956            }
    957          
    958            assert(FALSE);
    959          */
    960          }
   \                     emberAfOtaClientVersionInfoCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    961          
    962          /** @brief Ota Page Request Server Policy
    963           *
    964           * This callback is called by the OTA server page request code when it wants to
    965           * determine if it is allowed for an OTA client to make a page request.  It is
    966           * only called if page request support has been enabled on the server.  It
    967           * should return EMBER_ZCL_STATUS_SUCCESS if it allows the page request, and
    968           * EMBER_ZCL_STATUS_UNSUP_CLUSTER_COMMAND if it does not want to allow it.
    969           *
    970           */

   \                                 In section .text, align 2, keep-with-next
    971          int8u emberAfOtaPageRequestServerPolicyCallback(void)
    972          {
    973            return EMBER_ZCL_STATUS_SUCCESS;
   \                     emberAfOtaPageRequestServerPolicyCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    974          }
    975          
    976          /** @brief Ota Server Block Size
    977           *
    978           * This function provides a way for the server to adjust the block size of its
    979           * response to an Image block request by a client.
    980           *
    981           * @param clientNodeId The node Id of OTA client making an image block request.
    982           * Ver.: always
    983           */

   \                                 In section .text, align 2, keep-with-next
    984          int8u emberAfOtaServerBlockSizeCallback(EmberNodeId clientNodeId)
    985          {
   \                     emberAfOtaServerBlockSizeCallback: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
   \   00000004   0x4604             MOV      R4,R0
    986            // This function provides a way for the server to potentially
    987            // adjust the block size based on the client who is requesting.
    988            // In other words if we are using source routing we will limit
    989            // data returned by enough to put a source route into the message.
    990          
    991            // Image Block Response Message Format
    992            // Status Code: 1-byte
    993            // Manuf Code:  2-bytes
    994            // Image Type:  2-bytes
    995            // File Ver:    4-bytes
    996            // File Offset: 4-bytes
    997            // Data Size:   1-byte
    998            // Data:        variable
    999            const int8u IMAGE_BLOCK_RESPONSE_OVERHEAD = (EMBER_AF_ZCL_OVERHEAD + 14);
   1000          
   1001            EmberApsFrame apsFrame;
   1002            int8u maxSize;
   1003            apsFrame.options = EMBER_APS_OPTION_NONE;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0xF8AD 0x0006      STRH     R0,[SP, #+6]
   1004          
   1005            if (emberAfIsCurrentSecurityProfileSmartEnergy()) {
   \   0000000C   0x.... 0x....      BL       emberAfIsCurrentSecurityProfileSmartEnergy
   \   00000010   0xB128             CBZ.N    R0,??emberAfOtaServerBlockSizeCallback_0
   1006              apsFrame.options |= EMBER_APS_OPTION_ENCRYPTION;
   \   00000012   0xF8BD 0x0006      LDRH     R0,[SP, #+6]
   \   00000016   0xF040 0x0020      ORR      R0,R0,#0x20
   \   0000001A   0xF8AD 0x0006      STRH     R0,[SP, #+6]
   1007            }
   1008          
   1009            maxSize = emberAfMaximumApsPayloadLength(EMBER_OUTGOING_DIRECT,
   1010                                                     clientNodeId,
   1011                                                     &apsFrame);
   1012            maxSize -= IMAGE_BLOCK_RESPONSE_OVERHEAD;
   1013            return maxSize;
   \                     ??emberAfOtaServerBlockSizeCallback_0: (+1)
   \   0000001E   0xAA00             ADD      R2,SP,#+0
   \   00000020   0x4621             MOV      R1,R4
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x.... 0x....      BL       emberAfMaximumApsPayloadLength
   \   00000028   0x3811             SUBS     R0,R0,#+17
   \   0000002A   0xB2C0             UXTB     R0,R0
   \   0000002C   0xB004             ADD      SP,SP,#+16
   \   0000002E   0xBD10             POP      {R4,PC}          ;; return
   1014          }
   1015          
   1016          /** @brief Ota Server Image Block Request
   1017           *
   1018           * This function is called when the server application receives an image block
   1019           * request by a client.
   1020           *
   1021           * @param data A struct containing the details of the image block response and
   1022           * values that can be returned by the application to effect the behavior of the
   1023           * server's response.  Ver.: always
   1024           */

   \                                 In section .text, align 2, keep-with-next
   1025          int8u emberAfOtaServerImageBlockRequestCallback(EmberAfImageBlockRequestCallbackStruct* data)
   1026          {
   1027            // This function should return one of the following:
   1028            //   EMBER_ZCL_STATUS_SUCCESS - This indicates that the OTA server code should
   1029            //     respond to the image block request normally.
   1030            //   EMBER_ZCL_STATUS_ABORT - This indicates to the OTA server that it should
   1031            //     tell the client to abort the download and make no more image block requests.
   1032            //   EMBER_ZCL_STATUS_WAIT_FOR_DATA - This indicates to the OTA server to tell
   1033            //     the client it should delay before asking for that data block again.
   1034            //     The 'waitTimeInMinutesResponse' value should be filled in with the delay value.
   1035            return EMBER_ZCL_STATUS_SUCCESS;
   \                     emberAfOtaServerImageBlockRequestCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1036          }
   1037          
   1038          /** @brief Ota Server Incoming Message Raw
   1039           *
   1040           * This callback is for processing incoming messages for the Over-the-air
   1041           * bootload cluster server.  ZCL will not process the message and instead hand
   1042           * the raw over the air data to the callback for its own processing.
   1043           *
   1044           * @param message A pointer to the structure containing the message buffer and
   1045           * other information about it.  Ver.: always
   1046           */

   \                                 In section .text, align 2, keep-with-next
   1047          boolean emberAfOtaServerIncomingMessageRawCallback(EmberAfClusterCommand *message)
   1048          {
   1049            return FALSE;
   \                     emberAfOtaServerIncomingMessageRawCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1050          }
   1051          
   1052          /** @brief Ota Server Query
   1053           *
   1054           * This callback is fired when the OTA server receives a query request by the
   1055           * client.  The callback lets the server application indicate to the client what
   1056           * the 'next' version of software is for the device, or if there is not one
   1057           * available.
   1058           *
   1059           * @param currentImageId This is the current software image that the client
   1060           * hase.  Ver.: always
   1061           * @param hardwareVersion If this value is non-NULL, it indicates the hardware
   1062           * version of the client device.  If NULL, the client did not specify a hardware
   1063           * version.  Ver.: always
   1064           * @param nextUpgradeImageId This is a pointer to a data structure containing
   1065           * the 'next' software version for the client to download.  Ver.: always
   1066           */

   \                                 In section .text, align 2, keep-with-next
   1067          int8u emberAfOtaServerQueryCallback(const EmberAfOtaImageId* currentImageId,
   1068                                              int16u* hardwareVersion,
   1069                                              EmberAfOtaImageId* nextUpgradeImageId)
   1070          {
   1071            // If a new software image is available, this function should return EMBER_ZCL_STATUS_SUCCESS
   1072            // and populate the 'nextUpgradeImageId' structure with the appropriate values.
   1073            // If no new software image is available (i.e. the client should not download a firmware image)
   1074            // then the server should return EMBER_ZCL_STATUS_NO_IMAGE_AVAILABLE.
   1075            return EMBER_ZCL_STATUS_NO_IMAGE_AVAILABLE;
   \                     emberAfOtaServerQueryCallback: (+1)
   \   00000000   0x2098             MOVS     R0,#+152
   \   00000002   0x4770             BX       LR               ;; return
   1076          }
   1077          
   1078          /** @brief Ota Server Send Image Notify
   1079           *
   1080           * This callback is an indication to the OTA server that it should send out
   1081           * notification about an OTA file that is available for download.
   1082           *
   1083           * @param dest The destination of the image notify message.  May be a broadcast
   1084           * address.  Ver.: always
   1085           * @param endpoint The destination endpoint of the image notify message.  May be
   1086           * a broadcast endpoint.  Ver.: always
   1087           * @param payloadType The type of data the image notify message will contain.  0
   1088           * = no data.  1 = Manufacturer ID.  2 = Manufacturer ID and the image type ID.
   1089           * 3 = Manufacturer ID, image type ID, and firmware version.  Ver.: always
   1090           * @param queryJitter The percentage of nodes that should respond to this
   1091           * message, from 1-100.  On receipt of this message, each recipient will
   1092           * randomly choose a percentage and only query the server if their percentage is
   1093           * below this value.  Ver.: always
   1094           * @param id The image information that will be put in the message.  The data
   1095           * within this struct that will be appended to the message is determined by the
   1096           * previous 'payloadType' argument.  Ver.: always
   1097           */

   \                                 In section .text, align 2, keep-with-next
   1098          boolean emberAfOtaServerSendImageNotifyCallback(EmberNodeId dest,
   1099                                                          int8u endpoint,
   1100                                                          int8u payloadType,
   1101                                                          int8u queryJitter,
   1102                                                          const EmberAfOtaImageId* id)
   1103          {
   1104            return FALSE;
   \                     emberAfOtaServerSendImageNotifyCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1105          }
   1106          
   1107          /** @brief Ota Server Upgrade End Request
   1108           *
   1109           * This function is called when the OTA server receives a request an upgrade end
   1110           * request.  If the request indicated a successful download by the client, the
   1111           * server must tell the client when and if to upgrade to the downloaded image.
   1112           *
   1113           * @param source The node ID of the device that sent the upgrade end request.
   1114           * Ver.: always
   1115           * @param status This is the ZCL status sent by the client indicating the result
   1116           * of its attempt to download the new upgrade image.  If the status is not
   1117           * EMBER_ZCL_STATUS_SUCCESS then this callback is merely informative and no
   1118           * response mesasge will be generated by the server.  Ver.: always
   1119           * @param returnValue If the server returns TRUE indicating that the client
   1120           * should apply the upgrade, this time value indicates when in the future the
   1121           * client should apply the upgrade.  Ver.: always
   1122           * @param imageId This variable indicates the software version that the client
   1123           * successfully downloaded and is asking to upgrade to.  Ver.: always
   1124           */

   \                                 In section .text, align 2, keep-with-next
   1125          boolean emberAfOtaServerUpgradeEndRequestCallback(EmberNodeId source,
   1126                                                            int8u status,
   1127                                                            int32u* returnValue,
   1128                                                            const EmberAfOtaImageId* imageId)
   1129          {
   1130            // If the status value is not EMBER_ZCL_STATUS_SUCCESS, then this callback is
   1131            // merely informative and no response message will be generated by the server.
   1132            // If the server wants the client to NOT apply the upgrade, then it should
   1133            // return FALSE.
   1134            // If the server wants the client to apply the upgrade, it should return TRUE
   1135            // and set the 'returnValue' parameter to when it wants the client to
   1136            // apply the upgrade.  There are three possible values:
   1137            //   0               =  Apply the upgrade now
   1138            //   0xFFFFFFFF      =  Don't apply yet, ask again later.
   1139            //   (anything-else) =  Apply the upgrade X minutes from now.
   1140            *returnValue = 0;
   \                     emberAfOtaServerUpgradeEndRequestCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x6010             STR      R0,[R2, #+0]
   1141            return TRUE;
   \   00000004   0x2001             MOVS     R0,#+1
   \   00000006   0x4770             BX       LR               ;; return
   1142          }
   1143          
   1144          /** @brief Ota Storage Check Temp Data
   1145           *
   1146           * This callback will validate temporary data in the storage device to determine
   1147           * whether it is a complete file, a partially downloaded file, or there is no
   1148           * file present.  When a complete or partial file is found it will return
   1149           * EMBER_AF_OTA_STORAGE_SUCCESS or EMBER_AF_OTA_STORAGE_PARTIAL_FILE_FOUND,
   1150           * respectively.  In that case, the currentOffset, totalImageSize, and
   1151           * newFileInfo will be populated with data.  When EMBER_AF_OTA_STORAGE_ERROR is
   1152           * returned, no temporary data is present.
   1153           *
   1154           * @param currentOffset A pointer to a value that will be written with the
   1155           * offset within the total file size that has been successfully stored in the
   1156           * storage device.  This will indicate how much data has been currently
   1157           * dowloaded.  Ver.: always
   1158           * @param totalImageSize A pointer to a value that will be written with the
   1159           * total image size of the OTA file when a download has completed.  This does
   1160           * not indicate how much data has actually been downloaded currently.  Ver.:
   1161           * always
   1162           * @param newFileInfo This is the image id of the temporary file data stored in
   1163           * the storage device.  Ver.: always
   1164           */

   \                                 In section .text, align 2, keep-with-next
   1165          EmberAfOtaStorageStatus emberAfOtaStorageCheckTempDataCallback(int32u* currentOffset,
   1166                                                                         int32u* totalImageSize,
   1167                                                                         EmberAfOtaImageId* newFileInfo)
   1168          {
   1169            // If the image data cannot be successfully verified, an error should be returned.
   1170            return EMBER_AF_OTA_STORAGE_ERROR;
   \                     emberAfOtaStorageCheckTempDataCallback: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x4770             BX       LR               ;; return
   1171          }
   1172          
   1173          /** @brief Ota Storage Clear Temp Data
   1174           *
   1175           * This function clears any existing temp data that was downloaed.  It is used
   1176           * immediately prior to downloading a raw image over the air.
   1177           *
   1178           */

   \                                 In section .text, align 2, keep-with-next
   1179          EmberAfOtaStorageStatus emberAfOtaStorageClearTempDataCallback(void)
   1180          {
   1181            // If the image data cannot be stored, an error should be returned.
   1182            return EMBER_AF_OTA_STORAGE_ERROR;
   \                     emberAfOtaStorageClearTempDataCallback: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x4770             BX       LR               ;; return
   1183          }
   1184          
   1185          /** @brief Ota Storage Close
   1186           *
   1187           * This callback shuts down the ZigBee Over-the-air storage module.
   1188           *
   1189           */

   \                                 In section .text, align 2, keep-with-next
   1190          void emberAfOtaStorageCloseCallback(void)
   1191          {
   1192            // Please implement me.
   1193            assert(FALSE);
   \                     emberAfOtaStorageCloseCallback: (+1)
   \   00000000   0xF240 0x41A9      MOVW     R1,#+1193
   \   00000004   0x....             B.N      ?Subroutine0
   1194          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0x.... 0x....      ADR.W    R0,`?<Constant "callback-stub.c">`
   \   00000004   0x.... 0x....      B.W      halInternalAssertFailed
   1195          
   1196          /** @brief Ota Storage Driver Download Finish
   1197           *
   1198           * This callback defines the low-level means by which a device records the final
   1199           * offset value of the download image.
   1200           *
   1201           * @param offset The value of the final offset of the image download.  Ver.:
   1202           * always
   1203           */

   \                                 In section .text, align 2, keep-with-next
   1204          void emberAfOtaStorageDriverDownloadFinishCallback(int32u offset)
   1205          {
   1206            // The storage driver and the rest of the OTA bootload code will not function correctly unless it is implemnted.
   1207            // Please implement me.
   1208            assert(FALSE);
   \                     emberAfOtaStorageDriverDownloadFinishCallback: (+1)
   \   00000000   0xF44F 0x6197      MOV      R1,#+1208
   \   00000004                      REQUIRE ?Subroutine0
   \   00000004                      ;; // Fall through to label ?Subroutine0
   1209          }
   1210          
   1211          /** @brief Ota Storage Driver Init
   1212           *
   1213           * The initialization code for the OTA storage driver.
   1214           *
   1215           */

   \                                 In section .text, align 2, keep-with-next
   1216          boolean emberAfOtaStorageDriverInitCallback(void)
   1217          {
   \                     emberAfOtaStorageDriverInitCallback: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1218            // The storage driver and the rest of the OTA bootload code will not function correctly unless it is implemnted.
   1219            // Please implement me.
   1220            assert(FALSE);
   \   00000002   0xF240 0x41C4      MOVW     R1,#+1220
   \   00000006   0x....             B.N      ?Subroutine1
   1221            return FALSE;
   1222          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \   00000000   0x.... 0x....      ADR.W    R0,`?<Constant "callback-stub.c">`
   \   00000004   0x.... 0x....      BL       halInternalAssertFailed
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0xBD02             POP      {R1,PC}          ;; return
   1223          
   1224          /** @brief Ota Storage Driver Invalidate Image
   1225           *
   1226           * This callback invalidates the image stored on disk so that it will not be
   1227           * bootloaded, and it will not be a valid image that is in the middle of
   1228           * downloading.
   1229           *
   1230           */

   \                                 In section .text, align 2, keep-with-next
   1231          EmberAfOtaStorageStatus emberAfOtaStorageDriverInvalidateImageCallback(void)
   1232          {
   \                     emberAfOtaStorageDriverInvalidateImageCallback: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1233            // The storage driver and the rest of the OTA bootload code will not function correctly unless it is implemnted.
   1234            // Please implement me.
   1235            assert(FALSE);
   \   00000002   0xF240 0x41D3      MOVW     R1,#+1235
   \   00000006   0x....             B.N      ?Subroutine2
   1236            return EMBER_AF_OTA_STORAGE_ERROR;
   1237          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2: (+1)
   \   00000000   0x.... 0x....      ADR.W    R0,`?<Constant "callback-stub.c">`
   \   00000004   0x.... 0x....      BL       halInternalAssertFailed
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0xBD02             POP      {R1,PC}          ;; return
   1238          
   1239          /** @brief Ota Storage Driver Prepare To Resume Download
   1240           *
   1241           * This callback allows the underlying storage driver to prepare to resume the
   1242           * OTA file download.  For example, the driver may exceute a page erase to
   1243           * insure the next page is ready to be written to.
   1244           *
   1245           */

   \                                 In section .text, align 2, keep-with-next
   1246          EmberAfOtaStorageStatus emberAfOtaStorageDriverPrepareToResumeDownloadCallback(void)
   1247          {
   \                     emberAfOtaStorageDriverPrepareToResumeDownloadCallback: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1248            assert(FALSE);
   \   00000002   0xF44F 0x619C      MOV      R1,#+1248
   \   00000006                      REQUIRE ?Subroutine2
   \   00000006                      ;; // Fall through to label ?Subroutine2
   1249            return EMBER_AF_OTA_STORAGE_ERROR;
   1250          }
   1251          
   1252          /** @brief Ota Storage Driver Read
   1253           *
   1254           * This callback defines the low-level means by which a device reads from the
   1255           * OTA storage device.
   1256           *
   1257           * @param offset The address offset from the start of the storage device where
   1258           * data is to be read.  Ver.: always
   1259           * @param length The length of the data to be read from the storage device.
   1260           * Ver.: always
   1261           * @param returnData A pointer where the data read from the device should be
   1262           * written to.  Ver.: always
   1263           */

   \                                 In section .text, align 2, keep-with-next
   1264          boolean emberAfOtaStorageDriverReadCallback(int32u offset,
   1265                                                      int32u length,
   1266                                                      int8u* returnData)
   1267          {
   \                     emberAfOtaStorageDriverReadCallback: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1268            // The storage driver and the rest of the OTA bootload code will not function correctly unless it is implemnted.
   1269            // Please implement me.
   1270            assert(FALSE);
   \   00000002   0xF240 0x41F6      MOVW     R1,#+1270
   \   00000006                      REQUIRE ?Subroutine1
   \   00000006                      ;; // Fall through to label ?Subroutine1
   1271            return FALSE;
   1272          }
   1273          
   1274          /** @brief Ota Storage Driver Retrieve Last Stored Offset
   1275           *
   1276           * This callback defines the low-level means by which a device retrieves the
   1277           * last persistently recorded download offset.  This may be different than last
   1278           * actual download offset.
   1279           *
   1280           */

   \                                 In section .text, align 2, keep-with-next
   1281          int32u emberAfOtaStorageDriverRetrieveLastStoredOffsetCallback(void)
   1282          {
   \                     emberAfOtaStorageDriverRetrieveLastStoredOffsetCallback: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1283            // The storage driver and the rest of the OTA bootload code will not function correctly unless it is implemnted.
   1284            // Please implement me.
   1285            assert(FALSE);
   \   00000002   0xF240 0x5105      MOVW     R1,#+1285
   \   00000006   0x....             B.N      ?Subroutine1
   1286            return 0;
   1287          }
   1288          
   1289          /** @brief Ota Storage Driver Write
   1290           *
   1291           * This callback defines the low-level means by which a device reads from the
   1292           * OTA storage device.
   1293           *
   1294           * @param dataToWrite A pointer to the data that will be written to the storage
   1295           * device.  Ver.: always
   1296           * @param offset The address offset from the start of the storage device where
   1297           * data will be written.  Ver.: always
   1298           * @param length The length of the data to be written to the storage device.
   1299           * Ver.: always
   1300           */

   \                                 In section .text, align 2, keep-with-next
   1301          boolean emberAfOtaStorageDriverWriteCallback(const int8u* dataToWrite,
   1302                                                       int32u offset,
   1303                                                       int32u length)
   1304          {
   \                     emberAfOtaStorageDriverWriteCallback: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1305            // The storage driver and the rest of the OTA bootload code will not function correctly unless it is implemnted.
   1306            // Please implement me.
   1307            assert(FALSE);
   \   00000002   0xF240 0x511B      MOVW     R1,#+1307
   \   00000006   0x....             B.N      ?Subroutine1
   1308            return FALSE;
   1309          }
   1310          
   1311          /** @brief Ota Storage Finish Download
   1312           *
   1313           * This function indicates to the storage module that the download has finished.
   1314           *
   1315           * @param offset The final offset of the downloaded file (i.e. the total size)
   1316           * Ver.: always
   1317           */

   \                                 In section .text, align 2, keep-with-next
   1318          EmberAfOtaStorageStatus emberAfOtaStorageFinishDownloadCallback(int32u offset)
   1319          {
   1320            return EMBER_AF_OTA_STORAGE_SUCCESS;
   \                     emberAfOtaStorageFinishDownloadCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1321          }
   1322          
   1323          /** @brief Ota Storage Get Count
   1324           *
   1325           * This callback returns the total number of ZigBee Over-the-air upgrade images
   1326           * stored in the storage module.
   1327           *
   1328           */

   \                                 In section .text, align 2, keep-with-next
   1329          int8u emberAfOtaStorageGetCountCallback(void)
   1330          {
   1331            return 0;
   \                     emberAfOtaStorageGetCountCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1332          }
   1333          
   1334          /** @brief Ota Storage Get Full Header
   1335           *
   1336           * This callback populates the EmberAfOtaHeader structure pointed to by the
   1337           * returnData with data about the OTA file stored in the storage module.
   1338           *
   1339           * @param id This is a pointer to the image id for the OTA file to retrieve
   1340           * information about.  Ver.: always
   1341           * @param returnData This is a pointer to the location of the structure that
   1342           * will be populated with data.  Ver.: always
   1343           */

   \                                 In section .text, align 2, keep-with-next
   1344          EmberAfOtaStorageStatus emberAfOtaStorageGetFullHeaderCallback(const EmberAfOtaImageId* id,
   1345                                                                         EmberAfOtaHeader* returnData)
   1346          {
   1347            // If the requested image cannot be found, then an error shouldb e returned.
   1348            return EMBER_AF_OTA_STORAGE_ERROR;
   \                     emberAfOtaStorageGetFullHeaderCallback: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x4770             BX       LR               ;; return
   1349          }
   1350          
   1351          /** @brief Ota Storage Get Total Image Size
   1352           *
   1353           * This function returns the total size of the ZigBee Over-the-air file with the
   1354           * passed parameters.  If no file is found with those parameters, 0 is returned.
   1355           *
   1356           * @param id A pointer to the image identifier for the OTA file to retrieve
   1357           * information for.  Ver.: always
   1358           */

   \                                 In section .text, align 2, keep-with-next
   1359          int32u emberAfOtaStorageGetTotalImageSizeCallback(const EmberAfOtaImageId* id)
   1360          {
   1361            // On failure this should return an image size of zero.
   1362            return 0;
   \                     emberAfOtaStorageGetTotalImageSizeCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1363          }
   1364          
   1365          /** @brief Ota Storage Init
   1366           *
   1367           * This callback initializes the ZigBee Over-the-air storage module.
   1368           *
   1369           */

   \                                 In section .text, align 2, keep-with-next
   1370          EmberAfOtaStorageStatus emberAfOtaStorageInitCallback(void)
   1371          {
   1372            return EMBER_AF_OTA_STORAGE_SUCCESS;
   \                     emberAfOtaStorageInitCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1373          }
   1374          
   1375          /** @brief Ota Storage Iterator First
   1376           *
   1377           * This callback lets you walk through the list of all OTA files by jumping to
   1378           * the first file in the list maintained by the storage module.  If there is no
   1379           * file then emberAfOtaInvalidImageId is returned.
   1380           *
   1381           */

   \                                 In section .text, align 2, keep-with-next
   1382          EmberAfOtaImageId emberAfOtaStorageIteratorFirstCallback(void)
   1383          {
   1384            // It is expected that the storage module maintain its own internal iterator that the 'first' and 'next' functions will manipulate.
   1385          
   1386            // If there are no images at all, this function should return the invalid image id.
   1387            return emberAfInvalidImageId;
   \                     emberAfOtaStorageIteratorFirstCallback: (+1)
   \   00000000   0x....             B.N      ?Subroutine3
   1388          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable1
   \   00000002   0x2210             MOVS     R2,#+16
   \   00000004   0x.... 0x....      B.W      __aeabi_memcpy4
   1389          
   1390          /** @brief Ota Storage Iterator Next
   1391           *
   1392           * This callback lets you walk through the list of all OTA files by jumping to
   1393           * the next file in the list maintained by the storage module.  If there is no
   1394           * next file then emberAfOtaInvalidImageId is returned.
   1395           *
   1396           */

   \                                 In section .text, align 2, keep-with-next
   1397          EmberAfOtaImageId emberAfOtaStorageIteratorNextCallback(void)
   \                     emberAfOtaStorageIteratorNextCallback: (+1)
   \   00000000   0xBF00             Nop      
   1398          {
   1399            // It is expected that the storage module maintain its own internal iterator that the 'first' and 'next' functions will manipulate.
   1400          
   1401            // If there are no more images, this function should return the invalid image id.
   1402            return emberAfInvalidImageId;
   \   00000002                      REQUIRE ?Subroutine3
   \   00000002                      ;; // Fall through to label ?Subroutine3
   1403          }
   1404          
   1405          /** @brief Ota Storage Read Image Data
   1406           *
   1407           * This callback reads data from the specified OTA file and returns that data to
   1408           * the caller.
   1409           *
   1410           * @param id This is a pointer to the image id for the OTA file to retrieve data
   1411           * from.  Ver.: always
   1412           * @param offset This is the offset relative to the start of the image where the
   1413           * data should be read from.  Ver.: always
   1414           * @param length This is the length of data that will be read.  Ver.: always
   1415           * @param returnData This is a pointer to where the data read out of the file
   1416           * will be written to  Ver.: always
   1417           * @param returnedLength This is a pointer to a variable where the actual length
   1418           * of data read will be written to.  A short read may occur if the end of file
   1419           * was reached.  Ver.: always
   1420           */

   \                                 In section .text, align 2, keep-with-next
   1421          EmberAfOtaStorageStatus emberAfOtaStorageReadImageDataCallback(const EmberAfOtaImageId* id,
   1422                                                                         int32u offset,
   1423                                                                         int32u length,
   1424                                                                         int8u* returnData,
   1425                                                                         int32u* returnedLength)
   1426          {
   1427            // If the requested image cannot be found, then an error should be returned.
   1428            return EMBER_AF_OTA_STORAGE_ERROR;
   \                     emberAfOtaStorageReadImageDataCallback: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x4770             BX       LR               ;; return
   1429          }
   1430          
   1431          /** @brief Ota Storage Search
   1432           *
   1433           * This callback searches through the list of all images for one that matches
   1434           * the passed parameters.  On success an image identifier is returned with a
   1435           * matching image.  On failure emberAfInvalidImageId is returned.
   1436           *
   1437           * @param manufacturerId The ZigBee assigned identifier of the manufacturer
   1438           * contained in the OTA image being searched for.  Ver.: always
   1439           * @param imageTypeId The image type identifier contained in the OTA image being
   1440           * searched for.  Ver.: always
   1441           * @param hardwareVersion This is a pointer to the hardware version that will be
   1442           * used in the search.  If the pointer is NULL, hardware version will not be
   1443           * considered when searching for matching images.  If it points to a value, the
   1444           * search will only consider images where that value falls between the minimum
   1445           * and maxmimum hardware version specified in the OTA file.  If no hardware
   1446           * version is present in an OTA file but the other parameters match, the file
   1447           * will be considered a match  Ver.: always
   1448           */

   \                                 In section .text, align 2, keep-with-next
   1449          EmberAfOtaImageId emberAfOtaStorageSearchCallback(int16u manufacturerId,
   1450                                                            int16u imageTypeId,
   1451                                                            const int16u* hardwareVersion)
   1452          {
   1453            // If no image is found that matches the search criteria, this function should return the invalid image id.
   1454            return emberAfInvalidImageId;
   \                     emberAfOtaStorageSearchCallback: (+1)
   \   00000000   0x....             B.N      ?Subroutine3
   1455          }
   1456          
   1457          /** @brief Ota Storage Write Temp Data
   1458           *
   1459           * This function writes to the temporary data in the storage device at the
   1460           * specified offset.  It is used when downloading a raw image over the air.
   1461           *
   1462           * @param offset The location within the download image file where to write the
   1463           * data.  Ver.: always
   1464           * @param length The length of data to write.  Ver.: always
   1465           * @param data A pointer to the temporary data that will be written to the
   1466           * storage device.  Ver.: always
   1467           */

   \                                 In section .text, align 2, keep-with-next
   1468          EmberAfOtaStorageStatus emberAfOtaStorageWriteTempDataCallback(int32u offset,
   1469                                                                         int32u length,
   1470                                                                         const int8u* data)
   1471          {
   1472            // If the image data cannot be stored, an error should be returned.
   1473            return EMBER_AF_OTA_STORAGE_ERROR;
   \                     emberAfOtaStorageWriteTempDataCallback: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x4770             BX       LR               ;; return
   1474          }
   1475          
   1476          /** @brief Partner Link Key Exchange Request
   1477           *
   1478           * This function is called by the framework on SOC platforms when a remote node
   1479           * requests a partner link key exchange.  The application should return
   1480           * EMBER_SUCCESS to accept the request or any other status to reject it.  On
   1481           * network coprocessor platforms, this function will not be called because the
   1482           * NCP handles partner link key exchange requests based on the binding policy.
   1483           *
   1484           * @param partner The EUI of the remote node.  Ver.: always
   1485           */

   \                                 In section .text, align 2, keep-with-next
   1486          EmberStatus emberAfPartnerLinkKeyExchangeRequestCallback(EmberEUI64 partner)
   1487          {
   1488            return EMBER_LIBRARY_NOT_PRESENT;
   \                     emberAfPartnerLinkKeyExchangeRequestCallback: (+1)
   \   00000000   0x20B5             MOVS     R0,#+181
   \   00000002   0x4770             BX       LR               ;; return
   1489          }
   1490          
   1491          /** @brief Partner Link Key Exchange Response
   1492           *
   1493           * This function is called by the framework when a remote node requests a
   1494           * partner link key exchange.  The application should return TRUE to accept the
   1495           * request or FALSE to reject it.  On network coprocessor platforms, this
   1496           * function will not be called because the NCP handles partner link key exchange
   1497           * requests based on the binding policy.
   1498           *
   1499           * @param sender The EUI of the remote node.  Ver.: always
   1500           * @param status The ZDO response status.  Ver.: always
   1501           */

   \                                 In section .text, align 2, keep-with-next
   1502          void emberAfPartnerLinkKeyExchangeResponseCallback(EmberNodeId sender,
   1503                                                             EmberZdoStatus status)
   1504          {
   1505          }
   \                     emberAfPartnerLinkKeyExchangeResponseCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1506          
   1507          /** @brief Performing Key Establishment
   1508           *
   1509           * This function is called by the framework to determine if the device is
   1510           * performing key establishment.  The application should return TRUE if key
   1511           * establishment is in progress.
   1512           *
   1513           */

   \                                 In section .text, align 2, keep-with-next
   1514          boolean emberAfPerformingKeyEstablishmentCallback(void)
   1515          {
   1516            return FALSE;
   \                     emberAfPerformingKeyEstablishmentCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1517          }
   1518          
   1519          /** @brief Reset To Factory Defaults
   1520           *
   1521           * This function is called by the Basic server plugin when a request to reset to
   1522           * factory defaults is received.  The plugin will reset attributes managed by
   1523           * the framework to their default values.  The application should preform any
   1524           * other necessary reset-related operations in this callback, including
   1525           * resetting any externally-stored attributes.
   1526           *
   1527           * @param endpoint   Ver.: always
   1528           */

   \                                 In section .text, align 2, keep-with-next
   1529          void emberAfPluginBasicResetToFactoryDefaultsCallback(int8u endpoint)
   1530          {
   1531          }
   \                     emberAfPluginBasicResetToFactoryDefaultsCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1532          
   1533          /** @brief Rollover
   1534           *
   1535           * This function is called every time a counter exceeds its threshold.
   1536           *
   1537           * @param type The counter that rolled over  Ver.: always
   1538           */

   \                                 In section .text, align 2, keep-with-next
   1539          void emberAfPluginCountersRolloverCallback(EmberCounterType type)
   1540          {
   1541          }
   \                     emberAfPluginCountersRolloverCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1542          
   1543          /** @brief Get Group Name
   1544           *
   1545           * This function returns the name of a group with the provided group ID, should
   1546           * it exist.
   1547           *
   1548           * @param endpoint Endpoint  Ver.: always
   1549           * @param groupId Group ID  Ver.: always
   1550           * @param groupName Group Name  Ver.: always
   1551           */

   \                                 In section .text, align 2, keep-with-next
   1552          void emberAfPluginGroupsServerGetGroupNameCallback(int8u endpoint,
   1553                                                             int16u groupId,
   1554                                                             int8u *groupName)
   1555          {
   1556          }
   \                     emberAfPluginGroupsServerGetGroupNameCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1557          
   1558          /** @brief Group Names Supported
   1559           *
   1560           * This function returns whether or not group names are supported.
   1561           *
   1562           * @param endpoint Endpoint  Ver.: always
   1563           */

   \                                 In section .text, align 2, keep-with-next
   1564          boolean emberAfPluginGroupsServerGroupNamesSupportedCallback(int8u endpoint)
   1565          {
   1566            return FALSE;
   \                     emberAfPluginGroupsServerGroupNamesSupportedCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1567          }
   1568          
   1569          /** @brief Set Group Name
   1570           *
   1571           * This function sets the name of a group with the provided group ID.
   1572           *
   1573           * @param endpoint Endpoint  Ver.: always
   1574           * @param groupId Group ID  Ver.: always
   1575           * @param groupName Group Name  Ver.: always
   1576           */

   \                                 In section .text, align 2, keep-with-next
   1577          void emberAfPluginGroupsServerSetGroupNameCallback(int8u endpoint,
   1578                                                             int16u groupId,
   1579                                                             int8u *groupName)
   1580          {
   1581          }
   \                     emberAfPluginGroupsServerSetGroupNameCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1582          
   1583          /** @brief Active
   1584          
   1585           *
   1586           * This function is called by the Idle/Sleep plugin after idling.
   1587           *
   1588           */

   \                                 In section .text, align 2, keep-with-next
   1589          void emberAfPluginIdleSleepActiveCallback(void)
   1590          {
   1591          }
   \                     emberAfPluginIdleSleepActiveCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1592          
   1593          /** @brief Ok To Idle
   1594           *
   1595           * This function is called by the Idle/Sleep plugin before idling.  It is called
   1596           * with interrupts disabled.  The application should return TRUE if the device
   1597           * may idle or FALSE otherwise.
   1598           *
   1599           */

   \                                 In section .text, align 2, keep-with-next
   1600          boolean emberAfPluginIdleSleepOkToIdleCallback(void)
   1601          {
   1602            return TRUE;
   \                     emberAfPluginIdleSleepOkToIdleCallback: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x4770             BX       LR               ;; return
   1603          }
   1604          
   1605          /** @brief Ok To Sleep
   1606           *
   1607           * This function is called by the Idle/Sleep plugin before sleeping.  It is
   1608           * called with interrupts disabled.  The application should return TRUE if the
   1609           * device may sleep or FALSE otherwise.
   1610           *
   1611           * @param durationMs The maximum duration in milliseconds that the device will
   1612           * sleep.  Ver.: always
   1613           */

   \                                 In section .text, align 2, keep-with-next
   1614          boolean emberAfPluginIdleSleepOkToSleepCallback(int32u durationMs)
   1615          {
   1616            return TRUE;
   \                     emberAfPluginIdleSleepOkToSleepCallback: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x4770             BX       LR               ;; return
   1617          }
   1618          
   1619          /** @brief Wake Up
   1620           *
   1621           * This function is called by the Idle/Sleep plugin after sleeping.
   1622           *
   1623           * @param durationMs The duration in milliseconds that the device slept.  Ver.:
   1624           * always
   1625           */

   \                                 In section .text, align 2, keep-with-next
   1626          void emberAfPluginIdleSleepWakeUpCallback(int32u durationMs)
   1627          {
   1628          }
   \                     emberAfPluginIdleSleepWakeUpCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1629          
   1630          /** @brief Finished
   1631           *
   1632           * This callback is fired when the network-find plugin is finished with the
   1633           * forming or joining process.  The result of the operation will be returned in
   1634           * the status parameter.
   1635           *
   1636           * @param status   Ver.: always
   1637           */

   \                                 In section .text, align 2, keep-with-next
   1638          void emberAfPluginNetworkFindFinishedCallback(EmberStatus status)
   1639          {
   1640          }
   \                     emberAfPluginNetworkFindFinishedCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1641          
   1642          /** @brief Get Radio Power For Channel
   1643           *
   1644           * This callback is called by the framework when it is setting the radio power
   1645           * during the discovery process. The framework will set the radio power
   1646           * depending on what is returned by this callback.
   1647           *
   1648           * @param channel   Ver.: always
   1649           */

   \                                 In section .text, align 2, keep-with-next
   1650          int8s emberAfPluginNetworkFindGetRadioPowerForChannelCallback(int8u channel)
   1651          {
   1652            return EMBER_AF_PLUGIN_NETWORK_FIND_RADIO_TX_POWER;
   \                     emberAfPluginNetworkFindGetRadioPowerForChannelCallback: (+1)
   \   00000000   0x2008             MOVS     R0,#+8
   \   00000002   0x4770             BX       LR               ;; return
   1653          }
   1654          
   1655          /** @brief Join
   1656           *
   1657           * This callback is called by the plugin when a joinable network has been found.
   1658           *  If the application returns TRUE, the plugin will attempt to join the
   1659           * network.  Otherwise, the plugin will ignore the network and continue
   1660           * searching.  Applications can use this callback to implement a network
   1661           * blacklist.
   1662           *
   1663           * @param networkFound   Ver.: always
   1664           * @param lqi   Ver.: always
   1665           * @param rssi   Ver.: always
   1666           */

   \                                 In section .text, align 2, keep-with-next
   1667          boolean emberAfPluginNetworkFindJoinCallback(EmberZigbeeNetwork *networkFound,
   1668                                                       int8u lqi,
   1669                                                       int8s rssi)
   1670          {
   1671            return TRUE;
   \                     emberAfPluginNetworkFindJoinCallback: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x4770             BX       LR               ;; return
   1672          }
   1673          
   1674          /** @brief Configured
   1675           *
   1676           * This callback is called by the Reporting plugin whenever a reporting entry is
   1677           * configured, including when entries are deleted or updated.  The application
   1678           * can use this callback for scheduling readings or measurements based on the
   1679           * minimum and maximum reporting interval for the entry.  The application should
   1680           * return EMBER_ZCL_STATUS_SUCCESS if it can support the configuration or an
   1681           * error status otherwise.  Note: attribute reporting is required for many
   1682           * clusters and attributes, so rejecting a reporting configuration may violate
   1683           * ZigBee specifications.
   1684           *
   1685           * @param entry   Ver.: always
   1686           */

   \                                 In section .text, align 2, keep-with-next
   1687          EmberAfStatus emberAfPluginReportingConfiguredCallback(const EmberAfPluginReportingEntry *entry)
   1688          {
   1689            return EMBER_ZCL_STATUS_SUCCESS;
   \                     emberAfPluginReportingConfiguredCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1690          }
   1691          /** @brief Post Attribute Change
   1692           *
   1693           * This function is called by the application framework after it changes an
   1694           * attribute value. The value passed into this callback is the value to which
   1695           * the attribute was set by the framework.
   1696           *
   1697           * @param endpoint   Ver.: always
   1698           * @param clusterId   Ver.: always
   1699           * @param attributeId   Ver.: always
   1700           * @param mask   Ver.: always
   1701           * @param manufacturerCode   Ver.: always
   1702           * @param type   Ver.: always
   1703           * @param size   Ver.: always
   1704           * @param value   Ver.: always
   1705           */

   \                                 In section .text, align 2, keep-with-next
   1706          void emberAfPostAttributeChangeCallback(int8u endpoint,
   1707                                                  EmberAfClusterId clusterId,
   1708                                                  EmberAfAttributeId attributeId,
   1709                                                  int8u mask,
   1710                                                  int16u manufacturerCode,
   1711                                                  int8u type,
   1712                                                  int8u size,
   1713                                                  int8u* value)
   1714          {
   1715          }
   \                     emberAfPostAttributeChangeCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1716          
   1717          /** @brief Pre Attribute Change
   1718           *
   1719           * This function is called by the application framework before it changes an
   1720           * attribute value.  The value passed into this callback is the value to which
   1721           * the attribute is to be set by the framework.  The application should return
   1722           * ::EMBER_ZCL_STATUS_SUCCESS to permit the change or any other ::EmberAfStatus
   1723           * to reject it.
   1724           *
   1725           * @param endpoint   Ver.: always
   1726           * @param clusterId   Ver.: always
   1727           * @param attributeId   Ver.: always
   1728           * @param mask   Ver.: always
   1729           * @param manufacturerCode   Ver.: always
   1730           * @param type   Ver.: always
   1731           * @param size   Ver.: always
   1732           * @param value   Ver.: always
   1733           */

   \                                 In section .text, align 2, keep-with-next
   1734          EmberAfStatus emberAfPreAttributeChangeCallback(int8u endpoint,
   1735                                                          EmberAfClusterId clusterId,
   1736                                                          EmberAfAttributeId attributeId,
   1737                                                          int8u mask,
   1738                                                          int16u manufacturerCode,
   1739                                                          int8u type,
   1740                                                          int8u size,
   1741                                                          int8u* value)
   1742          {
   1743            return EMBER_ZCL_STATUS_SUCCESS;
   \                     emberAfPreAttributeChangeCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1744          }
   1745          
   1746          /** @brief Pre Cli Send
   1747           *
   1748           * This function is called by the framework when it is about to pass a message
   1749           * constructed over CLI to the stack primitives for sending. If the function
   1750           * returns TRUE it is assumed that the callback has consumed and processed the
   1751           * message. The framework will not do any further processing on the message.
   1752          
   1753           *     If the function returns FALSE then it is assumed that the callback has
   1754           * not processed the message and the framework will continue to process
   1755           * accordingly.
   1756           *
   1757           * @param apsFrame The structure containing the APS frame  Ver.: always
   1758           * @param source Source Node Id  Ver.: always
   1759           * @param destination Destintion Node Id  Ver.: always
   1760           * @param message Pointer to the message payload  Ver.: always
   1761           * @param messageLength Length of the message payload  Ver.: always
   1762           */

   \                                 In section .text, align 2, keep-with-next
   1763          boolean emberAfPreCliSendCallback(EmberApsFrame* apsFrame,
   1764                                            EmberNodeId source,
   1765                                            EmberNodeId destination,
   1766                                            int8u* message,
   1767                                            int16u messageLength)
   1768          {
   1769            return FALSE;
   \                     emberAfPreCliSendCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1770          }
   1771          
   1772          /** @brief Pre Command Received
   1773           *
   1774           * This callback is the second in the Application Framework's message processing
   1775           * chain. At this point in the processing of incoming over-the-air messages, the
   1776           * application has determined that the incoming message is a ZCL command. It
   1777           * parses enough of the message to populate an EmberAfClusterCommand struct. The
   1778           * Application Framework defines this struct value in a local scope to the
   1779           * command processing but also makes it available through a global pointer
   1780           * called emberAfCurrentCommand, in app/framework/util/util.c. When command
   1781           * processing is complete, this pointer is cleared.
   1782           *
   1783           * @param cmd   Ver.: always
   1784           */

   \                                 In section .text, align 2, keep-with-next
   1785          boolean emberAfPreCommandReceivedCallback(EmberAfClusterCommand* cmd)
   1786          {
   1787            return FALSE;
   \                     emberAfPreCommandReceivedCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1788          }
   1789          
   1790          /** @brief Pre Message Received
   1791           *
   1792           * This callback is the first in the Application Framework's message processing
   1793           * chain. The Application Framework calls it when a message has been received
   1794           * over the air but has not yet been parsed by the ZCL command-handling code. If
   1795           * you wish to parse some messages that are completely outside the ZCL
   1796           * specification or are not handled by the Application Framework's command
   1797           * handling code, you should intercept them for parsing in this callback.
   1798          
   1799           *   This callback returns a Boolean value indicating whether or not the message
   1800           * has been handled. If the callback returns a value of TRUE, then the
   1801           * Application Framework assumes that the message has been handled and it does
   1802           * nothing else with it. If the callback returns a value of FALSE, then the
   1803           * application framework continues to process the message as it would with any
   1804           * incoming message.
   1805                  Note: 	This callback receives a pointer to an
   1806           * incoming message struct. This struct allows the application framework to
   1807           * provide a unified interface between both Host devices, which receive their
   1808           * message through the ezspIncomingMessageHandler, and SoC devices, which
   1809           * receive their message through emberIncomingMessageHandler.
   1810           *
   1811           * @param incomingMessage   Ver.: always
   1812           */

   \                                 In section .text, align 2, keep-with-next
   1813          boolean emberAfPreMessageReceivedCallback(EmberAfIncomingMessage* incomingMessage)
   1814          {
   1815            return FALSE;
   \                     emberAfPreMessageReceivedCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1816          }
   1817          
   1818          /** @brief Pre Message Send
   1819           *
   1820           * This function is called by the framework when it is about to pass a message
   1821           * to the stack primitives for sending.   This message may or may not be ZCL,
   1822           * ZDO, or some other protocol.  This is called prior to
   1823                  any ZigBee
   1824           * fragmentation that may be done.  If the function returns TRUE it is assumed
   1825           * the callback has consumed and processed the message.  The callback must also
   1826           * set the EmberStatus status code to be passed back to the caller.  The
   1827           * framework will do no further processing on the message.
   1828                  If the
   1829           * function returns FALSE then it is assumed that the callback has not processed
   1830           * the mesasge and the framework will continue to process accordingly.
   1831           *
   1832           * @param messageStruct The structure containing the parameters of the APS
   1833           * message to be sent.  Ver.: always
   1834           * @param status A pointer to the status code value that will be returned to the
   1835           * caller.  Ver.: always
   1836           */

   \                                 In section .text, align 2, keep-with-next
   1837          boolean emberAfPreMessageSendCallback(EmberAfMessageStruct* messageStruct,
   1838                                                EmberStatus* status)
   1839          {
   1840            return FALSE;
   \                     emberAfPreMessageSendCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1841          }
   1842          
   1843          /** @brief Pre Ncp Reset
   1844           *
   1845           * This function will be called prior to the reset of the NCP by the host.
   1846           *
   1847           */

   \                                 In section .text, align 2, keep-with-next
   1848          void emberAfPreNcpResetCallback(void)
   1849          {
   1850          }
   \                     emberAfPreNcpResetCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1851          
   1852          
   1853          
   1854          /** @brief Registration Abort
   1855           *
   1856           * This callback is called when the device should abort the registration
   1857           * process.
   1858           *
   1859           */

   \                                 In section .text, align 2, keep-with-next
   1860          void emberAfRegistrationAbortCallback(void)
   1861          {
   1862          }
   \                     emberAfRegistrationAbortCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1863          
   1864          /** @brief Registration
   1865           *
   1866           * This callback is called when the device joins a network and the process of
   1867           * registration is complete. This callback provides a success value of TRUE if
   1868           * the registration process was successful and a value of FALSE if registration
   1869           * failed.
   1870           *
   1871           * @param success TRUE if registration succeeded, FALSE otherwise.  Ver.: always
   1872           */

   \                                 In section .text, align 2, keep-with-next
   1873          void emberAfRegistrationCallback(boolean success)
   1874          {
   1875          }
   \                     emberAfRegistrationCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1876          
   1877          /** @brief Registration Start
   1878           *
   1879           * This callback is called when the device joins a network and the registration
   1880           * process should begin.  The application should return EMBER_SUCCESS if the
   1881           * registration process started successfully.  When registration is complete,
   1882           * the application should call emberAfRegistrationCallback with an indication of
   1883           * success or failure.
   1884           *
   1885           */

   \                                 In section .text, align 2, keep-with-next
   1886          EmberStatus emberAfRegistrationStartCallback(void)
   1887          {
   1888            return EMBER_LIBRARY_NOT_PRESENT;
   \                     emberAfRegistrationStartCallback: (+1)
   \   00000000   0x20B5             MOVS     R0,#+181
   \   00000002   0x4770             BX       LR               ;; return
   1889          }
   1890          
   1891          /** @brief Remote Delete Binding Permission
   1892           *
   1893           * This function is called by the framework to request permission to service the
   1894           * remote delete binding request. Return EMBER_SUCCESS to allow request,
   1895           * anything else to disallow request.
   1896           *
   1897           * @param index index to an Ember binding table entry  Ver.: always
   1898           */

   \                                 In section .text, align 2, keep-with-next
   1899          EmberStatus emberAfRemoteDeleteBindingPermissionCallback(int8u index)
   1900          {
   1901            return EMBER_SUCCESS; // default
   \                     emberAfRemoteDeleteBindingPermissionCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1902          }
   1903          
   1904          /** @brief Remote Set Binding Permission
   1905           *
   1906           * This function is called by the framework to request permission to service the
   1907           * remote set binding request. Return EMBER_SUCCESS to allow request, anything
   1908           * else to disallow request.
   1909           *
   1910           * @param entry Ember Binding Tablet Entry  Ver.: always
   1911           */

   \                                 In section .text, align 2, keep-with-next
   1912          EmberStatus emberAfRemoteSetBindingPermissionCallback(const EmberBindingTableEntry *entry)
   1913          {
   1914            return EMBER_SUCCESS; // default
   \                     emberAfRemoteSetBindingPermissionCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1915          }
   1916          
   1917          /** @brief Remove From Current App Tasks
   1918           *
   1919           * This function is only useful to sleepy end devices.  This function will
   1920           * remove the passed item from the set of tasks the application has outstanding
   1921           * (e.g. message sent requiring APS acknwoledgement).  This will affect how the
   1922           * application behaves with regard to sleeping and polling.  Removing the item
   1923           * from the list of outstanding tasks may allow the device to sleep longer and
   1924           * poll less frequently.  If there are other outstanding tasks the system may
   1925           * still have to stay away and poll more often.
   1926           *
   1927           * @param tasks   Ver.: always
   1928           */

   \                                 In section .text, align 2, keep-with-next
   1929          void emberAfRemoveFromCurrentAppTasksCallback(EmberAfApplicationTask tasks)
   1930          {
   1931          }
   \                     emberAfRemoveFromCurrentAppTasksCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1932          
   1933          /** @brief Schedule Poll Event
   1934           *
   1935           * @deprecated This callback has been deprecated and will be removed in a future
   1936           * release.  Customers should use ::emberAfMainTickCallback instead.
   1937           *
   1938           */

   \                                 In section .text, align 2, keep-with-next
   1939          void emberAfSchedulePollEventCallback(void)
   1940          {
   1941          }
   \                     emberAfSchedulePollEventCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1942          
   1943          /** @brief Security Init
   1944           *
   1945           * This callback is called by the framework to give the application a chance to
   1946           * modify the security settings of the node during network initialization.
   1947           * Depending on the context when this callback is called, the pointer to the
   1948           * initial security state may be NULL, which means the initial security state
   1949           * can no longer be modified as the node is already operating on the network.
   1950           *
   1951           * @param state   Ver.: always
   1952           * @param extended   Ver.: always
   1953           * @param trustCenter   Ver.: always
   1954           */

   \                                 In section .text, align 2, keep-with-next
   1955          void emberAfSecurityInitCallback(EmberInitialSecurityState *state,
   1956                                           EmberExtendedSecurityBitmask *extended,
   1957                                           boolean trustCenter)
   1958          {
   1959          }
   \                     emberAfSecurityInitCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1960          
   1961          /** @brief Key Establishment Cluster Server Command Received
   1962           *
   1963           * This function is called by the application framework when a client-to-server
   1964           * key establishment command is received but has yet to be handled by the
   1965           * framework code.  This function should return a boolean value indicating
   1966           * whether the command has been handled by the application code and should not
   1967           * be further processed by the framework.
   1968           *
   1969           * @param cmd   Ver.: always
   1970           */

   \                                 In section .text, align 2, keep-with-next
   1971          boolean emberAfKeyEstablishmentClusterServerCommandReceivedCallback(EmberAfClusterCommand *cmd)
   1972          {
   1973            return FALSE;
   \                     emberAfKeyEstablishmentClusterServerCommandReceivedCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1974          }
   1975          
   1976          /** @brief Set Default Poll Control
   1977           *
   1978           * This function will set the default poll control for the current network to
   1979           * control whether or not it can long poll.
   1980           *
   1981           * @param control   Ver.: always
   1982           */

   \                                 In section .text, align 2, keep-with-next
   1983          void emberAfSetDefaultPollControlCallback(EmberAfEventPollControl control)
   1984          {
   1985          }
   \                     emberAfSetDefaultPollControlCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1986          
   1987          /** @brief Set Long Poll Interval Ms
   1988           *
   1989           * This function is only useful to end devices.  This function will set the long
   1990           * poll interval (in milliseconds) for the current network.  This interval is
   1991           * the maximum amount of time a child will wait between polls of its parent when
   1992           * it is not expecting data.
   1993           *
   1994           * @param longPollIntervalMs   Ver.: always
   1995           */

   \                                 In section .text, align 2, keep-with-next
   1996          void emberAfSetLongPollIntervalMsCallback(int32u longPollIntervalMs)
   1997          {
   1998          }
   \                     emberAfSetLongPollIntervalMsCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1999          
   2000          /** @brief Set Long Poll Interval Qs
   2001           *
   2002           * This function is only useful to end devices.  This function will set the long
   2003           * poll interval (in quarter seconds) for the current network.  This interval is
   2004           * the maximum amount of time a child will wait between polls of its parent when
   2005           * it is not expecting data.
   2006           *
   2007           * @param longPollIntervalQs   Ver.: always
   2008           */

   \                                 In section .text, align 2, keep-with-next
   2009          void emberAfSetLongPollIntervalQsCallback(int32u longPollIntervalQs)
   2010          {
   2011          }
   \                     emberAfSetLongPollIntervalQsCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   2012          
   2013          /** @brief Set Short Poll Interval Ms
   2014           *
   2015           * This function is only useful to sleepy end devices.  This function will set
   2016           * the short poll interval (in milliseconds) for the current network.  This
   2017           * interval is the maximum amount of time a child will wait between polls of its
   2018           * parent when it is expecting data.
   2019           *
   2020           * @param shortPollIntervalMs   Ver.: always
   2021           */

   \                                 In section .text, align 2, keep-with-next
   2022          void emberAfSetShortPollIntervalMsCallback(int16u shortPollIntervalMs)
   2023          {
   2024          }
   \                     emberAfSetShortPollIntervalMsCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   2025          
   2026          /** @brief Set Short Poll Interval Qs
   2027           *
   2028           * This function is only useful to sleepy end devices.  This function will set
   2029           * the short poll interval (in quarter seconds) for the current network.  This
   2030           * interval is the maximum amount of time a child will wait between polls of its
   2031           * parent when it is expecting data.
   2032           *
   2033           * @param shortPollIntervalQs   Ver.: always
   2034           */

   \                                 In section .text, align 2, keep-with-next
   2035          void emberAfSetShortPollIntervalQsCallback(int16u shortPollIntervalQs)
   2036          {
   2037          }
   \                     emberAfSetShortPollIntervalQsCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   2038          
   2039          /** @brief Set Source Route Overhead
   2040           *
   2041           * This function is called by the framework when it has information about the
   2042           * source route overhead to a particular destination. The application may use
   2043           * this information to cache the source route overhead.
   2044           *
   2045           * @param destination The node id of the destination  Ver.: always
   2046           * @param overhead The overhead in bytes  Ver.: always
   2047           */

   \                                 In section .text, align 2, keep-with-next
   2048          void emberAfSetSourceRouteOverheadCallback(EmberNodeId destination,
   2049                                                     int8u overhead)
   2050          {
   2051          }
   \                     emberAfSetSourceRouteOverheadCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   2052          
   2053          /** @brief Set Time
   2054           *
   2055           * This callback should be implemented, if the device has access to real time
   2056           * clock, and has an ability to update that clock. The application framework
   2057           * expects to be passed the utcTime which is the number of seconds since the
   2058           * year 2000. Default implementation does nothing. Note: This function used to
   2059           * take time in year, month, day, hour, min, sec. We have changed this to
   2060           * utcTime in order to conserve code space.
   2061           *
   2062           * @param utcTime   Ver.: always
   2063           */

   \                                 In section .text, align 2, keep-with-next
   2064          void emberAfSetTimeCallback(int32u utcTime)
   2065          {
   2066          }
   \                     emberAfSetTimeCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   2067          
   2068          /** @brief Set Wake Timeout Bitmask
   2069           *
   2070           * This function is only useful to sleepy end devices.  This function will set
   2071           * the wake timeout bitmask for the current network.  The bitmask determines
   2072           * which tasks will timeout automatically and which tasks require manual removal
   2073           * from the task list.
   2074           *
   2075           * @param tasks   Ver.: always
   2076           */

   \                                 In section .text, align 2, keep-with-next
   2077          void emberAfSetWakeTimeoutBitmaskCallback(EmberAfApplicationTask tasks)
   2078          {
   2079          }
   \                     emberAfSetWakeTimeoutBitmaskCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   2080          
   2081          /** @brief Set Wake Timeout Ms
   2082           *
   2083           * This function is only useful to sleepy end devices.  This function will set
   2084           * the wake timeout (in milliseconds) for the current network.  This timeout is
   2085           * the maximum amount of time a child will wait for a task in the wake bitmask
   2086           * to finish.  While waiting, the device will short poll.
   2087           *
   2088           * @param wakeTimeoutMs   Ver.: always
   2089           */

   \                                 In section .text, align 2, keep-with-next
   2090          void emberAfSetWakeTimeoutMsCallback(int16u wakeTimeoutMs)
   2091          {
   2092          }
   \                     emberAfSetWakeTimeoutMsCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   2093          
   2094          /** @brief Set Wake Timeout Qs
   2095           *
   2096           * This function is only useful to sleepy end devices.  This function will set
   2097           * the wake timeout (in quarter seconds) for the current network.  This timeout
   2098           * is the maximum amount of time a child will wait for a task in the wake
   2099           * bitmask to finish.  While waiting, the device will short poll.
   2100           *
   2101           * @param wakeTimeoutQs   Ver.: always
   2102           */

   \                                 In section .text, align 2, keep-with-next
   2103          void emberAfSetWakeTimeoutQsCallback(int16u wakeTimeoutQs)
   2104          {
   2105          }
   \                     emberAfSetWakeTimeoutQsCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   2106          
   2107          /** @brief Stack Status
   2108           *
   2109           * This function is called by the application framework from the stack status
   2110           * handler.  This callbacks provides applications an opportunity to be notified
   2111           * of changes to the stack status and take appropriate action.  The return code
   2112           * from this callback is ignored by the framework.  The framework will always
   2113           * process the stack status after the callback returns.
   2114           *
   2115           * @param status   Ver.: always
   2116           */

   \                                 In section .text, align 2, keep-with-next
   2117          boolean emberAfStackStatusCallback(EmberStatus status)
   2118          {
   2119            return FALSE;
   \                     emberAfStackStatusCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   2120          }
   2121          
   2122          /** @brief Start Move
   2123           *
   2124           * This function is called to initiate the process for a device to move (rejoin)
   2125           * to a new parent.
   2126           *
   2127           */

   \                                 In section .text, align 2, keep-with-next
   2128          boolean emberAfStartMoveCallback(void)
   2129          {
   2130            return FALSE;
   \                     emberAfStartMoveCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   2131          }
   2132          
   2133          /** @brief Stop Move
   2134           *
   2135           * This function is called to cancel a previously scheduled move (rejoin) to a
   2136           * new parent.
   2137           *
   2138           */

   \                                 In section .text, align 2, keep-with-next
   2139          void emberAfStopMoveCallback(void)
   2140          {
   2141          }
   \                     emberAfStopMoveCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   2142          
   2143          /** @brief Trust Center Join
   2144           *
   2145           * This callback is called from within the application framework's
   2146           * implementation of emberTrustCenterJoinHandler or ezspTrustCenterJoinHandler.
   2147           * This callback provides the same arguments passed to the
   2148           * TrustCenterJoinHandler. For more information about the TrustCenterJoinHandler
   2149           * please see documentation included in stack/include/trust-center.h.
   2150           *
   2151           * @param newNodeId   Ver.: always
   2152           * @param newNodeEui64   Ver.: always
   2153           * @param parentOfNewNode   Ver.: always
   2154           * @param status   Ver.: always
   2155           * @param decision   Ver.: always
   2156           */

   \                                 In section .text, align 2, keep-with-next
   2157          void emberAfTrustCenterJoinCallback(EmberNodeId newNodeId,
   2158                                              EmberEUI64 newNodeEui64,
   2159                                              EmberNodeId parentOfNewNode,
   2160                                              EmberDeviceUpdate status,
   2161                                              EmberJoinDecision decision)
   2162          {
   2163          }
   \                     emberAfTrustCenterJoinCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   2164          
   2165          /** @brief Trust Center Keepalive Abort
   2166           *
   2167           * This callback is called when the device should abort the trust center
   2168           * keepalive process.
   2169           *
   2170           */

   \                                 In section .text, align 2, keep-with-next
   2171          void emberAfTrustCenterKeepaliveAbortCallback(void)
   2172          {
   2173          }
   \                     emberAfTrustCenterKeepaliveAbortCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   2174          
   2175          /** @brief Trust Center Keepalive Update
   2176           *
   2177           * This callback is called when the device finishes registration (successfully
   2178           * or otherwise) and the trust center keepalive process must be updated.  If the
   2179           * keepalive process has not been started, then it is started.  Otherwise if the
   2180           * keepalive is in the process of searching for the TC, it will process the
   2181           * result of that Trust Center search operation.
   2182           *
   2183           * @param registrationComplete   Ver.: always
   2184           */

   \                                 In section .text, align 2, keep-with-next
   2185          void emberAfTrustCenterKeepaliveUpdateCallback(boolean registrationComplete)
   2186          {
   2187          }
   \                     emberAfTrustCenterKeepaliveUpdateCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     emberAfInvalidImageId

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "callback-stub.c">`:
   \   00000000   0x63 0x61          DC8 "callback-stub.c"
   \              0x6C 0x6C    
   \              0x62 0x61    
   \              0x63 0x6B    
   \              0x2D 0x73    
   \              0x74 0x75    
   \              0x62 0x2E    
   \              0x63 0x00    
   2188          
   2189          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   emberAfAddToCurrentAppTasksCallback
       0   emberAfAllowNetworkWriteAttributeCallback
       0   emberAfCheckForSleepCallback
       0   emberAfClusterInitCallback
       0   emberAfClusterSecurityCustomCallback
       0   emberAfDiscoverCommandsGeneratedResponseCallback
       0   emberAfDiscoverCommandsReceivedResponseCallback
       0   emberAfEepromInitCallback
       0   emberAfEepromNoteInitializedStateCallback
       0   emberAfEepromShutdownCallback
       0   emberAfExternalAttributeReadCallback
       0   emberAfExternalAttributeWriteCallback
       0   emberAfGetCurrentAppTasksCallback
       0   emberAfGetCurrentPollControlCallback
       0   emberAfGetCurrentPollIntervalMsCallback
       0   emberAfGetCurrentPollIntervalQsCallback
       0   emberAfGetCurrentTimeCallback
       0   emberAfGetDefaultPollControlCallback
       0   emberAfGetEndpointByIndexCallback
       0   emberAfGetEndpointDescriptionCallback
       0   emberAfGetEndpointInfoCallback
       0   emberAfGetLongPollIntervalMsCallback
       0   emberAfGetLongPollIntervalQsCallback
       0   emberAfGetShortPollIntervalMsCallback
       0   emberAfGetShortPollIntervalQsCallback
       0   emberAfGetSourceRouteOverheadCallback
       0   emberAfGetWakeTimeoutBitmaskCallback
       0   emberAfGetWakeTimeoutMsCallback
       0   emberAfGetWakeTimeoutQsCallback
       0   emberAfHalButtonIsrCallback
       0   emberAfInitiateInterPanKeyEstablishmentCallback
       0   emberAfInitiateKeyEstablishmentCallback
       0   emberAfInitiatePartnerLinkKeyExchangeCallback
       0   emberAfInterPanKeyEstablishmentCallback
       0   emberAfInterpanSendMessageCallback
       0   emberAfKeyEstablishmentCallback
       0   emberAfKeyEstablishmentClusterClientCommandReceivedCallback
       0   emberAfKeyEstablishmentClusterServerCommandReceivedCallback
       0   emberAfMainStartCallback
       0   emberAfMessageSentCallback
       0   emberAfNcpInitCallback
       0   emberAfNcpIsAwakeIsrCallback
       0   emberAfNetworkKeyUpdateCompleteCallback
       0   emberAfOtaBootloadCallback
       0   emberAfOtaClientBootloadCallback
       0   emberAfOtaClientCustomVerifyCallback
       0   emberAfOtaClientDownloadCompleteCallback
       0   emberAfOtaClientIncomingMessageRawCallback
       0   emberAfOtaClientStartCallback
       0   emberAfOtaClientVersionInfoCallback
       0   emberAfOtaPageRequestServerPolicyCallback
      24   emberAfOtaServerBlockSizeCallback
        24   -> emberAfIsCurrentSecurityProfileSmartEnergy
        24   -> emberAfMaximumApsPayloadLength
       0   emberAfOtaServerImageBlockRequestCallback
       0   emberAfOtaServerIncomingMessageRawCallback
       0   emberAfOtaServerQueryCallback
       0   emberAfOtaServerSendImageNotifyCallback
       0   emberAfOtaServerUpgradeEndRequestCallback
       0   emberAfOtaStorageCheckTempDataCallback
       0   emberAfOtaStorageClearTempDataCallback
       0   emberAfOtaStorageCloseCallback
         0   -> halInternalAssertFailed
       0   emberAfOtaStorageDriverDownloadFinishCallback
         0   -> halInternalAssertFailed
       8   emberAfOtaStorageDriverInitCallback
         8   -> halInternalAssertFailed
       8   emberAfOtaStorageDriverInvalidateImageCallback
         8   -> halInternalAssertFailed
       8   emberAfOtaStorageDriverPrepareToResumeDownloadCallback
         8   -> halInternalAssertFailed
       8   emberAfOtaStorageDriverReadCallback
         8   -> halInternalAssertFailed
       8   emberAfOtaStorageDriverRetrieveLastStoredOffsetCallback
         8   -> halInternalAssertFailed
       8   emberAfOtaStorageDriverWriteCallback
         8   -> halInternalAssertFailed
       0   emberAfOtaStorageFinishDownloadCallback
       0   emberAfOtaStorageGetCountCallback
       0   emberAfOtaStorageGetFullHeaderCallback
       0   emberAfOtaStorageGetTotalImageSizeCallback
       0   emberAfOtaStorageInitCallback
       0   emberAfOtaStorageIteratorFirstCallback
         0   -> __aeabi_memcpy4
       0   emberAfOtaStorageIteratorNextCallback
         0   -> __aeabi_memcpy4
       0   emberAfOtaStorageReadImageDataCallback
       0   emberAfOtaStorageSearchCallback
         0   -> __aeabi_memcpy4
       0   emberAfOtaStorageWriteTempDataCallback
       0   emberAfPartnerLinkKeyExchangeRequestCallback
       0   emberAfPartnerLinkKeyExchangeResponseCallback
       0   emberAfPerformingKeyEstablishmentCallback
       0   emberAfPluginBasicResetToFactoryDefaultsCallback
       0   emberAfPluginCountersRolloverCallback
       0   emberAfPluginGroupsServerGetGroupNameCallback
       0   emberAfPluginGroupsServerGroupNamesSupportedCallback
       0   emberAfPluginGroupsServerSetGroupNameCallback
       0   emberAfPluginIdleSleepActiveCallback
       0   emberAfPluginIdleSleepOkToIdleCallback
       0   emberAfPluginIdleSleepOkToSleepCallback
       0   emberAfPluginIdleSleepWakeUpCallback
       0   emberAfPluginNetworkFindFinishedCallback
       0   emberAfPluginNetworkFindGetRadioPowerForChannelCallback
       0   emberAfPluginNetworkFindJoinCallback
       0   emberAfPluginReportingConfiguredCallback
       0   emberAfPostAttributeChangeCallback
       0   emberAfPreAttributeChangeCallback
       0   emberAfPreCliSendCallback
       0   emberAfPreCommandReceivedCallback
       0   emberAfPreMessageReceivedCallback
       0   emberAfPreMessageSendCallback
       0   emberAfPreNcpResetCallback
       0   emberAfRegistrationAbortCallback
       0   emberAfRegistrationCallback
       0   emberAfRegistrationStartCallback
       0   emberAfRemoteDeleteBindingPermissionCallback
       0   emberAfRemoteSetBindingPermissionCallback
       0   emberAfRemoveFromCurrentAppTasksCallback
       0   emberAfSchedulePollEventCallback
       0   emberAfSecurityInitCallback
       0   emberAfSetDefaultPollControlCallback
       0   emberAfSetLongPollIntervalMsCallback
       0   emberAfSetLongPollIntervalQsCallback
       0   emberAfSetShortPollIntervalMsCallback
       0   emberAfSetShortPollIntervalQsCallback
       0   emberAfSetSourceRouteOverheadCallback
       0   emberAfSetTimeCallback
       0   emberAfSetWakeTimeoutBitmaskCallback
       0   emberAfSetWakeTimeoutMsCallback
       0   emberAfSetWakeTimeoutQsCallback
       0   emberAfStackStatusCallback
       0   emberAfStartMoveCallback
       0   emberAfStopMoveCallback
       0   emberAfTrustCenterJoinCallback
       0   emberAfTrustCenterKeepaliveAbortCallback
       0   emberAfTrustCenterKeepaliveUpdateCallback


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      16  ?<Constant "callback-stub.c">
       4  ??DataTable1
       8  ?Subroutine0
      12  ?Subroutine1
      12  ?Subroutine2
       8  ?Subroutine3
       2  emberAfAddToCurrentAppTasksCallback
       4  emberAfAllowNetworkWriteAttributeCallback
       4  emberAfCheckForSleepCallback
       2  emberAfClusterInitCallback
       4  emberAfClusterSecurityCustomCallback
       4  emberAfDiscoverCommandsGeneratedResponseCallback
       4  emberAfDiscoverCommandsReceivedResponseCallback
       2  emberAfEepromInitCallback
       2  emberAfEepromNoteInitializedStateCallback
       2  emberAfEepromShutdownCallback
       4  emberAfExternalAttributeReadCallback
       4  emberAfExternalAttributeWriteCallback
       4  emberAfGetCurrentAppTasksCallback
       4  emberAfGetCurrentPollControlCallback
       4  emberAfGetCurrentPollIntervalMsCallback
       4  emberAfGetCurrentPollIntervalQsCallback
       4  emberAfGetCurrentTimeCallback
       4  emberAfGetDefaultPollControlCallback
       4  emberAfGetEndpointByIndexCallback
       4  emberAfGetEndpointDescriptionCallback
       4  emberAfGetEndpointInfoCallback
       4  emberAfGetLongPollIntervalMsCallback
       4  emberAfGetLongPollIntervalQsCallback
       4  emberAfGetShortPollIntervalMsCallback
       4  emberAfGetShortPollIntervalQsCallback
       4  emberAfGetSourceRouteOverheadCallback
       4  emberAfGetWakeTimeoutBitmaskCallback
       4  emberAfGetWakeTimeoutMsCallback
       4  emberAfGetWakeTimeoutQsCallback
       2  emberAfHalButtonIsrCallback
       4  emberAfInitiateInterPanKeyEstablishmentCallback
       4  emberAfInitiateKeyEstablishmentCallback
       4  emberAfInitiatePartnerLinkKeyExchangeCallback
       4  emberAfInterPanKeyEstablishmentCallback
       4  emberAfInterpanSendMessageCallback
       4  emberAfKeyEstablishmentCallback
       4  emberAfKeyEstablishmentClusterClientCommandReceivedCallback
       4  emberAfKeyEstablishmentClusterServerCommandReceivedCallback
       4  emberAfMainStartCallback
       4  emberAfMessageSentCallback
       2  emberAfNcpInitCallback
       2  emberAfNcpIsAwakeIsrCallback
       2  emberAfNetworkKeyUpdateCompleteCallback
       4  emberAfOtaBootloadCallback
       2  emberAfOtaClientBootloadCallback
       4  emberAfOtaClientCustomVerifyCallback
       4  emberAfOtaClientDownloadCompleteCallback
       4  emberAfOtaClientIncomingMessageRawCallback
       2  emberAfOtaClientStartCallback
       2  emberAfOtaClientVersionInfoCallback
       4  emberAfOtaPageRequestServerPolicyCallback
      48  emberAfOtaServerBlockSizeCallback
       4  emberAfOtaServerImageBlockRequestCallback
       4  emberAfOtaServerIncomingMessageRawCallback
       4  emberAfOtaServerQueryCallback
       4  emberAfOtaServerSendImageNotifyCallback
       8  emberAfOtaServerUpgradeEndRequestCallback
       4  emberAfOtaStorageCheckTempDataCallback
       4  emberAfOtaStorageClearTempDataCallback
       6  emberAfOtaStorageCloseCallback
       4  emberAfOtaStorageDriverDownloadFinishCallback
       8  emberAfOtaStorageDriverInitCallback
       8  emberAfOtaStorageDriverInvalidateImageCallback
       6  emberAfOtaStorageDriverPrepareToResumeDownloadCallback
       6  emberAfOtaStorageDriverReadCallback
       8  emberAfOtaStorageDriverRetrieveLastStoredOffsetCallback
       8  emberAfOtaStorageDriverWriteCallback
       4  emberAfOtaStorageFinishDownloadCallback
       4  emberAfOtaStorageGetCountCallback
       4  emberAfOtaStorageGetFullHeaderCallback
       4  emberAfOtaStorageGetTotalImageSizeCallback
       4  emberAfOtaStorageInitCallback
       2  emberAfOtaStorageIteratorFirstCallback
       2  emberAfOtaStorageIteratorNextCallback
       4  emberAfOtaStorageReadImageDataCallback
       2  emberAfOtaStorageSearchCallback
       4  emberAfOtaStorageWriteTempDataCallback
       4  emberAfPartnerLinkKeyExchangeRequestCallback
       2  emberAfPartnerLinkKeyExchangeResponseCallback
       4  emberAfPerformingKeyEstablishmentCallback
       2  emberAfPluginBasicResetToFactoryDefaultsCallback
       2  emberAfPluginCountersRolloverCallback
       2  emberAfPluginGroupsServerGetGroupNameCallback
       4  emberAfPluginGroupsServerGroupNamesSupportedCallback
       2  emberAfPluginGroupsServerSetGroupNameCallback
       2  emberAfPluginIdleSleepActiveCallback
       4  emberAfPluginIdleSleepOkToIdleCallback
       4  emberAfPluginIdleSleepOkToSleepCallback
       2  emberAfPluginIdleSleepWakeUpCallback
       2  emberAfPluginNetworkFindFinishedCallback
       4  emberAfPluginNetworkFindGetRadioPowerForChannelCallback
       4  emberAfPluginNetworkFindJoinCallback
       4  emberAfPluginReportingConfiguredCallback
       2  emberAfPostAttributeChangeCallback
       4  emberAfPreAttributeChangeCallback
       4  emberAfPreCliSendCallback
       4  emberAfPreCommandReceivedCallback
       4  emberAfPreMessageReceivedCallback
       4  emberAfPreMessageSendCallback
       2  emberAfPreNcpResetCallback
       2  emberAfRegistrationAbortCallback
       2  emberAfRegistrationCallback
       4  emberAfRegistrationStartCallback
       4  emberAfRemoteDeleteBindingPermissionCallback
       4  emberAfRemoteSetBindingPermissionCallback
       2  emberAfRemoveFromCurrentAppTasksCallback
       2  emberAfSchedulePollEventCallback
       2  emberAfSecurityInitCallback
       2  emberAfSetDefaultPollControlCallback
       2  emberAfSetLongPollIntervalMsCallback
       2  emberAfSetLongPollIntervalQsCallback
       2  emberAfSetShortPollIntervalMsCallback
       2  emberAfSetShortPollIntervalQsCallback
       2  emberAfSetSourceRouteOverheadCallback
       2  emberAfSetTimeCallback
       2  emberAfSetWakeTimeoutBitmaskCallback
       2  emberAfSetWakeTimeoutMsCallback
       2  emberAfSetWakeTimeoutQsCallback
       4  emberAfStackStatusCallback
       4  emberAfStartMoveCallback
       2  emberAfStopMoveCallback
       2  emberAfTrustCenterJoinCallback
       2  emberAfTrustCenterKeepaliveAbortCallback
       2  emberAfTrustCenterKeepaliveUpdateCallback

 
 538 bytes in section .text
 
 538 bytes of CODE memory

Errors: none
Warnings: none
