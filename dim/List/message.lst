###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        22/Oct/2015  09:33:40
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  E:\Zigbee\EmberZNet5.6.0-GA\app\framework\util\message.c
#    Command line =  
#        E:\Zigbee\EmberZNet5.6.0-GA\app\framework\util\message.c -D DIMMER -D
#        NULL_BTL -D CORTEXM3 -D CORTEXM3_EMBER_MICRO -D CORTEXM3_EM357 -D
#        PHY_EM3XX -D
#        "APPLICATION_TOKEN_HEADER=\"app/framework/util/tokens.h\"" -D
#        "ATTRIBUTE_STORAGE_CONFIGURATION=\"app/builder/ZigbeeRoute/ZigbeeRoute_endpoint_config.h\""
#        -D "BOARD_HEADER=\"app\builder\ZigbeeRoute\ZigbeeRoute_board.h\"" -D
#        "CONFIGURATION_HEADER=\"app/framework/util/config.h\"" -D
#        "GENERATED_TOKEN_HEADER=\"app/builder/ZigbeeRoute/ZigbeeRoute_tokens.h\""
#        -D "PLATFORM_HEADER=\"hal/micro/cortexm3/compiler/iar.h\"" -D
#        "ZA_GENERATED_HEADER=\"app/builder/ZigbeeRoute/ZigbeeRoute.h\"" -D
#        "__SOURCEFILE__=\"message.c\"" -lC
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\dim\List\
#        --diag_suppress Pa050 -o
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\dim\Obj\ --debug
#        --endian=little --cpu=Cortex-M3 --no_path_in_file_macros
#        --separate_cluster_for_initialized_variables -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\framework\util\ -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\ -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\ -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\app\framework\include\
#        -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\app\util\
#        -I E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\stack\
#        -I E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\hal\
#        -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\hal\..\
#        -Ohz --use_c++_inline
#    List file    =  
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\dim\List\message.lst
#    Object file  =  
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\dim\Obj\message.o
#
###############################################################################

E:\Zigbee\EmberZNet5.6.0-GA\app\framework\util\message.c
      1          // *****************************************************************************
      2          // * message.c
      3          // *
      4          // * Code for manipulating the incoming and outgoing messages in a flat
      5          // * memory buffer.
      6          // *
      7          // * Copyright 2010 by Ember Corporation. All rights reserved.              *80*
      8          // *****************************************************************************
      9          
     10          #include "app/framework/include/af.h"
     11          #include "app/framework/util/util.h"
     12          #include "app/framework/util/config.h"
     13          
     14          //------------------------------------------------------------------------------
     15          
     16          // these variables are for storing responses that are created by zcl-utils
     17          // in functions called from emberIncomingMsgHandler. The response is sent 
     18          // from emberAfTick (meant to be called immediately after emberTick).
     19          // There is only space for one response as each call to emberTick will
     20          // only result in a single call to emberIncomingMsgHandler. If the device
     21          // receives multiple ZCL messages, the stack will queue these and hand 
     22          // these to the application via emberIncomingMsgHandler one at a time.

   \                                 In section .bss, align 4
     23          EmberApsFrame      emberAfResponseApsFrame;
     24          EmberNodeId        emberAfResponseDestination;
   \                     emberAfResponseDestination:
   \   00000000                      DS8 2
     25          int8u  appResponseData[EMBER_AF_RESPONSE_BUFFER_LEN];
     26          int16u  appResponseLength;
   \                     appResponseLength:
   \   00000002                      DS8 2
   \                     emberAfResponseApsFrame:
   \   00000004                      DS8 12

   \                                 In section .bss, align 4
   \                     appResponseData:
   \   00000000                      DS8 84
     27          
     28          // Used for empty string

   \                                 In section .bss, align 2
     29          static int16u zeroLenByte = 0;
   \                     zeroLenByte:
   \   00000000                      DS8 2

   \                                 In section .data, align 4
   \   00000000   0x........         DC32 zeroLenByte
     30          static int8u* zeroLenBytePtr = (int8u *)&zeroLenByte;
     31          
     32          //------------------------------------------------------------------------------
     33          // Utilities for adding bytes to the response buffer: appResponseData. These
     34          // functions take care of incrementing appResponseLength. 
     35          

   \                                 In section .text, align 2, keep-with-next
     36          void emberAfClearResponseData(void)
     37          {
   \                     emberAfClearResponseData: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
     38            emberAfResponseType = ZCL_UTIL_RESP_NORMAL;
   \   00000002   0x....             LDR.N    R1,??DataTable4
     39            // To prevent accidentally sending to someone else, 
     40            // set the destination to ourselves.
     41            emberAfResponseDestination = emberAfGetNodeId();
   \   00000004   0x....             LDR.N    R4,??DataTable4_1
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x7008             STRB     R0,[R1, #+0]
   \   0000000A   0x.... 0x....      BL       emberAfGetNodeId
   \   0000000E   0x8020             STRH     R0,[R4, #+0]
     42            MEMSET(appResponseData, 0, EMBER_AF_RESPONSE_BUFFER_LEN);
   \   00000010   0x2252             MOVS     R2,#+82
   \   00000012   0x2100             MOVS     R1,#+0
   \   00000014   0x....             LDR.N    R0,??DataTable4_2
   \   00000016   0x.... 0x....      BL       halCommonMemSet
     43            appResponseLength = 0;
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x8060             STRH     R0,[R4, #+2]
     44            MEMSET(&emberAfResponseApsFrame, 0, sizeof(EmberApsFrame));
   \   0000001E   0x220C             MOVS     R2,#+12
   \   00000020   0x1D20             ADDS     R0,R4,#+4
   \   00000022   0xE8BD 0x4010      POP      {R4,LR}
   \   00000026   0x2100             MOVS     R1,#+0
   \   00000028   0x.... 0x....      B.W      halCommonMemSet
     45          }
     46          

   \                                 In section .text, align 2, keep-with-next
     47          void emberAfPutInt8uInResp(int8u value)
     48          {
     49            //emberAfDebugPrint("try %x max %x\r\n", appResponseLength, EMBER_AF_RESPONSE_BUFFER_LEN);
     50            if (appResponseLength < EMBER_AF_RESPONSE_BUFFER_LEN) {
   \                     emberAfPutInt8uInResp: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable4_1
   \   00000002   0x884A             LDRH     R2,[R1, #+2]
   \   00000004   0x2A52             CMP      R2,#+82
   \   00000006   0xDB00             BLT.N    ??emberAfPutInt8uInResp_0
   \   00000008   0x4770             BX       LR
     51              //emberAfDebugPrint("put %x at spot %x\r\n", value, appResponseLength);
     52              appResponseData[appResponseLength] = value;
   \                     ??emberAfPutInt8uInResp_0: (+1)
   \   0000000A   0xB510             PUSH     {R4,LR}
   \   0000000C   0x....             LDR.N    R4,??DataTable4_2
   \   0000000E   0x5510             STRB     R0,[R2, R4]
     53              appResponseLength++;
   \   00000010   0x1C50             ADDS     R0,R2,#+1
   \   00000012   0x8048             STRH     R0,[R1, #+2]
     54            }
     55          }
   \   00000014   0xBD10             POP      {R4,PC}          ;; return
     56          

   \                                 In section .text, align 2, keep-with-next
     57          void emberAfPutInt16uInResp(int16u value)
     58          {
   \                     emberAfPutInt16uInResp: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x.... 0x....      BL       ?Subroutine1
     59            emberAfPutInt8uInResp(LOW_BYTE(value));
     60            emberAfPutInt8uInResp(HIGH_BYTE(value));
   \                     ??CrossCallReturnLabel_2: (+1)
   \   00000006   0x0A20             LSRS     R0,R4,#+8
   \   00000008   0x....             B.N      ?Subroutine0
     61          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0xE8BD 0x4010      POP      {R4,LR}
   \   00000004   0x....             B.N      emberAfPutInt8uInResp

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \   00000000   0x4604             MOV      R4,R0
   \   00000002   0xB2C0             UXTB     R0,R0
   \   00000004   0x....             B.N      emberAfPutInt8uInResp
     62          

   \                                 In section .text, align 2, keep-with-next
     63          void emberAfPutInt32uInResp(int32u value)
     64          {
   \                     emberAfPutInt32uInResp: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x.... 0x....      BL       ?Subroutine1
     65            emberAfPutInt8uInResp(BYTE_0(value));
     66            emberAfPutInt8uInResp(BYTE_1(value));
   \                     ??CrossCallReturnLabel_1: (+1)
   \   00000006   0x.... 0x....      BL       ?Subroutine2
     67            emberAfPutInt8uInResp(BYTE_2(value));
   \                     ??CrossCallReturnLabel_5: (+1)
   \   0000000A   0x0220             LSLS     R0,R4,#+8
   \   0000000C   0x.... 0x....      BL       ??Subroutine2_0
     68            emberAfPutInt8uInResp(BYTE_3(value));
   \                     ??CrossCallReturnLabel_3: (+1)
   \   00000010   0x0E20             LSRS     R0,R4,#+24
   \   00000012                      REQUIRE ?Subroutine0
   \   00000012                      ;; // Fall through to label ?Subroutine0
     69          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2: (+1)
   \   00000000   0x0420             LSLS     R0,R4,#+16
   \                     ??Subroutine2_0: (+1)
   \   00000002   0x0E00             LSRS     R0,R0,#+24
   \   00000004   0x....             B.N      emberAfPutInt8uInResp
     70          

   \                                 In section .text, align 2, keep-with-next
     71          void emberAfPutInt24uInResp(int32u value)
     72          {
   \                     emberAfPutInt24uInResp: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x.... 0x....      BL       ?Subroutine1
     73            emberAfPutInt8uInResp(BYTE_0(value));
     74            emberAfPutInt8uInResp(BYTE_1(value));
   \                     ??CrossCallReturnLabel_0: (+1)
   \   00000006   0x.... 0x....      BL       ?Subroutine2
     75            emberAfPutInt8uInResp(BYTE_2(value));  
   \                     ??CrossCallReturnLabel_4: (+1)
   \   0000000A   0x0220             LSLS     R0,R4,#+8
   \   0000000C   0xE8BD 0x4010      POP      {R4,LR}
   \   00000010   0x0E00             LSRS     R0,R0,#+24
   \   00000012   0x....             B.N      emberAfPutInt8uInResp
     76          }

   \                                 In section .text, align 2, keep-with-next
     77          void emberAfPutBlockInResp(const int8u* data, int16u length)
     78          {
   \                     emberAfPutBlockInResp: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
     79            if ((appResponseLength + length) < EMBER_AF_RESPONSE_BUFFER_LEN) {
   \   00000002   0x....             LDR.N    R5,??DataTable4_1
   \   00000004   0x886B             LDRH     R3,[R5, #+2]
   \   00000006   0x460C             MOV      R4,R1
   \   00000008   0x18E1             ADDS     R1,R4,R3
   \   0000000A   0x2952             CMP      R1,#+82
   \   0000000C   0xDA08             BGE.N    ??emberAfPutBlockInResp_0
     80              MEMMOVE(appResponseData + appResponseLength, data, length);
   \   0000000E   0x4601             MOV      R1,R0
   \   00000010   0x....             LDR.N    R0,??DataTable4_2
   \   00000012   0x4622             MOV      R2,R4
   \   00000014   0x1818             ADDS     R0,R3,R0
   \   00000016   0x.... 0x....      BL       halCommonMemMove
     81              appResponseLength += length;
   \   0000001A   0x8868             LDRH     R0,[R5, #+2]
   \   0000001C   0x1820             ADDS     R0,R4,R0
   \   0000001E   0x8068             STRH     R0,[R5, #+2]
     82            }
     83          }
   \                     ??emberAfPutBlockInResp_0: (+1)
   \   00000020   0xBD31             POP      {R0,R4,R5,PC}    ;; return
     84          

   \                                 In section .text, align 2, keep-with-next
     85          void emberAfPutStringInResp(const int8u *buffer)
     86          {
   \                     emberAfPutStringInResp: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
     87            int8u length = emberAfStringLength(buffer);
   \   00000004   0x.... 0x....      BL       emberAfStringLength
     88            emberAfPutBlockInResp(buffer, length + 1);
   \   00000008   0x1C41             ADDS     R1,R0,#+1
   \   0000000A   0x4620             MOV      R0,R4
   \   0000000C   0xE8BD 0x4010      POP      {R4,LR}
   \   00000010   0xB289             UXTH     R1,R1
   \   00000012   0x....             B.N      emberAfPutBlockInResp
     89          }
     90          

   \                                 In section .text, align 2, keep-with-next
     91          void emberAfPutDateInResp(EmberAfDate *value)
     92          {
   \                     emberAfPutDateInResp: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
     93            emberAfPutInt8uInResp(value->year);
   \   00000004   0x7820             LDRB     R0,[R4, #+0]
   \   00000006   0x.... 0x....      BL       emberAfPutInt8uInResp
     94            emberAfPutInt8uInResp(value->month);
   \   0000000A   0x7860             LDRB     R0,[R4, #+1]
   \   0000000C   0x.... 0x....      BL       emberAfPutInt8uInResp
     95            emberAfPutInt8uInResp(value->dayOfMonth);
   \   00000010   0x78A0             LDRB     R0,[R4, #+2]
   \   00000012   0x.... 0x....      BL       emberAfPutInt8uInResp
     96            emberAfPutInt8uInResp(value->dayOfWeek);
   \   00000016   0x78E0             LDRB     R0,[R4, #+3]
   \   00000018   0x....             B.N      ?Subroutine0
     97          }
     98          
     99          // ------------------------------------
    100          // Utilities for reading from RAM buffers (reading from incoming message
    101          // buffer)
    102          // ------------------------------------
    103          
    104          // retrieves an int32u which contains between 1 and 4 bytes of relevent data
    105          // depending on number of bytes requested.

   \                                 In section .text, align 2, keep-with-next
    106          int32u emberAfGetInt(const int8u* message, 
    107                               int16u currentIndex, 
    108                               int16u msgLen, 
    109                               int8u bytes)
    110          {
   \                     emberAfGetInt: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
    111            int32u result = 0;
    112            int8u i = bytes;
   \   00000002   0x461D             MOV      R5,R3
   \   00000004   0x2400             MOVS     R4,#+0
    113            if ((currentIndex + bytes) > msgLen) {
   \   00000006   0x185B             ADDS     R3,R3,R1
   \   00000008   0x429A             CMP      R2,R3
   \   0000000A   0xDA08             BGE.N    ??emberAfGetInt_0
    114              emberAfDebugPrintln("GetInt, %x bytes short", bytes);
    115              emberAfDebugFlush();
    116              return 0;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0xBD30             POP      {R4,R5,PC}
    117            }
    118            while (i > 0) {
    119              result = (result << 8) + message[(currentIndex + i) - 1];
   \                     ??emberAfGetInt_1: (+1)
   \   00000010   0x186A             ADDS     R2,R5,R1
   \   00000012   0x1812             ADDS     R2,R2,R0
    120              i--;
   \   00000014   0x1E6D             SUBS     R5,R5,#+1
   \   00000016   0xF812 0x2C01      LDRB     R2,[R2, #-1]
   \   0000001A   0xEB02 0x2404      ADD      R4,R2,R4, LSL #+8
    121            }
   \                     ??emberAfGetInt_0: (+1)
   \   0000001E   0xB2ED             UXTB     R5,R5
   \   00000020   0x2D00             CMP      R5,#+0
   \   00000022   0xD1F5             BNE.N    ??emberAfGetInt_1
    122            return result;
   \   00000024   0x4620             MOV      R0,R4
   \   00000026   0xBD30             POP      {R4,R5,PC}       ;; return
    123          }
    124          

   \                                 In section .text, align 2, keep-with-next
    125          int32u emberAfGetInt32u(const int8u* message, int16u currentIndex, int16u msgLen) 
    126          {
    127            return emberAfGetInt(message, currentIndex, msgLen, 4);
   \                     emberAfGetInt32u: (+1)
   \   00000000   0x2304             MOVS     R3,#+4
   \   00000002   0x....             B.N      emberAfGetInt
    128          }
    129          

   \                                 In section .text, align 2, keep-with-next
    130          int32u emberAfGetInt24u(const int8u* message, int16u currentIndex, int16u msgLen) 
    131          {
    132            return emberAfGetInt(message, currentIndex, msgLen, 3);
   \                     emberAfGetInt24u: (+1)
   \   00000000   0x2303             MOVS     R3,#+3
   \   00000002   0x....             B.N      emberAfGetInt
    133          }
    134          

   \                                 In section .text, align 2, keep-with-next
    135          int16u emberAfGetInt16u(const int8u* message, int16u currentIndex, int16u msgLen)
    136          {
   \                     emberAfGetInt16u: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    137            return (int16u)emberAfGetInt(message, currentIndex, msgLen, 2);
   \   00000002   0x2302             MOVS     R3,#+2
   \   00000004   0x.... 0x....      BL       emberAfGetInt
   \   00000008   0xB280             UXTH     R0,R0
   \   0000000A   0xBD02             POP      {R1,PC}          ;; return
    138          }
    139          

   \                                 In section .text, align 2, keep-with-next
    140          int8u* emberAfGetString(int8u* message, int16u currentIndex, int16u msgLen)
    141          {
   \                     emberAfGetString: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x460C             MOV      R4,R1
   \   00000004   0x4615             MOV      R5,R2
    142            // Strings must contain at least one byte for the length.
    143            if (msgLen <= currentIndex) {
   \   00000006   0x....             LDR.N    R6,??DataTable4_3
   \   00000008   0x42AC             CMP      R4,R5
   \   0000000A   0xD207             BCS.N    ??emberAfGetString_0
    144              emberAfDebugPrintln("GetString: %p", "buffer too short");
    145              return zeroLenBytePtr;
    146            }
    147          
    148            // Starting from the current index, there must be enough bytes in the message
    149            // for the string and the length byte.
    150            if (msgLen < currentIndex + emberAfStringLength(&message[currentIndex]) + 1) {
   \   0000000C   0x1827             ADDS     R7,R4,R0
   \   0000000E   0x4638             MOV      R0,R7
   \   00000010   0x.... 0x....      BL       emberAfStringLength
   \   00000014   0x1900             ADDS     R0,R0,R4
   \   00000016   0x1C40             ADDS     R0,R0,#+1
   \   00000018   0x4285             CMP      R5,R0
   \   0000001A   0xDA01             BGE.N    ??emberAfGetString_1
    151              emberAfDebugPrintln("GetString: %p", "len byte wrong");
    152              return zeroLenBytePtr;
   \                     ??emberAfGetString_0: (+1)
   \   0000001C   0x4630             MOV      R0,R6
   \   0000001E   0xBDF2             POP      {R1,R4-R7,PC}
    153            }
    154          
    155            return &message[currentIndex];
   \                     ??emberAfGetString_1: (+1)
   \   00000020   0x4638             MOV      R0,R7
   \   00000022   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    156          }
    157          

   \                                 In section .text, align 2, keep-with-next
    158          int8u* emberAfGetLongString(int8u* message, int16u currentIndex, int16u msgLen)
    159          {
   \                     emberAfGetLongString: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x460C             MOV      R4,R1
   \   00000004   0x4615             MOV      R5,R2
    160            // Long strings must contain at least two bytes for the length.
    161            if (msgLen <= currentIndex + 1) {
   \   00000006   0x1C61             ADDS     R1,R4,#+1
   \   00000008   0x....             LDR.N    R6,??DataTable4_3
   \   0000000A   0x42A9             CMP      R1,R5
   \   0000000C   0xDA07             BGE.N    ??emberAfGetLongString_0
    162              emberAfDebugPrintln("GetLongString: %p", "buffer too short");
    163              return zeroLenBytePtr;
    164            }
    165          
    166            // Starting from the current index, there must be enough bytes in the message
    167            // for the string and the length bytes.
    168            if (msgLen
    169                < currentIndex + emberAfLongStringLength(&message[currentIndex]) + 2) {
   \   0000000E   0x1827             ADDS     R7,R4,R0
   \   00000010   0x4638             MOV      R0,R7
   \   00000012   0x.... 0x....      BL       emberAfLongStringLength
   \   00000016   0x1900             ADDS     R0,R0,R4
   \   00000018   0x1C80             ADDS     R0,R0,#+2
   \   0000001A   0x4285             CMP      R5,R0
   \   0000001C   0xDA01             BGE.N    ??emberAfGetLongString_1
    170              emberAfDebugPrintln("GetLongString: %p", "len bytes wrong");
    171              return zeroLenBytePtr;
   \                     ??emberAfGetLongString_0: (+1)
   \   0000001E   0x4630             MOV      R0,R6
   \   00000020   0xBDF2             POP      {R1,R4-R7,PC}
    172            }
    173          
    174            return &message[currentIndex];
   \                     ??emberAfGetLongString_1: (+1)
   \   00000022   0x4638             MOV      R0,R7
   \   00000024   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    175          }
    176          

   \                                 In section .text, align 2, keep-with-next
    177          int8u emberAfStringLength(const int8u *buffer)
    178          {
    179            // The first byte specifies the length of the string.  A length of 0xFF means
    180            // the string is invalid and there is no character data.
    181            return (buffer[0] == 0xFF ? 0 : buffer[0]);
   \                     emberAfStringLength: (+1)
   \   00000000   0x7800             LDRB     R0,[R0, #+0]
   \   00000002   0x28FF             CMP      R0,#+255
   \   00000004   0xBF08             IT       EQ 
   \   00000006   0x2000             MOVEQ    R0,#+0
   \   00000008   0x4770             BX       LR               ;; return
    182          }
    183          

   \                                 In section .text, align 2, keep-with-next
    184          int16u emberAfLongStringLength(const int8u *buffer)
    185          {
   \                     emberAfLongStringLength: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    186            // The first two bytes specify the length of the long string.  A length of
    187            // 0xFFFF means the string is invalid and there is no character data.
    188            int16u length = emberAfGetInt16u(buffer, 0, 2);
   \   00000002   0x2202             MOVS     R2,#+2
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x.... 0x....      BL       emberAfGetInt16u
    189            return (length == 0xFFFF ? 0 : length);
   \   0000000A   0xF64F 0x71FF      MOVW     R1,#+65535
   \   0000000E   0x4288             CMP      R0,R1
   \   00000010   0xBF08             IT       EQ 
   \   00000012   0x2000             MOVEQ    R0,#+0
   \   00000014   0xBD02             POP      {R1,PC}          ;; return
    190          }
    191          

   \                                 In section .text, align 2, keep-with-next
    192          int8u emberAfGetDate(int8u* message, int16u currentIndex, int16u msgLen, EmberAfDate *destination)
    193          {
   \                     emberAfGetDate: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    194            if ((currentIndex + 4) > msgLen) {
   \   00000002   0x1D0C             ADDS     R4,R1,#+4
   \   00000004   0x42A2             CMP      R2,R4
   \   00000006   0xDA01             BGE.N    ??emberAfGetDate_0
    195              emberAfDebugPrintln("GetDate, %x bytes short", 4);
    196              emberAfDebugFlush();
    197              return 0;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0xBD10             POP      {R4,PC}
    198            }
    199            destination->year       = message[(currentIndex + 0)];
   \                     ??emberAfGetDate_0: (+1)
   \   0000000C   0x5C0A             LDRB     R2,[R1, R0]
   \   0000000E   0x701A             STRB     R2,[R3, #+0]
    200            destination->month      = message[(currentIndex + 1)];
   \   00000010   0x1808             ADDS     R0,R1,R0
   \   00000012   0x7841             LDRB     R1,[R0, #+1]
   \   00000014   0x7059             STRB     R1,[R3, #+1]
    201            destination->dayOfMonth = message[(currentIndex + 2)];
   \   00000016   0x7881             LDRB     R1,[R0, #+2]
   \   00000018   0x7099             STRB     R1,[R3, #+2]
    202            destination->dayOfWeek  = message[(currentIndex + 3)];
   \   0000001A   0x78C0             LDRB     R0,[R0, #+3]
   \   0000001C   0x70D8             STRB     R0,[R3, #+3]
    203            return 4;
   \   0000001E   0x2004             MOVS     R0,#+4
   \   00000020   0xBD10             POP      {R4,PC}          ;; return
    204          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x........         DC32     emberAfResponseType

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x........         DC32     emberAfResponseDestination

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x........         DC32     appResponseData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x........         DC32     zeroLenByte
    205          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   emberAfClearResponseData
         8   -> emberAfGetNodeId
         0   -> halCommonMemSet
         8   -> halCommonMemSet
       8   emberAfGetDate
      12   emberAfGetInt
       8   emberAfGetInt16u
         8   -> emberAfGetInt
       0   emberAfGetInt24u
         0   -> emberAfGetInt
       0   emberAfGetInt32u
         0   -> emberAfGetInt
      24   emberAfGetLongString
        24   -> emberAfLongStringLength
      24   emberAfGetString
        24   -> emberAfStringLength
       8   emberAfLongStringLength
         8   -> emberAfGetInt16u
      16   emberAfPutBlockInResp
        16   -> halCommonMemMove
       8   emberAfPutDateInResp
         0   -> emberAfPutInt8uInResp
         8   -> emberAfPutInt8uInResp
       8   emberAfPutInt16uInResp
         0   -> emberAfPutInt8uInResp
         8   -> emberAfPutInt8uInResp
       8   emberAfPutInt24uInResp
         0   -> emberAfPutInt8uInResp
         8   -> emberAfPutInt8uInResp
       8   emberAfPutInt32uInResp
         0   -> emberAfPutInt8uInResp
         8   -> emberAfPutInt8uInResp
       8   emberAfPutInt8uInResp
       8   emberAfPutStringInResp
         0   -> emberAfPutBlockInResp
         8   -> emberAfStringLength
       0   emberAfStringLength


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       6  ?Subroutine0
       6  ?Subroutine1
       6  ?Subroutine2
      84  appResponseData
      44  emberAfClearResponseData
      34  emberAfGetDate
      40  emberAfGetInt
      12  emberAfGetInt16u
       4  emberAfGetInt24u
       4  emberAfGetInt32u
      38  emberAfGetLongString
      36  emberAfGetString
      22  emberAfLongStringLength
      34  emberAfPutBlockInResp
      26  emberAfPutDateInResp
      10  emberAfPutInt16uInResp
      20  emberAfPutInt24uInResp
      18  emberAfPutInt32uInResp
      22  emberAfPutInt8uInResp
      20  emberAfPutStringInResp
      16  emberAfResponseDestination
          appResponseLength
          emberAfResponseApsFrame
      10  emberAfStringLength
       2  zeroLenByte
       4  zeroLenBytePtr

 
 102 bytes in section .bss
   4 bytes in section .data
 428 bytes in section .text
 
 428 bytes of CODE memory
 106 bytes of DATA memory

Errors: none
Warnings: none
