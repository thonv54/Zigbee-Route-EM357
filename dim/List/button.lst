###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        22/Oct/2015  09:32:54
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  E:\Zigbee\EmberZNet5.6.0-GA\hal\micro\cortexm3\button.c
#    Command line =  
#        E:\Zigbee\EmberZNet5.6.0-GA\hal\micro\cortexm3\button.c -D DIMMER -D
#        NULL_BTL -D CORTEXM3 -D CORTEXM3_EMBER_MICRO -D CORTEXM3_EM357 -D
#        PHY_EM3XX -D
#        "APPLICATION_TOKEN_HEADER=\"app/framework/util/tokens.h\"" -D
#        "ATTRIBUTE_STORAGE_CONFIGURATION=\"app/builder/ZigbeeRoute/ZigbeeRoute_endpoint_config.h\""
#        -D "BOARD_HEADER=\"app\builder\ZigbeeRoute\ZigbeeRoute_board.h\"" -D
#        "CONFIGURATION_HEADER=\"app/framework/util/config.h\"" -D
#        "GENERATED_TOKEN_HEADER=\"app/builder/ZigbeeRoute/ZigbeeRoute_tokens.h\""
#        -D "PLATFORM_HEADER=\"hal/micro/cortexm3/compiler/iar.h\"" -D
#        "ZA_GENERATED_HEADER=\"app/builder/ZigbeeRoute/ZigbeeRoute.h\"" -D
#        "__SOURCEFILE__=\"button.c\"" -lC
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\dim\List\
#        --diag_suppress Pa050 -o
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\dim\Obj\ --debug
#        --endian=little --cpu=Cortex-M3 --no_path_in_file_macros
#        --separate_cluster_for_initialized_variables -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\Zigbee\EmberZNet5.6.0-GA\hal\micro\cortexm3\ -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\ -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\ -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\app\framework\include\
#        -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\app\util\
#        -I E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\stack\
#        -I E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\hal\
#        -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\hal\..\
#        -Ohz --use_c++_inline
#    List file    =  
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\dim\List\button.lst
#    Object file  =  
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\dim\Obj\button.o
#
###############################################################################

E:\Zigbee\EmberZNet5.6.0-GA\hal\micro\cortexm3\button.c
      1          /** @file hal/micro/cortexm3/button.c
      2           *  @brief  Sample API functions for operating buttons (external interrupts).
      3           *  Please see the board header file for the definition of the BUTTON*
      4           *  instances used below.  The BUTTON* defines used here are designed to make
      5           *  this library generic such that only the board header needs to be modified
      6           *  to change which GPIO the buttons are on.
      7           * 
      8           * <!-- Author(s): Brooks Barrett -->
      9           * <!-- Copyright 2007 by Ember Corporation. All rights reserved.       *80*-->   
     10           */
     11          
     12          #include PLATFORM_HEADER
     13          #include "stack/include/ember-types.h"
     14          #include "hal/hal.h"
     15          
     16          // This state is kept track of so the IRQ ISRs knows when to notify buttonIsrs.
     17          #ifdef BUTTON0

   \                                 In section .bss, align 1
     18          int8u button0State;
   \                     button0State:
   \   00000000                      DS8 1
     19          #endif
     20          
     21          #ifdef BUTTON1
     22          int8u button1State;
   \                     button1State:
   \   00000001                      DS8 1
     23          #endif
     24          
     25          #ifdef BUTTON2
     26          int8u button2State;
     27          #endif
     28          
     29          #ifdef BUTTON3
     30          int8u button3State;
     31          #endif
     32          

   \                                 In section .text, align 2, keep-with-next
     33          void halInternalInitButton(void)
     34          {
   \                     halInternalInitButton: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
     35          #ifdef BUTTON0
     36            //start from a fresh state just in case
     37            BUTTON0_INTCFG = 0;              //disable BUTTON0 triggering
   \   00000004   0x....             LDR.N    R4,??DataTable4  ;; 0x4000a814
     38            INT_CFGCLR = BUTTON0_INT_EN_BIT; //clear BUTTON0 top level int enable
   \   00000006   0x....             LDR.N    R6,??DataTable4_1  ;; 0xe000e180
   \   00000008   0x.... 0x....      LDR.W    R8,??DataTable4_2
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x6520             STR      R0,[R4, #+80]
   \   00000010   0xF44F 0x5500      MOV      R5,#+8192
   \   00000014   0x6035             STR      R5,[R6, #+0]
     39            INT_GPIOFLAG = BUTTON0_FLAG_BIT; //clear stale BUTTON0 interrupt
   \   00000016   0x2002             MOVS     R0,#+2
   \   00000018   0x6020             STR      R0,[R4, #+0]
     40            INT_MISS = BUTTON0_MISS_BIT;     //clear stale missed BUTTON0 interrupt
   \   0000001A   0x60E5             STR      R5,[R4, #+12]
     41            //configure BUTTON0
     42            BUTTON0_SEL();                             //point IRQ at the desired pin
     43            BUTTON0_INTCFG  = (0 << GPIO_INTFILT_BIT); //no filter
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x6520             STR      R0,[R4, #+80]
     44            BUTTON0_INTCFG |= (3 << GPIO_INTMOD_BIT);  //3 = both edges
   \   00000020   0x6D20             LDR      R0,[R4, #+80]
   \   00000022   0xF040 0x0060      ORR      R0,R0,#0x60
   \   00000026   0x6520             STR      R0,[R4, #+80]
     45            button0State = halButtonPinState(BUTTON0);
   \   00000028   0x200C             MOVS     R0,#+12
   \   0000002A   0x.... 0x....      BL       halButtonPinState
   \   0000002E   0xF888 0x0000      STRB     R0,[R8, #+0]
   \   00000032   0xF44F 0x4780      MOV      R7,#+16384
     46          #endif
     47          
     48          #ifdef BUTTON1
     49            //start from a fresh state just in case
     50            BUTTON1_INTCFG = 0;              //disable BUTTON1 triggering
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0x6560             STR      R0,[R4, #+84]
     51            INT_CFGCLR = BUTTON1_INT_EN_BIT; //clear BUTTON1 top level int enable
   \   0000003A   0x6037             STR      R7,[R6, #+0]
     52            INT_GPIOFLAG = BUTTON1_FLAG_BIT; //clear stale BUTTON1 interrupt
   \   0000003C   0x2004             MOVS     R0,#+4
   \   0000003E   0x6020             STR      R0,[R4, #+0]
     53            INT_MISS = BUTTON1_MISS_BIT;     //clear stale missed BUTTON1 interrupt
   \   00000040   0x60E7             STR      R7,[R4, #+12]
     54            //configure BUTTON1
     55            BUTTON1_SEL();                             //point IRQ at the desired pin
   \   00000042   0x2016             MOVS     R0,#+22
   \   00000044   0x....             LDR.N    R1,??DataTable4_3  ;; 0x4000bc14
   \   00000046   0x6008             STR      R0,[R1, #+0]
     56            BUTTON1_INTCFG  = (0 << GPIO_INTFILT_BIT); //no filter
   \   00000048   0x2000             MOVS     R0,#+0
   \   0000004A   0x6560             STR      R0,[R4, #+84]
     57            BUTTON1_INTCFG |= (3 << GPIO_INTMOD_BIT);  //3 = both edges
   \   0000004C   0x6D60             LDR      R0,[R4, #+84]
   \   0000004E   0xF040 0x0060      ORR      R0,R0,#0x60
   \   00000052   0x6560             STR      R0,[R4, #+84]
     58            button1State = halButtonPinState(BUTTON1);
   \   00000054   0x2016             MOVS     R0,#+22
   \   00000056   0x.... 0x....      BL       halButtonPinState
   \   0000005A   0xF888 0x0001      STRB     R0,[R8, #+1]
     59          #endif
     60          
     61          #ifdef BUTTON2
     62            //start from a fresh state just in case
     63            BUTTON2_INTCFG = 0;              //disable BUTTON2 triggering
     64            INT_CFGCLR = BUTTON2_INT_EN_BIT; //clear BUTTON2 top level int enable
     65            INT_GPIOFLAG = BUTTON2_FLAG_BIT; //clear stale BUTTON2 interrupt
     66            INT_MISS = BUTTON2_MISS_BIT;     //clear stale missed BUTTON2 interrupt
     67            //configure BUTTON2
     68            BUTTON2_SEL();                             //point IRQ at the desired pin
     69            BUTTON2_INTCFG  = (0 << GPIO_INTFILT_BIT); //no filter
     70            BUTTON2_INTCFG |= (3 << GPIO_INTMOD_BIT);  //3 = both edges
     71            button2State = halButtonPinState(BUTTON2);
     72          #endif
     73          
     74          #ifdef BUTTON3
     75            //start from a fresh state just in case
     76            BUTTON3_INTCFG = 0;              //disable BUTTON3 triggering
     77            INT_CFGCLR = BUTTON3_INT_EN_BIT; //clear BUTTON3 top level int enable
     78            INT_GPIOFLAG = BUTTON3_FLAG_BIT; //clear stale BUTTON3 interrupt
     79            INT_MISS = BUTTON3_MISS_BIT;     //clear stale missed BUTTON3 interrupt
     80            //configure BUTTON3
     81            BUTTON3_SEL();                             //point IRQ at the desired pin
     82            BUTTON3_INTCFG  = (0 << GPIO_INTFILT_BIT); //no filter
     83            BUTTON3_INTCFG |= (3 << GPIO_INTMOD_BIT);  //3 = both edges
     84            button3State = halButtonPinState(BUTTON3);
     85          #endif
     86            
     87          #ifdef BUTTON0
     88            INT_CFGSET = BUTTON0_INT_EN_BIT; //set top level interrupt enable
   \   0000005E   0x....             LDR.N    R0,??DataTable4_4  ;; 0xe000e100
   \   00000060   0x6005             STR      R5,[R0, #+0]
     89          #endif
     90          
     91          #ifdef BUTTON1
     92            INT_CFGSET = BUTTON1_INT_EN_BIT; //set top level interrupt enable
   \   00000062   0x6007             STR      R7,[R0, #+0]
     93          #endif
     94            
     95          #ifdef BUTTON2
     96            INT_CFGSET = BUTTON2_INT_EN_BIT; //set top level interrupt enable
     97          #endif
     98            
     99          #ifdef BUTTON3
    100            INT_CFGSET = BUTTON3_INT_EN_BIT; //set top level interrupt enable
    101          #endif
    102          }
   \   00000064   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    103          

   \                                 In section .text, align 2, keep-with-next
    104          int8u halButtonState(int8u button)
    105          {
    106            // Note: this returns the "soft" state rather than reading the port
    107            //  so it jives with the interrupts and their callbacks
    108            switch(button) {
   \                     halButtonState: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable4_2
   \   00000002   0x280C             CMP      R0,#+12
   \   00000004   0xD002             BEQ.N    ??halButtonState_0
   \   00000006   0x2816             CMP      R0,#+22
   \   00000008   0xD002             BEQ.N    ??halButtonState_1
   \   0000000A   0xE003             B.N      ??halButtonState_2
    109          #ifdef BUTTON0
    110              case BUTTON0:
    111                return button0State;
   \                     ??halButtonState_0: (+1)
   \   0000000C   0x7808             LDRB     R0,[R1, #+0]
   \   0000000E   0x4770             BX       LR
    112          #endif
    113          #ifdef BUTTON1
    114              case BUTTON1:
    115                return button1State;
   \                     ??halButtonState_1: (+1)
   \   00000010   0x7848             LDRB     R0,[R1, #+1]
   \   00000012   0x4770             BX       LR
    116          #endif
    117          #ifdef BUTTON2
    118              case BUTTON2:
    119                return button2State;
    120          #endif
    121          #ifdef BUTTON3
    122              case BUTTON3:
    123                return button3State;
    124          #endif
    125              default:
    126                return BUTTON_RELEASED;
   \                     ??halButtonState_2: (+1)
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x4770             BX       LR               ;; return
    127            }
    128          }
    129          

   \                                 In section .text, align 2, keep-with-next
    130          int8u halButtonPinState(int8u button)
    131          {
    132            // Note: this returns the current state of the button's pin.  It may not
    133            // jive with the interrupts and their callbacks, but it is useful for
    134            // checking the state of the button on startup.
    135            switch(button) {
   \                     halButtonPinState: (+1)
   \   00000000   0x280C             CMP      R0,#+12
   \   00000002   0xD002             BEQ.N    ??halButtonPinState_0
   \   00000004   0x2816             CMP      R0,#+22
   \   00000006   0xD004             BEQ.N    ??halButtonPinState_1
   \   00000008   0xE00B             B.N      ??halButtonPinState_2
    136          #ifdef BUTTON0
    137              case BUTTON0:
    138                return (BUTTON0_IN & BIT(BUTTON0&7)) ? BUTTON_RELEASED : BUTTON_PRESSED;
   \                     ??halButtonPinState_0: (+1)
   \   0000000A   0x....             LDR.N    R0,??DataTable4_5  ;; 0x4000b408
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0x0900             LSRS     R0,R0,#+4
   \   00000010   0xE002             B.N      ??halButtonPinState_3
    139          #endif
    140          #ifdef BUTTON1
    141              case BUTTON1:
    142                return (BUTTON1_IN & BIT(BUTTON1&7)) ? BUTTON_RELEASED : BUTTON_PRESSED;
   \                     ??halButtonPinState_1: (+1)
   \   00000012   0x....             LDR.N    R0,??DataTable4_6  ;; 0x4000b808
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0x0980             LSRS     R0,R0,#+6
   \                     ??halButtonPinState_3: (+1)
   \   00000018   0xF000 0x0001      AND      R0,R0,#0x1
   \   0000001C   0xF080 0x0001      EOR      R0,R0,#0x1
   \   00000020   0x4770             BX       LR
    143          #endif
    144          #ifdef BUTTON2
    145              case BUTTON2:
    146                return (BUTTON2_IN & BIT(BUTTON2&7)) ? BUTTON_RELEASED : BUTTON_PRESSED;
    147          #endif
    148          #ifdef BUTTON3
    149              case BUTTON3:
    150                return (BUTTON3_IN & BIT(BUTTON3&7)) ? BUTTON_RELEASED : BUTTON_PRESSED;
    151          #endif
    152              default:
    153                return BUTTON_RELEASED;
   \                     ??halButtonPinState_2: (+1)
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x4770             BX       LR               ;; return
    154            }
    155          }
    156          
    157          
    158          //DEBOUNCE operation is based upon the theory that when multiple reads in a row
    159          //return the same value, we have passed any debounce created by the mechanical
    160          //action of a button.  The define "DEBOUNCE" says how many reads in a row
    161          //should return the same value.  The value '5', below, is the recommended value
    162          //since this should require the signal to have stabalized for approximately
    163          //100us which should be much longer than any debounce action.
    164          //Uncomment the following line to enable software debounce operation:
    165          //#define DEBOUNCE 5
    166          
    167          //Typically, software debounce is disabled by defaulting to a value of '0'
    168          //which will cause the preprocessor to strip out the debounce code and save
    169          //flash space.
    170          #ifndef DEBOUNCE
    171          #define DEBOUNCE 0
    172          #endif //DEBOUNCE
    173          
    174          
    175          #ifdef BUTTON0

   \                                 In section .text, align 2, keep-with-next
    176          void BUTTON0_ISR(void)
    177          {
   \                     halIrqBIsr: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    178            int8u buttonStateNow;
    179            #if (DEBOUNCE > 0)
    180              int8u buttonStatePrev;
    181              int32u debounce;
    182            #endif //(DEBOUNCE > 0)
    183          
    184            //clear int before read to avoid potential of missing interrupt
    185            INT_MISS = BUTTON0_MISS_BIT;     //clear missed BUTTON0 interrupt flag
   \   00000002   0x....             LDR.N    R0,??DataTable4  ;; 0x4000a814
   \   00000004   0xF44F 0x5100      MOV      R1,#+8192
   \   00000008   0x60C1             STR      R1,[R0, #+12]
    186            INT_GPIOFLAG = BUTTON0_FLAG_BIT; //clear top level BUTTON0 interrupt flag
   \   0000000A   0x2102             MOVS     R1,#+2
   \   0000000C   0x6001             STR      R1,[R0, #+0]
    187            
    188            buttonStateNow = halButtonPinState(BUTTON0);
   \   0000000E   0x200C             MOVS     R0,#+12
   \   00000010   0x.... 0x....      BL       halButtonPinState
    189            #if (DEBOUNCE > 0)
    190              //read button until get "DEBOUNCE" number of consistent readings
    191              for( debounce = 0;
    192                   debounce < DEBOUNCE;
    193                   debounce = (buttonStateNow == buttonStatePrev) ? debounce + 1 : 0 ) {
    194                buttonStatePrev = buttonStateNow;
    195                //clear int before read to avoid potential of missing interrupt
    196                INT_GPIOFLAG = BUTTON0_FLAG_BIT; //clear top level BUTTON0 interrupt flag
    197                buttonStateNow = halButtonPinState(BUTTON0);
    198              }
    199            #endif //(DEBOUNCE > 0)
    200            if(button0State != buttonStateNow) { //state changed, notify app
   \   00000014   0x....             LDR.N    R4,??DataTable4_2
   \   00000016   0x7822             LDRB     R2,[R4, #+0]
   \   00000018   0x4601             MOV      R1,R0
   \   0000001A   0x428A             CMP      R2,R1
   \   0000001C   0xBF18             IT       NE 
    201              button0State = buttonStateNow;
   \   0000001E   0x7021             STRBNE   R1,[R4, #+0]
    202              halButtonIsr(BUTTON0,  button0State);
   \   00000020   0xD10D             BNE.N    ??halIrqBIsr_0
    203            } else {  //state unchanged, then notify app of a double-transition
    204              button0State = !button0State; //invert temporarily for calling Isr
   \   00000022   0x1E50             SUBS     R0,R2,#+1
   \   00000024   0x4180             SBCS     R0,R0,R0
   \   00000026   0x0FC0             LSRS     R0,R0,#+31
   \   00000028   0x7020             STRB     R0,[R4, #+0]
    205              halButtonIsr(BUTTON0, button0State);
   \   0000002A   0x200C             MOVS     R0,#+12
   \   0000002C   0x7821             LDRB     R1,[R4, #+0]
   \   0000002E   0x.... 0x....      BL       halButtonIsr
    206              button0State = !button0State; //and put it back to current state
   \   00000032   0x7821             LDRB     R1,[R4, #+0]
   \   00000034   0x1E48             SUBS     R0,R1,#+1
   \   00000036   0x4180             SBCS     R0,R0,R0
   \   00000038   0x0FC0             LSRS     R0,R0,#+31
   \   0000003A   0x7020             STRB     R0,[R4, #+0]
    207              halButtonIsr(BUTTON0, button0State);
   \   0000003C   0x7821             LDRB     R1,[R4, #+0]
   \                     ??halIrqBIsr_0: (+1)
   \   0000003E   0xE8BD 0x4010      POP      {R4,LR}
   \   00000042   0x200C             MOVS     R0,#+12
   \   00000044   0x.... 0x....      B.W      halButtonIsr
    208            }
    209            
    210          }
    211          #endif
    212          
    213          #ifdef BUTTON1

   \                                 In section .text, align 2, keep-with-next
    214          void BUTTON1_ISR(void)
    215          {
   \                     halIrqCIsr: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    216            int8u buttonStateNow;
    217            #if (DEBOUNCE > 0)
    218              int8u buttonStatePrev;
    219              int32u debounce;
    220            #endif //(DEBOUNCE > 0)
    221            
    222            //clear int before read to avoid potential of missing interrupt
    223            INT_MISS = BUTTON1_MISS_BIT;     //clear missed BUTTON1 interrupt flag
   \   00000002   0x....             LDR.N    R0,??DataTable4  ;; 0x4000a814
   \   00000004   0xF44F 0x4180      MOV      R1,#+16384
   \   00000008   0x60C1             STR      R1,[R0, #+12]
    224            INT_GPIOFLAG = BUTTON1_FLAG_BIT; //clear top level BUTTON1 interrupt flag
   \   0000000A   0x2104             MOVS     R1,#+4
   \   0000000C   0x6001             STR      R1,[R0, #+0]
    225            
    226            buttonStateNow = halButtonPinState(BUTTON1);
   \   0000000E   0x2016             MOVS     R0,#+22
   \   00000010   0x.... 0x....      BL       halButtonPinState
    227            #if (DEBOUNCE > 0)
    228              //read button until get "DEBOUNCE" number of consistent readings
    229              for( debounce = 0;
    230                   debounce < DEBOUNCE;
    231                   debounce = (buttonStateNow == buttonStatePrev) ? debounce + 1 : 0 ) {
    232                buttonStatePrev = buttonStateNow;
    233                //clear int before read to avoid potential of missing interrupt
    234                INT_GPIOFLAG = BUTTON1_FLAG_BIT; //clear top level BUTTON1 interrupt flag
    235                buttonStateNow = halButtonPinState(BUTTON1);
    236              }
    237            #endif //(DEBOUNCE > 0)
    238            if(button1State != buttonStateNow) { //state changed, notify app
   \   00000014   0x....             LDR.N    R4,??DataTable4_2
   \   00000016   0x7862             LDRB     R2,[R4, #+1]
   \   00000018   0x4601             MOV      R1,R0
   \   0000001A   0x428A             CMP      R2,R1
   \   0000001C   0xBF18             IT       NE 
    239              button1State = buttonStateNow;
   \   0000001E   0x7061             STRBNE   R1,[R4, #+1]
    240              halButtonIsr(BUTTON1,  button1State);
   \   00000020   0xD10D             BNE.N    ??halIrqCIsr_0
    241            } else {  //state unchanged, then notify app of a double-transition
    242              button1State = !button1State; //invert temporarily for calling Isr
   \   00000022   0x1E50             SUBS     R0,R2,#+1
   \   00000024   0x4180             SBCS     R0,R0,R0
   \   00000026   0x0FC0             LSRS     R0,R0,#+31
   \   00000028   0x7060             STRB     R0,[R4, #+1]
    243              halButtonIsr(BUTTON1, button1State);
   \   0000002A   0x2016             MOVS     R0,#+22
   \   0000002C   0x7861             LDRB     R1,[R4, #+1]
   \   0000002E   0x.... 0x....      BL       halButtonIsr
    244              button1State = !button1State; //and put it back to current state
   \   00000032   0x7861             LDRB     R1,[R4, #+1]
   \   00000034   0x1E48             SUBS     R0,R1,#+1
   \   00000036   0x4180             SBCS     R0,R0,R0
   \   00000038   0x0FC0             LSRS     R0,R0,#+31
   \   0000003A   0x7060             STRB     R0,[R4, #+1]
    245              halButtonIsr(BUTTON1, button1State);
   \   0000003C   0x7861             LDRB     R1,[R4, #+1]
   \                     ??halIrqCIsr_0: (+1)
   \   0000003E   0xE8BD 0x4010      POP      {R4,LR}
   \   00000042   0x2016             MOVS     R0,#+22
   \   00000044   0x.... 0x....      B.W      halButtonIsr
    246            }
    247          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x4000A814         DC32     0x4000a814

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0xE000E180         DC32     0xe000e180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x........         DC32     button0State

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x4000BC14         DC32     0x4000bc14

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x4000B408         DC32     0x4000b408

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \   00000000   0x4000B808         DC32     0x4000b808
    248          #endif
    249          
    250          #ifdef BUTTON2
    251          void BUTTON2_ISR(void)
    252          {
    253            int8u buttonStateNow;
    254            #if (DEBOUNCE > 0)
    255              int8u buttonStatePrev;
    256              int32u debounce;
    257            #endif //(DEBOUNCE > 0)
    258          
    259            //clear int before read to avoid potential of missing interrupt
    260            INT_MISS = BUTTON2_MISS_BIT;     //clear missed BUTTON2 interrupt flag
    261            INT_GPIOFLAG = BUTTON2_FLAG_BIT; //clear top level BUTTON2 interrupt flag
    262            
    263            buttonStateNow = halButtonPinState(BUTTON2);
    264            #if (DEBOUNCE > 0)
    265              //read button until get "DEBOUNCE" number of consistent readings
    266              for( debounce = 0;
    267                   debounce < DEBOUNCE;
    268                   debounce = (buttonStateNow == buttonStatePrev) ? debounce + 1 : 0 ) {
    269                buttonStatePrev = buttonStateNow;
    270                //clear int before read to avoid potential of missing interrupt
    271                INT_GPIOFLAG = BUTTON2_FLAG_BIT; //clear top level BUTTON2 interrupt flag
    272                buttonStateNow = halButtonPinState(BUTTON2);
    273              }
    274            #endif //(DEBOUNCE > 0)
    275            if(button2State != buttonStateNow) { //state changed, notify app
    276              button2State = buttonStateNow;
    277              halButtonIsr(BUTTON2,  button2State);
    278            } else {  //state unchanged, then notify app of a double-transition
    279              button2State = !button2State; //invert temporarily for calling Isr
    280              halButtonIsr(BUTTON2, button2State);
    281              button2State = !button2State; //and put it back to current state
    282              halButtonIsr(BUTTON2, button2State);
    283            }
    284            
    285          }
    286          #endif
    287          
    288          #ifdef BUTTON3
    289          void BUTTON3_ISR(void)
    290          {
    291            int8u buttonStateNow;
    292            #if (DEBOUNCE > 0)
    293              int8u buttonStatePrev;
    294              int32u debounce;
    295            #endif //(DEBOUNCE > 0)
    296          
    297            //clear int before read to avoid potential of missing interrupt
    298            INT_MISS = BUTTON3_MISS_BIT;     //clear missed BUTTON3 interrupt flag
    299            INT_GPIOFLAG = BUTTON3_FLAG_BIT; //clear top level BUTTON3 interrupt flag
    300            
    301            buttonStateNow = halButtonPinState(BUTTON3);
    302            #if (DEBOUNCE > 0)
    303              //read button until get "DEBOUNCE" number of consistent readings
    304              for( debounce = 0;
    305                   debounce < DEBOUNCE;
    306                   debounce = (buttonStateNow == buttonStatePrev) ? debounce + 1 : 0 ) {
    307                buttonStatePrev = buttonStateNow;
    308                //clear int before read to avoid potential of missing interrupt
    309                INT_GPIOFLAG = BUTTON3_FLAG_BIT; //clear top level BUTTON3 interrupt flag
    310                buttonStateNow = halButtonPinState(BUTTON3);
    311              }
    312            #endif //(DEBOUNCE > 0)
    313            if(button3State != buttonStateNow) { //state changed, notify app
    314              button3State = buttonStateNow;
    315              halButtonIsr(BUTTON3,  button3State);
    316            } else {  //state unchanged, then notify app of a double-transition
    317              button3State = !button3State; //invert temporarily for calling Isr
    318              halButtonIsr(BUTTON3, button3State);
    319              button3State = !button3State; //and put it back to current state
    320              halButtonIsr(BUTTON3, button3State);
    321            }
    322            
    323          }
    324          #endif
    325          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   halButtonPinState
       0   halButtonState
      24   halInternalInitButton
        24   -> halButtonPinState
       8   halIrqBIsr
         0   -> halButtonIsr
         8   -> halButtonIsr
         8   -> halButtonPinState
       8   halIrqCIsr
         0   -> halButtonIsr
         8   -> halButtonIsr
         8   -> halButtonPinState


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       2  button0State
          button1State
      38  halButtonPinState
      24  halButtonState
     104  halInternalInitButton
      72  halIrqBIsr
      72  halIrqCIsr

 
   2 bytes in section .bss
 338 bytes in section .text
 
 338 bytes of CODE memory
   2 bytes of DATA memory

Errors: none
Warnings: none
