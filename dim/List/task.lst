###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        22/Oct/2015  09:34:12
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\task.c
#    Command line =  
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\task.c -D DIMMER
#        -D NULL_BTL -D CORTEXM3 -D CORTEXM3_EMBER_MICRO -D CORTEXM3_EM357 -D
#        PHY_EM3XX -D
#        "APPLICATION_TOKEN_HEADER=\"app/framework/util/tokens.h\"" -D
#        "ATTRIBUTE_STORAGE_CONFIGURATION=\"app/builder/ZigbeeRoute/ZigbeeRoute_endpoint_config.h\""
#        -D "BOARD_HEADER=\"app\builder\ZigbeeRoute\ZigbeeRoute_board.h\"" -D
#        "CONFIGURATION_HEADER=\"app/framework/util/config.h\"" -D
#        "GENERATED_TOKEN_HEADER=\"app/builder/ZigbeeRoute/ZigbeeRoute_tokens.h\""
#        -D "PLATFORM_HEADER=\"hal/micro/cortexm3/compiler/iar.h\"" -D
#        "ZA_GENERATED_HEADER=\"app/builder/ZigbeeRoute/ZigbeeRoute.h\"" -D
#        "__SOURCEFILE__=\"task.c\"" -lC
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\dim\List\
#        --diag_suppress Pa050 -o
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\dim\Obj\ --debug
#        --endian=little --cpu=Cortex-M3 --no_path_in_file_macros
#        --separate_cluster_for_initialized_variables -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\ -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\ -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\ -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\app\framework\include\
#        -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\app\util\
#        -I E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\stack\
#        -I E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\hal\
#        -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\hal\..\
#        -Ohz --use_c++_inline
#    List file    =  
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\dim\List\task.lst
#    Object file  =  
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\dim\Obj\task.o
#
###############################################################################

E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\task.c
      1          
      2          
      3          
      4          
      5          //-----------------------------Khai bao thu vien---------------------//
      6          
      7          
      8          #include "app/framework/include/af.h"
      9          #include "task.h"
     10          #include "ButtonExe.h"
     11          #include "halDelay.h"
     12          #include "UART_task.h"
     13          
     14          //-----------------------------Khai bao bien-------------------------//
     15          
     16          

   \                                 In section .bss, align 4
     17          int16u TaskData[64];
   \                     TaskData:
   \   00000000                      DS8 128
     18          extern int8u HcDefaultEP;
     19          
     20          //------------------------------Struct------------------------------//
     21          
     22          typedef struct {
     23          	int16u ID;
     24          	int16u Length;
     25          	int16u Inverval;
     26          	int16u MaxTime;
     27          	int16u TimeCnt;
     28          	int16u BeforeTimer;
     29          }TaskMcTimmerCalibrateData;
     30          typedef struct {
     31          	int16u ID;
     32          	int16u Length;
     33          	int16u MaxDimLevel;
     34          	int16u StepTime;
     35          	int16u BeforeDimLevel;
     36          	int16u BeforeTimer;
     37          }TaskUartSendDimLevelData;
     38          typedef struct {
     39              int16u BlinkLedID;
     40              int16u Length;
     41              int16u DelayTime;
     42              int16u BlinkCnt;
     43              int16u MaxCnt;
     44              int16u BeforeTimer;
     45          } TaskBlinkLedData;
     46          typedef struct {
     47          	int16u ID;
     48          	int16u Length;
     49          	int16u TimeCountDown;
     50          	int16u BeforeTimer;
     51          }TaskResetMCUData;
     52          
     53          typedef struct {
     54              int16u ButtonDetectID;
     55              int16u Length;
     56              int16u StateBefore;
     57              int16u PressCnt;
     58              int16u PressOnTime;
     59          	int16u ComboPressCnt;
     60          
     61          }TaskButtonDetectData;
     62          
     63          typedef struct {
     64              int16u ID;
     65              int16u Length;
     66              int16u TimeMax;
     67          	int16u TimeCnt;
     68              int16u Cycle;
     69              int16u BeforeTimer;
     70          }TaskJoinData;
     71          
     72          typedef struct{
     73          	int16u ID;
     74          	int16u Length;
     75          	int16u Endpoint;
     76          	int16u Value;
     77          
     78          }TaskOnOffAttributeChangeData;
     79          
     80          
     81          //------------------------------Xu li chuong trinh-------------------//
     82          
     83          
     84          
     85          
     86          
     87          //------------------------------Common Utility-----------------------//
     88          
     89          
     90          //------------------------------Task Utility-------------------------//

   \                                 In section .text, align 2, keep-with-next
     91          unsigned char GetLastTask(void){
     92              unsigned char Head = 0;
   \                     GetLastTask: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
     93              unsigned char Length = 0;
   \   00000002   0x.... 0x....      LDR.W    R1,??DataTable11
   \   00000006   0xE005             B.N      ??GetLastTask_0
     94              while(TaskData[Head] != 0){
     95                  if(TaskData[Head] != 0){
     96                      Length = TaskData[Head+1]+2;
     97                      Head = Head+Length;
   \                     ??GetLastTask_1: (+1)
   \   00000008   0xEB01 0x0240      ADD      R2,R1,R0, LSL #+1
   \   0000000C   0x8852             LDRH     R2,[R2, #+2]
   \   0000000E   0x1810             ADDS     R0,R2,R0
   \   00000010   0x1C80             ADDS     R0,R0,#+2
   \   00000012   0xB2C0             UXTB     R0,R0
     98                  }
     99              }
   \                     ??GetLastTask_0: (+1)
   \   00000014   0xF831 0x2010      LDRH     R2,[R1, R0, LSL #+1]
   \   00000018   0x2A00             CMP      R2,#+0
   \   0000001A   0xD1F5             BNE.N    ??GetLastTask_1
    100              return Head;
   \   0000001C   0x4770             BX       LR               ;; return
    101          }

   \                                 In section .text, align 2, keep-with-next
    102          void TaskDelete (unsigned char head){
   \                     TaskDelete: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4601             MOV      R1,R0
    103              unsigned char TaskDataLength = 0;
    104              TaskDataLength = TaskData[head+1]+2;
   \   00000004   0x460B             MOV      R3,R1
   \   00000006   0x.... 0x....      LDR.W    R4,??DataTable11
   \   0000000A   0xEB04 0x0043      ADD      R0,R4,R3, LSL #+1
    105              MEMCOPY(&TaskData[head], &TaskData[head + TaskDataLength], (TASKDATASIZE - head - TaskDataLength)*2);
   \   0000000E   0xF1C1 0x0140      RSB      R1,R1,#+64
   \   00000012   0x8842             LDRH     R2,[R0, #+2]
   \   00000014   0x1C95             ADDS     R5,R2,#+2
   \   00000016   0xB2ED             UXTB     R5,R5
   \   00000018   0x1B49             SUBS     R1,R1,R5
   \   0000001A   0x004A             LSLS     R2,R1,#+1
   \   0000001C   0x18E9             ADDS     R1,R5,R3
   \   0000001E   0xEB04 0x0141      ADD      R1,R4,R1, LSL #+1
   \   00000022   0xE8BD 0x4038      POP      {R3-R5,LR}
   \   00000026   0xB292             UXTH     R2,R2
   \   00000028   0x.... 0x....      B.W      halCommonMemMove
    106          }

   \                                 In section .text, align 2, keep-with-next
    107          unsigned char FindTaskID(unsigned char TaskID){
    108              unsigned char Head;
    109              unsigned char CurrentTaskID;
    110          
    111              Head = 0;
    112              CurrentTaskID = TaskData[0];
   \                     FindTaskID: (+1)
   \   00000000   0x.... 0x....      LDR.W    R2,??DataTable11
   \   00000004   0x7813             LDRB     R3,[R2, #+0]
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0xE007             B.N      ??FindTaskID_0
    113              while(CurrentTaskID !=0){
    114          
    115                  if(TaskID == CurrentTaskID){
    116                      return Head;
    117                  }
    118                  else{
    119                       Head = Head + TaskData[Head+1]+2;
   \                     ??FindTaskID_1: (+1)
   \   0000000A   0xEB02 0x0341      ADD      R3,R2,R1, LSL #+1
   \   0000000E   0x885B             LDRH     R3,[R3, #+2]
   \   00000010   0x1859             ADDS     R1,R3,R1
   \   00000012   0x1C89             ADDS     R1,R1,#+2
   \   00000014   0xB2C9             UXTB     R1,R1
    120                       CurrentTaskID = TaskData[Head];
   \   00000016   0xF812 0x3011      LDRB     R3,[R2, R1, LSL #+1]
    121                  }
   \                     ??FindTaskID_0: (+1)
   \   0000001A   0xB11B             CBZ.N    R3,??FindTaskID_2
   \   0000001C   0x4298             CMP      R0,R3
   \   0000001E   0xD1F4             BNE.N    ??FindTaskID_1
   \   00000020   0x4608             MOV      R0,R1
   \   00000022   0x4770             BX       LR
    122              }
    123              return TaskOK;
   \                     ??FindTaskID_2: (+1)
   \   00000024   0x20FF             MOVS     R0,#+255
   \   00000026   0x4770             BX       LR               ;; return
    124          }

   \                                 In section .text, align 2, keep-with-next
    125          int8u ClearTask(int8u taskID){
   \                     ClearTask: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    126          	int8u taskPos;
    127          	taskPos = FindTaskID(taskID);
   \   00000002   0x.... 0x....      BL       FindTaskID
    128          	if(taskPos != TaskOK){
   \   00000006   0x28FF             CMP      R0,#+255
   \   00000008   0xD003             BEQ.N    ??ClearTask_0
    129          		 TaskDelete(taskPos);
   \   0000000A   0x.... 0x....      BL       TaskDelete
    130          		 return TaskClearOK;
   \   0000000E   0x20FF             MOVS     R0,#+255
   \   00000010   0xBD02             POP      {R1,PC}
    131          	}
    132          	else{
    133          		return TaskIdNotFound;
   \                     ??ClearTask_0: (+1)
   \   00000012   0x2001             MOVS     R0,#+1
   \   00000014   0xBD02             POP      {R1,PC}          ;; return
    134          	}
    135          
    136          }
    137          
    138          //-----------------------------************--------------------------//
    139          
    140          
    141          //-----------------------------Send and Receiver Utility-------------//
    142          

   \                                 In section .text, align 2, keep-with-next
    143          void SendLevelControlReadAttribute(int8u Endpoint, int8u Value){
   \                     SendLevelControlReadAttribute: (+1)
   \   00000000   0xB51F             PUSH     {R0-R4,LR}
   \   00000002   0x.... 0x....      BL       ?Subroutine4
    144          	EmberOnOffAttributeResponse OnOffLevelAttributeResponse;
    145          
    146          	OnOffLevelAttributeResponse.AttributeID = 0x0000;  // Current Level
    147          	OnOffLevelAttributeResponse.Status = 0x00;   // success
    148          	OnOffLevelAttributeResponse.DataType = 0x20; //int8u
    149          	OnOffLevelAttributeResponse.Value = Value;
   \                     ??CrossCallReturnLabel_3: (+1)
   \   00000006   0x2020             MOVS     R0,#+32
   \   00000008   0x.... 0x....      BL       ?Subroutine5
    150          
    151          	emberAfFillCommandGlobalServerToClientReadAttributesResponse(ZCL_LEVEL_CONTROL_CLUSTER_ID,&OnOffLevelAttributeResponse, EmberOnOffAttributeResponseLength);
   \                     ??CrossCallReturnLabel_5: (+1)
   \   0000000C   0x2108             MOVS     R1,#+8
   \   0000000E   0x....             B.N      ?Subroutine0

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0x2018             MOVS     R0,#+24
   \   00000002   0x.... 0x....      BL       emberAfFillExternalBuffer
    152          	emberAfSetCommandEndpoints(Endpoint,HcDefaultEP);
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable11_1
   \   0000000A   0x7801             LDRB     R1,[R0, #+0]
   \   0000000C   0x4620             MOV      R0,R4
   \   0000000E   0x.... 0x....      BL       emberAfSetCommandEndpoints
    153          	emberAfSendCommandUnicast(EMBER_OUTGOING_DIRECT, 0x0000);
   \   00000012   0x2100             MOVS     R1,#+0
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x.... 0x....      BL       emberAfSendCommandUnicast
    154          
    155          }
   \   0000001A   0xBD1F             POP      {R0-R4,PC}       ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine5: (+1)
   \   00000000   0xF88D 0x000B      STRB     R0,[SP, #+11]
   \   00000004   0x....             ADR.N    R3,??DataTable9  ;; "b"
   \   00000006   0x2005             MOVS     R0,#+5
   \   00000008   0x9001             STR      R0,[SP, #+4]
   \   0000000A   0x2201             MOVS     R2,#+1
   \   0000000C   0xA802             ADD      R0,SP,#+8
   \   0000000E   0x9000             STR      R0,[SP, #+0]
   \   00000010   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine4: (+1)
   \   00000000   0x4604             MOV      R4,R0
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0xF8AD 0x0008      STRH     R0,[SP, #+8]
   \   00000008   0xF88D 0x000A      STRB     R0,[SP, #+10]
   \   0000000C   0xF88D 0x100C      STRB     R1,[SP, #+12]
   \   00000010   0x4770             BX       LR
    156          

   \                                 In section .text, align 2, keep-with-next
    157          void SendOnOffControlReadAttribute(int8u Endpoint, int8u Value){
   \                     SendOnOffControlReadAttribute: (+1)
   \   00000000   0xB51F             PUSH     {R0-R4,LR}
   \   00000002   0x.... 0x....      BL       ?Subroutine4
    158          	EmberOnOffAttributeResponse OnOffAttributeResponse;
    159          	OnOffAttributeResponse.AttributeID = 0x0000;  // on-off
    160          	OnOffAttributeResponse.Status = 0x00;   // success
    161          	OnOffAttributeResponse.DataType = 0x10; //bool
    162          	OnOffAttributeResponse.Value = Value;
   \                     ??CrossCallReturnLabel_4: (+1)
   \   00000006   0x2010             MOVS     R0,#+16
   \   00000008   0x.... 0x....      BL       ?Subroutine5
    163          
    164          	emberAfFillCommandGlobalServerToClientReadAttributesResponse(0x0006,&OnOffAttributeResponse, EmberOnOffAttributeResponseLength);
   \                     ??CrossCallReturnLabel_6: (+1)
   \   0000000C   0x2106             MOVS     R1,#+6
   \   0000000E                      REQUIRE ?Subroutine0
   \   0000000E                      ;; // Fall through to label ?Subroutine0
    165          	emberAfSetCommandEndpoints(Endpoint,HcDefaultEP);
    166          	emberAfSendCommandUnicast(EMBER_OUTGOING_DIRECT, 0x0000);
    167          
    168          }
    169          
    170          

   \                                 In section .text, align 2, keep-with-next
    171          int8u SendViaBindingTable (int8u sourceEndpoint, int8u Value,int8u CommandType){
    172          /*
    173          	int8u i;
    174          	EmberBindingTableEntry result;
    175          	EmberStatus bindStatus;
    176              EmberStatus sendStatus;
    177          	int16u NormalTransitionTime = 0xFFFF;
    178          
    179          
    180          	for (i = 0; i < EMBER_BINDING_TABLE_SIZE; i++) {
    181          		bindStatus = emberGetBinding(i, &result);
    182          		if (bindStatus == EMBER_SUCCESS) {
    183          			if (result.type > EMBER_MULTICAST_BINDING) {
    184          				result.type = 4;  // last entry in the string list above
    185          			}
    186          			if (result.type != EMBER_UNUSED_BINDING) {
    187          				if(result.local == sourceEndpoint){
    188          					if(CommandType == OnOffType)  {
    189          						if(Value == 1){
    190          							emberAfFillCommandOnOffClusterOn();
    191          						}
    192          						else{
    193          							emberAfFillCommandOnOffClusterOff();
    194          						}
    195          					}
    196          					else if(CommandType == LevelType)  {
    197          					    emberAfFillCommandLevelControlClusterMoveToLevel(Value, NormalTransitionTime);
    198          					}
    199          					else if(CommandType == LevelWithOnOffType){
    200          					    emberAfFillCommandLevelControlClusterMoveToLevelWithOnOff(Value,NormalTransitionTime);
    201          					}
    202          					sendStatus = emberAfSendCommandUnicast(EMBER_OUTGOING_VIA_BINDING,i); // Send Bind
    203          					if(sendStatus != EMBER_SUCCESS){
    204          						return sendStatus;
    205          					}
    206          				}
    207          			}
    208          		}
    209          	}
    210          */
    211              return EMBER_SUCCESS;
   \                     SendViaBindingTable: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    212          
    213          }
    214          
    215          
    216          //-----------------------------************--------------------------//
    217          
    218          //------------------------------McTimmerCalibrateTask----------------------//

   \                                 In section .text, align 2, keep-with-next
    219          void CallMcTimmerCalibrateTask(int8u inverval, int8u time){
   \                     CallMcTimmerCalibrateTask: (+1)
   \   00000000   0xB53E             PUSH     {R1-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    220          	int8u TaskDulicateStatus;
    221          	TaskDulicateStatus = FindTaskID(TaMcTimerCalibrate);
    222          	if(TaskDulicateStatus == TaskOK){
   \   00000006   0x200B             MOVS     R0,#+11
   \   00000008   0x.... 0x....      BL       FindTaskID
   \   0000000C   0x28FF             CMP      R0,#+255
   \   0000000E   0xD112             BNE.N    ??CrossCallReturnLabel_15
    223          		TaskMcTimmerCalibrateData  McTimmerCalibrateData;
    224          		McTimmerCalibrateData.ID = TaMcTimerCalibrate;
   \   00000010   0x200B             MOVS     R0,#+11
   \   00000012   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    225          		McTimmerCalibrateData.Length = 4;
    226          		McTimmerCalibrateData.Inverval = inverval;
   \   00000016   0xF8AD 0x4004      STRH     R4,[SP, #+4]
   \   0000001A   0x2004             MOVS     R0,#+4
   \   0000001C   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    227          		McTimmerCalibrateData.MaxTime = time;
   \   00000020   0xF8AD 0x5006      STRH     R5,[SP, #+6]
    228          		McTimmerCalibrateData.TimeCnt = 0;
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0xF8AD 0x0008      STRH     R0,[SP, #+8]
    229          		McTimmerCalibrateData.BeforeTimer =  (int16u)halCommonGetInt32uMillisecondTick();
   \   0000002A   0x.... 0x....      BL       halCommonGetInt32uMillisecondTick
   \   0000002E   0x.... 0x....      BL       ?Subroutine6
    230          
    231          		MEMCOPY(&TaskData[GetLastTask()],&McTimmerCalibrateData, sizeof(TaskMcTimmerCalibrateData));
    232          	}
   \                     ??CrossCallReturnLabel_9: (+1)
   \   00000032   0x.... 0x....      BL       ?Subroutine8
    233          }
   \                     ??CrossCallReturnLabel_15: (+1)
   \   00000036   0xBD37             POP      {R0-R2,R4,R5,PC}  ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine8: (+1)
   \   00000000   0x220C             MOVS     R2,#+12
   \   00000002   0x.... 0x....      LDR.W    R3,??DataTable11
   \   00000006   0xA900             ADD      R1,SP,#+0
   \   00000008   0xEB03 0x0040      ADD      R0,R3,R0, LSL #+1
   \   0000000C   0x.... 0x....      B.W      halCommonMemMove

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine6: (+1)
   \   00000000   0xF8AD 0x000A      STRH     R0,[SP, #+10]
   \   00000004   0x....             B.N      GetLastTask

   \                                 In section .text, align 2, keep-with-next
    234          int8u TaskMcTimmerCalibrate(int16u *Data){
   \                     TaskMcTimmerCalibrate: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
   \   00000004   0x.... 0x....      BL       ?Subroutine3
    235          	TaskMcTimmerCalibrateData  McTimmerCalibrateData;
    236          
    237          	MEMCOPY(&McTimmerCalibrateData,Data, sizeof(TaskMcTimmerCalibrateData));
    238          
    239              if(CommonGetDurationTime(McTimmerCalibrateData.BeforeTimer) > McTimmerCalibrateData.MaxTime){
   \                     ??CrossCallReturnLabel_2: (+1)
   \   00000008   0x.... 0x....      BL       ?Subroutine11
   \                     ??CrossCallReturnLabel_25: (+1)
   \   0000000C   0xF8BD 0x1006      LDRH     R1,[SP, #+6]
   \   00000010   0x4281             CMP      R1,R0
   \   00000012   0xD211             BCS.N    ??TaskMcTimmerCalibrate_0
    240          		UartSendMcTimerCalibrate((int8u)McTimmerCalibrateData.Inverval,
    241          								 (int8u)McTimmerCalibrateData.MaxTime,
    242          								 (int8u)McTimmerCalibrateData.TimeCnt);
   \   00000014   0xF8BD 0x2008      LDRH     R2,[SP, #+8]
   \   00000018   0xF8BD 0x0004      LDRH     R0,[SP, #+4]
   \   0000001C   0xB2D2             UXTB     R2,R2
   \   0000001E   0xB2C9             UXTB     R1,R1
   \   00000020   0xB2C0             UXTB     R0,R0
   \   00000022   0x.... 0x....      BL       UartSendMcTimerCalibrate
    243                 	McTimmerCalibrateData.TimeCnt++;
   \   00000026   0xF8BD 0x0008      LDRH     R0,[SP, #+8]
   \   0000002A   0x1C40             ADDS     R0,R0,#+1
   \   0000002C   0xF8AD 0x0008      STRH     R0,[SP, #+8]
    244                  McTimmerCalibrateData.BeforeTimer = (int16u)halCommonGetInt32uMillisecondTick();
   \   00000030   0x.... 0x....      BL       halCommonGetInt32uMillisecondTick
   \   00000034   0xF8AD 0x000A      STRH     R0,[SP, #+10]
    245              }
    246          
    247              if(McTimmerCalibrateData.TimeCnt > McTimmerCalibrateData.TimeCnt){
    248                  return  CompleteTask;
    249          	}else{
    250          		MEMCOPY(Data, &McTimmerCalibrateData, sizeof(TaskMcTimmerCalibrateData));
   \                     ??TaskMcTimmerCalibrate_0: (+1)
   \   00000038   0x.... 0x....      BL       ?Subroutine10
    251          		return ContinuteTask;
   \                     ??CrossCallReturnLabel_22: (+1)
   \   0000003C   0x2002             MOVS     R0,#+2
   \   0000003E   0xB004             ADD      SP,SP,#+16
   \   00000040   0xBD10             POP      {R4,PC}          ;; return
    252          	}
    253          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine10: (+1)
   \   00000000   0x220C             MOVS     R2,#+12
   \                     ??Subroutine10_0: (+1)
   \   00000002   0xA900             ADD      R1,SP,#+0
   \   00000004   0x4620             MOV      R0,R4
   \   00000006   0x.... 0x....      B.W      halCommonMemMove

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine11: (+1)
   \   00000000   0xF8BD 0x000A      LDRH     R0,[SP, #+10]
   \   00000004   0x.... 0x....      B.W      CommonGetDurationTime

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3: (+1)
   \   00000000   0x4604             MOV      R4,R0
   \   00000002   0x220C             MOVS     R2,#+12
   \   00000004   0x4621             MOV      R1,R4
   \   00000006   0xA800             ADD      R0,SP,#+0
   \   00000008   0x.... 0x....      B.W      halCommonMemMove
    254          
    255          
    256          //------------------------------BlinkLedTask-------------------------//

   \                                 In section .text, align 2, keep-with-next
    257          void CallBlinkLedTask (int8u n, int16u delayTime, int16u maxCnt){
   \                     CallBlinkLedTask: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
   \   00000008   0x4616             MOV      R6,R2
    258              int8u TaskDulicateStatus;
    259              TaskDulicateStatus = FindTaskID(n);
    260              if(TaskDulicateStatus == TaskOK){
   \   0000000A   0x.... 0x....      BL       FindTaskID
   \   0000000E   0x28FF             CMP      R0,#+255
   \   00000010   0xD10F             BNE.N    ??CrossCallReturnLabel_14
    261                  TaskBlinkLedData BlinkData;
    262                  BlinkData.BlinkLedID = n;
    263                  BlinkData.Length = 4;
   \   00000012   0x2004             MOVS     R0,#+4
   \   00000014   0xF8AD 0x0002      STRH     R0,[SP, #+2]
   \   00000018   0xF8AD 0x4000      STRH     R4,[SP, #+0]
    264                  BlinkData.DelayTime = delayTime;
    265                  BlinkData.MaxCnt = maxCnt;
    266                  BlinkData.BlinkCnt = 0;
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0xF8AD 0x5004      STRH     R5,[SP, #+4]
   \   00000022   0xF8AD 0x6008      STRH     R6,[SP, #+8]
   \   00000026   0x.... 0x....      BL       ??Subroutine7_0
    267                  BlinkData.BeforeTimer = (int16u)halCommonGetInt32uMillisecondTick();
    268          
    269                  MEMCOPY(&TaskData[GetLastTask()],&BlinkData, sizeof(TaskBlinkLedData));
    270              }
   \                     ??CrossCallReturnLabel_11: (+1)
   \   0000002A   0x.... 0x....      BL       ?Subroutine6
   \                     ??CrossCallReturnLabel_8: (+1)
   \   0000002E   0x.... 0x....      BL       ?Subroutine8
    271              else{
    272              }
    273          }
   \                     ??CrossCallReturnLabel_14: (+1)
   \   00000032   0xBD7F             POP      {R0-R6,PC}       ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine7: (+1)
   \   00000000   0xF8BD 0x0006      LDRH     R0,[SP, #+6]
   \   00000004   0x1C40             ADDS     R0,R0,#+1
   \                     ??Subroutine7_0: (+1)
   \   00000006   0xF8AD 0x0006      STRH     R0,[SP, #+6]
   \   0000000A   0x.... 0x....      B.W      halCommonGetInt32uMillisecondTick

   \                                 In section .text, align 2, keep-with-next
    274          void ClearAllBlinkTask(void){
   \                     ClearAllBlinkTask: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    275          	ClearTask(TaBlinkLed1);
   \   00000002   0x2001             MOVS     R0,#+1
   \   00000004   0x.... 0x....      BL       ClearTask
    276          	ClearTask(TaBlinkLed2);
   \   00000008   0x2002             MOVS     R0,#+2
   \   0000000A   0x.... 0x....      BL       ClearTask
    277          	ClearTask(TaBlinkLed3);
   \   0000000E   0x2003             MOVS     R0,#+3
   \   00000010   0x.... 0x....      BL       ClearTask
    278          	ClearTask(TaBlinkLed4);
   \   00000014   0x2004             MOVS     R0,#+4
   \   00000016   0x.... 0x....      BL       ClearTask
    279          	ClearTask(TaBlinkLedAll);
   \   0000001A   0xE8BD 0x4002      POP      {R1,LR}
   \   0000001E   0x2005             MOVS     R0,#+5
   \   00000020   0x....             B.N      ClearTask
    280          
    281          }

   \                                 In section .text, align 2, keep-with-next
    282          unsigned char TaskBlinkLed(int16u *Data){
   \                     TaskBlinkLed: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
   \   00000004   0x.... 0x....      BL       ?Subroutine3
    283          	TaskBlinkLedData BlinkLedData;
    284          	int8u Result;
    285          
    286          	MEMCOPY(&BlinkLedData,Data, sizeof(TaskBlinkLedData));
    287          
    288              if(CommonGetDurationTime(BlinkLedData.BeforeTimer) > BlinkLedData.DelayTime){
   \                     ??CrossCallReturnLabel_1: (+1)
   \   00000008   0x.... 0x....      BL       ?Subroutine11
   \                     ??CrossCallReturnLabel_24: (+1)
   \   0000000C   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000010   0x4281             CMP      R1,R0
   \   00000012   0xD218             BCS.N    ??TaskBlinkLed_0
    289          		switch (BlinkLedData.BlinkLedID){
   \   00000014   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000018   0x2801             CMP      R0,#+1
   \   0000001A   0xD00E             BEQ.N    ??TaskBlinkLed_1
   \   0000001C   0xD30F             BCC.N    ??TaskBlinkLed_2
   \   0000001E   0x2803             CMP      R0,#+3
   \   00000020   0xD006             BEQ.N    ??TaskBlinkLed_3
   \   00000022   0xD303             BCC.N    ??TaskBlinkLed_4
   \   00000024   0x2805             CMP      R0,#+5
   \   00000026   0xD007             BEQ.N    ??TaskBlinkLed_5
   \   00000028   0xD304             BCC.N    ??TaskBlinkLed_6
   \   0000002A   0xE008             B.N      ??TaskBlinkLed_2
    290          			case TaBlinkLed1:
    291          				UartSendToggleLed(1);
    292          			break;
    293          			case TaBlinkLed2:
    294          				UartSendToggleLed(2);
   \                     ??TaskBlinkLed_4: (+1)
   \   0000002C   0x2002             MOVS     R0,#+2
   \   0000002E   0xE004             B.N      ??TaskBlinkLed_1
    295          			break;
    296          			case TaBlinkLed3:
    297          				UartSendToggleLed(4);
   \                     ??TaskBlinkLed_3: (+1)
   \   00000030   0x2004             MOVS     R0,#+4
   \   00000032   0xE002             B.N      ??TaskBlinkLed_1
    298          			break;
    299          			case TaBlinkLed4:
    300          				UartSendToggleLed(8);
   \                     ??TaskBlinkLed_6: (+1)
   \   00000034   0x2008             MOVS     R0,#+8
   \   00000036   0xE000             B.N      ??TaskBlinkLed_1
    301          			break;
    302          			case TaBlinkLedAll:
    303          				UartSendToggleLed(0xF);
   \                     ??TaskBlinkLed_5: (+1)
   \   00000038   0x200F             MOVS     R0,#+15
   \                     ??TaskBlinkLed_1: (+1)
   \   0000003A   0x.... 0x....      BL       UartSendToggleLed
    304          			break;
    305          			default:
    306          			break;
    307          		}
    308                 	BlinkLedData.BlinkCnt++;
   \                     ??TaskBlinkLed_2: (+1)
   \   0000003E   0x.... 0x....      BL       ?Subroutine7
    309                  BlinkLedData.BeforeTimer = (int16u)halCommonGetInt32uMillisecondTick();
    310              }
   \                     ??CrossCallReturnLabel_13: (+1)
   \   00000042   0xF8AD 0x000A      STRH     R0,[SP, #+10]
    311          
    312              if(BlinkLedData.BlinkCnt > BlinkLedData.MaxCnt){
   \                     ??TaskBlinkLed_0: (+1)
   \   00000046   0xF8BD 0x0008      LDRH     R0,[SP, #+8]
   \   0000004A   0xF8BD 0x1006      LDRH     R1,[SP, #+6]
   \   0000004E   0x4288             CMP      R0,R1
   \   00000050   0xBF38             IT       CC 
    313                  Result =  CompleteTask;
   \   00000052   0x2001             MOVCC    R0,#+1
   \   00000054   0xD302             BCC.N    ??TaskBlinkLed_7
    314          	}else{
    315          		MEMCOPY(Data, &BlinkLedData, sizeof(TaskBlinkLedData));
   \   00000056   0x.... 0x....      BL       ?Subroutine10
    316          		Result =  ContinuteTask;
   \                     ??CrossCallReturnLabel_21: (+1)
   \   0000005A   0x2002             MOVS     R0,#+2
    317          	}
    318          	return Result;
   \                     ??TaskBlinkLed_7: (+1)
   \   0000005C   0xB004             ADD      SP,SP,#+16
   \   0000005E   0xBD10             POP      {R4,PC}          ;; return
    319          }
    320          
    321          //-------------------**----------********---------**-------------------//
    322          
    323          
    324          //-----------------------------CallUartSendDimLevel------------------------------//

   \                                 In section .text, align 2, keep-with-next
    325          void CallUartSendDimLevel(int8u maxLevel, int16u duaraionTime){
   \                     CallUartSendDimLevel: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
    326          	TaskUartSendDimLevelData UartSendDimLevelData;
    327          
    328          	int8u currentLevel = emberAfReadServerAttribute(1, ZCL_LEVEL_CONTROL_CLUSTER_ID,ZCL_CURRENT_LEVEL_ATTRIBUTE_ID,
    329          				&currentLevel, sizeof(currentLevel));
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0x9000             STR      R0,[SP, #+0]
   \   0000000C   0xAB01             ADD      R3,SP,#+4
   \   0000000E   0x2200             MOVS     R2,#+0
   \   00000010   0x2108             MOVS     R1,#+8
   \   00000012   0x.... 0x....      BL       emberAfReadServerAttribute
   \   00000016   0xF88D 0x0004      STRB     R0,[SP, #+4]
    330              UartSendDimLevelData.ID = TaUartSendDimLevel;
    331          	UartSendDimLevelData.Length = 4;
    332          	UartSendDimLevelData.MaxDimLevel = maxLevel;
   \   0000001A   0xF8AD 0x400C      STRH     R4,[SP, #+12]
   \   0000001E   0x200A             MOVS     R0,#+10
   \   00000020   0xF8AD 0x0008      STRH     R0,[SP, #+8]
   \   00000024   0x2004             MOVS     R0,#+4
   \   00000026   0xF8AD 0x000A      STRH     R0,[SP, #+10]
    333          	((maxLevel - currentLevel)>0)?
    334          		(UartSendDimLevelData.StepTime = duaraionTime/(maxLevel - currentLevel)):
    335          	  	(UartSendDimLevelData.StepTime = duaraionTime/(currentLevel - maxLevel));
   \   0000002A   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   0000002E   0x1A21             SUBS     R1,R4,R0
   \   00000030   0x2901             CMP      R1,#+1
   \   00000032   0xBFAE             ITEE     GE 
   \   00000034   0xFB95 0xF0F1      SDIVGE   R0,R5,R1
   \   00000038   0x1B00             SUBLT    R0,R0,R4
   \   0000003A   0xFB95 0xF0F0      SDIVLT   R0,R5,R0
   \   0000003E   0xF8AD 0x000E      STRH     R0,[SP, #+14]
    336          	UartSendDimLevelData.BeforeDimLevel = currentLevel;
   \   00000042   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   00000046   0xF8AD 0x0010      STRH     R0,[SP, #+16]
    337          	UartSendDimLevelData.BeforeTimer = (int16u)halCommonGetInt32uMillisecondTick();
   \   0000004A   0x.... 0x....      BL       halCommonGetInt32uMillisecondTick
   \   0000004E   0xF8AD 0x0012      STRH     R0,[SP, #+18]
    338          
    339          	MEMCOPY(&TaskData[GetLastTask()],&UartSendDimLevelData, sizeof(TaskUartSendDimLevelData));
   \   00000052   0x.... 0x....      BL       GetLastTask
   \   00000056   0x220C             MOVS     R2,#+12
   \   00000058   0x....             LDR.N    R3,??DataTable11
   \   0000005A   0xA902             ADD      R1,SP,#+8
   \   0000005C   0xEB03 0x0040      ADD      R0,R3,R0, LSL #+1
   \   00000060   0x.... 0x....      BL       halCommonMemMove
    340          }
   \   00000064   0xB005             ADD      SP,SP,#+20
   \   00000066   0xBD30             POP      {R4,R5,PC}       ;; return

   \                                 In section .text, align 2, keep-with-next
    341          int8u TaskUartSendDimLevel(int16u *Data){
   \                     TaskUartSendDimLevel: (+1)
   \   00000000   0xB5E0             PUSH     {R5-R7,LR}
    342          	TaskUartSendDimLevelData UartSendDimLevelData;
    343          
    344          	MEMCOPY(&UartSendDimLevelData,Data, sizeof(TaskUartSendDimLevelData));
   \   00000002   0x4601             MOV      R1,R0
   \   00000004   0x220C             MOVS     R2,#+12
   \   00000006   0xA800             ADD      R0,SP,#+0
   \   00000008   0x.... 0x....      BL       halCommonMemMove
    345          
    346          
    347          	return CompleteTask;
   \   0000000C   0x2001             MOVS     R0,#+1
   \   0000000E   0xBD0E             POP      {R1-R3,PC}       ;; return
    348          }
    349          
    350          //------------------------------ScanButtonTask-------------------------//
    351          

   \                                 In section .text, align 2, keep-with-next
    352          void CallButtonDetectTask(void){
   \                     CallButtonDetectTask: (+1)
   \   00000000   0xB5E0             PUSH     {R5-R7,LR}
    353              TaskButtonDetectData ButtonDetectData;
    354          
    355              ButtonDetectData.ButtonDetectID = TaButtonDetect;
   \   00000002   0x2006             MOVS     R0,#+6
   \   00000004   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    356              ButtonDetectData.Length = 4;
   \   00000008   0x2004             MOVS     R0,#+4
   \   0000000A   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    357              ButtonDetectData.StateBefore = ((BUTTON0_IN >> 4) & 0x01);
   \   0000000E   0x....             LDR.N    R0,??DataTable11_2  ;; 0x4000b408
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0xF3C0 0x1000      UBFX     R0,R0,#+4,#+1
   \   00000016   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    358              ButtonDetectData.PressCnt = 0;
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x.... 0x....      BL       ??Subroutine7_0
    359              ButtonDetectData.PressOnTime = (int16u)halCommonGetInt32uMillisecondTick();
   \                     ??CrossCallReturnLabel_10: (+1)
   \   00000020   0xF8AD 0x0008      STRH     R0,[SP, #+8]
    360          	ButtonDetectData.ComboPressCnt = 0;
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x.... 0x....      BL       ?Subroutine6
    361          
    362              MEMCOPY(&TaskData[GetLastTask()],&ButtonDetectData, sizeof(TaskButtonDetectData));
   \                     ??CrossCallReturnLabel_7: (+1)
   \   0000002A   0x220C             MOVS     R2,#+12
   \   0000002C   0x....             B.N      ??Subroutine12_0
    363          }

   \                                 In section .text, align 2, keep-with-next
   \                     ??Subroutine12_0: (+1)
   \   00000000   0x....             LDR.N    R3,??DataTable11
   \                     ??Subroutine12_1: (+1)
   \   00000002   0xA900             ADD      R1,SP,#+0
   \   00000004   0xEB03 0x0040      ADD      R0,R3,R0, LSL #+1
   \   00000008   0x.... 0x....      BL       halCommonMemMove
   \   0000000C   0xBD07             POP      {R0-R2,PC}       ;; return

   \                                 In section .text, align 2, keep-with-next
    364          unsigned char TaskButtonDetect (int16u *Data){
   \                     TaskButtonDetect: (+1)
   \   00000000   0xB53E             PUSH     {R1-R5,LR}
   \   00000002   0x.... 0x....      BL       ?Subroutine3
    365          	unsigned int ButtonStateCurrent;
    366          	TaskButtonDetectData ButtonDetectData;
    367          	MEMCOPY(&ButtonDetectData, Data, sizeof(TaskButtonDetectData));
    368          
    369              ButtonStateCurrent =  ((BUTTON0_IN >> 4) & 0x01);
   \                     ??CrossCallReturnLabel_0: (+1)
   \   00000006   0x....             LDR.N    R5,??DataTable11_2  ;; 0x4000b408
   \   00000008   0x6828             LDR      R0,[R5, #+0]
    370          
    371              if((ButtonStateCurrent == 0) && (ButtonDetectData.StateBefore ==1)){
   \   0000000A   0xF3C0 0x1000      UBFX     R0,R0,#+4,#+1
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xF8BD 0x0004      LDRH     R0,[SP, #+4]
   \   00000014   0xD12E             BNE.N    ??TaskButtonDetect_0
   \   00000016   0x2801             CMP      R0,#+1
   \   00000018   0xD11B             BNE.N    ??TaskButtonDetect_1
    372                  if(ButtonDetectData.PressCnt == 0){
   \   0000001A   0xF8BD 0x0006      LDRH     R0,[SP, #+6]
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD13F             BNE.N    ??TaskButtonDetect_2
    373                      //--------------Check Combo button-------------//
    374          			if((CommonGetDurationTime(ButtonDetectData.PressOnTime) < 500) &&
    375          			   				(CommonGetDurationTime (ButtonDetectData.PressOnTime) > 100)){
   \   00000022   0x.... 0x....      BL       ?Subroutine9
   \                     ??CrossCallReturnLabel_19: (+1)
   \   00000026   0xF5B0 0x7FFA      CMP      R0,#+500
   \   0000002A   0xDA07             BGE.N    ??TaskButtonDetect_3
   \   0000002C   0x.... 0x....      BL       ?Subroutine9
   \                     ??CrossCallReturnLabel_18: (+1)
   \   00000030   0x2865             CMP      R0,#+101
   \   00000032   0xDB03             BLT.N    ??TaskButtonDetect_3
    376          				ButtonDetectData.ComboPressCnt++;
   \   00000034   0xF8BD 0x000A      LDRH     R0,[SP, #+10]
   \   00000038   0x1C40             ADDS     R0,R0,#+1
   \   0000003A   0xE000             B.N      ??TaskButtonDetect_4
    377          			}
    378          			else{
    379          				ButtonDetectData.ComboPressCnt = 0;
   \                     ??TaskButtonDetect_3: (+1)
   \   0000003C   0x2000             MOVS     R0,#+0
   \                     ??TaskButtonDetect_4: (+1)
   \   0000003E   0xF8AD 0x000A      STRH     R0,[SP, #+10]
    380          			}
    381          			//--------------End Check----------------------//
    382                      ButtonDetectData.PressOnTime = (int16u)halCommonGetInt32uMillisecondTick();
   \   00000042   0x.... 0x....      BL       halCommonGetInt32uMillisecondTick
   \   00000046   0xF8AD 0x0008      STRH     R0,[SP, #+8]
    383          
    384                      ButtonDetectData.PressCnt += 1;
   \   0000004A   0xF8BD 0x0006      LDRH     R0,[SP, #+6]
   \   0000004E   0x1C40             ADDS     R0,R0,#+1
   \   00000050   0xE00D             B.N      ??TaskButtonDetect_5
    385                  }
    386              }
   \                     ??TaskButtonDetect_1: (+1)
   \   00000052   0x2800             CMP      R0,#+0
   \   00000054   0xBF04             ITT      EQ 
    387              else if((ButtonStateCurrent == 0) && (ButtonDetectData.StateBefore == 0)){
    388                 if(ButtonDetectData.PressCnt == 1){
   \   00000056   0xF8BD 0x0006      LDRHEQ   R0,[SP, #+6]
   \   0000005A   0x2801             CMPEQ    R0,#+1
   \   0000005C   0xD121             BNE.N    ??TaskButtonDetect_2
    389                      if(CommonGetDurationTime(ButtonDetectData.PressOnTime) > 100){
   \   0000005E   0x.... 0x....      BL       ?Subroutine9
   \                     ??CrossCallReturnLabel_17: (+1)
   \   00000062   0x2865             CMP      R0,#+101
   \   00000064   0xDB1D             BLT.N    ??TaskButtonDetect_2
    390          
    391          				beButtonPress(1);
   \   00000066   0x2001             MOVS     R0,#+1
   \   00000068   0x.... 0x....      BL       beButtonPress
    392          
    393                          ButtonDetectData.PressCnt = 0;
   \   0000006C   0x2000             MOVS     R0,#+0
   \                     ??TaskButtonDetect_5: (+1)
   \   0000006E   0xF8AD 0x0006      STRH     R0,[SP, #+6]
   \   00000072   0xE016             B.N      ??TaskButtonDetect_2
    394                      }
    395                  }
    396              }
   \                     ??TaskButtonDetect_0: (+1)
   \   00000074   0x2801             CMP      R0,#+1
   \   00000076   0xD114             BNE.N    ??TaskButtonDetect_2
    397          	else if((ButtonStateCurrent == 0) && (ButtonDetectData.StateBefore == 1)){
    398          
    399          	}
    400          	else if((ButtonStateCurrent == 1) && (ButtonDetectData.StateBefore == 1)){
    401          		//-----------------ComboButtonExe------------------//
    402          		if(CommonGetDurationTime (ButtonDetectData.PressOnTime) > 1500){
   \   00000078   0x.... 0x....      BL       ?Subroutine9
   \                     ??CrossCallReturnLabel_16: (+1)
   \   0000007C   0xF240 0x51DD      MOVW     R1,#+1501
   \   00000080   0x4288             CMP      R0,R1
   \   00000082   0xDB0E             BLT.N    ??TaskButtonDetect_2
    403          			if(ButtonDetectData.ComboPressCnt == 1){
   \   00000084   0xF8BD 0x000A      LDRH     R0,[SP, #+10]
   \   00000088   0x2801             CMP      R0,#+1
   \   0000008A   0xD102             BNE.N    ??TaskButtonDetect_6
    404          //					BindDevice
    405          				beButtonPress2Time(1);
   \   0000008C   0x.... 0x....      BL       beButtonPress2Time
    406          
    407          				ButtonDetectData.ComboPressCnt = 0;
   \   00000090   0xE004             B.N      ??TaskButtonDetect_7
    408          			}
    409          			else if (ButtonDetectData.ComboPressCnt == 2){
   \                     ??TaskButtonDetect_6: (+1)
   \   00000092   0x2802             CMP      R0,#+2
   \   00000094   0xD105             BNE.N    ??TaskButtonDetect_2
    410          //					JoinNwk
    411          				beButtonPress3Time(1);
   \   00000096   0x2001             MOVS     R0,#+1
   \   00000098   0x.... 0x....      BL       beButtonPress3Time
    412          
    413          				ButtonDetectData.ComboPressCnt = 0;
   \                     ??TaskButtonDetect_7: (+1)
   \   0000009C   0x2000             MOVS     R0,#+0
   \   0000009E   0xF8AD 0x000A      STRH     R0,[SP, #+10]
   \                     ??TaskButtonDetect_2: (+1)
   \   000000A2   0x220C             MOVS     R2,#+12
    414          			}
    415          		}
    416          		//-----------------ComboButtonExe------------------//
    417          	}
    418              ButtonDetectData.StateBefore = ((BUTTON0_IN >> 4) & 0x01);
   \   000000A4   0x6828             LDR      R0,[R5, #+0]
   \   000000A6   0xF3C0 0x1000      UBFX     R0,R0,#+4,#+1
   \   000000AA   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    419              MEMCOPY(Data,&ButtonDetectData, sizeof(TaskButtonDetectData));
   \   000000AE                      REQUIRE ?Subroutine2
   \   000000AE                      ;; // Fall through to label ?Subroutine2
    420              return ContinuteTask;
    421          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2: (+1)
   \   00000000   0x.... 0x....      BL       ??Subroutine10_0
   \                     ??CrossCallReturnLabel_20: (+1)
   \   00000004   0x2002             MOVS     R0,#+2
   \   00000006   0xBD3E             POP      {R1-R5,PC}       ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine9: (+1)
   \   00000000   0xF8BD 0x0008      LDRH     R0,[SP, #+8]
   \   00000004   0x.... 0x....      B.W      CommonGetDurationTime
    422          
    423          //-----------------------------***************--------------------------//
    424          
    425          
    426          //-----------------------------FindAndJoinTask--------------------------//

   \                                 In section .text, align 2, keep-with-next
    427          void CallJoinTask(int8u JoinTime, int16u JoinCycle){
   \                     CallJoinTask: (+1)
   \   00000000   0xB5E0             PUSH     {R5-R7,LR}
    428          	// if Jointime = 0xFF: join forever, MinJoinCycle is 500ms, for safe, use 5000ms to join again
    429          
    430          	TaskJoinData JoinData;
    431          
    432          	JoinData.ID = TaJoin;
   \   00000002   0x2207             MOVS     R2,#+7
   \   00000004   0xF8AD 0x2000      STRH     R2,[SP, #+0]
    433          	JoinData.Length  = 	4;
    434          	JoinData.TimeMax =  JoinTime;
   \   00000008   0xF8AD 0x0004      STRH     R0,[SP, #+4]
   \   0000000C   0x2204             MOVS     R2,#+4
    435          	JoinData.TimeCnt =  0;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0xF8AD 0x2002      STRH     R2,[SP, #+2]
   \   00000014   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    436          	JoinData.Cycle = JoinCycle;
   \   00000018   0xF8AD 0x1008      STRH     R1,[SP, #+8]
    437          	JoinData.BeforeTimer =  (int16u)halCommonGetInt32uMillisecondTick();
   \   0000001C   0x.... 0x....      BL       halCommonGetInt32uMillisecondTick
   \   00000020   0xF8AD 0x000A      STRH     R0,[SP, #+10]
    438          //		Clear blink led if out of time out---------------------//
    439          		ClearAllBlinkTask();
   \   00000024   0x.... 0x....      BL       ClearAllBlinkTask
    440          //		alway blink all led to display joining task//
    441          		CallBlinkLedTask(TaBlinkLedAll,10000,0xFF);
   \   00000028   0x22FF             MOVS     R2,#+255
   \   0000002A   0xF242 0x7110      MOVW     R1,#+10000
   \   0000002E   0x2005             MOVS     R0,#+5
   \   00000030   0x.... 0x....      BL       CallBlinkLedTask
    442          //-------------------------------------------------//
    443          
    444          	MEMCOPY(&TaskData[GetLastTask()],&JoinData, sizeof(TaskJoinData));
   \   00000034   0x.... 0x....      BL       GetLastTask
   \   00000038   0x....             LDR.N    R3,??DataTable11
   \   0000003A   0x220C             MOVS     R2,#+12
   \   0000003C   0x....             B.N      ??Subroutine12_1
    445          
    446          }

   \                                 In section .text, align 2, keep-with-next
    447          unsigned char TaskJoin (int16u *Data){
   \                     TaskJoin: (+1)
   \   00000000   0xB53E             PUSH     {R1-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    448              EmberNetworkStatus NetworkStatus;
    449              TaskJoinData JoinData;
    450          
    451          
    452          	NetworkStatus = emberAfNetworkState();
   \   00000004   0x.... 0x....      BL       emberAfNetworkState
   \   00000008   0x4605             MOV      R5,R0
    453          	MEMCOPY(&JoinData,Data, sizeof(TaskJoinData));
   \   0000000A   0x220C             MOVS     R2,#+12
   \   0000000C   0x4621             MOV      R1,R4
   \   0000000E   0xA800             ADD      R0,SP,#+0
   \   00000010   0x.... 0x....      BL       halCommonMemMove
    454          
    455          	if( NetworkStatus == EMBER_NO_NETWORK ){
   \   00000014   0xB9DD             CBNZ.N   R5,??TaskJoin_0
    456          		if((JoinData.TimeMax == 0xFF) || (JoinData.TimeCnt < JoinData.TimeMax )){
   \   00000016   0xF8BD 0x0004      LDRH     R0,[SP, #+4]
   \   0000001A   0x28FF             CMP      R0,#+255
   \   0000001C   0xD003             BEQ.N    ??TaskJoin_1
   \   0000001E   0xF8BD 0x1006      LDRH     R1,[SP, #+6]
   \   00000022   0x4281             CMP      R1,R0
   \   00000024   0xD20D             BCS.N    ??TaskJoin_2
    457          			if((CommonGetDurationTime (JoinData.BeforeTimer)) > JoinData.Cycle){
   \                     ??TaskJoin_1: (+1)
   \   00000026   0x.... 0x....      BL       ?Subroutine11
   \                     ??CrossCallReturnLabel_23: (+1)
   \   0000002A   0xF8BD 0x1008      LDRH     R1,[SP, #+8]
   \   0000002E   0x4281             CMP      R1,R0
   \   00000030   0xD205             BCS.N    ??TaskJoin_3
    458          				emberAfStartSearchForJoinableNetwork();
   \   00000032   0x.... 0x....      BL       emberAfStartSearchForJoinableNetworkCallback
    459          				JoinData.TimeCnt ++;
   \   00000036   0x.... 0x....      BL       ?Subroutine7
    460          				JoinData.BeforeTimer = (int16u)halCommonGetInt32uMillisecondTick();
    461          			}
    462          		}
   \                     ??CrossCallReturnLabel_12: (+1)
   \   0000003A   0xF8AD 0x000A      STRH     R0,[SP, #+10]
    463          		else{
    464          			//Clear blink led if out of time out---------------------//
    465          			ClearAllBlinkTask();
    466          			//if the first join to network, device must be read network infomation
    467          			GetHcActiveEndPoint();
                 			^
Warning[Pe223]: function "GetHcActiveEndPoint" declared implicitly
    468          	   	    return CompleteTask;
    469          	   	}
    470          	}
    471          	else if( NetworkStatus == EMBER_JOINED_NETWORK){
    472          			//Clear blink Led if device join a nwk
    473          			GetHcActiveEndPoint();
                 			^
Warning[Pe223]: function "GetHcActiveEndPoint" declared implicitly
    474          			ClearAllBlinkTask();
    475          			return CompleteTask;
    476          
    477          	}
    478          
    479          
    480              MEMCOPY(Data,&JoinData,(sizeof(TaskJoinData)));
   \                     ??TaskJoin_3: (+1)
   \   0000003E   0x220C             MOVS     R2,#+12
   \   00000040   0x....             B.N      ?Subroutine2
   \                     ??TaskJoin_2: (+1)
   \   00000042   0x.... 0x....      BL       ClearAllBlinkTask
   \   00000046   0x.... 0x....      BL       GetHcActiveEndPoint
   \                     ??TaskJoin_4: (+1)
   \   0000004A   0x2001             MOVS     R0,#+1
   \   0000004C   0xBD3E             POP      {R1-R5,PC}
   \                     ??TaskJoin_0: (+1)
   \   0000004E   0x2D02             CMP      R5,#+2
   \   00000050   0xD1F5             BNE.N    ??TaskJoin_3
   \   00000052   0x.... 0x....      BL       GetHcActiveEndPoint
   \   00000056   0x.... 0x....      BL       ClearAllBlinkTask
   \   0000005A   0xE7F6             B.N      ??TaskJoin_4
    481          	return ContinuteTask;
    482          
    483          }
    484          //-----------------------------************--------------------------//
    485          
    486          
    487          //-----------------------------ResetMCU------------------------------//

   \                                 In section .text, align 2, keep-with-next
    488          void CallResetMCU(int16u ResetTimeCountdown){
   \                     CallResetMCU: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    489          	TaskResetMCUData ResetMCUData;
    490          	ResetMCUData.ID = TaResetMCU;
   \   00000004   0x2109             MOVS     R1,#+9
   \   00000006   0xF8AD 0x1000      STRH     R1,[SP, #+0]
    491          	ResetMCUData.Length = 2;
    492          	ResetMCUData.TimeCountDown = ResetTimeCountdown;
   \   0000000A   0xF8AD 0x0004      STRH     R0,[SP, #+4]
   \   0000000E   0x2102             MOVS     R1,#+2
   \   00000010   0xF8AD 0x1002      STRH     R1,[SP, #+2]
    493          	ResetMCUData.BeforeTimer = (int16u)halCommonGetInt32uMillisecondTick();
   \   00000014   0x.... 0x....      BL       halCommonGetInt32uMillisecondTick
   \   00000018   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    494          
    495          	MEMCOPY(&TaskData[GetLastTask()],&ResetMCUData, sizeof(TaskResetMCUData));
   \   0000001C   0x....             B.N      ?Subroutine1
    496          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \   00000000   0x.... 0x....      BL       GetLastTask
   \   00000004   0x2208             MOVS     R2,#+8
   \   00000006                      REQUIRE ??Subroutine12_0
   \   00000006                      ;; // Fall through to label ??Subroutine12_0

   \                                 In section .text, align 2, keep-with-next
    497          int8u TaskResetMCU(int16u *Data){
   \                     TaskResetMCU: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    498          	TaskResetMCUData ResetMCUData;
    499          
    500          
    501          	MEMCOPY(&ResetMCUData,Data, sizeof(TaskResetMCUData));
   \   00000004   0x4601             MOV      R1,R0
   \   00000006   0x2208             MOVS     R2,#+8
   \   00000008   0xA800             ADD      R0,SP,#+0
   \   0000000A   0x.... 0x....      BL       halCommonMemMove
    502          
    503              if(CommonGetDurationTime(ResetMCUData.BeforeTimer) > ResetMCUData.TimeCountDown){
   \   0000000E   0xF8BD 0x0006      LDRH     R0,[SP, #+6]
   \   00000012   0x.... 0x....      BL       CommonGetDurationTime
   \   00000016   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   0000001A   0x4281             CMP      R1,R0
   \   0000001C   0xD203             BCS.N    ??TaskResetMCU_0
    504          		halReboot();
   \   0000001E   0x.... 0x....      BL       halReboot
    505          		return CompleteTask;
   \   00000022   0x2001             MOVS     R0,#+1
   \   00000024   0xBD0E             POP      {R1-R3,PC}
    506          	}
    507          	else{
    508          		return ContinuteTask;
   \                     ??TaskResetMCU_0: (+1)
   \   00000026   0x2002             MOVS     R0,#+2
   \   00000028   0xBD0E             POP      {R1-R3,PC}       ;; return
    509          	}
    510          }
    511          
    512          
    513          
    514          //-----------------------------************--------------------------//
    515          
    516          
    517          
    518          
    519          //----------------------On-Off Attribute Change----------------------//
    520          
    521          
    522          
    523          
    524          //-----------------------------************--------------------------//

   \                                 In section .text, align 2, keep-with-next
    525          void CallTaskOnOffAttributeChange (int8u endpoint, int8u value){
   \                     CallTaskOnOffAttributeChange: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    526          
    527          
    528          		TaskOnOffAttributeChangeData OnOffAttributeChangeData;
    529          		OnOffAttributeChangeData.ID = TaOnOffAttributeChange;
   \   00000004   0x2208             MOVS     R2,#+8
   \   00000006   0xF8AD 0x2000      STRH     R2,[SP, #+0]
    530          		OnOffAttributeChangeData.Length = 2;
    531          		OnOffAttributeChangeData.Endpoint = endpoint;
   \   0000000A   0xF8AD 0x0004      STRH     R0,[SP, #+4]
   \   0000000E   0x2202             MOVS     R2,#+2
   \   00000010   0xF8AD 0x2002      STRH     R2,[SP, #+2]
    532          		OnOffAttributeChangeData.Value = value;
   \   00000014   0xF8AD 0x1006      STRH     R1,[SP, #+6]
    533          		MEMCOPY(&TaskData[GetLastTask()],&OnOffAttributeChangeData, sizeof(TaskOnOffAttributeChangeData));
   \   00000018                      REQUIRE ?Subroutine1
   \   00000018                      ;; // Fall through to label ?Subroutine1
    534          
    535          }
    536          

   \                                 In section .text, align 2, keep-with-next
    537          int8u TaskOnOffAttributeChange(int16u *Data){
    538          
    539          		return CompleteTask;
   \                     TaskOnOffAttributeChange: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x4770             BX       LR               ;; return
    540          }
    541          
    542          //-----------------------------************--------------------------//
    543          
    544          
    545          //-----------------------------TaskRun-------------------------------//

   \                                 In section .text, align 2, keep-with-next
    546          void TaskRun (void){
   \                     TaskRun: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
    547          
    548              unsigned char TaskID;
    549              unsigned char Head;
    550              unsigned char TaskStatus;
    551          
    552              Head = 0;
   \   00000002   0x2500             MOVS     R5,#+0
    553              TaskID = TaskData[Head];
   \   00000004   0x....             LDR.N    R6,??DataTable11
   \                     ??TaskRun_0: (+1)
   \   00000006   0x8830             LDRH     R0,[R6, #+0]
   \   00000008   0xE005             B.N      ??TaskRun_1
    554              while (TaskID !=0){
    555                  switch (TaskID){
    556                      case TaBlinkLed1:
    557                          TaskStatus = TaskBlinkLed(&TaskData[Head]);
    558                          break;
    559                      case TaBlinkLed2:
    560                          TaskStatus = TaskBlinkLed(&TaskData[Head]);
    561                          break;
    562                      case TaBlinkLed3:
    563                          TaskStatus = TaskBlinkLed(&TaskData[Head]);
    564                          break;
    565          			case TaBlinkLed4:
    566                          TaskStatus = TaskBlinkLed(&TaskData[Head]);
    567                          break;
    568                      case TaBlinkLedAll:
    569                          TaskStatus = TaskBlinkLed(&TaskData[Head]);
    570                          break;
    571                      case TaButtonDetect:
    572                          TaskStatus = TaskButtonDetect(&TaskData[Head]);
    573          				break;
    574          			case TaJoin:
    575          				TaskStatus = TaskJoin(&TaskData[Head]);
    576          				break;
    577          			case TaOnOffAttributeChange:
    578          				TaskStatus = TaskOnOffAttributeChange(&TaskData[Head]);
    579          				break;
    580          			case TaResetMCU:
    581          				TaskStatus = TaskResetMCU(&TaskData[Head]);
    582          				break;
    583                      default:
    584                          break;
    585                  }
    586                  if(TaskStatus != CompleteTask){
    587                      Head = Head + TaskData[Head + 1]+2;
   \                     ??TaskRun_2: (+1)
   \   0000000A   0x8878             LDRH     R0,[R7, #+2]
   \   0000000C   0x1940             ADDS     R0,R0,R5
   \   0000000E   0x1C85             ADDS     R5,R0,#+2
   \   00000010   0xB2ED             UXTB     R5,R5
    588                      TaskID = TaskData[Head];
   \   00000012   0xF836 0x0015      LDRH     R0,[R6, R5, LSL #+1]
    589                  }
   \                     ??TaskRun_1: (+1)
   \   00000016   0xB2C0             UXTB     R0,R0
   \   00000018   0xB338             CBZ.N    R0,??TaskRun_3
   \   0000001A   0x1E40             SUBS     R0,R0,#+1
   \   0000001C   0xEB06 0x0745      ADD      R7,R6,R5, LSL #+1
   \   00000020   0x2804             CMP      R0,#+4
   \   00000022   0xD908             BLS.N    ??TaskRun_4
   \   00000024   0x1F40             SUBS     R0,R0,#+5
   \   00000026   0xD00A             BEQ.N    ??TaskRun_5
   \   00000028   0x1E40             SUBS     R0,R0,#+1
   \   0000002A   0xD00C             BEQ.N    ??TaskRun_6
   \   0000002C   0x1E40             SUBS     R0,R0,#+1
   \   0000002E   0xD00E             BEQ.N    ??TaskRun_7
   \   00000030   0x1E40             SUBS     R0,R0,#+1
   \   00000032   0xD00E             BEQ.N    ??TaskRun_8
   \   00000034   0xE011             B.N      ??TaskRun_9
   \                     ??TaskRun_4: (+1)
   \   00000036   0x4638             MOV      R0,R7
   \   00000038   0x.... 0x....      BL       TaskBlinkLed
   \   0000003C   0xE00C             B.N      ??TaskRun_10
   \                     ??TaskRun_5: (+1)
   \   0000003E   0x4638             MOV      R0,R7
   \   00000040   0x.... 0x....      BL       TaskButtonDetect
   \   00000044   0xE008             B.N      ??TaskRun_10
   \                     ??TaskRun_6: (+1)
   \   00000046   0x4638             MOV      R0,R7
   \   00000048   0x.... 0x....      BL       TaskJoin
   \   0000004C   0xE004             B.N      ??TaskRun_10
   \                     ??TaskRun_7: (+1)
   \   0000004E   0x2401             MOVS     R4,#+1
   \   00000050   0xE006             B.N      ??TaskRun_11
   \                     ??TaskRun_8: (+1)
   \   00000052   0x4638             MOV      R0,R7
   \   00000054   0x.... 0x....      BL       TaskResetMCU
   \                     ??TaskRun_10: (+1)
   \   00000058   0x4604             MOV      R4,R0
   \                     ??TaskRun_9: (+1)
   \   0000005A   0xB2E4             UXTB     R4,R4
   \   0000005C   0x2C01             CMP      R4,#+1
   \   0000005E   0xD1D4             BNE.N    ??TaskRun_2
    590                  else{
    591                      TaskDelete(Head);
   \                     ??TaskRun_11: (+1)
   \   00000060   0x4628             MOV      R0,R5
   \   00000062   0x.... 0x....      BL       TaskDelete
    592                      Head = 0;
   \   00000066   0x2500             MOVS     R5,#+0
    593                      TaskID = TaskData[0];
   \   00000068   0xE7CD             B.N      ??TaskRun_0
    594                  }
    595              }
    596          }
   \                     ??TaskRun_3: (+1)
   \   0000006A   0xBDF1             POP      {R0,R4-R7,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   0x62 0x00          DC8      "b",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   0x........         DC32     TaskData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_1:
   \   00000000   0x........         DC32     HcDefaultEP

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_2:
   \   00000000   0x4000B408         DC32     0x4000b408

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "b">`:
   \   00000000   0x62 0x00          DC8 "b"
    597          
    598          
    599          //-----------------------------************----------------------------//
    600          
    601          
    602          //-----------------------------***END-FILE***--------------------------//
    603          
    604          
    605          
    606          
    607          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   CallBlinkLedTask
        32   -> FindTaskID
        32   -> GetLastTask
        32   -> halCommonGetInt32uMillisecondTick
        32   -> halCommonMemMove
      16   CallButtonDetectTask
        16   -> GetLastTask
        16   -> halCommonGetInt32uMillisecondTick
        16   -> halCommonMemMove
      16   CallJoinTask
        16   -> CallBlinkLedTask
        16   -> ClearAllBlinkTask
        16   -> GetLastTask
        16   -> halCommonGetInt32uMillisecondTick
        16   -> halCommonMemMove
      24   CallMcTimmerCalibrateTask
        24   -> FindTaskID
        24   -> GetLastTask
        24   -> halCommonGetInt32uMillisecondTick
        24   -> halCommonMemMove
      16   CallResetMCU
        16   -> GetLastTask
        16   -> halCommonGetInt32uMillisecondTick
        16   -> halCommonMemMove
      16   CallTaskOnOffAttributeChange
        16   -> GetLastTask
        16   -> halCommonMemMove
      32   CallUartSendDimLevel
        32   -> GetLastTask
        32   -> emberAfReadServerAttribute
        32   -> halCommonGetInt32uMillisecondTick
        32   -> halCommonMemMove
       8   ClearAllBlinkTask
         0   -> ClearTask
         8   -> ClearTask
       8   ClearTask
         8   -> FindTaskID
         8   -> TaskDelete
       0   FindTaskID
       0   GetLastTask
      24   SendLevelControlReadAttribute
        24   -> emberAfFillExternalBuffer
        24   -> emberAfSendCommandUnicast
        24   -> emberAfSetCommandEndpoints
      24   SendOnOffControlReadAttribute
        24   -> emberAfFillExternalBuffer
        24   -> emberAfSendCommandUnicast
        24   -> emberAfSetCommandEndpoints
       0   SendViaBindingTable
      24   TaskBlinkLed
        24   -> CommonGetDurationTime
        24   -> UartSendToggleLed
        24   -> halCommonGetInt32uMillisecondTick
        24   -> halCommonMemMove
      24   TaskButtonDetect
        24   -> CommonGetDurationTime
        24   -> beButtonPress
        24   -> beButtonPress2Time
        24   -> beButtonPress3Time
        24   -> halCommonGetInt32uMillisecondTick
        24   -> halCommonMemMove
      16   TaskDelete
         0   -> halCommonMemMove
      24   TaskJoin
        24   -> ClearAllBlinkTask
        24   -> CommonGetDurationTime
        24   -> GetHcActiveEndPoint
        24   -> emberAfNetworkState
        24   -> emberAfStartSearchForJoinableNetworkCallback
        24   -> halCommonGetInt32uMillisecondTick
        24   -> halCommonMemMove
      24   TaskMcTimmerCalibrate
        24   -> CommonGetDurationTime
        24   -> UartSendMcTimerCalibrate
        24   -> halCommonGetInt32uMillisecondTick
        24   -> halCommonMemMove
       0   TaskOnOffAttributeChange
      16   TaskResetMCU
        16   -> CommonGetDurationTime
        16   -> halCommonMemMove
        16   -> halReboot
      24   TaskRun
        24   -> TaskBlinkLed
        24   -> TaskButtonDetect
        24   -> TaskDelete
        24   -> TaskJoin
        24   -> TaskResetMCU
      16   TaskUartSendDimLevel
        16   -> halCommonMemMove


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Constant "b">
       4  ??DataTable11
       4  ??DataTable11_1
       4  ??DataTable11_2
       4  ??DataTable9
      14  ??Subroutine12_0
      28  ?Subroutine0
       6  ?Subroutine1
      10  ?Subroutine10
       8  ?Subroutine11
       8  ?Subroutine2
      12  ?Subroutine3
      18  ?Subroutine4
      18  ?Subroutine5
       6  ?Subroutine6
      14  ?Subroutine7
      16  ?Subroutine8
       8  ?Subroutine9
      52  CallBlinkLedTask
      46  CallButtonDetectTask
      62  CallJoinTask
      56  CallMcTimmerCalibrateTask
      30  CallResetMCU
      24  CallTaskOnOffAttributeChange
     104  CallUartSendDimLevel
      34  ClearAllBlinkTask
      22  ClearTask
      40  FindTaskID
      30  GetLastTask
      16  SendLevelControlReadAttribute
      14  SendOnOffControlReadAttribute
       4  SendViaBindingTable
      96  TaskBlinkLed
     174  TaskButtonDetect
     128  TaskData
      44  TaskDelete
      92  TaskJoin
      66  TaskMcTimmerCalibrate
       4  TaskOnOffAttributeChange
      42  TaskResetMCU
     108  TaskRun
      16  TaskUartSendDimLevel

 
   128 bytes in section .bss
     2 bytes in section .rodata
 1 358 bytes in section .text
 
 1 358 bytes of CODE  memory
     2 bytes of CONST memory
   128 bytes of DATA  memory

Errors: none
Warnings: 2
