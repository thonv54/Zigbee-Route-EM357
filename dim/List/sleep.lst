###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        22/Oct/2015  09:34:08
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  E:\Zigbee\EmberZNet5.6.0-GA\hal\micro\cortexm3\sleep.c
#    Command line =  
#        E:\Zigbee\EmberZNet5.6.0-GA\hal\micro\cortexm3\sleep.c -D DIMMER -D
#        NULL_BTL -D CORTEXM3 -D CORTEXM3_EMBER_MICRO -D CORTEXM3_EM357 -D
#        PHY_EM3XX -D
#        "APPLICATION_TOKEN_HEADER=\"app/framework/util/tokens.h\"" -D
#        "ATTRIBUTE_STORAGE_CONFIGURATION=\"app/builder/ZigbeeRoute/ZigbeeRoute_endpoint_config.h\""
#        -D "BOARD_HEADER=\"app\builder\ZigbeeRoute\ZigbeeRoute_board.h\"" -D
#        "CONFIGURATION_HEADER=\"app/framework/util/config.h\"" -D
#        "GENERATED_TOKEN_HEADER=\"app/builder/ZigbeeRoute/ZigbeeRoute_tokens.h\""
#        -D "PLATFORM_HEADER=\"hal/micro/cortexm3/compiler/iar.h\"" -D
#        "ZA_GENERATED_HEADER=\"app/builder/ZigbeeRoute/ZigbeeRoute.h\"" -D
#        "__SOURCEFILE__=\"sleep.c\"" -lC
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\dim\List\
#        --diag_suppress Pa050 -o
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\dim\Obj\ --debug
#        --endian=little --cpu=Cortex-M3 --no_path_in_file_macros
#        --separate_cluster_for_initialized_variables -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\Zigbee\EmberZNet5.6.0-GA\hal\micro\cortexm3\ -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\ -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\ -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\app\framework\include\
#        -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\app\util\
#        -I E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\stack\
#        -I E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\hal\
#        -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\hal\..\
#        -Ohz --use_c++_inline
#    List file    =  
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\dim\List\sleep.lst
#    Object file  =  
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\dim\Obj\sleep.o
#
###############################################################################

E:\Zigbee\EmberZNet5.6.0-GA\hal\micro\cortexm3\sleep.c
      1          /** @file hal/micro/cortexm3/sleep.c
      2           *
      3           * @brief EM3XX micro specific sleep functions.
      4           *
      5           * <!-- Copyright 2013 Silicon Laboratories, Inc.                       *80* -->
      6           */
      7          
      8          #include PLATFORM_HEADER
      9          #include "hal/micro/micro-common.h"
     10          #include "hal/micro/micro.h"
     11          #include "hal/micro/cortexm3/micro-common.h"
     12          #include "hal/micro/cortexm3/memmap.h"
     13          #include "hal/micro/cortexm3/mfg-token.h"
     14          #ifdef MINIMAL_HAL
     15            #define BYPASS_MPU(blah) blah
     16            #define EMBER_WAKE_PORT_A 0
     17            #define EMBER_WAKE_PORT_B 0
     18            #define EMBER_WAKE_PORT_C 0
     19          #else
     20            #include BOARD_HEADER
     21            #include "hal/micro/cortexm3/mpu.h"
     22            #include "hal/micro/cortexm3/wake-gpio.h"
     23          #endif //defined(MINIMAL_HAL)
     24          #include "hal/micro/cortexm3/diagnostic.h"
     25          
     26          static WakeEvents halInternalWakeEvent={.eventflags = 0};
     27          

   \                                 In section .text, align 2, keep-with-next
     28          WakeEvents halGetWakeInfo(void)
     29          {
     30            return halInternalWakeEvent;
   \                     halGetWakeInfo: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable4
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x4770             BX       LR               ;; return
     31          }

   \                                 In section .bss, align 4
   \                     halInternalWakeEvent:
   \   00000000                      DS8 4
     32          
     33          #ifndef CORTEXM3_EM35X_GEN4 // HW bug fixed in GEN4
     34          //forceSleepTmrCnt is a flag indicating that the system timer module
     35          //should force a fake value for SLEEPTMR_CNT whenever the timer is
     36          //accessed.  For FogBugz 11909/11920 workaround.
     37          boolean forceSleepTmrCnt = FALSE;
   \                     forceSleepTmrCnt:
   \   00000004                      DS8 1
   \   00000005                      DS8 3
     38          //wakeupSleepTmrCnt is a capturing of the SLEEPTMR_CNT immediately upon
     39          //waking up from deep sleep.  This value is used to know when the counter
     40          //has ticked forward.  For FogBugz 11909/11920 workaround.
     41          int32u wakeupSleepTmrCnt = 0;
   \                     wakeupSleepTmrCnt:
   \   00000008                      DS8 4
     42          #endif//CORTEXM3_EM35X_GEN4 // HW bug fixed in GEN4
     43          

   \                                 In section .text, align 2, keep-with-next
     44          void halInternalSleep(SleepModes sleepMode)
     45          {
   \                     halInternalSleep: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
     46            //Timer restoring always takes place during the wakeup sequence.  We save
     47            //the state here in case SLEEPMODE_NOTIMER is invoked, which would disable
     48            //the clocks.
     49            int32u SLEEPTMR_CLKEN_SAVED = SLEEPTMR_CLKEN;
   \   00000004   0x.... 0x....      LDR.W    R4,??DataTable4_1  ;; 0x40000004
   \   00000008   0xB099             SUB      SP,SP,#+100
   \   0000000A   0x4680             MOV      R8,R0
   \   0000000C   0x6860             LDR      R0,[R4, #+4]
   \   0000000E   0x9018             STR      R0,[SP, #+96]
     50          
     51            //SLEEPMODE_POWERDOWN and SLEEPMODE_POWERSAVE are deprecated.  Remap them
     52            //to their appropriate, new mode name.
     53            if(sleepMode == SLEEPMODE_POWERDOWN) {
   \   00000010   0xF1B8 0x0F07      CMP      R8,#+7
   \   00000014   0xBF08             IT       EQ 
     54              sleepMode = SLEEPMODE_MAINTAINTIMER;
   \   00000016   0xF04F 0x0803      MOVEQ    R8,#+3
   \   0000001A   0xD004             BEQ.N    ??halInternalSleep_0
     55            } else if(sleepMode == SLEEPMODE_POWERSAVE) {
   \   0000001C   0xF1B8 0x0F08      CMP      R8,#+8
   \   00000020   0xBF08             IT       EQ 
     56              sleepMode = SLEEPMODE_WAKETIMER;
   \   00000022   0xF04F 0x0802      MOVEQ    R8,#+2
     57            }
     58          
     59            //This code assumes all wake source registers are properly configured.
     60            //As such, it should be called from halSleep() which configues the
     61            //wake sources.
     62          
     63            //The parameter gpioWakeSel is a bitfield composite of the GPIO wake
     64            //sources derived from the 3-6 ports, indicating which of the 24-48 GPIO
     65            //are configured as a wake source.
     66            WakeMask gpioWakeSel  = (GPIO_PAWAKE<<0);
   \                     ??halInternalSleep_0: (+1)
   \   00000026   0x.... 0x....      LDR.W    R5,??DataTable4_2  ;; 0x4000bc08
   \   0000002A   0x6828             LDR      R0,[R5, #+0]
     67                     gpioWakeSel |= (GPIO_PBWAKE<<8);
   \   0000002C   0x6869             LDR      R1,[R5, #+4]
     68                     gpioWakeSel |= (GPIO_PCWAKE<<16);
   \   0000002E   0xEA40 0x2001      ORR      R0,R0,R1, LSL #+8
   \   00000032   0x68A9             LDR      R1,[R5, #+8]
   \   00000034   0xEA40 0x4001      ORR      R0,R0,R1, LSL #+16
   \   00000038   0x9000             STR      R0,[SP, #+0]
     69          #ifdef EMBER_WAKE_PORT_D
     70                     gpioWakeSel |= (GPIO_PDWAKE<<24);
     71          #endif
     72          #ifdef EMBER_WAKE_PORT_E
     73                     gpioWakeSel |= ((int64u)GPIO_PEWAKE<<32);
     74          #endif
     75          #ifdef EMBER_WAKE_PORT_F
     76                     gpioWakeSel |= ((int64u)GPIO_PFWAKE<<40);
     77          #endif
     78          
     79            //PB2 is also WAKE_SC1.  Set this wake source if PB2's GPIO wake is set.
     80            if(GPIO_PBWAKE & PB2) {
   \   0000003A   0x6868             LDR      R0,[R5, #+4]
   \   0000003C   0x0740             LSLS     R0,R0,#+29
   \   0000003E   0xD503             BPL.N    ??halInternalSleep_1
     81              WAKE_SEL |= WAKE_SC1;
   \   00000040   0x69E0             LDR      R0,[R4, #+28]
   \   00000042   0xF040 0x0002      ORR      R0,R0,#0x2
   \   00000046   0x61E0             STR      R0,[R4, #+28]
     82            }
     83          
     84            //PA2 is also WAKE_SC2.  Set this wake source if PA2's GPIO wake is set.
     85            if(GPIO_PAWAKE & PA2) {
   \                     ??halInternalSleep_1: (+1)
   \   00000048   0x6828             LDR      R0,[R5, #+0]
   \   0000004A   0x0740             LSLS     R0,R0,#+29
   \   0000004C   0xD503             BPL.N    ??halInternalSleep_2
     86              WAKE_SEL |= WAKE_SC2;
   \   0000004E   0x69E0             LDR      R0,[R4, #+28]
   \   00000050   0xF040 0x0004      ORR      R0,R0,#0x4
   \   00000054   0x61E0             STR      R0,[R4, #+28]
     87            }
     88          
     89            //The WAKE_IRQD source can come from any pin based on IRQD's sel register.
     90            if(gpioWakeSel & BIT(GPIO_IRQDSEL)) {
   \                     ??halInternalSleep_2: (+1)
   \   00000056   0x9800             LDR      R0,[SP, #+0]
   \   00000058   0x6929             LDR      R1,[R5, #+16]
   \   0000005A   0x40C8             LSRS     R0,R0,R1
   \   0000005C   0x07C0             LSLS     R0,R0,#+31
   \   0000005E   0xD503             BPL.N    ??halInternalSleep_3
     91              WAKE_SEL |= WAKE_IRQD;
   \   00000060   0x69E0             LDR      R0,[R4, #+28]
   \   00000062   0xF040 0x0008      ORR      R0,R0,#0x8
   \   00000066   0x61E0             STR      R0,[R4, #+28]
     92            }
     93          
     94            halInternalWakeEvent.eventflags = 0; //clear old wake events
   \                     ??halInternalSleep_3: (+1)
   \   00000068   0x2000             MOVS     R0,#+0
   \   0000006A   0x.... 0x....      LDR.W    R6,??DataTable4
     95          
     96            switch(sleepMode)
   \   0000006E   0x.... 0x....      LDR.W    R9,??DataTable4_3  ;; 0x4000a014
   \   00000072   0x6030             STR      R0,[R6, #+0]
   \   00000074   0xF1B8 0x0F01      CMP      R8,#+1
   \   00000078   0xF000 0x8268      BEQ.W    ??halInternalSleep_4
   \   0000007C   0xF0C0 0x828E      BCC.W    ??halInternalSleep_5
   \   00000080   0xF1B8 0x0F03      CMP      R8,#+3
   \   00000084   0xD01E             BEQ.N    ??halInternalSleep_6
   \   00000086   0xD305             BCC.N    ??halInternalSleep_7
   \   00000088   0xF1B8 0x0F04      CMP      R8,#+4
   \   0000008C   0xF040 0x8286      BNE.W    ??halInternalSleep_5
     97            {
     98              case SLEEPMODE_NOTIMER:
     99                //The sleep timer clock sources (both RC and XTAL) are turned off.
    100                //Wakeup is possible from only GPIO.  System time is lost.
    101                //NOTE: Timer restoring always takes place during the wakeup sequence.
    102                SLEEPTMR_CLKEN = 0;
   \   00000090   0x6060             STR      R0,[R4, #+4]
    103                goto deepSleepCore;
   \   00000092   0xE017             B.N      ??halInternalSleep_6
    104          
    105              case SLEEPMODE_WAKETIMER:
    106                //The sleep timer clock sources remain running.  The RC is always
    107                //running and the 32kHz XTAL depends on the board header.  Wakeup
    108                //is possible from both GPIO and the sleep timer.  System time
    109                //is maintained.  The sleep timer is assumed to be configured
    110                //properly for wake events.
    111                //NOTE: This mode assumes the caller has configured the *entire*
    112                //      sleep timer properly.
    113          
    114                if(INT_SLEEPTMRCFG&INT_SLEEPTMRWRAP) {
   \                     ??halInternalSleep_7: (+1)
   \   00000094   0xF8D9 0x0040      LDR      R0,[R9, #+64]
   \   00000098   0x07C0             LSLS     R0,R0,#+31
   \   0000009A   0xD503             BPL.N    ??halInternalSleep_8
    115                  WAKE_SEL |= WAKE_SLEEPTMRWRAP;
   \   0000009C   0x69E0             LDR      R0,[R4, #+28]
   \   0000009E   0xF040 0x0040      ORR      R0,R0,#0x40
   \   000000A2   0x61E0             STR      R0,[R4, #+28]
    116                }
    117                if(INT_SLEEPTMRCFG&INT_SLEEPTMRCMPB) {
   \                     ??halInternalSleep_8: (+1)
   \   000000A4   0xF8D9 0x0040      LDR      R0,[R9, #+64]
   \   000000A8   0x0740             LSLS     R0,R0,#+29
   \   000000AA   0xD503             BPL.N    ??halInternalSleep_9
    118                  WAKE_SEL |= WAKE_SLEEPTMRCMPB;
   \   000000AC   0x69E0             LDR      R0,[R4, #+28]
   \   000000AE   0xF040 0x0020      ORR      R0,R0,#0x20
   \   000000B2   0x61E0             STR      R0,[R4, #+28]
    119                }
    120                if(INT_SLEEPTMRCFG&INT_SLEEPTMRCMPA) {
   \                     ??halInternalSleep_9: (+1)
   \   000000B4   0xF8D9 0x0040      LDR      R0,[R9, #+64]
   \   000000B8   0x0780             LSLS     R0,R0,#+30
   \   000000BA   0xD503             BPL.N    ??halInternalSleep_6
    121                  WAKE_SEL |= WAKE_SLEEPTMRCMPA;
   \   000000BC   0x69E0             LDR      R0,[R4, #+28]
   \   000000BE   0xF040 0x0010      ORR      R0,R0,#0x10
   \   000000C2   0x61E0             STR      R0,[R4, #+28]
    122                }
    123                //fall into SLEEPMODE_MAINTAINTIMER's sleep code:
    124          
    125              case SLEEPMODE_MAINTAINTIMER:
    126                //The sleep timer clock sources remain running.  The RC is always
    127                //running and the 32kHz XTAL depends on the board header.  Wakeup
    128                //is possible from only GPIO.  System time is maintained.
    129                //NOTE: System time is maintained without any sleep timer interrupts
    130                //      because the hardware sleep timer counter is large enough
    131                //      to hold the entire count value and not need a RAM counter.
    132          
    133              ////////////////////////////////////////////////////////////////////////////
    134              // Core deep sleep code
    135              ////////////////////////////////////////////////////////////////////////////
    136          deepSleepCore:
    137                // Interrupts *must* be/stay disabled for DEEP SLEEP operation
    138                // INTERRUPTS_OFF will use BASEPRI to disable all interrupts except
    139                // fault handlers.
    140                INTERRUPTS_OFF();
   \                     ??halInternalSleep_6: (+1)
   \   000000C4   0x.... 0x....      BL       _disableBasePri
    141                // This is the point of no return.  From here on out, only the interrupt
    142                // sources available in WAKE_SEL will be captured and propagated across
    143                // deep sleep.
    144                //stick all our saved info onto stack since it's only temporary
    145                {
    146                  boolean restoreWatchdog = halInternalWatchDogEnabled();
   \   000000C8   0x.... 0x....      BL       halInternalWatchDogEnabled
   \   000000CC   0xF88D 0x005C      STRB     R0,[SP, #+92]
    147                  boolean skipSleep = FALSE;
   \   000000D0   0xF04F 0x0B00      MOV      R11,#+0
    148          
    149                  #if defined(CORTEXM3_EM35X_GEN4)
    150                    // On the 358x we must configure the RAM_RETAIN register to set which
    151                    // blocks of RAM are maintained across deepsleep. This register is
    152                    // reset during deepsleep so we must do this every time.
    153                    int32u ramRetainValue = (1<<((RAM_SIZE_B - UNRETAINED_RAM_SIZE)/
    154                                                 RAM_RETAIN_BLOCK_SIZE)) - 1;
    155                    RAM_RETAIN = ramRetainValue;
    156          
    157                    // If we're retaining less than half the RAM then try to save power
    158                    if((ramRetainValue>>(RETAIN_BITS/2)) == 0) {
    159                      // This only works on the newest dies so check for that here
    160                      int8u *ptr = (int8u*)(DATA_BIG_INFO_BASE | MFG_PART_DATA_LOCATION);
    161                      if(ptr[2] >= 0x01) {
    162                        RAM_TEST |= RAM_TEST_RAM_REGB; // Disable the unused RAM regulator
    163                      }
    164                    }
    165                  #endif
    166          
    167                  // Only three register blocks keep power across deep sleep:
    168                  //  CM_HV, GPIO, SLOW_TIMERS
    169                  //
    170                  // All other register blocks lose their state across deep sleep:
    171                  //  BASEBAND, MAC, SECURITY, SERIAL, TMR1, TMR2, EVENT, CM_LV, RAM_CTRL,
    172                  //  AUX_ADC, CAL_ADC, FLASH_CONTROL, ITM, DWT, FPB, NVIC, TPIU
    173                  //
    174                  // The sleep code will only save and restore registers where it is
    175                  // meaningful and necessary to do so.  In most cases, there must still
    176                  // be a powerup function to restore proper state.
    177                  //
    178                  // NOTE: halPowerUp() and halPowerDown() will always be called before
    179                  // and after this function.  halPowerDown and halPowerUp should leave
    180                  // the modules in a safe state and then restart the modules.
    181                  // (For example, shutting down and restarting Timer1)
    182                  //
    183                  //----BASEBAND
    184                  //        reinitialized by emberStackPowerUp()
    185                  //----MAC
    186                  //        reinitialized by emberStackPowerUp()
    187                  //----SECURITY
    188                  //        reinitialized by emberStackPowerUp()
    189                  //----SERIAL
    190                  //        reinitialized by halPowerUp() or similar
    191                  //----TMR1
    192                  //        reinitialized by halPowerUp() or similar
    193                  //----TMR2
    194                  //        reinitialized by halPowerUp() or similar
    195                  //----EVENT
    196                  //SRC or FLAG interrupts are not saved or restored
    197                  //MISS interrupts are not saved or restored
    198                  //MAC_RX_INT_MASK - reinitialized by emberStackPowerUp()
    199                  //MAC_TX_INT_MASK - reinitialized by emberStackPowerUp()
    200                  //MAC_TIMER_INT_MASK - reinitialized by emberStackPowerUp()
    201                  //BB_INT_MASK - reinitialized by emberStackPowerUp()
    202                  //SEC_INT_MASK - reinitialized by emberStackPowerUp()
    203                  int32u INT_SLEEPTMRCFG_SAVED = INT_SLEEPTMRCFG_REG;
   \   000000D4   0xF8D9 0x0040      LDR      R0,[R9, #+64]
   \   000000D8   0x.... 0x....      LDR.W    R10,??DataTable4_4  ;; 0x4000a814
   \   000000DC   0x.... 0x....      LDR.W    R7,??DataTable4_5  ;; 0x40005000
   \   000000E0   0x.... 0x....      LDR.W    R1,??DataTable4_6  ;; 0xe000ed08
   \   000000E4   0x9016             STR      R0,[SP, #+88]
    204                  int32u INT_MGMTCFG_SAVED = INT_MGMTCFG_REG;
   \   000000E6   0xF8D9 0x0044      LDR      R0,[R9, #+68]
   \   000000EA   0x9015             STR      R0,[SP, #+84]
    205                  //INT_TIM1CFG - reinitialized by halPowerUp() or similar
    206                  //INT_TIM2CFG - reinitialized by halPowerUp() or similar
    207                  //INT_SC1CFG - reinitialized by halPowerUp() or similar
    208                  //INT_SC2CFG - reinitialized by halPowerUp() or similar
    209                  //INT_ADCCFG - reinitialized by halPowerUp() or similar
    210                  int32u GPIO_INTCFGA_SAVED = GPIO_INTCFGA_REG;
   \   000000EC   0xF8DA 0x004C      LDR      R0,[R10, #+76]
   \   000000F0   0x9014             STR      R0,[SP, #+80]
    211                  int32u GPIO_INTCFGB_SAVED = GPIO_INTCFGB_REG;
   \   000000F2   0xF8DA 0x0050      LDR      R0,[R10, #+80]
   \   000000F6   0x9013             STR      R0,[SP, #+76]
    212                  int32u GPIO_INTCFGC_SAVED = GPIO_INTCFGC_REG;
   \   000000F8   0xF8DA 0x0054      LDR      R0,[R10, #+84]
   \   000000FC   0x9012             STR      R0,[SP, #+72]
    213                  int32u GPIO_INTCFGD_SAVED = GPIO_INTCFGD_REG;
   \   000000FE   0xF8DA 0x0058      LDR      R0,[R10, #+88]
   \   00000102   0x9011             STR      R0,[SP, #+68]
   \   00000104   0x.... 0x....      LDR.W    R0,??DataTable4_7  ;; 0x40004004
   \   00000108   0x6800             LDR      R0,[R0, #+0]
   \   0000010A   0x9010             STR      R0,[SP, #+64]
    214                  //SC1_INTMODE - reinitialized by halPowerUp() or similar
    215                  //SC2_INTMODE - reinitialized by halPowerUp() or similar
    216                  //----CM_LV
    217                  int32u OSC24M_BIASTRIM_SAVED = OSC24M_BIASTRIM_REG;
    218                  int32u OSCHF_TUNE_SAVED = OSCHF_TUNE_REG;
   \   0000010C   0x.... 0x....      LDR.W    R0,??DataTable4_7  ;; 0x40004004
   \   00000110   0x6840             LDR      R0,[R0, #+4]
   \   00000112   0x900F             STR      R0,[SP, #+60]
    219                  int32u DITHER_DIS_SAVED = DITHER_DIS_REG;
   \   00000114   0x.... 0x....      LDR.W    R0,??DataTable4_7  ;; 0x40004004
   \   00000118   0x6940             LDR      R0,[R0, #+20]
   \   0000011A   0x900E             STR      R0,[SP, #+56]
    220                  //OSC24M_CTRL - reinitialized by halPowerUp() or similar
    221                  //CPU_CLKSEL  - reinitialized by halPowerUp() or similar
    222                  //TMR1_CLK_SEL - reinitialized by halPowerUp() or similar
    223                  //TMR2_CLK_SEL - reinitialized by halPowerUp() or similar
    224                  int32u PCTRACE_SEL_SAVED = PCTRACE_SEL_REG;
   \   0000011C   0x.... 0x....      LDR.W    R0,??DataTable4_7  ;; 0x40004004
   \   00000120   0x6A40             LDR      R0,[R0, #+36]
   \   00000122   0x900D             STR      R0,[SP, #+52]
    225                  //----RAM_CTRL
    226                  #if !defined(CORTEXM3_EM35X_GEN4)
    227                    int32u MEM_PROT_0_SAVED = MEM_PROT_0_REG;
   \   00000124   0x6838             LDR      R0,[R7, #+0]
   \   00000126   0x900C             STR      R0,[SP, #+48]
    228                    int32u MEM_PROT_1_SAVED = MEM_PROT_1_REG;
   \   00000128   0x6878             LDR      R0,[R7, #+4]
   \   0000012A   0x900B             STR      R0,[SP, #+44]
    229                    int32u MEM_PROT_2_SAVED = MEM_PROT_2_REG;
   \   0000012C   0x68B8             LDR      R0,[R7, #+8]
   \   0000012E   0x900A             STR      R0,[SP, #+40]
    230                    int32u MEM_PROT_3_SAVED = MEM_PROT_3_REG;
   \   00000130   0x68F8             LDR      R0,[R7, #+12]
   \   00000132   0x9009             STR      R0,[SP, #+36]
    231                    int32u MEM_PROT_4_SAVED = MEM_PROT_4_REG;
   \   00000134   0x6938             LDR      R0,[R7, #+16]
   \   00000136   0x9008             STR      R0,[SP, #+32]
    232                    int32u MEM_PROT_5_SAVED = MEM_PROT_5_REG;
   \   00000138   0x6978             LDR      R0,[R7, #+20]
   \   0000013A   0x9007             STR      R0,[SP, #+28]
    233                    int32u MEM_PROT_6_SAVED = MEM_PROT_6_REG;
   \   0000013C   0x69B8             LDR      R0,[R7, #+24]
   \   0000013E   0x9006             STR      R0,[SP, #+24]
    234                    int32u MEM_PROT_7_SAVED = MEM_PROT_7_REG;
   \   00000140   0x69F8             LDR      R0,[R7, #+28]
   \   00000142   0x9005             STR      R0,[SP, #+20]
    235                    int32u MEM_PROT_EN_SAVED = MEM_PROT_EN_REG;
   \   00000144   0x6BB8             LDR      R0,[R7, #+56]
   \   00000146   0x9004             STR      R0,[SP, #+16]
   \   00000148   0x.... 0x....      LDR.W    R0,??DataTable4_8  ;; 0xe000e100
   \   0000014C   0x6800             LDR      R0,[R0, #+0]
   \   0000014E   0x6809             LDR      R1,[R1, #+0]
   \   00000150   0x9103             STR      R1,[SP, #+12]
    236                  #endif //!defined(CORTEXM3_EM35X_GEN4)
    237                  //----AUX_ADC
    238                  //        reinitialized by halPowerUp() or similar
    239                  //----CAL_ADC
    240                  //        reinitialized by emberStackPowerUp()
    241                  //----FLASH_CONTROL
    242                  //        configured on the fly by the flash library
    243                  //----ITM
    244                  //        reinitialized by halPowerUp() or similar
    245                  //----DWT
    246                  //        not used by software on chip
    247                  //----FPB
    248                  //        not used by software on chip
    249                  //----NVIC
    250                  //ST_CSR - fixed, restored by cstartup when exiting deep sleep
    251                  //ST_RVR - fixed, restored by cstartup when exiting deep sleep
    252                  int32u INT_CFGSET_SAVED = INT_CFGSET_REG; //mask against wake sources
    253                  //INT_PENDSET - used below when overlapping interrupts and wake sources
    254                  //NVIC_IPR_3to0 - fixed, restored by cstartup when exiting deep sleep
    255                  //NVIC_IPR_7to4 - fixed, restored by cstartup when exiting deep sleep
    256                  //NVIC_IPR_11to8 - fixed, restored by cstartup when exiting deep sleep
    257                  //NVIC_IPR_15to12 - fixed, restored by cstartup when exiting deep sleep
    258                  //NVIC_IPR_19to16 - fixed, restored by cstartup when exiting deep sleep
    259                  int32u SCS_VTOR_SAVED = SCS_VTOR_REG;
    260                  //SCS_CCR - fixed, restored by cstartup when exiting deep sleep
    261                  //SCS_SHPR_7to4 - fixed, restored by cstartup when exiting deep sleep
    262                  //SCS_SHPR_11to8 - fixed, restored by cstartup when exiting deep sleep
    263                  //SCS_SHPR_15to12 - fixed, restored by cstartup when exiting deep sleep
    264                  //SCS_SHCSR - fixed, restored by cstartup when exiting deep sleep
    265                  //----TPIU
    266                  //        reinitialized by halPowerUp() or similar
    267          
    268                  //emDebugPowerDown() should have shutdown the DWT/ITM/TPIU already.
    269          
    270                  //freeze input to the GPIO from LV (alternate output functions freeze)
    271                  EVENT_CTRL = LV_FREEZE;
   \   00000152   0x2102             MOVS     R1,#+2
   \   00000154   0x6021             STR      R1,[R4, #+0]
   \   00000156   0x.... 0x....      LDR.W    R1,??DataTable4_9  ;; 0x4000b008
   \   0000015A   0x6809             LDR      R1,[R1, #+0]
   \   0000015C   0xF88D 0x1004      STRB     R1,[SP, #+4]
   \   00000160   0x.... 0x....      LDR.W    R1,??DataTable4_10  ;; 0x4000b408
   \   00000164   0x6809             LDR      R1,[R1, #+0]
   \   00000166   0xF88D 0x1005      STRB     R1,[SP, #+5]
   \   0000016A   0x.... 0x....      LDR.W    R1,??DataTable4_11  ;; 0x4000b808
   \   0000016E   0x6809             LDR      R1,[R1, #+0]
   \   00000170   0xF88D 0x1006      STRB     R1,[SP, #+6]
   \   00000174   0xF04F 0x31FF      MOV      R1,#-1
   \   00000178   0x6261             STR      R1,[R4, #+36]
   \   0000017A   0x.... 0x....      LDR.W    R1,??DataTable4_12  ;; 0xe000e200
   \   0000017E   0x6809             LDR      R1,[R1, #+0]
   \   00000180   0x04C9             LSLS     R1,R1,#+19
   \   00000182   0xD50B             BPL.N    ??halInternalSleep_10
   \   00000184   0x6869             LDR      R1,[R5, #+4]
   \   00000186   0x07C9             LSLS     R1,R1,#+31
   \   00000188   0xD508             BPL.N    ??halInternalSleep_10
   \   0000018A   0x69E1             LDR      R1,[R4, #+28]
   \   0000018C   0x07C9             LSLS     R1,R1,#+31
   \   0000018E   0xD505             BPL.N    ??halInternalSleep_10
    272                  //record GPIO state for wake monitoring purposes
    273                  //By having a snapshot of GPIO state, we can figure out after waking
    274                  //up exactly which GPIO could have woken us up.
    275                  //Reading the three IN registers is done separately to avoid warnings
    276                  //about undefined order of volatile access.
    277                  WakeEvents GPIO_IN_SAVED;
    278                  GPIO_IN_SAVED.events.portA = GPIO_PAIN;
    279                  GPIO_IN_SAVED.events.portB = GPIO_PBIN;
    280                  GPIO_IN_SAVED.events.portC = GPIO_PCIN;
    281                #ifdef EMBER_MICRO_PORT_D_GPIO
    282                  GPIO_IN_SAVED.events.portD = GPIO_PDIN;
    283                #endif
    284                #ifdef EMBER_MICRO_PORT_E_GPIO
    285                  GPIO_IN_SAVED.events.portE = GPIO_PEIN;
    286                #endif
    287                #ifdef EMBER_MICRO_PORT_F_GPIO
    288                  GPIO_IN_SAVED.events.portF = GPIO_PFIN;
    289                #endif
    290                  //reset the power up events by writing 1 to all bits.
    291                  PWRUP_EVENT = 0xFFFFFFFF;
    292          
    293          
    294          
    295                  //By clearing the events, the wake up event capturing is activated.
    296                  //At this point we can safely check our interrupt flags since event
    297                  //capturing is now overlapped.  Up to now, interrupts indicate
    298                  //activity, after this point, powerup events indicate activity.
    299                  //If any of the interrupt flags are set, that means we saw a wake event
    300                  //sometime while entering sleep, so we need to skip over sleeping
    301                  //
    302                  //--possible interrupt sources for waking:
    303                  //  IRQA, IRQB, IRQC, IRQD
    304                  //  SleepTMR CMPA, CMPB, Wrap
    305                  //  WAKE_CORE (DebugIsr)
    306                  //
    307                  #if defined(EMBER_MICRO_PORT_B_GPIO)
    308                    #if EMBER_MICRO_PORT_B_GPIO & PB0
    309                      //check for IRQA interrupt and if IRQA (PB0) is wake source
    310                      if((INT_PENDSET&INT_IRQA) &&
    311                         (GPIO_PBWAKE&PB0) &&
    312                         (WAKE_SEL&GPIO_WAKE)) {
    313                        skipSleep = TRUE;
    314                        //log IRQA as a wake event
    315                        halInternalWakeEvent.eventflags |= BIT(PORTB_PIN(0));
   \   00000190   0x6831             LDR      R1,[R6, #+0]
   \   00000192   0xF441 0x7180      ORR      R1,R1,#0x100
   \   00000196   0xF04F 0x0B01      MOV      R11,#+1
   \   0000019A   0x6031             STR      R1,[R6, #+0]
    316          
    317          
    318          
    319                      }
    320                    #endif
    321                    #if EMBER_MICRO_PORT_B_GPIO & PB6
    322                      //check for IRQB interrupt and if IRQB (PB6) is wake source
    323                      if((INT_PENDSET&INT_IRQB) &&
    324                         (GPIO_PBWAKE&PB6) &&
    325                         (WAKE_SEL&GPIO_WAKE)) {
   \                     ??halInternalSleep_10: (+1)
   \   0000019C   0x.... 0x....      LDR.W    R1,??DataTable4_12  ;; 0xe000e200
   \   000001A0   0x6809             LDR      R1,[R1, #+0]
   \   000001A2   0x0489             LSLS     R1,R1,#+18
   \   000001A4   0xD50B             BPL.N    ??halInternalSleep_11
   \   000001A6   0x6869             LDR      R1,[R5, #+4]
   \   000001A8   0x0649             LSLS     R1,R1,#+25
   \   000001AA   0xD508             BPL.N    ??halInternalSleep_11
   \   000001AC   0x69E1             LDR      R1,[R4, #+28]
   \   000001AE   0x07C9             LSLS     R1,R1,#+31
   \   000001B0   0xD505             BPL.N    ??halInternalSleep_11
    326                        skipSleep = TRUE;
    327                        //log IRQB as a wake event
    328                        halInternalWakeEvent.eventflags |= BIT(PORTB_PIN(6));
   \   000001B2   0x6831             LDR      R1,[R6, #+0]
   \   000001B4   0xF441 0x4180      ORR      R1,R1,#0x4000
   \   000001B8   0xF04F 0x0B01      MOV      R11,#+1
   \   000001BC   0x6031             STR      R1,[R6, #+0]
    329          
    330          
    331          
    332                      }
    333                    #endif
    334                  #endif
    335                  //check for IRQC interrupt and if IRQC (GPIO_IRQCSEL) is wake source
    336                  if((INT_PENDSET&INT_IRQC) &&
    337                     (gpioWakeSel&BIT(GPIO_IRQCSEL)) &&
    338                     (WAKE_SEL&GPIO_WAKE)) {
   \                     ??halInternalSleep_11: (+1)
   \   000001BE   0x2101             MOVS     R1,#+1
   \   000001C0   0x.... 0x....      LDR.W    R2,??DataTable4_12  ;; 0xe000e200
   \   000001C4   0x6812             LDR      R2,[R2, #+0]
   \   000001C6   0x0452             LSLS     R2,R2,#+17
   \   000001C8   0xD50E             BPL.N    ??halInternalSleep_12
   \   000001CA   0x9A00             LDR      R2,[SP, #+0]
   \   000001CC   0x68EB             LDR      R3,[R5, #+12]
   \   000001CE   0x40DA             LSRS     R2,R2,R3
   \   000001D0   0x07D2             LSLS     R2,R2,#+31
   \   000001D2   0xD509             BPL.N    ??halInternalSleep_12
   \   000001D4   0x69E2             LDR      R2,[R4, #+28]
   \   000001D6   0x07D2             LSLS     R2,R2,#+31
   \   000001D8   0xD506             BPL.N    ??halInternalSleep_12
    339                    skipSleep = TRUE;
    340                    //log IRQC as a wake event
    341                    halInternalWakeEvent.eventflags |= BIT(GPIO_IRQCSEL);
   \   000001DA   0x6832             LDR      R2,[R6, #+0]
   \   000001DC   0x68EB             LDR      R3,[R5, #+12]
   \   000001DE   0xFA01 0xF303      LSL      R3,R1,R3
   \   000001E2   0x431A             ORRS     R2,R3,R2
   \   000001E4   0x468B             MOV      R11,R1
   \   000001E6   0x6032             STR      R2,[R6, #+0]
    342          
    343          
    344          
    345                  }
    346                  //check for IRQD interrupt and if IRQD (GPIO_IRQDSEL) is wake source
    347                  if((INT_PENDSET&INT_IRQD) &&
    348                     (gpioWakeSel&BIT(GPIO_IRQDSEL)) &&
    349                     ((WAKE_SEL&GPIO_WAKE) ||
    350                      (WAKE_SEL&WAKE_IRQD))) {
   \                     ??halInternalSleep_12: (+1)
   \   000001E8   0x.... 0x....      LDR.W    R2,??DataTable4_12  ;; 0xe000e200
   \   000001EC   0x6812             LDR      R2,[R2, #+0]
   \   000001EE   0x0412             LSLS     R2,R2,#+16
   \   000001F0   0xD510             BPL.N    ??halInternalSleep_13
   \   000001F2   0x9A00             LDR      R2,[SP, #+0]
   \   000001F4   0x692B             LDR      R3,[R5, #+16]
   \   000001F6   0x40DA             LSRS     R2,R2,R3
   \   000001F8   0x07D2             LSLS     R2,R2,#+31
   \   000001FA   0xD50B             BPL.N    ??halInternalSleep_13
   \   000001FC   0x69E2             LDR      R2,[R4, #+28]
   \   000001FE   0x07D2             LSLS     R2,R2,#+31
   \   00000200   0xD402             BMI.N    ??halInternalSleep_14
   \   00000202   0x69E2             LDR      R2,[R4, #+28]
   \   00000204   0x0712             LSLS     R2,R2,#+28
   \   00000206   0xD505             BPL.N    ??halInternalSleep_13
    351                    skipSleep = TRUE;
    352                    //log IRQD as a wake event
    353                    halInternalWakeEvent.eventflags |= BIT(GPIO_IRQDSEL);
   \                     ??halInternalSleep_14: (+1)
   \   00000208   0x6832             LDR      R2,[R6, #+0]
   \   0000020A   0x692B             LDR      R3,[R5, #+16]
   \   0000020C   0x468B             MOV      R11,R1
   \   0000020E   0x4099             LSLS     R1,R1,R3
   \   00000210   0x4311             ORRS     R1,R1,R2
   \   00000212   0x6031             STR      R1,[R6, #+0]
    354          
    355          
    356          
    357                  }
    358                  //check for SleepTMR CMPA interrupt and if SleepTMR CMPA is wake source
    359                  if((INT_SLEEPTMR&INT_SLEEPTMRCMPA) && (WAKE_SEL&WAKE_SLEEPTMRCMPA)) {
    360                    skipSleep = TRUE;
    361                    //log SleepTMR CMPA as a wake event
    362                    halInternalWakeEvent.events.internal.bits.TIMER_WAKE_COMPA = TRUE;
    363          
    364          
    365          
    366                  }
    367                  //check for SleepTMR CMPB interrupt and if SleepTMR CMPB is wake source
    368                  if((INT_SLEEPTMR&INT_SLEEPTMRCMPB) && (WAKE_SEL&WAKE_SLEEPTMRCMPB)) {
    369                    skipSleep = TRUE;
    370                    //log SleepTMR CMPB as a wake event
    371                    halInternalWakeEvent.events.internal.bits.TIMER_WAKE_COMPB = TRUE;
    372          
    373          
    374          
    375                  }
    376                  //check for SleepTMR WRAP interrupt and if SleepTMR WRAP is wake source
    377                  if((INT_SLEEPTMR&INT_SLEEPTMRWRAP) && (WAKE_SEL&WAKE_SLEEPTMRWRAP)) {
    378                    skipSleep = TRUE;
    379                    //log SleepTMR WRAP as a wake event
    380                    halInternalWakeEvent.events.internal.bits.TIMER_WAKE_WRAP = TRUE;
    381          
    382          
    383          
    384                  }
    385                  //check for Debug interrupt and if WAKE_CORE is wake source
    386                  if((INT_PENDSET&INT_DEBUG) && (WAKE_SEL&WAKE_WAKE_CORE)) {
   \                     ??halInternalSleep_13: (+1)
   \   00000214   0x.... 0x....      LDR.W    R1,??DataTable4_12  ;; 0xe000e200
   \   00000218   0x6809             LDR      R1,[R1, #+0]
   \   0000021A   0x03C9             LSLS     R1,R1,#+15
   \   0000021C   0xD508             BPL.N    ??halInternalSleep_15
   \   0000021E   0x69E1             LDR      R1,[R4, #+28]
   \   00000220   0x0609             LSLS     R1,R1,#+24
   \   00000222   0xD505             BPL.N    ??halInternalSleep_15
    387                    skipSleep = TRUE;
    388                    //log WAKE_CORE as a wake event
    389                    halInternalWakeEvent.events.internal.bits.WAKE_CORE_B = TRUE;
   \   00000224   0x78F1             LDRB     R1,[R6, #+3]
   \   00000226   0xF041 0x0108      ORR      R1,R1,#0x8
   \   0000022A   0xF04F 0x0B01      MOV      R11,#+1
   \   0000022E   0x70F1             STRB     R1,[R6, #+3]
    390          
    391          
    392          
    393                  }
    394          
    395                  //only propagate across deep sleep the interrupts that are both
    396                  //enabled and possible wake sources
    397                  {
    398                    int32u wakeSourceInterruptMask = 0;
   \                     ??halInternalSleep_15: (+1)
   \   00000230   0x2100             MOVS     R1,#+0
   \   00000232   0x686A             LDR      R2,[R5, #+4]
   \   00000234   0x07D2             LSLS     R2,R2,#+31
   \   00000236   0xBF48             IT       MI 
    399          
    400                    if(GPIO_PBWAKE&PB0) {
    401                      wakeSourceInterruptMask |= INT_IRQA;
   \   00000238   0xF44F 0x5180      MOVMI    R1,#+4096
    402          
    403          
    404          
    405                    }
    406                    if(GPIO_PBWAKE&PB6) {
   \   0000023C   0x686A             LDR      R2,[R5, #+4]
   \   0000023E   0x0652             LSLS     R2,R2,#+25
   \   00000240   0xBF48             IT       MI 
    407                      wakeSourceInterruptMask |= INT_IRQB;
   \   00000242   0xF441 0x5100      ORRMI    R1,R1,#0x2000
    408          
    409          
    410          
    411                    }
    412                    if(gpioWakeSel&BIT(GPIO_IRQCSEL)) {
   \   00000246   0x9A00             LDR      R2,[SP, #+0]
   \   00000248   0x68EB             LDR      R3,[R5, #+12]
   \   0000024A   0x40DA             LSRS     R2,R2,R3
   \   0000024C   0x07D2             LSLS     R2,R2,#+31
   \   0000024E   0xBF48             IT       MI 
    413                      wakeSourceInterruptMask |= INT_IRQC;
   \   00000250   0xF441 0x4180      ORRMI    R1,R1,#0x4000
    414          
    415          
    416          
    417                    }
    418                    if(gpioWakeSel&BIT(GPIO_IRQDSEL)) {
   \   00000254   0x9A00             LDR      R2,[SP, #+0]
   \   00000256   0x692B             LDR      R3,[R5, #+16]
   \   00000258   0x40DA             LSRS     R2,R2,R3
   \   0000025A   0x07D2             LSLS     R2,R2,#+31
   \   0000025C   0xBF48             IT       MI 
    419                      wakeSourceInterruptMask |= INT_IRQD;
   \   0000025E   0xF441 0x4100      ORRMI    R1,R1,#0x8000
    420          
    421          
    422          
    423                    }
    424                    if( (WAKE_SEL&WAKE_SLEEPTMRCMPA) ||
    425                        (WAKE_SEL&WAKE_SLEEPTMRCMPB) ||
    426                        (WAKE_SEL&WAKE_SLEEPTMRWRAP) ) {
   \   00000262   0x69E2             LDR      R2,[R4, #+28]
   \   00000264   0x06D2             LSLS     R2,R2,#+27
   \   00000266   0xD405             BMI.N    ??halInternalSleep_16
   \   00000268   0x69E2             LDR      R2,[R4, #+28]
   \   0000026A   0x0692             LSLS     R2,R2,#+26
   \   0000026C   0xD402             BMI.N    ??halInternalSleep_16
   \   0000026E   0x69E2             LDR      R2,[R4, #+28]
   \   00000270   0x0652             LSLS     R2,R2,#+25
   \   00000272   0xD501             BPL.N    ??halInternalSleep_17
    427                      wakeSourceInterruptMask |= INT_SLEEPTMR;
   \                     ??halInternalSleep_16: (+1)
   \   00000274   0xF041 0x0110      ORR      R1,R1,#0x10
    428          
    429          
    430          
    431                    }
    432                    if(WAKE_SEL&WAKE_WAKE_CORE) {
   \                     ??halInternalSleep_17: (+1)
   \   00000278   0x69E2             LDR      R2,[R4, #+28]
   \   0000027A   0x0612             LSLS     R2,R2,#+24
   \   0000027C   0xBF48             IT       MI 
    433                      wakeSourceInterruptMask |= INT_DEBUG;
   \   0000027E   0xF441 0x3180      ORRMI    R1,R1,#0x10000
    434          
    435          
    436          
    437                    }
    438          
    439                    INT_CFGSET_SAVED &= wakeSourceInterruptMask;
   \   00000282   0x4008             ANDS     R0,R1,R0
   \   00000284   0x9002             STR      R0,[SP, #+8]
    440                  }
    441          
    442          
    443          
    444          
    445          
    446          
    447          
    448          
    449          
    450          
    451          
    452          
    453          
    454          
    455          
    456          
    457          
    458                  //disable watchdog while sleeping (since we can't reset it asleep)
    459                  halInternalDisableWatchDog(MICRO_DISABLE_WATCH_DOG_KEY);
   \   00000286   0x20A5             MOVS     R0,#+165
   \   00000288   0x.... 0x....      BL       halInternalDisableWatchDog
    460          
    461                  //The chip is not allowed to enter a deep sleep mode (which could
    462                  //cause a core reset cycle) while CSYSPWRUPREQ is set.  CSYSPWRUPREQ
    463                  //indicates that the debugger is trying to access sections of the
    464                  //chip that would get reset during deep sleep.  Therefore, a reset
    465                  //cycle could very easily cause the debugger to error and we don't
    466                  //want that.  While the power management state machine will stall
    467                  //if CSYSPWRUPREQ is set (to avoid the situation just described),
    468                  //in this stalled state the chip will not be responsive to wake
    469                  //events.  To be sensitive to wake events, we must handle them in
    470                  //software instead.  To accomplish this, we request that the
    471                  //CSYSPWRUPACK be inhibited (which will indicate the debugger is not
    472                  //connected).  But, we cannot induce deep sleep until CSYSPWRUPREQ/ACK
    473                  //go low and these are under the debuggers control, so we must stall
    474                  //and wait here.  If there is a wake event during this time, break
    475                  //out and wake like normal.  If the ACK eventually clears,
    476                  //we can proceed into deep sleep.  The CSYSPWRUPACK_INHIBIT
    477                  //functionality will hold off the debugger (by holding off the ACK)
    478                  //until we are safely past and out of deep sleep.  The power management
    479                  //state machine then becomes responsible for clearing
    480                  //CSYSPWRUPACK_INHIBIT and responding to a CSYSPWRUPREQ with a
    481                  //CSYSPWRUPACK at the right/safe time.
    482                  CSYSPWRUPACK_INHIBIT = CSYSPWRUPACK_INHIBIT_CSYSPWRUPACK_INHIBIT;
   \   0000028C   0x2001             MOVS     R0,#+1
   \   0000028E   0x63E0             STR      R0,[R4, #+60]
    483                  {
    484                    //Use a local copy of WAKE_SEL to avoid warnings from the compiler
    485                    //about order of volatile accesses
    486                    int32u wakeSel = WAKE_SEL;
   \   00000290   0x69E0             LDR      R0,[R4, #+28]
    487                    //stall until a wake event or CSYSPWRUPREQ/ACK clears
    488                    while( (CSYSPWRUPACK_STATUS) && (!(PWRUP_EVENT&wakeSel)) ) {}
   \                     ??halInternalSleep_18: (+1)
   \   00000292   0x6BA1             LDR      R1,[R4, #+56]
   \   00000294   0xB111             CBZ.N    R1,??halInternalSleep_19
   \   00000296   0x6A61             LDR      R1,[R4, #+36]
   \   00000298   0x4201             TST      R1,R0
   \   0000029A   0xD0FA             BEQ.N    ??halInternalSleep_18
   \                     ??halInternalSleep_19: (+1)
   \   0000029C   0x6A61             LDR      R1,[R4, #+36]
   \   0000029E   0x4201             TST      R1,R0
   \   000002A0   0xF000 0x80F1      BEQ.W    ??halInternalSleep_20
    489                    //if there was a wake event, allow CSYSPWRUPACK and skip sleep
    490                    if(PWRUP_EVENT&wakeSel) {
    491                      CSYSPWRUPACK_INHIBIT = CSYSPWRUPACK_INHIBIT_RESET;
   \   000002A4   0x2000             MOVS     R0,#+0
   \   000002A6   0x63E0             STR      R0,[R4, #+60]
    492                      skipSleep = TRUE;
   \   000002A8   0xF04F 0x0B01      MOV      R11,#+1
    493                    }
    494                  }
    495          
    496          
    497          
    498          
    499          
    500                  if(!skipSleep) {
    501          
    502          
    503          
    504                    //FogBugz 7283 states that we must switch to the OSCHF when entering
    505                    //deep sleep since using the 24MHz XTAL could result in RAM
    506                    //corruption.  This switch must occur at least 2*24MHz cycles before
    507                    //sleeping.
    508                    //
    509                    //FogBugz 8858 states that we cannot go into deep-sleep when the
    510                    //chip is clocked with the 24MHz XTAL with a duty cycle as low as
    511                    //70/30 since this causes power_down generation timing to fail.
    512                    //
    513                    //Hekla-S-003_Digital_specification.doc#21 states:  "Note that
    514                    //in Lipari there was a requirement to set the clock into OSCHF
    515                    //mode prior to entering deep sleep. This was a limitation brought
    516                    //about from an early version of the RAM IP used in Lipari and does
    517                    //not apply to Hekla so that requirement is removed."  But since
    518                    //continuing to switch the clock does not dramatically affect
    519                    //behavior and we prefer to keep our code as common as we can
    520                    //between 3xx chips, we still switch the clock for 358x/359.
    521                    OSC24M_CTRL &= ~OSC24M_CTRL_OSC24M_SEL;
    522                    //If DS12 needs to be forced regardless of state, clear
    523                    //REGEN_DSLEEP here.  This is hugely dangerous and
    524                    //should only be done in very controlled chip tests.
    525                    SCS_SCR |= SCS_SCR_SLEEPDEEP;      //enable deep sleep
    526          
    527          #ifdef BOOTLOADER_OPEN
    528                    void bootloaderInternalSaveContextAndDeepSleep(void);
    529          
    530                    // We don't have interrupts in the bootloader, so we can't just use
    531                    // SCS_ICSR to trigger a PendSV. So we manually call a function that
    532                    // pushes all registers on the stack and enters deep sleep via a WFI
    533                    // instruction.
    534                    //
    535          
    536                    // NOTE: Only set the reset reason in the bootloader. See bugzid 14827
    537                    // for more information.
    538                    // Also note that we leave the resetReason intact after waking up and restoring
    539                    // since resetReason is used in cstartup-iar.c during startup.
    540                    halResetInfo.crash.resetReason    = RESET_BOOTLOADER_DEEPSLEEP;
    541                    halResetInfo.crash.resetSignature = RESET_VALID_SIGNATURE;
    542          
    543                    bootloaderInternalSaveContextAndDeepSleep();
    544                    //I AM ASLEEP.  WHEN EXECUTION RESUMES, CSTARTUP WILL RESTORE TO HERE
    545          
    546                    extern boolean sleepTimerInterruptOccurred;
    547          
    548                    // In normal non-bootloader sleep situations here's what would happen
    549                    // after we wakeup from deep sleep:
    550                    //
    551                    // 1. The INT_SLEEPTMRCFG register is restored (search for
    552                    //    INT_SLEEPTMRCFG_REG below). We know that this will have the
    553                    //    INT_SLEEPTMRCMPA bit set, because that's what we use for sleep.
    554                    // 2. This "if(sleep int triggered)?" test is true:
    555                    //      if( (INT_SLEEPTMRCFG&INT_SLEEPTMRCMPA) &&
    556                    //          (halInternalWakeEvent&BIT(CMPA_INTERNAL_WAKE_EVENT_BIT)) )
    557                    //    And because it's true, the code below forces the sleep interrupt
    558                    //    like this:
    559                    //      INT_SLEEPTMRFORCE = INT_SLEEPTMRCMPA;
    560                    // 3. The halSleepTimerIsr would clear INT_SLEEPTMRCFG and then set
    561                    //    sleepTimerInterruptOccurred to TRUE.
    562                    //
    563                    // But we're in the bootloader deep sleep case, so we don't have that
    564                    // ISR (or any interrupts, actually!).
    565                    //
    566                    // So we'll handle it ourselves here by:
    567                    // 1. Setting sleepTimerInterruptOccurred to TRUE.
    568                    // 2. Clearing the INT_SLEEPTMRCFG_SAVED variable so when it's
    569                    //    restored to INT_SLEEPTMRCFG_REG the "if(sleep int triggered)?"
    570                    //    will be false, and the deep sleep interrupt won't be forced.
    571                    sleepTimerInterruptOccurred = TRUE;
    572          
    573                    INT_SLEEPTMRCFG_SAVED = 0;
    574          
    575                    // Invalidate the reset reason.
    576                    // Bugzid-14827: Only do this when in a bootloader because otherwise
    577                    // we will overwrite heap data like packetbuffers.
    578                    halResetInfo.crash.resetSignature = RESET_INVALID_SIGNATURE;
    579          #elif defined(MINIMAL_HAL)
    580                    //Call the context save restore function to trigger a context save.
    581                    halInternalContextSaveRestore(TRUE);
    582                    //I AM ASLEEP.  WHEN EXECUTION RESUMES, CSTARTUP WILL RESTORE TO HERE
    583          #else
    584          #ifndef MINIMAL_HAL
    585                    // NOTE: Only bootloader sets the reset reason to allow deep sleep
    586                    // wakeup to know upon wake to stay in bootloader.  App does not
    587                    // set this, because this RAM is used for heap data (bugzid 14827),
    588                    // however app makes sure wakeup won't be fooled by happenstance
    589                    // if the heap actually contains the bootloader's pattern.
    590                    if ( halResetInfo.crash.resetReason == RESET_BOOTLOADER_DEEPSLEEP
    591                       &&halResetInfo.crash.resetSignature == RESET_VALID_SIGNATURE ) {
    592                      // temporarily corrupt resetSignature so wakeup returns here
    593                      // to app rather than thinking it's the bootloader that slept
    594                      halResetInfo.crash.resetSignature = RESET_INVALID_SIGNATURE;
    595                      // Hack repurpose skipSleep local as signal to post-wakeup code
    596                      skipSleep = TRUE; // Signal to wakeup code below to restore
    597                    }
    598          #endif//MINIMAL_HAL
    599          
    600                    //Call the context save restore function to trigger a context save.
    601                    halInternalContextSaveRestore(TRUE);
    602                    //I AM ASLEEP.  WHEN EXECUTION RESUMES, CSTARTUP WILL RESTORE TO HERE
    603          
    604          #ifndef MINIMAL_HAL
    605                    // If signalled above that we had to corrupt heap temporarily
    606                    // during sleep, restore it now upon wakeup!
    607                    if (skipSleep) {
    608                      halResetInfo.crash.resetSignature = RESET_VALID_SIGNATURE;
    609                      skipSleep = FALSE; // Done with repurposed local, restore it too
    610                    }
    611          #endif//MINIMAL_HAL
    612          #endif // BOOTLOADER_OPEN
    613          
    614                   #ifndef CORTEXM3_EM35X_GEN4 // HW bug fixed in GEN4
    615                    //Save the value of the SLEEPTMR_CNT register immediately after
    616                    //waking up from a real sleep.  For FogBugz 11909/11920 workaround.
    617                    wakeupSleepTmrCnt = SLEEPTMR_CNTH<<16;
    618                    wakeupSleepTmrCnt |= SLEEPTMR_CNTL;
    619                   #endif//CORTEXM3_EM35X_GEN4 // HW bug fixed in GEN4
    620                  } else {
    621                    //Record the fact that we skipped sleep
    622                    halInternalWakeEvent.events.internal.bits.SleepSkipped = TRUE;
   \                     ??halInternalSleep_21: (+1)
   \   000002AC   0x78F0             LDRB     R0,[R6, #+3]
   \   000002AE   0xF040 0x0040      ORR      R0,R0,#0x40
   \   000002B2   0x70F0             STRB     R0,[R6, #+3]
    623                    //If this was a true deep sleep, we would have executed cstartup and
    624                    //PRIMASK would be set right now.  If we skipped sleep, PRIMASK is not
    625                    //set so we explicitely set it to guarantee the powerup sequence
    626                    //works cleanly and consistently with respect to interrupt
    627                    //dispatching and enabling.
    628                    _setPriMask();
   \   000002B4   0x.... 0x....      BL       _setPriMask
    629                  }
    630          
    631          
    632          
    633          
    634          
    635          
    636          
    637          
    638                  //Clear the interrupt flags for all wake sources.  This
    639                  //is necessary because if we don't execute an actual deep sleep cycle
    640                  //the interrupt flags will never be cleared.  By clearing the flags,
    641                  //we always mimick a real deep sleep as closely as possible and
    642                  //guard against any accidental interrupt triggering coming out
    643                  //of deep sleep.  (The interrupt dispatch code coming out of sleep
    644                  //is responsible for translating wake events into interrupt events,
    645                  //and if we don't clear interrupt flags here it's possible for an
    646                  //interrupt to trigger even if it wasn't the true wake event.)
    647                  INT_SLEEPTMRFLAG = (INT_SLEEPTMRCMPA |
    648                                      INT_SLEEPTMRCMPB |
    649                                      INT_SLEEPTMRWRAP);
   \                     ??halInternalSleep_22: (+1)
   \   000002B8   0x2007             MOVS     R0,#+7
   \   000002BA   0xF8C9 0x0000      STR      R0,[R9, #+0]
    650                  INT_GPIOFLAG = (INT_IRQAFLAG |
    651                                  INT_IRQBFLAG |
    652                                  INT_IRQCFLAG |
    653                                  INT_IRQDFLAG);
   \   000002BE   0x200F             MOVS     R0,#+15
   \   000002C0   0xF8CA 0x0000      STR      R0,[R10, #+0]
    654          
    655                  //immediately restore the registers we saved before sleeping
    656                  //so IRQ and SleepTMR capture can be reenabled as quickly as possible
    657                  //this is safe because our global interrupts are still disabled
    658                  //other registers will be restored later
    659          
    660                  #if ( ! (defined(MINIMAL_HAL) || defined(BOOTLOADER_OPEN)) )
    661                  //The minimal HAL (and therefore the SuperPHY release) doesn't
    662                  //use the MPU, and neither does app-bootloader-open.
    663                  halInternalEnableMPU();
   \   000002C4   0x.... 0x....      BL       halInternalEnableMPU
    664                  #endif //MINIMAL_HAL
    665          
    666                  SLEEPTMR_CLKEN_REG = SLEEPTMR_CLKEN_SAVED;
   \   000002C8   0x9818             LDR      R0,[SP, #+96]
   \   000002CA   0x....             LDR.N    R1,??DataTable4_7  ;; 0x40004004
   \   000002CC   0x6060             STR      R0,[R4, #+4]
    667                  INT_SLEEPTMRCFG_REG = INT_SLEEPTMRCFG_SAVED;
   \   000002CE   0x9816             LDR      R0,[SP, #+88]
   \   000002D0   0xF8C9 0x0040      STR      R0,[R9, #+64]
    668                  INT_MGMTCFG_REG = INT_MGMTCFG_SAVED;
   \   000002D4   0x9815             LDR      R0,[SP, #+84]
   \   000002D6   0xF8C9 0x0044      STR      R0,[R9, #+68]
    669                  GPIO_INTCFGA_REG = GPIO_INTCFGA_SAVED;
   \   000002DA   0x9814             LDR      R0,[SP, #+80]
   \   000002DC   0xF8CA 0x004C      STR      R0,[R10, #+76]
    670                  GPIO_INTCFGB_REG = GPIO_INTCFGB_SAVED;
   \   000002E0   0x9813             LDR      R0,[SP, #+76]
   \   000002E2   0xF8CA 0x0050      STR      R0,[R10, #+80]
    671                  GPIO_INTCFGC_REG = GPIO_INTCFGC_SAVED;
   \   000002E6   0x9812             LDR      R0,[SP, #+72]
   \   000002E8   0xF8CA 0x0054      STR      R0,[R10, #+84]
    672                  GPIO_INTCFGD_REG = GPIO_INTCFGD_SAVED;
   \   000002EC   0x9811             LDR      R0,[SP, #+68]
   \   000002EE   0xF8CA 0x0058      STR      R0,[R10, #+88]
    673                  OSC24M_BIASTRIM_REG = OSC24M_BIASTRIM_SAVED;
   \   000002F2   0x9810             LDR      R0,[SP, #+64]
   \   000002F4   0x6008             STR      R0,[R1, #+0]
    674                  OSCHF_TUNE_REG = OSCHF_TUNE_SAVED;
   \   000002F6   0x980F             LDR      R0,[SP, #+60]
   \   000002F8   0x6048             STR      R0,[R1, #+4]
    675                  DITHER_DIS_REG = DITHER_DIS_SAVED;
   \   000002FA   0x980E             LDR      R0,[SP, #+56]
   \   000002FC   0x6148             STR      R0,[R1, #+20]
    676                  PCTRACE_SEL_REG = PCTRACE_SEL_SAVED;
   \   000002FE   0x980D             LDR      R0,[SP, #+52]
   \   00000300   0x6248             STR      R0,[R1, #+36]
   \   00000302   0x....             LDR.N    R1,??DataTable4_8  ;; 0xe000e100
    677                  #if !defined(CORTEXM3_EM35X_GEN4)
    678                    MEM_PROT_0_REG = MEM_PROT_0_SAVED;
   \   00000304   0x980C             LDR      R0,[SP, #+48]
   \   00000306   0x6038             STR      R0,[R7, #+0]
    679                    MEM_PROT_1_REG = MEM_PROT_1_SAVED;
   \   00000308   0x980B             LDR      R0,[SP, #+44]
   \   0000030A   0x6078             STR      R0,[R7, #+4]
    680                    MEM_PROT_2_REG = MEM_PROT_2_SAVED;
   \   0000030C   0x980A             LDR      R0,[SP, #+40]
   \   0000030E   0x60B8             STR      R0,[R7, #+8]
    681                    MEM_PROT_3_REG = MEM_PROT_3_SAVED;
   \   00000310   0x9809             LDR      R0,[SP, #+36]
   \   00000312   0x60F8             STR      R0,[R7, #+12]
    682                    MEM_PROT_4_REG = MEM_PROT_4_SAVED;
   \   00000314   0x9808             LDR      R0,[SP, #+32]
   \   00000316   0x6138             STR      R0,[R7, #+16]
    683                    MEM_PROT_5_REG = MEM_PROT_5_SAVED;
   \   00000318   0x9807             LDR      R0,[SP, #+28]
   \   0000031A   0x6178             STR      R0,[R7, #+20]
    684                    MEM_PROT_6_REG = MEM_PROT_6_SAVED;
   \   0000031C   0x9806             LDR      R0,[SP, #+24]
   \   0000031E   0x61B8             STR      R0,[R7, #+24]
    685                    MEM_PROT_7_REG = MEM_PROT_7_SAVED;
   \   00000320   0x9805             LDR      R0,[SP, #+20]
   \   00000322   0x61F8             STR      R0,[R7, #+28]
    686                    MEM_PROT_EN_REG = MEM_PROT_EN_SAVED;
   \   00000324   0x9804             LDR      R0,[SP, #+16]
   \   00000326   0x63B8             STR      R0,[R7, #+56]
    687                  #endif //!defined(CORTEXM3_EM35X_GEN4)
    688                  INT_CFGSET_REG = INT_CFGSET_SAVED;
   \   00000328   0x9802             LDR      R0,[SP, #+8]
   \   0000032A   0x6008             STR      R0,[R1, #+0]
    689                  SCS_VTOR_REG = SCS_VTOR_SAVED;
   \   0000032C   0x....             LDR.N    R1,??DataTable4_6  ;; 0xe000ed08
   \   0000032E   0x9803             LDR      R0,[SP, #+12]
   \   00000330   0x6008             STR      R0,[R1, #+0]
    690          
    691                  //WAKE_CORE/INT_DEBUG and INT_IRQx is cleared by INT_PENDCLR below
    692                  INT_PENDCLR = 0xFFFFFFFF;
   \   00000332   0xF04F 0x30FF      MOV      R0,#-1
   \   00000336   0x....             LDR.N    R1,??DataTable4_13  ;; 0xe000e280
   \   00000338   0x6008             STR      R0,[R1, #+0]
    693          
    694                  //Now that we're awake, normal interrupts are operational again
    695                  //Take a snapshot of the new GPIO state and the EVENT register to
    696                  //record our wake event
    697                  halInternalWakeEvent.events.portA = GPIO_PAIN;
   \   0000033A   0x....             LDR.N    R0,??DataTable4_9  ;; 0x4000b008
   \   0000033C   0x6800             LDR      R0,[R0, #+0]
   \   0000033E   0x7030             STRB     R0,[R6, #+0]
    698                  halInternalWakeEvent.events.portB = GPIO_PBIN;
   \   00000340   0x....             LDR.N    R0,??DataTable4_10  ;; 0x4000b408
   \   00000342   0x6800             LDR      R0,[R0, #+0]
   \   00000344   0x7070             STRB     R0,[R6, #+1]
    699                  halInternalWakeEvent.events.portC = GPIO_PCIN;
   \   00000346   0x....             LDR.N    R0,??DataTable4_11  ;; 0x4000b808
   \   00000348   0x6800             LDR      R0,[R0, #+0]
   \   0000034A   0x70B0             STRB     R0,[R6, #+2]
    700                #ifdef EMBER_MICRO_PORT_D_GPIO
    701                  halInternalWakeEvent.events.portD = GPIO_PDIN;
    702                #endif
    703                #ifdef EMBER_MICRO_PORT_E_GPIO
    704                  halInternalWakeEvent.events.portE = GPIO_PEIN;
    705                #endif
    706                #ifdef EMBER_MICRO_PORT_F_GPIO
    707                  halInternalWakeEvent.events.portF = GPIO_PFIN;
    708                #endif
    709                  //Only operate on power up events that are also wake events.  Power
    710                  //up events will always trigger like an interrupt flag, so we have
    711                  //to check them against events that are enabled for waking. (This is
    712                  //a two step process because we're accessing two volatile values.)
    713                  int64u powerUpEvents = PWRUP_EVENT;
   \   0000034C   0x6A62             LDR      R2,[R4, #+36]
    714                         powerUpEvents &= WAKE_SEL;
   \   0000034E   0x69E0             LDR      R0,[R4, #+28]
   \   00000350   0x4010             ANDS     R0,R2,R0
    715          
    716                  halInternalWakeEvent.eventflags ^= GPIO_IN_SAVED.eventflags;
    717                  halInternalWakeEvent.eventflags &= gpioWakeSel ;
    718                  //PWRUP_SC1 is PB2 which is bit 10
    719                  halInternalWakeEvent.eventflags |= ((powerUpEvents&PWRUP_SC1)?1:0)<<((1*8)+2);
    720                  //PWRUP_SC2 is PA2 which is bit 2
    721                  halInternalWakeEvent.eventflags |= ((powerUpEvents&PWRUP_SC2)?1:0)<<((0*8)+2);
    722                  //PWRUP_IRQD is chosen by GPIO_IRQDSEL
    723                  halInternalWakeEvent.eventflags |= ((powerUpEvents&PWRUP_IRQD)?1:0)<<(GPIO_IRQDSEL);
   \   00000352   0x692A             LDR      R2,[R5, #+16]
    724                  halInternalWakeEvent.eventflags |= (( powerUpEvents &
    725                                                        ( PWRUP_CSYSPWRUPREQ_MASK  |
    726                                                          PWRUP_CDBGPWRUPREQ_MASK  |
    727                                                          PWRUP_WAKECORE_MASK      |
    728                                                          PWRUP_SLEEPTMRWRAP_MASK  |
    729                                                          PWRUP_SLEEPTMRCOMPB_MASK |
    730                                                          PWRUP_SLEEPTMRCOMPA_MASK ) )
    731                                                      << INTERNAL_WAKE_EVENT_BIT_SHIFT);
   \   00000354   0x6833             LDR      R3,[R6, #+0]
   \   00000356   0x9901             LDR      R1,[SP, #+4]
   \   00000358   0x404B             EORS     R3,R1,R3
   \   0000035A   0x9900             LDR      R1,[SP, #+0]
   \   0000035C   0x400B             ANDS     R3,R1,R3
   \   0000035E   0x0601             LSLS     R1,R0,#+24
   \   00000360   0x0E49             LSRS     R1,R1,#+25
   \   00000362   0xF001 0x0101      AND      R1,R1,#0x1
   \   00000366   0xEA43 0x2381      ORR      R3,R3,R1, LSL #+10
   \   0000036A   0x0601             LSLS     R1,R0,#+24
   \   0000036C   0x0E89             LSRS     R1,R1,#+26
   \   0000036E   0xF001 0x0101      AND      R1,R1,#0x1
   \   00000372   0xEA43 0x0381      ORR      R3,R3,R1, LSL #+2
   \   00000376   0x0601             LSLS     R1,R0,#+24
   \   00000378   0x0EC9             LSRS     R1,R1,#+27
   \   0000037A   0xF001 0x0101      AND      R1,R1,#0x1
   \   0000037E   0xFA01 0xF202      LSL      R2,R1,R2
   \   00000382   0x431A             ORRS     R2,R2,R3
   \   00000384   0xF400 0x707C      AND      R0,R0,#0x3F0
   \   00000388   0xEA42 0x5000      ORR      R0,R2,R0, LSL #+20
   \   0000038C   0x6030             STR      R0,[R6, #+0]
    732                  //at this point wake events are fully captured and interrupts have
    733                  //taken over handling all new events
    734          
    735          
    736          
    737          
    738          
    739          
    740                  //Bring limited interrupts back online.  INTERRUPTS_OFF will use
    741                  //BASEPRI to disable all interrupts except fault handlers.
    742                  //PRIMASK is still set though (global interrupt disable) so we need
    743                  //to clear that next.
    744                  INTERRUPTS_OFF();
   \   0000038E   0x.... 0x....      BL       _disableBasePri
    745          
    746          
    747          
    748          
    749          
    750                  //Now that BASEPRI has taken control of interrupt enable/disable,
    751                  //we can clear PRIMASK to reenable global interrupt operation.
    752                  _clearPriMask();
   \   00000392   0x.... 0x....      BL       _clearPriMask
    753          
    754          
    755          
    756          
    757          
    758                  //wake events are saved and interrupts are back on track,
    759                  //disable gpio freeze
    760                  EVENT_CTRL = EVENT_CTRL_RESET;
   \   00000396   0x2000             MOVS     R0,#+0
   \   00000398   0x6020             STR      R0,[R4, #+0]
    761          
    762                  //restart watchdog if it was running when we entered sleep
    763                  //do this before dispatching interrupts while we still have tight
    764                  //control of code execution
    765                  if(restoreWatchdog) {
   \   0000039A   0xF89D 0x005C      LDRB     R0,[SP, #+92]
   \   0000039E   0xB108             CBZ.N    R0,??halInternalSleep_23
    766                    halInternalEnableWatchDog();
   \   000003A0   0x.... 0x....      BL       halInternalEnableWatchDog
    767                  }
    768          
    769          
    770          
    771          
    772          
    773                  //Pend any interrupts associated with deep sleep wake sources.  The
    774                  //restoration of INT_CFGSET above and the changing of BASEPRI below
    775                  //is responsible for proper dispatching of interrupts at the end of
    776                  //halSleep.
    777                  //
    778                  //
    779                  //The WAKE_CORE wake source triggers a Debug Interrupt.  If INT_DEBUG
    780                  //interrupt is enabled and WAKE_CORE is a wake event, then pend the
    781                  //Debug interrupt (using the wake_core bit).
    782                  if( (INT_CFGSET&INT_DEBUG) &&
    783                      (halInternalWakeEvent.events.internal.bits.WAKE_CORE_B) ) {
   \                     ??halInternalSleep_23: (+1)
   \   000003A4   0x78F0             LDRB     R0,[R6, #+3]
   \   000003A6   0x....             LDR.N    R1,??DataTable4_8  ;; 0xe000e100
   \   000003A8   0x6809             LDR      R1,[R1, #+0]
   \   000003AA   0x03C9             LSLS     R1,R1,#+15
   \   000003AC   0xD504             BPL.N    ??halInternalSleep_24
   \   000003AE   0xF3C0 0x01C0      UBFX     R1,R0,#+3,#+1
   \   000003B2   0xB109             CBZ.N    R1,??halInternalSleep_24
    784                    WAKE_CORE = WAKE_CORE_FIELD;
   \   000003B4   0x2120             MOVS     R1,#+32
   \   000003B6   0x6221             STR      R1,[R4, #+32]
    785          
    786          
    787          
    788                  }
    789                  //
    790                  //
    791                  //The SleepTMR CMPA is linked to a real ISR.  If the SleepTMR CMPA
    792                  //interrupt is enabled and CMPA is a wake event, then pend the CMPA
    793                  //interrupt (force the second level interrupt).
    794                  if( (INT_SLEEPTMRCFG&INT_SLEEPTMRCMPA) &&
    795                      (halInternalWakeEvent.events.internal.bits.TIMER_WAKE_COMPA) ) {
   \                     ??halInternalSleep_24: (+1)
   \   000003B8   0xF8D9 0x1040      LDR      R1,[R9, #+64]
   \   000003BC   0x0789             LSLS     R1,R1,#+30
   \   000003BE   0xD504             BPL.N    ??halInternalSleep_25
   \   000003C0   0x07C1             LSLS     R1,R0,#+31
   \   000003C2   0xBF44             ITT      MI 
    796                    INT_SLEEPTMRFORCE = INT_SLEEPTMRCMPA;
   \   000003C4   0x2102             MOVMI    R1,#+2
   \   000003C6   0xF8C9 0x100C      STRMI    R1,[R9, #+12]
    797          
    798          
    799          
    800                  }
    801                  //
    802                  //The SleepTMR CMPB is linked to a real ISR.  If the SleepTMR CMPB
    803                  //interrupt is enabled and CMPB is a wake event, then pend the CMPB
    804                  //interrupt (force the second level interrupt).
    805                  if( (INT_SLEEPTMRCFG&INT_SLEEPTMRCMPB) &&
    806                      (halInternalWakeEvent.events.internal.bits.TIMER_WAKE_COMPB) ) {
   \                     ??halInternalSleep_25: (+1)
   \   000003CA   0xF8D9 0x1040      LDR      R1,[R9, #+64]
   \   000003CE   0x0749             LSLS     R1,R1,#+29
   \   000003D0   0xD505             BPL.N    ??halInternalSleep_26
   \   000003D2   0xF3C0 0x0140      UBFX     R1,R0,#+1,#+1
   \   000003D6   0xB111             CBZ.N    R1,??halInternalSleep_26
    807                    INT_SLEEPTMRFORCE = INT_SLEEPTMRCMPB;
   \   000003D8   0x2104             MOVS     R1,#+4
   \   000003DA   0xF8C9 0x100C      STR      R1,[R9, #+12]
    808          
    809          
    810          
    811                  }
    812                  //
    813                  //The SleepTMR WRAP is linked to a real ISR.  If the SleepTMR WRAP
    814                  //interrupt is enabled and WRAP is a wake event, then pend the WRAP
    815                  //interrupt (force the second level interrupt).
    816                  if( (INT_SLEEPTMRCFG&INT_SLEEPTMRWRAP) &&
    817                      (halInternalWakeEvent.events.internal.bits.TIMER_WAKE_WRAP) ) {
   \                     ??halInternalSleep_26: (+1)
   \   000003DE   0xF8D9 0x1040      LDR      R1,[R9, #+64]
   \   000003E2   0x07C9             LSLS     R1,R1,#+31
   \   000003E4   0xD505             BPL.N    ??halInternalSleep_27
   \   000003E6   0xF3C0 0x0080      UBFX     R0,R0,#+2,#+1
   \   000003EA   0xB110             CBZ.N    R0,??halInternalSleep_27
    818                    INT_SLEEPTMRFORCE = INT_SLEEPTMRWRAP;
   \   000003EC   0x2001             MOVS     R0,#+1
   \   000003EE   0xF8C9 0x000C      STR      R0,[R9, #+12]
    819          
    820          
    821          
    822                  }
    823                  //
    824                  //
    825                  //The four IRQs are linked to a real ISR.  If any of the four IRQs
    826                  //triggered, then pend their ISR
    827                  //
    828                  //If the IRQA interrupt mode is enabled and IRQA (PB0) is wake
    829                  //event, then pend the interrupt.
    830                  if( ((GPIO_INTCFGA&GPIO_INTMOD)!=0) &&
    831                      (halInternalWakeEvent.eventflags&BIT(PORTB_PIN(0))) ) {
   \                     ??halInternalSleep_27: (+1)
   \   000003F2   0x6830             LDR      R0,[R6, #+0]
   \   000003F4   0xF8DA 0x104C      LDR      R1,[R10, #+76]
   \   000003F8   0xF011 0x0FE0      TST      R1,#0xE0
   \   000003FC   0xD005             BEQ.N    ??halInternalSleep_28
   \   000003FE   0x05C1             LSLS     R1,R0,#+23
   \   00000400   0xD503             BPL.N    ??halInternalSleep_28
    832                    INT_PENDSET = INT_IRQA;
   \   00000402   0x....             LDR.N    R2,??DataTable4_12  ;; 0xe000e200
   \   00000404   0xF44F 0x5180      MOV      R1,#+4096
   \   00000408   0x6011             STR      R1,[R2, #+0]
    833          
    834          
    835          
    836                  }
    837                  //If the IRQB interrupt mode is enabled and IRQB (PB6) is wake
    838                  //event, then pend the interrupt.
    839                  if( ((GPIO_INTCFGB&GPIO_INTMOD)!=0) &&
    840                      (halInternalWakeEvent.eventflags&BIT(PORTB_PIN(6))) ) {
   \                     ??halInternalSleep_28: (+1)
   \   0000040A   0xF8DA 0x1050      LDR      R1,[R10, #+80]
   \   0000040E   0xF011 0x0FE0      TST      R1,#0xE0
   \   00000412   0xD005             BEQ.N    ??halInternalSleep_29
   \   00000414   0x0441             LSLS     R1,R0,#+17
   \   00000416   0xD503             BPL.N    ??halInternalSleep_29
    841                    INT_PENDSET = INT_IRQB;
   \   00000418   0x....             LDR.N    R2,??DataTable4_12  ;; 0xe000e200
   \   0000041A   0xF44F 0x5100      MOV      R1,#+8192
   \   0000041E   0x6011             STR      R1,[R2, #+0]
    842          
    843          
    844          
    845                  }
    846                  //If the IRQC interrupt mode is enabled and IRQC (GPIO_IRQCSEL) is wake
    847                  //event, then pend the interrupt.
    848                  if( ((GPIO_INTCFGC&GPIO_INTMOD)!=0) &&
    849                      (halInternalWakeEvent.eventflags&BIT(GPIO_IRQCSEL)) ) {
   \                     ??halInternalSleep_29: (+1)
   \   00000420   0xF8DA 0x1054      LDR      R1,[R10, #+84]
   \   00000424   0xF011 0x0FE0      TST      R1,#0xE0
   \   00000428   0xD008             BEQ.N    ??halInternalSleep_30
   \   0000042A   0x68E9             LDR      R1,[R5, #+12]
   \   0000042C   0xFA20 0xF101      LSR      R1,R0,R1
   \   00000430   0x07C9             LSLS     R1,R1,#+31
   \   00000432   0xD503             BPL.N    ??halInternalSleep_30
    850                    INT_PENDSET = INT_IRQC;
   \   00000434   0x....             LDR.N    R2,??DataTable4_12  ;; 0xe000e200
   \   00000436   0xF44F 0x4180      MOV      R1,#+16384
   \   0000043A   0x6011             STR      R1,[R2, #+0]
    851          
    852          
    853          
    854                  }
    855                  //If the IRQD interrupt mode is enabled and IRQD (GPIO_IRQDSEL) is wake
    856                  //event, then pend the interrupt.
    857                  if( ((GPIO_INTCFGD&GPIO_INTMOD)!=0) &&
    858                      (halInternalWakeEvent.eventflags&BIT(GPIO_IRQDSEL)) ) {
   \                     ??halInternalSleep_30: (+1)
   \   0000043C   0xF8DA 0x1058      LDR      R1,[R10, #+88]
   \   00000440   0xF011 0x0FE0      TST      R1,#0xE0
   \   00000444   0xD007             BEQ.N    ??halInternalSleep_31
   \   00000446   0x6929             LDR      R1,[R5, #+16]
   \   00000448   0x40C8             LSRS     R0,R0,R1
   \   0000044A   0x07C0             LSLS     R0,R0,#+31
   \   0000044C   0xD503             BPL.N    ??halInternalSleep_31
    859                    INT_PENDSET = INT_IRQD;
   \   0000044E   0x....             LDR.N    R1,??DataTable4_12  ;; 0xe000e200
   \   00000450   0xF44F 0x4000      MOV      R0,#+32768
   \   00000454   0x6008             STR      R0,[R1, #+0]
    860          
    861          
    862          
    863                  }
    864          
    865                 #ifndef CORTEXM3_EM35X_GEN4 // HW bug fixed in GEN4
    866                  //Due to FogBugz 11909/11920, SLEEPTMR_CNT may not have updated yet so
    867                  //we must ensure that the CNT register updates before returning.  It's
    868                  //only necessary to wait for the CNT to update when we've gone to
    869                  //sleep, the SLEEPTMR is enabled, and the sleep mode used a timer.
    870                  //This code could delay for up to 1ms, but will return as soon as it
    871                  //can.  In the situation where the chip slept for a known amount of
    872                  //time, this code will not delay and instead the system timer will
    873                  //report a fake, but accurate time.
    874                  if((!skipSleep) &&
    875                     (SLEEPTMR_CFG&SLEEPTMR_ENABLE) &&
    876                     (SLEEPTMR_CLKEN&SLEEPTMR_CLK10KEN) &&
    877                     (sleepMode!=SLEEPMODE_NOTIMER)) {
   \                     ??halInternalSleep_31: (+1)
   \   00000456   0xF1BB 0x0F00      CMP      R11,#+0
   \   0000045A   0xD16E             BNE.N    ??halInternalSleep_32
   \   0000045C   0x....             LDR.N    R0,??DataTable4_14  ;; 0x4000600c
   \   0000045E   0x6800             LDR      R0,[R0, #+0]
   \   00000460   0x0500             LSLS     R0,R0,#+20
   \   00000462   0xD56A             BPL.N    ??halInternalSleep_32
   \   00000464   0x6860             LDR      R0,[R4, #+4]
   \   00000466   0x0780             LSLS     R0,R0,#+30
   \   00000468   0xD567             BPL.N    ??halInternalSleep_32
   \   0000046A   0xF1B8 0x0F04      CMP      R8,#+4
   \   0000046E   0xD064             BEQ.N    ??halInternalSleep_32
    878                    int32u currSleepTmrCnt;
    879          
    880                    #ifdef BUG11909_WORKAROUND_C
    881                    //THIS WORKAROUND IS NOT PROVEN 100% RELIABLE.  THIS SHOULD NOT BE
    882                    //USED UNTIL IT IS PROVEN PERFECTLY RELIABLE.
    883                    //This workaround attempts to force the SLEEPTMR_CNT to tick sooner
    884                    //than normal.  It does so by toggling between the clock sources
    885                    //to get the CNT to increment.  There is a chance the SLEEPTMR_CNT
    886                    //could become random doing this!
    887                    {
    888                      currSleepTmrCnt = SLEEPTMR_CNTH<<16;
    889                      currSleepTmrCnt |= SLEEPTMR_CNTL;
    890                      if(currSleepTmrCnt == wakeupSleepTmrCnt) {
    891                        int32u GPIO_PCOUT_SAVED = GPIO_PCOUT;
    892                        int32u GPIO_PCCFGH_SAVED = GPIO_PCCFGH;
    893                        int32u SLEEPTMR_CFG_SAVED = SLEEPTMR_CFG;
    894                        //It is not necessary to do anything with SLEEPTMR_CLKEN.
    895                        GPIO_PCSET = PC7;
    896                        SET_REG_FIELD(GPIO_PCCFGH, PC7_CFG, GPIOCFG_OUT);
    897                        do {
    898                          //Toggling between RC/XTAL will produce a clock edge
    899                          //into the timer and cause CNT to increment.
    900                          SLEEPTMR_CFG ^= SLEEPTMR_CLKSEL;
    901                          currSleepTmrCnt = SLEEPTMR_CNTH<<16;
    902                          currSleepTmrCnt |= SLEEPTMR_CNTL;
    903                        } while(currSleepTmrCnt == wakeupSleepTmrCnt);
    904                        GPIO_PCOUT = GPIO_PCOUT_SAVED;
    905                        GPIO_PCCFGH = GPIO_PCCFGH_SAVED;
    906                        SLEEPTMR_CFG = SLEEPTMR_CFG_SAVED;
    907                        forceSleepTmrCnt = FALSE;
    908                      }
    909                    }
    910                    #endif //BUG11909_WORKAROUND_C
    911          
    912                    //Knowing that halSleepTimerIsr is about to be taken (when
    913                    //interrupts get enabled) tells us that the chip woke up due
    914                    //to the timer and therefore sleepTmrArtificalCnt is valid
    915                    //and needs to be forced.  This allows us to bypass delaying
    916                    //for SLEEPTMR_CNT to tick forward.  For FogBugz 11909/11920
    917                    //workaround.
    918                    if((INT_CFGSET&INT_SLEEPTMR) && (INT_PENDSET&INT_SLEEPTMR)) {
   \   00000470   0x....             LDR.N    R0,??DataTable4_8  ;; 0xe000e100
   \   00000472   0x6800             LDR      R0,[R0, #+0]
   \   00000474   0x06C0             LSLS     R0,R0,#+27
   \   00000476   0xD53D             BPL.N    ??halInternalSleep_33
   \   00000478   0x....             LDR.N    R0,??DataTable4_12  ;; 0xe000e200
   \   0000047A   0x6800             LDR      R0,[R0, #+0]
   \   0000047C   0x06C0             LSLS     R0,R0,#+27
   \   0000047E   0xD539             BPL.N    ??halInternalSleep_33
    919                      //sleepTmrArtificalCnt was set before sleeping
    920                      //by halSleepForQuarterSeconds
    921                      forceSleepTmrCnt = TRUE;
   \   00000480   0x2001             MOVS     R0,#+1
   \   00000482   0x7130             STRB     R0,[R6, #+4]
   \   00000484   0xE059             B.N      ??halInternalSleep_32
    922                    } else {
   \                     ??halInternalSleep_20: (+1)
   \   00000486   0xF1BB 0x0F00      CMP      R11,#+0
   \   0000048A   0xF47F 0xAF0F      BNE.W    ??halInternalSleep_21
   \   0000048E   0x....             LDR.N    R0,??DataTable4_7  ;; 0x40004004
   \   00000490   0x....             LDR.N    R1,??DataTable4_7  ;; 0x40004004
   \   00000492   0x6980             LDR      R0,[R0, #+24]
   \   00000494   0x0840             LSRS     R0,R0,#+1
   \   00000496   0x0040             LSLS     R0,R0,#+1
   \   00000498   0x6188             STR      R0,[R1, #+24]
   \   0000049A   0x....             LDR.N    R1,??DataTable4_6  ;; 0xe000ed08
   \   0000049C   0x....             LDR.N    R0,??DataTable4_6  ;; 0xe000ed08
   \   0000049E   0x6880             LDR      R0,[R0, #+8]
   \   000004A0   0xF040 0x0004      ORR      R0,R0,#0x4
   \   000004A4   0x6088             STR      R0,[R1, #+8]
   \   000004A6   0xF240 0x2107      MOVW     R1,#+519
   \   000004AA   0x....             LDR.N    R0,??DataTable4_15
   \   000004AC   0x8800             LDRH     R0,[R0, #+0]
   \   000004AE   0x4288             CMP      R0,R1
   \   000004B0   0xBF01             ITTTT    EQ 
   \   000004B2   0x....             LDREQ.N  R0,??DataTable4_15
   \   000004B4   0x8840             LDRHEQ   R0,[R0, #+2]
   \   000004B6   0xF24F 0x010F      MOVWEQ   R1,#+61455
   \   000004BA   0x4288             CMPEQ    R0,R1
   \   000004BC   0xD105             BNE.N    ??halInternalSleep_34
   \   000004BE   0x....             LDR.N    R1,??DataTable4_15
   \   000004C0   0xF24C 0x303C      MOVW     R0,#+49980
   \   000004C4   0x8048             STRH     R0,[R1, #+2]
   \   000004C6   0xF04F 0x0B01      MOV      R11,#+1
   \                     ??halInternalSleep_34: (+1)
   \   000004CA   0x2001             MOVS     R0,#+1
   \   000004CC   0x.... 0x....      BL       halInternalContextSaveRestore
   \   000004D0   0xF1BB 0x0F00      CMP      R11,#+0
   \   000004D4   0xD005             BEQ.N    ??halInternalSleep_35
   \   000004D6   0x....             LDR.N    R1,??DataTable4_15
   \   000004D8   0xF24F 0x000F      MOVW     R0,#+61455
   \   000004DC   0x8048             STRH     R0,[R1, #+2]
   \   000004DE   0xF04F 0x0B00      MOV      R11,#+0
   \                     ??halInternalSleep_35: (+1)
   \   000004E2   0x....             LDR.N    R0,??DataTable4_14  ;; 0x4000600c
   \   000004E4   0x....             LDR.N    R1,??DataTable4_14  ;; 0x4000600c
   \   000004E6   0x6840             LDR      R0,[R0, #+4]
   \   000004E8   0x0400             LSLS     R0,R0,#+16
   \   000004EA   0x60B0             STR      R0,[R6, #+8]
   \   000004EC   0x6889             LDR      R1,[R1, #+8]
   \   000004EE   0x4308             ORRS     R0,R1,R0
   \   000004F0   0x60B0             STR      R0,[R6, #+8]
   \   000004F2   0xE6E1             B.N      ??halInternalSleep_22
    923                      int32u ticks = MAC_TIMER_TICKS(1000); // 1 millisecond
   \                     ??halInternalSleep_33: (+1)
   \   000004F4   0x.... 0x....      BL       halPeripheralClockHz
   \   000004F8   0x....             LDR.N    R1,??DataTable4_16  ;; 0x3d090
   \   000004FA   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   000004FE   0xF44F 0x717A      MOV      R1,#+1000
   \   00000502   0x4348             MULS     R0,R1,R0
   \   00000504   0x302F             ADDS     R0,R0,#+47
   \   00000506   0x2130             MOVS     R1,#+48
   \   00000508   0xFBB0 0xF0F1      UDIV     R0,R0,R1
    924                      int32u beginTime;
    925                      forceSleepTmrCnt = FALSE;
   \   0000050C   0x2100             MOVS     R1,#+0
   \   0000050E   0x7131             STRB     R1,[R6, #+4]
    926                      //It is possible to be in a situation where the SLEEPTMR is no
    927                      //longer ticking (32k XTAL issues).  To guard against getting
    928                      //stuck in this loop, use the MAC Timer to timeout after 1ms (since
    929                      //that is the maximum time this loop would normally delay for).
    930                      MAC_TIMER_CTRL |= MAC_TIMER_CTRL_MAC_TIMER_EN;
   \   00000510   0x....             LDR.N    R1,??DataTable4_17  ;; 0x40002038
   \   00000512   0x6D4A             LDR      R2,[R1, #+84]
   \   00000514   0xF042 0x0201      ORR      R2,R2,#0x1
   \   00000518   0x654A             STR      R2,[R1, #+84]
    931                      beginTime = MAC_TIMER;
   \   0000051A   0x680A             LDR      R2,[R1, #+0]
    932                      do{
    933                        currSleepTmrCnt = SLEEPTMR_CNTH<<16;
   \                     ??halInternalSleep_36: (+1)
   \   0000051C   0x....             LDR.N    R3,??DataTable4_14  ;; 0x4000600c
    934                        currSleepTmrCnt |= SLEEPTMR_CNTL;
   \   0000051E   0x....             LDR.N    R4,??DataTable4_14  ;; 0x4000600c
   \   00000520   0x685B             LDR      R3,[R3, #+4]
   \   00000522   0x68A4             LDR      R4,[R4, #+8]
    935                      }while((currSleepTmrCnt == wakeupSleepTmrCnt) &&
    936                             (((MAC_TIMER-beginTime)&MAC_TIMER_MAC_TIMER_MASK) < ticks));
   \   00000524   0xEA44 0x4303      ORR      R3,R4,R3, LSL #+16
   \   00000528   0x68B4             LDR      R4,[R6, #+8]
   \   0000052A   0x42A3             CMP      R3,R4
   \   0000052C   0xD105             BNE.N    ??halInternalSleep_32
   \   0000052E   0x680B             LDR      R3,[R1, #+0]
   \   00000530   0x1A9B             SUBS     R3,R3,R2
   \   00000532   0x031B             LSLS     R3,R3,#+12
   \   00000534   0x0B1B             LSRS     R3,R3,#+12
   \   00000536   0x4283             CMP      R3,R0
   \   00000538   0xD3F0             BCC.N    ??halInternalSleep_36
    937                    }
    938                  }
    939                 #endif//CORTEXM3_EM35X_GEN4 // HW bug fixed in GEN4
    940                }
    941          
    942          
    943          
    944          
    945          
    946          
    947                //Mark the wake events valid just before exiting
    948                halInternalWakeEvent.events.internal.bits.WakeInfoValid = TRUE;
   \                     ??halInternalSleep_32: (+1)
   \   0000053A   0x78F0             LDRB     R0,[R6, #+3]
   \   0000053C   0xF040 0x0080      ORR      R0,R0,#0x80
   \   00000540   0x70F0             STRB     R0,[R6, #+3]
    949          
    950                //We are now reconfigured, appropriate ISRs are pended, and ready to go,
    951                //so enable interrupts!
    952                INTERRUPTS_ON();
   \   00000542   0xB019             ADD      SP,SP,#+100
   \   00000544   0xE8BD 0x4FF0      POP      {R4-R11,LR}
   \   00000548   0x.... 0x....      B.W      _enableBasePri
    953          
    954          
    955          
    956          
    957          
    958                break; //and deep sleeping is done!
    959          
    960              case SLEEPMODE_IDLE:
    961                //Only the CPU is idled.  The rest of the chip continues runing
    962                //normally.  The chip will wake from any interrupt.
    963                {
    964                  boolean restoreWatchdog = halInternalWatchDogEnabled();
   \                     ??halInternalSleep_4: (+1)
   \   0000054C   0x.... 0x....      BL       halInternalWatchDogEnabled
   \   00000550   0x4604             MOV      R4,R0
    965                  //disable watchdog while sleeping (since we can't reset it asleep)
    966                  halInternalDisableWatchDog(MICRO_DISABLE_WATCH_DOG_KEY);
   \   00000552   0x20A5             MOVS     R0,#+165
   \   00000554   0x.... 0x....      BL       halInternalDisableWatchDog
    967                  //Normal ATOMIC/INTERRUPTS_OFF/INTERRUPTS_ON uses the BASEPRI mask
    968                  //to juggle priority levels so that the fault handlers can always
    969                  //be serviced.  But, the WFI instruction is only capable of
    970                  //working with the PRIMASK bit.  Therefore, we have to switch from
    971                  //using BASEPRI to PRIMASK to keep interrupts disabled so that the
    972                  //WFI can return on an interrupt
    973                  //Globally disable interrupts with PRIMASK
    974                  _setPriMask();
   \   00000558   0x.... 0x....      BL       _setPriMask
    975                  //Bring the BASEPRI up to 0 to allow interrupts (but still disabled
    976                  //with PRIMASK)
    977                  INTERRUPTS_ON();
   \   0000055C   0x.... 0x....      BL       _enableBasePri
    978                  //an internal function call is made here instead of injecting the
    979                  //"WFI" assembly instruction because injecting assembly code will
    980                  //cause the compiler's optimizer to reduce efficiency.
    981                  #ifdef FLASH_ACCESS_FLASH_LP
    982                  BYPASS_MPU(
    983                    int32u FLASH_ACCESS_SAVED = FLASH_ACCESS;
    984                    FLASH_ACCESS &= ~FLASH_ACCESS_FLASH_LP;
    985                    halInternalIdleSleep();
    986                    FLASH_ACCESS = FLASH_ACCESS_SAVED;
    987                  )
   \   00000560   0x....             LDR.N    R5,??DataTable4_18  ;; 0xe000ed94
   \   00000562   0x682E             LDR      R6,[R5, #+0]
   \   00000564   0x6828             LDR      R0,[R5, #+0]
   \   00000566   0x0840             LSRS     R0,R0,#+1
   \   00000568   0x0040             LSLS     R0,R0,#+1
   \   0000056A   0x6028             STR      R0,[R5, #+0]
   \   0000056C   0x.... 0x....      BL       _executeBarrierInstructions
   \   00000570   0x....             LDR.N    R7,??DataTable4_19  ;; 0x40008000
   \   00000572   0xF8D7 0x8000      LDR      R8,[R7, #+0]
   \   00000576   0x6838             LDR      R0,[R7, #+0]
   \   00000578   0xF020 0x0040      BIC      R0,R0,#0x40
   \   0000057C   0x6038             STR      R0,[R7, #+0]
   \   0000057E   0x.... 0x....      BL       halInternalIdleSleep
   \   00000582   0xF8C7 0x8000      STR      R8,[R7, #+0]
   \   00000586   0x602E             STR      R6,[R5, #+0]
   \   00000588   0x.... 0x....      BL       _executeBarrierInstructions
    988                  #else //FLASH_ACCESS_FLASH_LP
    989                  halInternalIdleSleep();
    990                  #endif //FLASH_ACCESS_FLASH_LP
    991                  //restart watchdog if it was running when we entered sleep
    992                  if(restoreWatchdog)
   \   0000058C   0xB10C             CBZ.N    R4,??halInternalSleep_37
    993                    halInternalEnableWatchDog();
   \   0000058E   0x.... 0x....      BL       halInternalEnableWatchDog
    994                  //The WFI instruction does not actually clear the PRIMASK bit, it
    995                  //only allows the PRIMASK bit to be bypassed.  Therefore, we must
    996                  //manually clear PRIMASK to reenable all interrupts.
    997                  _clearPriMask();
   \                     ??halInternalSleep_37: (+1)
   \   00000592   0xB019             ADD      SP,SP,#+100
   \   00000594   0xE8BD 0x4FF0      POP      {R4-R11,LR}
   \   00000598   0x.... 0x....      B.W      _clearPriMask
    998                }
    999                break;
   1000          
   1001              default:
   1002                //Oops!  Invalid sleepMode parameter.
   1003                assert(0);
   \                     ??halInternalSleep_5: (+1)
   \   0000059C   0xB019             ADD      SP,SP,#+100
   \   0000059E   0xE8BD 0x4FF0      POP      {R4-R11,LR}
   \   000005A2   0xF240 0x31EB      MOVW     R1,#+1003
   \   000005A6   0x.... 0x....      ADR.W    R0,`?<Constant "sleep.c">`
   \   000005AA   0x.... 0x....      B.W      halInternalAssertFailed
   1004            }
   1005          }
   1006          
   1007          

   \                                 In section .text, align 2, keep-with-next
   1008          void halSleepWithOptions(SleepModes sleepMode, WakeMask wakeMask)
   1009          {
   1010            //configure all GPIO wake sources when given a valid wakeMask
   1011            if(wakeMask != WAKE_MASK_INVALID) {
   \                     halSleepWithOptions: (+1)
   \   00000000   0x....             LDR.N    R2,??DataTable4_2  ;; 0x4000bc08
   \   00000002   0xF111 0x0F01      CMN      R1,#+1
   \   00000006   0xD007             BEQ.N    ??halSleepWithOptions_0
   1012              GPIO_PAWAKE = (wakeMask>>0)&EMBER_MICRO_PORT_A_GPIO;
   \   00000008   0xB2CB             UXTB     R3,R1
   \   0000000A   0x6013             STR      R3,[R2, #+0]
   1013              GPIO_PBWAKE = (wakeMask>>8)&EMBER_MICRO_PORT_B_GPIO;
   \   0000000C   0xF3C1 0x2307      UBFX     R3,R1,#+8,#+8
   \   00000010   0x6053             STR      R3,[R2, #+4]
   1014              GPIO_PCWAKE = (wakeMask>>16)&EMBER_MICRO_PORT_C_GPIO;
   \   00000012   0xF3C1 0x4107      UBFX     R1,R1,#+16,#+8
   \   00000016   0x6091             STR      R1,[R2, #+8]
   1015          
   1016              #ifdef EMBER_MICRO_PORT_D_GPIO
   1017              GPIO_PDWAKE = (wakeMask>>24)&EMBER_MICRO_PORT_D_GPIO;
   1018              #endif
   1019              #ifdef EMBER_MICRO_PORT_E_GPIO
   1020              GPIO_PEWAKE = (wakeMask>>32)&EMBER_MICRO_PORT_E_GPIO;
   1021              #endif
   1022              #ifdef EMBER_MICRO_PORT_F_GPIO
   1023              GPIO_PFWAKE = (wakeMask>>40)&EMBER_MICRO_PORT_F_GPIO;
   1024              #endif
   1025            }
   1026          
   1027            //use the defines found in the board file to choose our wakeup source(s)
   1028            WAKE_SEL = 0;  //start with no wake sources
   \                     ??halSleepWithOptions_0: (+1)
   \   00000018   0x2300             MOVS     R3,#+0
   \   0000001A   0x....             LDR.N    R1,??DataTable4_20  ;; 0x40000020
   \   0000001C   0x600B             STR      R3,[R1, #+0]
   1029          
   1030            //if any of the GPIO wakeup monitor bits are set, enable the top level
   1031            //GPIO wakeup monitor
   1032            if( (GPIO_PAWAKE) ||
   1033                (GPIO_PBWAKE) ||
   1034                (GPIO_PCWAKE) 
   1035                #ifdef EMBER_MICRO_PORT_D_GPIO
   1036                || (GPIO_PDWAKE)
   1037                #endif
   1038                #ifdef EMBER_MICRO_PORT_E_GPIO
   1039                || (GPIO_PEWAKE) 
   1040                #endif
   1041                #ifdef EMBER_MICRO_PORT_F_GPIO
   1042                || (GPIO_PFWAKE) 
   1043                #endif
   1044                ) {
   \   0000001E   0x6813             LDR      R3,[R2, #+0]
   \   00000020   0x2B00             CMP      R3,#+0
   \   00000022   0xBF04             ITT      EQ 
   \   00000024   0x6853             LDREQ    R3,[R2, #+4]
   \   00000026   0x2B00             CMPEQ    R3,#+0
   \   00000028   0xD101             BNE.N    ??halSleepWithOptions_1
   \   0000002A   0x6892             LDR      R2,[R2, #+8]
   \   0000002C   0xB11A             CBZ.N    R2,??halSleepWithOptions_2
   1045              WAKE_SEL |= GPIO_WAKE;
   \                     ??halSleepWithOptions_1: (+1)
   \   0000002E   0x680A             LDR      R2,[R1, #+0]
   \   00000030   0xF042 0x0201      ORR      R2,R2,#0x1
   \   00000034   0x600A             STR      R2,[R1, #+0]
   1046            }
   1047          
   1048            //NOTE: The use of WAKE_CDBGPWRUPREQ should not be necessary since asserting
   1049            //CDBGPWRUPREQ will bring the chip to DS0 where the debug components are
   1050            //maintained but it's not necessary to completely wake to the running state.
   1051          
   1052            //always wakeup when the debugger attempts to access the chip
   1053            WAKE_SEL |= WAKE_CSYSPWRUPREQ;
   \                     ??halSleepWithOptions_2: (+1)
   \   00000036   0x680A             LDR      R2,[R1, #+0]
   \   00000038   0xF442 0x7200      ORR      R2,R2,#0x200
   \   0000003C   0x600A             STR      R2,[R1, #+0]
   1054          
   1055            //always wakeup when the debug channel attempts to access the chip
   1056            WAKE_SEL |= WAKE_WAKE_CORE;
   \   0000003E   0x680A             LDR      R2,[R1, #+0]
   \   00000040   0xF042 0x0280      ORR      R2,R2,#0x80
   \   00000044   0x600A             STR      R2,[R1, #+0]
   1057            //the timer wakeup sources are enabled below in POWERSAVE, if needed
   1058          
   1059            //wake sources are configured so do the actual sleeping
   1060            halInternalSleep(sleepMode);
   \   00000046   0x....             B.N      halInternalSleep
   1061          }
   1062          

   \                                 In section .text, align 2, keep-with-next
   1063          void halSleep(SleepModes sleepMode)
   1064          {
   1065            //configure all GPIO wake sources
   1066            WakeMask gpioWakeBitMask  = (EMBER_WAKE_PORT_A << 0) |
   1067                                        (EMBER_WAKE_PORT_B << 8) |
   1068                                        (EMBER_WAKE_PORT_C << 16)
   1069                                      #ifdef EMBER_WAKE_PORT_D
   1070                                        |(EMBER_WAKE_PORT_D << 24)
   1071                                      #endif
   1072                                      #ifdef EMBER_WAKE_PORT_E
   1073                                        |( (int64u) EMBER_WAKE_PORT_E << 32)
   1074                                      #endif
   1075                                      #ifdef EMBER_WAKE_PORT_F
   1076                                        |( (int64u) EMBER_WAKE_PORT_F << 40)
   1077                                      #endif
   1078                                        ;
   1079          
   1080            halSleepWithOptions(sleepMode, gpioWakeBitMask);
   \                     halSleep: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable4_21  ;; 0x404000
   \   00000002   0x....             B.N      halSleepWithOptions
   1081          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x........         DC32     halInternalWakeEvent

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x40000004         DC32     0x40000004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x4000BC08         DC32     0x4000bc08

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x4000A014         DC32     0x4000a014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x4000A814         DC32     0x4000a814

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x40005000         DC32     0x40005000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \   00000000   0xE000ED08         DC32     0xe000ed08

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \   00000000   0x40004004         DC32     0x40004004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_8:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_9:
   \   00000000   0x4000B008         DC32     0x4000b008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_10:
   \   00000000   0x4000B408         DC32     0x4000b408

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_11:
   \   00000000   0x4000B808         DC32     0x4000b808

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_12:
   \   00000000   0xE000E200         DC32     0xe000e200

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_13:
   \   00000000   0xE000E280         DC32     0xe000e280

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_14:
   \   00000000   0x4000600C         DC32     0x4000600c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_15:
   \   00000000   0x........         DC32     halResetInfo

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_16:
   \   00000000   0x0003D090         DC32     0x3d090

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_17:
   \   00000000   0x40002038         DC32     0x40002038

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_18:
   \   00000000   0xE000ED94         DC32     0xe000ed94

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_19:
   \   00000000   0x40008000         DC32     0x40008000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_20:
   \   00000000   0x40000020         DC32     0x40000020

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_21:
   \   00000000   0x00404000         DC32     0x404000

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "sleep.c">`:
   \   00000000   0x73 0x6C          DC8 "sleep.c"
   \              0x65 0x65    
   \              0x70 0x2E    
   \              0x63 0x00    

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   halGetWakeInfo
     136   halInternalSleep
         0   -> _clearPriMask
       136   -> _clearPriMask
       136   -> _disableBasePri
         0   -> _enableBasePri
       136   -> _enableBasePri
       136   -> _executeBarrierInstructions
       136   -> _setPriMask
         0   -> halInternalAssertFailed
       136   -> halInternalContextSaveRestore
       136   -> halInternalDisableWatchDog
       136   -> halInternalEnableMPU
       136   -> halInternalEnableWatchDog
       136   -> halInternalIdleSleep
       136   -> halInternalWatchDogEnabled
       136   -> halPeripheralClockHz
       0   halSleep
         0   -> halSleepWithOptions
       0   halSleepWithOptions
         0   -> halInternalSleep


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?<Constant "sleep.c">
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_10
       4  ??DataTable4_11
       4  ??DataTable4_12
       4  ??DataTable4_13
       4  ??DataTable4_14
       4  ??DataTable4_15
       4  ??DataTable4_16
       4  ??DataTable4_17
       4  ??DataTable4_18
       4  ??DataTable4_19
       4  ??DataTable4_2
       4  ??DataTable4_20
       4  ??DataTable4_21
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable4_8
       4  ??DataTable4_9
       8  halGetWakeInfo
    1454  halInternalSleep
      12  halInternalWakeEvent
          forceSleepTmrCnt
          wakeupSleepTmrCnt
       4  halSleep
      72  halSleepWithOptions

 
    12 bytes in section .bss
 1 634 bytes in section .text
 
 1 634 bytes of CODE memory
    12 bytes of DATA memory

Errors: none
Warnings: none
