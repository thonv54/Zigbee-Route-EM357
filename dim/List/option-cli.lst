###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        22/Oct/2015  09:33:49
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  E:\Zigbee\EmberZNet5.6.0-GA\app\framework\cli\option-cli.c
#    Command line =  
#        E:\Zigbee\EmberZNet5.6.0-GA\app\framework\cli\option-cli.c -D DIMMER
#        -D NULL_BTL -D CORTEXM3 -D CORTEXM3_EMBER_MICRO -D CORTEXM3_EM357 -D
#        PHY_EM3XX -D
#        "APPLICATION_TOKEN_HEADER=\"app/framework/util/tokens.h\"" -D
#        "ATTRIBUTE_STORAGE_CONFIGURATION=\"app/builder/ZigbeeRoute/ZigbeeRoute_endpoint_config.h\""
#        -D "BOARD_HEADER=\"app\builder\ZigbeeRoute\ZigbeeRoute_board.h\"" -D
#        "CONFIGURATION_HEADER=\"app/framework/util/config.h\"" -D
#        "GENERATED_TOKEN_HEADER=\"app/builder/ZigbeeRoute/ZigbeeRoute_tokens.h\""
#        -D "PLATFORM_HEADER=\"hal/micro/cortexm3/compiler/iar.h\"" -D
#        "ZA_GENERATED_HEADER=\"app/builder/ZigbeeRoute/ZigbeeRoute.h\"" -D
#        "__SOURCEFILE__=\"option-cli.c\"" -lC
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\dim\List\
#        --diag_suppress Pa050 -o
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\dim\Obj\ --debug
#        --endian=little --cpu=Cortex-M3 --no_path_in_file_macros
#        --separate_cluster_for_initialized_variables -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\framework\cli\ -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\ -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\ -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\app\framework\include\
#        -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\app\util\
#        -I E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\stack\
#        -I E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\hal\
#        -I
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\hal\..\
#        -Ohz --use_c++_inline
#    List file    =  
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\dim\List\option-cli.lst
#    Object file  =  
#        E:\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\dim\Obj\option-cli.o
#
###############################################################################

E:\Zigbee\EmberZNet5.6.0-GA\app\framework\cli\option-cli.c
      1          // *****************************************************************************
      2          // * option-cli.c
      3          // *
      4          // * All CLI commands in the 'option' command-tree.
      5          // *
      6          // * Copyright 2012 by Ember Corporation. All rights reserved.              *80*
      7          // *****************************************************************************
      8          
      9          // common include file
     10          #include "app/framework/util/common.h"
     11          
     12          #include "app/framework/util/af-main.h"
     13          #include "app/framework/util/service-discovery.h"
     14          #include "app/util/serial/command-interpreter2.h"
     15          
     16          
     17          // *****************************************************************************
     18          // Forward Declarations
     19          // *****************************************************************************
     20          
     21          void optionPrintRxCommand(void);
     22          void optionRegisterCommand(void);
     23          void optionDiscoverCommand(void);
     24          void optionBindingTablePrintCommand(void);
     25          void optionBindingTableClearCommand(void);
     26          void optionAddressTablePrintCommand(void);
     27          void optionAddressTableSetCommand(void);
     28          void optionEndDeviceBindCommand(void);
     29          void optionApsRetryCommand(void);
     30          void optionApsSecurityCommand(void);
     31          void optionLinkCommand(void);
     32          void optionBindingTableSetCommand(void);
     33          void optionPrintRouteCommand(void);
     34          void optionInstallCodeCommand(void);
     35          void optionDiscoveryTargetCommand(void);
     36          
     37          // *****************************************************************************
     38          // Globals
     39          // *****************************************************************************
     40          
     41          #ifndef EMBER_AF_GENERATE_CLI
     42          
     43          // option print-rx-msgs enable
     44          // option print-rx-msgs disable
     45          static EmberCommandEntry optionPrintRxCommands[] = {
     46            {"enable", optionPrintRxCommand, ""},
     47            {"disable", optionPrintRxCommand, ""},
     48            { NULL }
     49          };
     50          
     51          // option binding-table print
     52          // option binding-table clear
     53          // option binding-table set <index> <cluster> <local ep> <remote ep> <EUI>
     54          static EmberCommandEntry optionBindingCommands[] = {
     55            {"print", optionBindingTablePrintCommand, ""},
     56            {"clear", optionBindingTableClearCommand, ""},
     57            {"set", optionBindingTableSetCommand, "uvuub"},
     58            { NULL }
     59          };
     60          
     61          // option address-table print
     62          // option address-table set <index> <eui64> <node id>
     63          static EmberCommandEntry optionAddressCommands[] = {
     64            {"print", optionAddressTablePrintCommand, ""},
     65            {"set", optionAddressTableSetCommand, "ubv"},
     66            { NULL }
     67          };
     68          
     69          // option security aps [off|on]
     70          static EmberCommandEntry optionApsSecurityCommands[] = {
     71            {"on", optionApsSecurityCommand, ""},
     72            {"off", optionApsSecurityCommand, ""},
     73            { NULL }
     74          };
     75          
     76          static EmberCommandEntry apsRetryCommands[] = {
     77            {"on", optionApsRetryCommand, ""},
     78            {"off", optionApsRetryCommand, ""},
     79            {"def", optionApsRetryCommand, ""},
     80            { NULL }
     81          };
     82          
     83          static EmberCommandEntry optionSecurityCommands[] = {
     84            {"aps", NULL, (PGM_P)optionApsSecurityCommands},
     85            { NULL }
     86          };
     87          
     88          EmberCommandEntry emAfOptionCommands[] = {
     89            {"print-rx-msgs", NULL, (PGM_P)optionPrintRxCommands},
     90            {"register", optionRegisterCommand, ""},
     91          
     92            emberCommandEntryAction("disc", optionDiscoverCommand, "vv",
     93                                    "Perform a match descriptor request"),
     94            emberCommandEntryAction("target", optionDiscoveryTargetCommand, "v",
     95                                    "Set the target address of the CLI discovery"),
     96          
     97            {"binding-table", NULL, (PGM_P)optionBindingCommands},
     98            {"address-table", NULL, (PGM_P)optionAddressCommands},
     99          
    100            {"edb", optionEndDeviceBindCommand, "u"},
    101            {"security", NULL, (PGM_P)optionSecurityCommands},
    102            {"apsretry", NULL, (PGM_P)apsRetryCommands},
    103          
    104          #ifdef DEBUG_PRINT_FOR_ROUTING_TABLE
    105            {"route", optionPrintRouteCommand, ""},
    106          #endif
    107          
    108          #if EMBER_KEY_TABLE_SIZE > 0
    109            {"link",         optionLinkCommand, "ubb"},
    110            {"install-code", optionInstallCodeCommand, "ubb"},
    111          #endif
    112            { NULL }
    113          };
    114          
    115          #endif // EMBER_AF_GENERATE_CLI
    116          

   \                                 In section .data, align 2
    117          static EmberNodeId discoveryTargetNodeId = EMBER_RX_ON_WHEN_IDLE_BROADCAST_ADDRESS;
   \                     discoveryTargetNodeId:
   \   00000000   0xFFFD             DC16 65533
    118          
    119          
    120          // *****************************************************************************
    121          // Functions
    122          // *****************************************************************************
    123          
    124          #if defined(__MCCXAP2B__)
    125            // The XAP is very strict about type conversions with regard to EmberEUI64.
    126            // In order to cast "const int8u*" to "const EmberEUI64"
    127            // we must first cast away the const of the int8u* type and then cast the
    128            // data to a 'const EmberEUI64'.
    129            #define INT8U_TO_EUI64_CAST(x) ((const EmberEUI64)((int8u*)x))
    130          #else
    131            #define INT8U_TO_EUI64_CAST(x) (x)
    132          #endif
    133          

   \                                 In section .text, align 2, keep-with-next
    134          void emAfCliServiceDiscoveryCallback(const EmberAfServiceDiscoveryResult* result)
    135          {
    136          #if defined(EMBER_AF_PRINT_ENABLE) && defined(EMBER_AF_PRINT_APP)
    137            if (!emberAfHaveDiscoveryResponseStatus(result->status)) {
    138              // Do nothing
    139            } else if (result->zdoRequestClusterId == MATCH_DESCRIPTORS_REQUEST) {
    140              const EmberAfEndpointList* epList = (const EmberAfEndpointList*)result->responseData;
    141              emberAfAppPrintln("Match %py from 0x%2X, ep %d",
    142                                "discover",
    143                                result->matchAddress,
    144                                epList->list[0]);
    145            } else if (result->zdoRequestClusterId == NETWORK_ADDRESS_REQUEST) {
    146              emberAfAppPrintln("NWK Address response: 0x%2X", result->matchAddress);
    147            } else if (result->zdoRequestClusterId == IEEE_ADDRESS_REQUEST) {
    148              const int8u* eui64ptr = (int8u*)(result->responseData);
    149              emberAfAppPrint("IEEE Address response: ");
    150              emberAfPrintBigEndianEui64(INT8U_TO_EUI64_CAST(eui64ptr));
    151              emberAfAppPrintln("");
    152            }
    153          
    154            if (result->status != EMBER_AF_BROADCAST_SERVICE_DISCOVERY_RESPONSE_RECEIVED) {
    155              emberAfAppPrintln("Service %py done.",
    156                                "discover");
    157            }
    158          #endif //defined(EMBER_AF_PRINT_ENABLE) && defined(EMBER_AF_PRINT_APP)
    159          }
   \                     emAfCliServiceDiscoveryCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    160          
    161          
    162          
    163          // option print-rx-msgs [enable | disable]

   \                                 In section .text, align 2, keep-with-next
    164          void optionPrintRxCommand(void)
    165          {
    166            if (emberCurrentCommand->name[0] == 'e') {
   \                     optionPrintRxCommand: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable5
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x7800             LDRB     R0,[R0, #+0]
   \   00000008   0x2865             CMP      R0,#+101
   \   0000000A   0xBF0C             ITE      EQ 
    167              emberAfPrintReceivedMessages = TRUE;
   \   0000000C   0x2001             MOVEQ    R0,#+1
    168            } else {
    169              emberAfPrintReceivedMessages = FALSE;
   \   0000000E   0x2000             MOVNE    R0,#+0
   \   00000010   0x....             LDR.N    R1,??DataTable5_1
   \   00000012   0x7008             STRB     R0,[R1, #+0]
    170            }
    171            emberAfAppPrintln("%pd print",
    172                                (emberAfPrintReceivedMessages
    173                                 ? "enable"
    174                                 : "disable"));
    175          }
   \   00000014   0x4770             BX       LR               ;; return
    176          
    177          // option register

   \                                 In section .text, align 2, keep-with-next
    178          void optionRegisterCommand(void)
    179          {
    180            emberAfRegistrationStartCallback();
   \                     optionRegisterCommand: (+1)
   \   00000000   0x.... 0x....      B.W      emberAfRegistrationStartCallback
    181          }
    182          

   \                                 In section .text, align 2, keep-with-next
    183          void optionDiscoveryTargetCommand(void)
    184          {
   \                     optionDiscoveryTargetCommand: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    185            discoveryTargetNodeId = (int16u)emberUnsignedCommandArgument(0);
   \   00000002   0x.... 0x....      BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_6: (+1)
   \   00000006   0x....             LDR.N    R1,??DataTable5_2
   \   00000008   0x8008             STRH     R0,[R1, #+0]
    186          }
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x.... 0x....      B.W      emberUnsignedCommandArgument
    187          
    188          // option disc <profileId> <clusterId>

   \                                 In section .text, align 2, keep-with-next
    189          void optionDiscoverCommand(void)
    190          {
   \                     optionDiscoverCommand: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
    191            EmberAfProfileId profileId = (int16u)emberUnsignedCommandArgument(0);
   \   00000004   0x.... 0x....      BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_5: (+1)
   \   00000008   0x4604             MOV      R4,R0
    192            EmberAfClusterId clusterId = (int16u)emberUnsignedCommandArgument(1);
   \   0000000A   0x2001             MOVS     R0,#+1
   \   0000000C   0x.... 0x....      BL       emberUnsignedCommandArgument
    193            emberAfFindDevicesByProfileAndCluster(discoveryTargetNodeId,
    194                                                  profileId,
    195                                                  clusterId,
    196                                                  EMBER_AF_SERVER_CLUSTER_DISCOVERY,
    197                                                  emAfCliServiceDiscoveryCallback);
   \   00000010   0xB282             UXTH     R2,R0
   \   00000012   0x....             LDR.N    R1,??DataTable5_3
   \   00000014   0x....             LDR.N    R0,??DataTable5_2
   \   00000016   0x8800             LDRH     R0,[R0, #+0]
   \   00000018   0x9100             STR      R1,[SP, #+0]
   \   0000001A   0x2301             MOVS     R3,#+1
   \   0000001C   0xB2A1             UXTH     R1,R4
   \   0000001E   0x.... 0x....      BL       emberAfFindDevicesByProfileAndCluster
    198          }
   \   00000022   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    199          
    200          // option binding-table print

   \                                 In section .text, align 2, keep-with-next
    201          void optionBindingTablePrintCommand(void)
    202          {
    203          #if defined(EMBER_AF_PRINT_ENABLE) && defined(EMBER_AF_PRINT_APP)
    204            int8u i;
    205            EmberBindingTableEntry result;
    206          
    207            PGM_P typeStrings[] = {
    208              "EMPTY",
    209              "UNICA",
    210              "M2ONE",
    211              "MULTI",
    212              "?    ",
    213            };
    214            int8u bindings = 0;
    215          
    216            emberAfAppPrintln("#  type   nwk  loc   rem   clus   node   eui");
    217            for (i = 0; i < emberAfGetBindingTableSize(); i++) {
    218              EmberStatus status = emberGetBinding(i, &result);
    219              if (status == EMBER_SUCCESS) {
    220                if (result.type > EMBER_MULTICAST_BINDING) {
    221                  result.type = 4;  // last entry in the string list above
    222                }
    223                if (result.type != EMBER_UNUSED_BINDING) {
    224                  bindings++;
    225                  emberAfAppPrint("%d: ", i);
    226                  emberAfAppPrint("%p", typeStrings[result.type]);
    227                  emberAfAppPrint("  %d    0x%x  0x%x  0x%2x 0x%2x ",
    228                                  result.networkIndex,
    229                                  result.local,
    230                                  result.remote,
    231                                  result.clusterId,
    232                                  emberGetBindingRemoteNodeId(i));
    233                  emberAfAppDebugExec(emberAfPrintBigEndianEui64(result.identifier));
    234                  emberAfAppPrintln("");
    235                }
    236              } else {
    237                emberAfAppPrintln("0x%x: emberGetBinding Error: %x", status);
    238                emberAfAppFlush();
    239              }
    240              emberAfAppFlush();
    241            }
    242            emberAfAppPrintln("%d of %d bindings used",
    243                              bindings,
    244                              emberAfGetBindingTableSize());
    245          #endif //defined(EMBER_AF_PRINT_ENABLE) && defined(EMBER_AF_PRINT_APP)
    246          }
   \                     optionBindingTablePrintCommand: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    247          
    248          // option binding-table clear

   \                                 In section .text, align 2, keep-with-next
    249          void optionBindingTableClearCommand(void)
    250          {
    251            emberClearBindingTable();
   \                     optionBindingTableClearCommand: (+1)
   \   00000000   0x.... 0x....      B.W      emberClearBindingTable
    252          }
    253          
    254          // option address-table print

   \                                 In section .text, align 2, keep-with-next
    255          void optionAddressTablePrintCommand(void)
    256          {
   \                     optionAddressTablePrintCommand: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
    257            int8u i;
    258            int8u used = 0;
    259            emberAfAppPrintln("#  node   eui");
    260            for (i = 0; i < emberAfGetAddressTableSize(); i++) {
   \   00000002   0x2400             MOVS     R4,#+0
   \   00000004   0xE00B             B.N      ??optionAddressTablePrintCommand_0
    261              EmberNodeId nodeId = emberGetAddressTableRemoteNodeId(i);
    262              if (nodeId != EMBER_TABLE_ENTRY_UNUSED_NODE_ID) {
   \                     ??optionAddressTablePrintCommand_1: (+1)
   \   00000006   0x4620             MOV      R0,R4
   \   00000008   0x.... 0x....      BL       emberGetAddressTableRemoteNodeId
   \   0000000C   0xF64F 0x71FF      MOVW     R1,#+65535
   \   00000010   0x4288             CMP      R0,R1
   \   00000012   0xD003             BEQ.N    ??optionAddressTablePrintCommand_2
    263                EmberEUI64 eui64;
    264                used++;
    265                emberAfAppPrint("%d: 0x%2x ", i, nodeId);
    266                emberGetAddressTableRemoteEui64(i, eui64);
   \   00000014   0xA900             ADD      R1,SP,#+0
   \   00000016   0x4620             MOV      R0,R4
   \   00000018   0x.... 0x....      BL       emberGetAddressTableRemoteEui64
    267                emberAfAppDebugExec(emberAfPrintBigEndianEui64(eui64));
    268                emberAfAppPrintln("");
    269                emberAfAppFlush();
    270              }
    271            }
   \                     ??optionAddressTablePrintCommand_2: (+1)
   \   0000001C   0x1C64             ADDS     R4,R4,#+1
   \                     ??optionAddressTablePrintCommand_0: (+1)
   \   0000001E   0x.... 0x....      BL       emberAfGetAddressTableSize
   \   00000022   0xB2E4             UXTB     R4,R4
   \   00000024   0x4284             CMP      R4,R0
   \   00000026   0xD3EE             BCC.N    ??optionAddressTablePrintCommand_1
    272            emberAfAppPrintln("%d of %d entries used.",
    273                              used,
    274                              emberAfGetAddressTableSize());
    275          }
   \   00000028   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    276          
    277          // option address-table set <index> <eui64> <node id>

   \                                 In section .text, align 2, keep-with-next
    278          void optionAddressTableSetCommand(void)
    279          {
   \                     optionAddressTableSetCommand: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    280            EmberEUI64 eui64;
    281            EmberStatus status;
    282            int8u index = (int8u)emberUnsignedCommandArgument(0);
   \   00000004   0x.... 0x....      BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_4: (+1)
   \   00000008   0x4604             MOV      R4,R0
    283            EmberNodeId nodeId = (EmberNodeId)emberUnsignedCommandArgument(2);
   \   0000000A   0x2002             MOVS     R0,#+2
   \   0000000C   0x.... 0x....      BL       emberUnsignedCommandArgument
   \   00000010   0x4605             MOV      R5,R0
    284            emberCopyBigEndianEui64Argument(1, eui64);
   \   00000012   0xA900             ADD      R1,SP,#+0
   \   00000014   0x.... 0x....      BL       ??Subroutine1_0
    285            status = emberAfSetAddressTableEntry(index, eui64, nodeId);
   \                     ??CrossCallReturnLabel_7: (+1)
   \   00000018   0xB2AA             UXTH     R2,R5
   \   0000001A   0xA900             ADD      R1,SP,#+0
   \   0000001C   0xB2E0             UXTB     R0,R4
   \   0000001E   0x.... 0x....      BL       emberAfSetAddressTableEntry
    286            UNUSED_VAR(status);
    287            emberAfAppPrintln("set address %d: 0x%x", index, status);
    288          }
   \   00000022   0xBD37             POP      {R0-R2,R4,R5,PC}  ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \   00000000   0xA901             ADD      R1,SP,#+4
   \                     ??Subroutine1_0: (+1)
   \   00000002   0x2001             MOVS     R0,#+1
   \   00000004   0x.... 0x....      B.W      emberCopyBigEndianEui64Argument
    289          
    290          // option edb <endpoint>

   \                                 In section .text, align 2, keep-with-next
    291          void optionEndDeviceBindCommand(void)
    292          {
   \                     optionEndDeviceBindCommand: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    293            int8u endpoint = (int8u)emberUnsignedCommandArgument(0);
   \   00000002   0x.... 0x....      BL       ?Subroutine0
    294            emberAfSendEndDeviceBind(endpoint);
   \                     ??CrossCallReturnLabel_3: (+1)
   \   00000006   0xE8BD 0x4002      POP      {R1,LR}
   \   0000000A   0xB2C0             UXTB     R0,R0
   \   0000000C   0x.... 0x....      B.W      emberAfSendEndDeviceBind
    295          }
    296          

   \                                 In section .text, align 2, keep-with-next
    297          void optionApsRetryCommand(void)
    298          {
   \                     optionApsRetryCommand: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable5
   \   00000002   0x....             LDR.N    R1,??DataTable5_4
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x7840             LDRB     R0,[R0, #+1]
   \   0000000A   0x2865             CMP      R0,#+101
   \   0000000C   0xBF08             IT       EQ 
    299            if ( emberCurrentCommand->name[1] == 'e' ) {
    300              emberAfApsRetryOverride = EMBER_AF_RETRY_OVERRIDE_NONE;
   \   0000000E   0x2000             MOVEQ    R0,#+0
   \   00000010   0xD006             BEQ.N    ??optionApsRetryCommand_0
    301            } else if ( emberCurrentCommand->name[1] == 'n' ) {
   \   00000012   0x286E             CMP      R0,#+110
   \   00000014   0xBF08             IT       EQ 
    302              emberAfApsRetryOverride = EMBER_AF_RETRY_OVERRIDE_SET;
   \   00000016   0x2001             MOVEQ    R0,#+1
   \   00000018   0xD002             BEQ.N    ??optionApsRetryCommand_0
    303            } else if ( emberCurrentCommand->name[1] == 'f' ) {
   \   0000001A   0x2866             CMP      R0,#+102
   \   0000001C   0xD101             BNE.N    ??optionApsRetryCommand_1
    304              emberAfApsRetryOverride = EMBER_AF_RETRY_OVERRIDE_UNSET;
   \   0000001E   0x2002             MOVS     R0,#+2
   \                     ??optionApsRetryCommand_0: (+1)
   \   00000020   0x7008             STRB     R0,[R1, #+0]
    305            }
    306          }
   \                     ??optionApsRetryCommand_1: (+1)
   \   00000022   0x4770             BX       LR               ;; return
    307          
    308          // option security aps <off | on>

   \                                 In section .text, align 2, keep-with-next
    309          void optionApsSecurityCommand(void)
    310          {
    311            emAfTestApsSecurityOverride = (emberCurrentCommand->name[1] == 'f'
    312                                          ? APS_TEST_SECURITY_DISABLED
    313                                          : APS_TEST_SECURITY_ENABLED);
   \                     optionApsSecurityCommand: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable5
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x7840             LDRB     R0,[R0, #+1]
   \   00000008   0x2866             CMP      R0,#+102
   \   0000000A   0xBF0C             ITE      EQ 
   \   0000000C   0x2001             MOVEQ    R0,#+1
   \   0000000E   0x2000             MOVNE    R0,#+0
   \   00000010   0x....             LDR.N    R1,??DataTable5_5
   \   00000012   0x7008             STRB     R0,[R1, #+0]
    314          }
   \   00000014   0x4770             BX       LR               ;; return
    315          
    316          
    317          // option link <index> <eui64 in big endian format> <key in big endian format>

   \                                 In section .text, align 2, keep-with-next
    318          void optionLinkCommand(void)
    319          {
   \                     optionLinkCommand: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB088             SUB      SP,SP,#+32
    320            EmberEUI64 partnerEUI64;
    321            EmberKeyData newKey;
    322            EmberStatus status;
    323            //int8u i;
    324            int8u index = (int8u)emberUnsignedCommandArgument(0);
   \   00000004   0x.... 0x....      BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_2: (+1)
   \   00000008   0x4604             MOV      R4,R0
    325            emberCopyBigEndianEui64Argument(1, partnerEUI64);
   \   0000000A   0x.... 0x....      BL       ?Subroutine1
    326            emberCopyKeyArgument(2, &newKey);
   \                     ??CrossCallReturnLabel_9: (+1)
   \   0000000E   0x2301             MOVS     R3,#+1
   \   00000010   0x2210             MOVS     R2,#+16
   \   00000012   0xA903             ADD      R1,SP,#+12
   \   00000014   0x2002             MOVS     R0,#+2
   \   00000016   0x.... 0x....      BL       emberCopyStringArgument
    327            status = emberSetKeyTableEntry(index,
    328                                           partnerEUI64,
    329                                           TRUE,
    330                                           &newKey);
   \   0000001A   0xA803             ADD      R0,SP,#+12
   \   0000001C   0x9000             STR      R0,[SP, #+0]
   \   0000001E   0x2301             MOVS     R3,#+1
   \   00000020   0xAA01             ADD      R2,SP,#+4
   \   00000022   0xB2E1             UXTB     R1,R4
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x.... 0x....      BL       emSetKeyTableEntry
    331            UNUSED_VAR(status);
    332            emberAfAppDebugExec(emAfPrintStatus("add link key", status));
    333            emberAfAppPrintln("");
    334            emberAfCoreFlush();
    335          }
   \   0000002A   0xB008             ADD      SP,SP,#+32
   \   0000002C   0xBD10             POP      {R4,PC}          ;; return
    336          
    337          // Reverse the bits in a byte.
    338          // http://graphics.stanford.edu/~seander/bithacks.html#ReverseByteWith32Bits

   \                                 In section .text, align 2, keep-with-next
    339          static int8u reverse(int8u b)
    340          {
    341            return ((b * 0x0802UL & 0x22110UL) | (b * 0x8020UL & 0x88440UL)) * 0x10101UL >> 16;
   \                     reverse: (+1)
   \   00000000   0xF640 0x0102      MOVW     R1,#+2050
   \   00000004   0x4341             MULS     R1,R1,R0
   \   00000006   0x....             LDR.N    R2,??DataTable5_6  ;; 0x22110
   \   00000008   0x4011             ANDS     R1,R2,R1
   \   0000000A   0xF248 0x0220      MOVW     R2,#+32800
   \   0000000E   0x4350             MULS     R0,R2,R0
   \   00000010   0x....             LDR.N    R2,??DataTable5_7  ;; 0x88440
   \   00000012   0x4010             ANDS     R0,R2,R0
   \   00000014   0x4308             ORRS     R0,R0,R1
   \   00000016   0x....             LDR.N    R1,??DataTable5_8  ;; 0x10101
   \   00000018   0x4348             MULS     R0,R1,R0
   \   0000001A   0x0200             LSLS     R0,R0,#+8
   \   0000001C   0x0E00             LSRS     R0,R0,#+24
   \   0000001E   0x4770             BX       LR               ;; return
    342          }
    343          
    344          // option install-code <index> <eui64> <install code>

   \                                 In section .text, align 2, keep-with-next
    345          void optionInstallCodeCommand(void)
    346          {
   \                     optionInstallCodeCommand: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB08C             SUB      SP,SP,#+48
    347          #if !defined(EMBER_AF_HAS_SECURITY_PROFILE_NONE)
    348            EmberEUI64 eui64;
    349            EmberKeyData key;
    350            EmberStatus status;
    351            int16u crc = 0xFFFF;
   \   00000004   0xF64F 0x75FF      MOVW     R5,#+65535
    352            int8u code[16 + 2]; // 6, 8, 12, or 16 bytes plus two-byte CRC
    353            int8u i, length;
    354          
    355            length = emberCopyStringArgument(2, code, sizeof(code), FALSE);
   \   00000008   0x2300             MOVS     R3,#+0
   \   0000000A   0x2212             MOVS     R2,#+18
   \   0000000C   0xA903             ADD      R1,SP,#+12
   \   0000000E   0x2002             MOVS     R0,#+2
   \   00000010   0x.... 0x....      BL       emberCopyStringArgument
   \   00000014   0x4604             MOV      R4,R0
    356            if (length != 8 && length != 10 && length != 14 && length != 18) {
   \   00000016   0x2C08             CMP      R4,#+8
   \   00000018   0xBF18             IT       NE 
   \   0000001A   0x2C0A             CMPNE    R4,#+10
   \   0000001C   0xD003             BEQ.N    ??optionInstallCodeCommand_0
   \   0000001E   0x2C0E             CMP      R4,#+14
   \   00000020   0xBF18             IT       NE 
   \   00000022   0x2C12             CMPNE    R4,#+18
   \   00000024   0xD137             BNE.N    ??optionInstallCodeCommand_1
    357              emberAfAppPrintln("ERR: Install code must be 8, 10, 14, or 18 bytes in length");
    358              return;
    359            }
    360          
    361            // Compute the CRC and verify that it matches.  The bit reversals, byte swap,
    362            // and ones' complement are due to differences between halCommonCrc16 and the
    363            // Smart Energy version.
    364            for (i = 0; i < length - 2; i++) {
   \                     ??optionInstallCodeCommand_0: (+1)
   \   00000026   0x2600             MOVS     R6,#+0
   \   00000028   0xE008             B.N      ??optionInstallCodeCommand_2
    365              crc = halCommonCrc16(reverse(code[i]), crc);
   \                     ??optionInstallCodeCommand_3: (+1)
   \   0000002A   0xA903             ADD      R1,SP,#+12
   \   0000002C   0x5C70             LDRB     R0,[R6, R1]
   \   0000002E   0x.... 0x....      BL       reverse
   \   00000032   0x4629             MOV      R1,R5
   \   00000034   0x.... 0x....      BL       halCommonCrc16
   \   00000038   0x4605             MOV      R5,R0
    366            }
   \   0000003A   0x1C76             ADDS     R6,R6,#+1
   \                     ??optionInstallCodeCommand_2: (+1)
   \   0000003C   0xB2F6             UXTB     R6,R6
   \   0000003E   0x1EA1             SUBS     R1,R4,#+2
   \   00000040   0x428E             CMP      R6,R1
   \   00000042   0xDBF2             BLT.N    ??optionInstallCodeCommand_3
    367            crc = ~HIGH_LOW_TO_INT(reverse(LOW_BYTE(crc)), reverse(HIGH_BYTE(crc)));
   \   00000044   0xB2E8             UXTB     R0,R5
   \   00000046   0x.... 0x....      BL       reverse
   \   0000004A   0x0206             LSLS     R6,R0,#+8
   \   0000004C   0x0A28             LSRS     R0,R5,#+8
   \   0000004E   0x.... 0x....      BL       reverse
   \   00000052   0x1980             ADDS     R0,R0,R6
   \   00000054   0x43C5             MVNS     R5,R0
    368            if (code[length - 2] != LOW_BYTE(crc)
    369                || code[length - 1] != HIGH_BYTE(crc)) {
   \   00000056   0xA803             ADD      R0,SP,#+12
   \   00000058   0x1820             ADDS     R0,R4,R0
   \   0000005A   0xB2EA             UXTB     R2,R5
   \   0000005C   0xF810 0x1C02      LDRB     R1,[R0, #-2]
   \   00000060   0x4291             CMP      R1,R2
   \   00000062   0xBF02             ITTT     EQ 
   \   00000064   0xF810 0x0C01      LDRBEQ   R0,[R0, #-1]
   \   00000068   0x042D             LSLEQ    R5,R5,#+16
   \   0000006A   0xEBB0 0x6F15      CMPEQ    R0,R5, LSR #+24
   \   0000006E   0xD112             BNE.N    ??optionInstallCodeCommand_1
    370              emberAfAppPrintln("ERR: Calculated CRC 0x%2x does not match", crc);
    371              return;
    372            }
    373          
    374            // Compute the key from the install code and CRC.
    375            status = emberAesHashSimple(length, code, emberKeyContents(&key));
    376            if (status != EMBER_SUCCESS) {
   \   00000070   0xAA08             ADD      R2,SP,#+32
   \   00000072   0xA903             ADD      R1,SP,#+12
   \   00000074   0x4620             MOV      R0,R4
   \   00000076   0x.... 0x....      BL       emberAesHashSimple
   \   0000007A   0xB960             CBNZ.N   R0,??optionInstallCodeCommand_1
    377              emberAfAppPrintln("ERR: AES-MMO hash failed: 0x%x", status);
    378              return;
    379            }
    380          
    381            // Add it to the table.
    382            emberCopyBigEndianEui64Argument(1, eui64);
   \   0000007C   0x.... 0x....      BL       ?Subroutine1
    383            status = emberSetKeyTableEntry((int8u)emberUnsignedCommandArgument(0), // index
    384                                           eui64,
    385                                           TRUE,                                   // link key
    386                                          &key);
   \                     ??CrossCallReturnLabel_8: (+1)
   \   00000080   0x.... 0x....      BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_1: (+1)
   \   00000084   0x4601             MOV      R1,R0
   \   00000086   0xA808             ADD      R0,SP,#+32
   \   00000088   0x9000             STR      R0,[SP, #+0]
   \   0000008A   0x2301             MOVS     R3,#+1
   \   0000008C   0xAA01             ADD      R2,SP,#+4
   \   0000008E   0xB2C9             UXTB     R1,R1
   \   00000090   0x2000             MOVS     R0,#+0
   \   00000092   0x.... 0x....      BL       emSetKeyTableEntry
    387            emberAfAppDebugExec(emAfPrintStatus("add link key", status));
    388            emberAfAppPrintln("");
    389            emberAfAppFlush();
    390          #else
    391            emberAfAppPrintln("Security Core Library must be included to use this command.");
    392          #endif
    393          }
   \                     ??optionInstallCodeCommand_1: (+1)
   \   00000096   0xB00C             ADD      SP,SP,#+48
   \   00000098   0xBD70             POP      {R4-R6,PC}       ;; return
    394          
    395          
    396          // option binding-table set <index> <cluster> <local ep> <remote ep> <EUI>

   \                                 In section .text, align 2, keep-with-next
    397          void optionBindingTableSetCommand(void)
    398          {
   \                     optionBindingTableSetCommand: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
    399            EmberBindingTableEntry entry;
    400            int8u index = (int8u)emberUnsignedCommandArgument(0);
   \   00000004   0x.... 0x....      BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_0: (+1)
   \   00000008   0x4604             MOV      R4,R0
    401            int8u endpoint = (int8u)emberUnsignedCommandArgument(2);
   \   0000000A   0x2002             MOVS     R0,#+2
   \   0000000C   0x.... 0x....      BL       emberUnsignedCommandArgument
   \   00000010   0x4605             MOV      R5,R0
    402            EmberStatus status = emberAfPushEndpointNetworkIndex(endpoint);
    403            if (status == EMBER_SUCCESS) {
   \   00000012   0xB2C0             UXTB     R0,R0
   \   00000014   0x.... 0x....      BL       emberAfPushEndpointNetworkIndex
   \   00000018   0xB9C0             CBNZ.N   R0,??optionBindingTableSetCommand_0
    404              entry.type = EMBER_UNICAST_BINDING;
   \   0000001A   0x2001             MOVS     R0,#+1
   \   0000001C   0xF88D 0x0000      STRB     R0,[SP, #+0]
    405              entry.clusterId = (EmberAfClusterId)emberUnsignedCommandArgument(1);
   \   00000020   0x.... 0x....      BL       emberUnsignedCommandArgument
   \   00000024   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    406              entry.local = endpoint;
   \   00000028   0xF88D 0x5001      STRB     R5,[SP, #+1]
    407              entry.remote = (int8u)emberUnsignedCommandArgument(3);
   \   0000002C   0x2003             MOVS     R0,#+3
   \   0000002E   0x.... 0x....      BL       emberUnsignedCommandArgument
   \   00000032   0xF88D 0x0004      STRB     R0,[SP, #+4]
    408              emberCopyBigEndianEui64Argument(4, entry.identifier);
   \   00000036   0xF10D 0x0105      ADD      R1,SP,#+5
   \   0000003A   0x2004             MOVS     R0,#+4
   \   0000003C   0x.... 0x....      BL       emberCopyBigEndianEui64Argument
    409              status = emberSetBinding(index, &entry);
   \   00000040   0xA900             ADD      R1,SP,#+0
   \   00000042   0xB2E0             UXTB     R0,R4
   \   00000044   0x.... 0x....      BL       emberSetBinding
    410              emberAfPopNetworkIndex();
   \   00000048   0x.... 0x....      BL       emberAfPopNetworkIndex
    411            }
    412            emberAfAppPrintln("set bind %d: 0x%x", index, status);
    413          }
   \                     ??optionBindingTableSetCommand_0: (+1)
   \   0000004C   0xB005             ADD      SP,SP,#+20
   \   0000004E   0xBD30             POP      {R4,R5,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x........         DC32     emberCurrentCommand

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x........         DC32     emberAfPrintReceivedMessages

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x........         DC32     discoveryTargetNodeId

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x........         DC32     emAfCliServiceDiscoveryCallback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x........         DC32     emberAfApsRetryOverride

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x........         DC32     emAfTestApsSecurityOverride

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   0x00022110         DC32     0x22110

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_7:
   \   00000000   0x00088440         DC32     0x88440

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_8:
   \   00000000   0x00010101         DC32     0x10101
    414          
    415          
    416          #ifdef DEBUG_PRINT_FOR_ROUTING_TABLE
    417          
    418          void optionPrintRouteCommand(void)
    419          {
    420            PGM_P statusText[] = {
    421              "active",
    422              "discov",
    423              "??    ",
    424              "unused",
    425            };
    426          
    427            PGM_P concentratorText[] = {
    428              "- ",
    429              "lo",
    430              "hi",
    431            };
    432          
    433            PGM_P routeRecordStateText[] = {
    434              "none",
    435              "sent",
    436              "need",
    437            };
    438            int8u i;
    439          
    440            emberAfAppPrintln("Routing Table\n-----------------");
    441          
    442            for (i = 0; i < EMBER_ROUTE_TABLE_SIZE; i++) {
    443              EmberRouteTableEntry entry;
    444              emberGetRouteTableEntry(i, &entry);
    445              emberAfAppPrintln("%d: dest:0x%2X next:0x%2X status:%p age:%d conc:%p rr-state:%p",
    446                                i,
    447                                entry.destination,
    448                                entry.nextHop,
    449                                statusText[entry.status],
    450                                entry.age,
    451                                concentratorText[entry.concentratorType],
    452                                routeRecordStateText[entry.routeRecordState]);
    453              emberAfAppFlush();
    454            }
    455          }
    456          #endif //  DEBUG_PRINT_FOR_ROUTING_TABLE

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   emAfCliServiceDiscoveryCallback
      16   optionAddressTablePrintCommand
        16   -> emberAfGetAddressTableSize
        16   -> emberGetAddressTableRemoteEui64
        16   -> emberGetAddressTableRemoteNodeId
      24   optionAddressTableSetCommand
        24   -> emberAfSetAddressTableEntry
        24   -> emberCopyBigEndianEui64Argument
        24   -> emberUnsignedCommandArgument
       0   optionApsRetryCommand
       0   optionApsSecurityCommand
       0   optionBindingTableClearCommand
         0   -> emberClearBindingTable
       0   optionBindingTablePrintCommand
      32   optionBindingTableSetCommand
        32   -> emberAfPopNetworkIndex
        32   -> emberAfPushEndpointNetworkIndex
        32   -> emberCopyBigEndianEui64Argument
        32   -> emberSetBinding
        32   -> emberUnsignedCommandArgument
      16   optionDiscoverCommand
        16   -> emberAfFindDevicesByProfileAndCluster
        16   -> emberUnsignedCommandArgument
       8   optionDiscoveryTargetCommand
         8   -> emberUnsignedCommandArgument
       8   optionEndDeviceBindCommand
         0   -> emberAfSendEndDeviceBind
         8   -> emberUnsignedCommandArgument
      64   optionInstallCodeCommand
        64   -> emSetKeyTableEntry
        64   -> emberAesHashSimple
        64   -> emberCopyBigEndianEui64Argument
        64   -> emberCopyStringArgument
        64   -> emberUnsignedCommandArgument
        64   -> halCommonCrc16
        64   -> reverse
      40   optionLinkCommand
        40   -> emSetKeyTableEntry
        40   -> emberCopyBigEndianEui64Argument
        40   -> emberCopyStringArgument
        40   -> emberUnsignedCommandArgument
       0   optionPrintRxCommand
       0   optionRegisterCommand
         0   -> emberAfRegistrationStartCallback
       0   reverse


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
       4  ??DataTable5_7
       4  ??DataTable5_8
       6  ?Subroutine0
       8  ?Subroutine1
       2  discoveryTargetNodeId
       2  emAfCliServiceDiscoveryCallback
      42  optionAddressTablePrintCommand
      36  optionAddressTableSetCommand
      36  optionApsRetryCommand
      22  optionApsSecurityCommand
       4  optionBindingTableClearCommand
       2  optionBindingTablePrintCommand
      80  optionBindingTableSetCommand
      36  optionDiscoverCommand
      12  optionDiscoveryTargetCommand
      16  optionEndDeviceBindCommand
     154  optionInstallCodeCommand
      46  optionLinkCommand
      22  optionPrintRxCommand
       4  optionRegisterCommand
      32  reverse

 
   2 bytes in section .data
 596 bytes in section .text
 
 596 bytes of CODE memory
   2 bytes of DATA memory

Errors: none
Warnings: none
