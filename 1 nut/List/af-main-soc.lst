###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        18/Apr/2016  13:01:11
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\Work
#        Space\Silabs\Zigbee\EmberZNet5.6.0-GA\app\framework\util\af-main-soc.c
#    Command line =  
#        "D:\Work
#        Space\Silabs\Zigbee\EmberZNet5.6.0-GA\app\framework\util\af-main-soc.c"
#        -D SWITCH_1_BUTTON -D NULL_BTL -D CORTEXM3 -D CORTEXM3_EMBER_MICRO -D
#        CORTEXM3_EM357 -D PHY_EM3XX -D
#        "APPLICATION_TOKEN_HEADER=\"app/framework/util/tokens.h\"" -D
#        "ATTRIBUTE_STORAGE_CONFIGURATION=\"app/builder/ZigbeeRoute/ZigbeeRoute_endpoint_config.h\""
#        -D "BOARD_HEADER=\"app\builder\ZigbeeRoute\ZigbeeRoute_board.h\"" -D
#        "CONFIGURATION_HEADER=\"app/framework/util/config.h\"" -D
#        "GENERATED_TOKEN_HEADER=\"app/builder/ZigbeeRoute/ZigbeeRoute_tokens.h\""
#        -D "PLATFORM_HEADER=\"hal/micro/cortexm3/compiler/iar.h\"" -D
#        "ZA_GENERATED_HEADER=\"app/builder/ZigbeeRoute/ZigbeeRoute.h\"" -D
#        "__SOURCEFILE__=\"af-main-soc.c\"" -lC "D:\Work
#        Space\Silabs\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\1
#        nut\List\" --diag_suppress Pa050 -o "D:\Work
#        Space\Silabs\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\1
#        nut\Obj\" --debug --endian=little --cpu=Cortex-M3
#        --no_path_in_file_macros --separate_cluster_for_initialized_variables
#        -e --fpu=None --dlib_config "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        "D:\Work Space\Silabs\Zigbee\EmberZNet5.6.0-GA\app\framework\util\" -I
#        "D:\Work
#        Space\Silabs\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\" -I
#        "D:\Work
#        Space\Silabs\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\"
#        -I "D:\Work
#        Space\Silabs\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\app\framework\include\"
#        -I "D:\Work
#        Space\Silabs\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\app\util\"
#        -I "D:\Work
#        Space\Silabs\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\stack\"
#        -I "D:\Work
#        Space\Silabs\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\hal\"
#        -I "D:\Work
#        Space\Silabs\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\hal\..\"
#        -Ohz --use_c++_inline
#    List file    =  
#        D:\Work
#        Space\Silabs\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\1
#        nut\List\af-main-soc.lst
#    Object file  =  
#        D:\Work
#        Space\Silabs\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\1
#        nut\Obj\af-main-soc.o
#
###############################################################################

D:\Work Space\Silabs\Zigbee\EmberZNet5.6.0-GA\app\framework\util\af-main-soc.c
      1          // *******************************************************************
      2          // * af-main-soc.c
      3          // *
      4          // *
      5          // * Copyright 2007 by Ember Corporation. All rights reserved.              *80*
      6          // *******************************************************************
      7          
      8          #include "app/framework/include/af.h"
      9          #include "app/framework/util/attribute-storage.h"
     10          #include "app/util/serial/command-interpreter2.h"
     11          
     12          // ZDO
     13          #include "app/util/zigbee-framework/zigbee-device-common.h"
     14          #include "app/util/zigbee-framework/zigbee-device-library.h"
     15          
     16          #include "app/util/counters/counters.h"
     17          #include "app/util/security/security.h"
     18          #include "app/util/common/form-and-join.h"
     19          
     20          #include "app/framework/util/service-discovery.h"
     21          #include "app/framework/util/af-main.h"
     22          #include "app/framework/util/util.h"
     23          
     24          #include "app/framework/security/af-security.h"
     25          
     26          #include "app/framework/plugin/partner-link-key-exchange/partner-link-key-exchange.h"
     27          #include "app/framework/plugin/fragmentation/fragmentation.h"
     28          
     29          #if defined(__ICCARM__)
     30            #define EM35X_SERIES
     31          #endif
     32          
     33          #if defined(EM35X_SERIES)
     34          #include "hal/micro/cortexm3/diagnostic.h"
     35          #endif
     36          
     37          // *****************************************************************************
     38          // Globals
     39          
     40          // APP_SERIAL is set in the project files

   \                                 In section .data, align 1
     41          int8u serialPort = APP_SERIAL;
   \                     serialPort:
   \   00000000   0x01               DC8 1
     42          
     43          #if (EMBER_AF_BAUD_RATE == 300)
     44            #define BAUD_RATE BAUD_300
     45          #elif (EMBER_AF_BAUD_RATE == 600)
     46            #define BAUD_RATE BAUD_600
     47          #elif (EMBER_AF_BAUD_RATE == 900)
     48            #define BAUD_RATE BAUD_900
     49          #elif (EMBER_AF_BAUD_RATE == 1200)
     50            #define BAUD_RATE BAUD_1200
     51          #elif (EMBER_AF_BAUD_RATE == 2400)
     52            #define BAUD_RATE BAUD_2400
     53          #elif (EMBER_AF_BAUD_RATE == 4800)
     54            #define BAUD_RATE BAUD_4800
     55          #elif (EMBER_AF_BAUD_RATE == 9600)
     56            #define BAUD_RATE BAUD_9600
     57          #elif (EMBER_AF_BAUD_RATE == 14400)
     58            #define BAUD_RATE BAUD_14400
     59          #elif (EMBER_AF_BAUD_RATE == 19200)
     60            #define BAUD_RATE BAUD_19200
     61          #elif (EMBER_AF_BAUD_RATE == 28800)
     62            #define BAUD_RATE BAUD_28800
     63          #elif (EMBER_AF_BAUD_RATE == 38400)
     64            #define BAUD_RATE BAUD_38400
     65          #elif (EMBER_AF_BAUD_RATE == 50000)
     66            #define BAUD_RATE BAUD_50000
     67          #elif (EMBER_AF_BAUD_RATE == 57600)
     68            #define BAUD_RATE BAUD_57600
     69          #elif (EMBER_AF_BAUD_RATE == 76800)
     70            #define BAUD_RATE BAUD_76800
     71          #elif (EMBER_AF_BAUD_RATE == 100000)
     72            #define BAUD_RATE BAUD_100000
     73          #elif (EMBER_AF_BAUD_RATE == 115200)
     74            #define BAUD_RATE BAUD_115200
     75          #elif (EMBER_AF_BAUD_RATE == 230400)
     76            #define BAUD_RATE BAUD_230400
     77          #elif (EMBER_AF_BAUD_RATE == 460800)
     78            #define BAUD_RATE BAUD_460800
     79          #else
     80            #error EMBER_AF_BAUD_RATE set to an invalid baud rate
     81          #endif
     82          
     83          #if defined(MAIN_FUNCTION_HAS_STANDARD_ARGUMENTS)
     84            #define APP_FRAMEWORK_MAIN_ARGUMENTS argc, argv
     85          #else
     86            #define APP_FRAMEWORK_MAIN_ARGUMENTS 0, NULL
     87          #endif
     88          
     89          // *****************************************************************************
     90          // Forward declarations.
     91          
     92          #if defined(EMBER_TEST) && defined(EMBER_AF_PLUGIN_OTA_STORAGE_SIMPLE_EEPROM)
     93            void emAfSetupFakeEepromForSimulation(void);
     94            #define SETUP_FAKE_EEPROM_FOR_SIMULATION() emAfSetupFakeEepromForSimulation()
     95          #else
     96            #define SETUP_FAKE_EEPROM_FOR_SIMULATION()
     97          #endif
     98          
     99          #if defined(ZA_CLI_MINIMAL) || defined(ZA_CLI_FULL)
    100            #define COMMAND_READER_INIT() emberCommandReaderInit()
    101          #else
    102            #define COMMAND_READER_INIT()
    103          #endif
    104          
    105          // *****************************************************************************
    106          // Functions
    107          

   \                                 In section .text, align 2, keep-with-next
    108          int emberAfMain(MAIN_FUNCTION_PARAMETERS)
    109          {
   \                     emberAfMain: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    110            EmberStatus status;
    111          
    112            SETUP_FAKE_EEPROM_FOR_SIMULATION();
    113          
    114            INTERRUPTS_ON();  // Safe to enable interrupts at this point
   \   00000002   0x.... 0x....      BL       _enableBasePri
    115            {
    116              int returnCode;
    117              if (emberAfMainStartCallback(&returnCode, APP_FRAMEWORK_MAIN_ARGUMENTS)) {
   \   00000006   0x2200             MOVS     R2,#+0
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0xA800             ADD      R0,SP,#+0
   \   0000000C   0x.... 0x....      BL       emberAfMainStartCallback
   \   00000010   0xB108             CBZ.N    R0,??emberAfMain_0
    118                return returnCode;
   \   00000012   0x9800             LDR      R0,[SP, #+0]
   \   00000014   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    119              }
    120            }
    121          
    122          
    123            // Initialize the Ember Stack.
    124            status = emberInit();
   \                     ??emberAfMain_0: (+1)
   \   00000016   0x.... 0x....      BL       emberInit
   \   0000001A   0x4604             MOV      R4,R0
    125          
    126            emberSerialInit(APP_SERIAL, BAUD_RATE, PARITY_NONE, 1);
   \   0000001C   0x2301             MOVS     R3,#+1
   \   0000001E   0x2200             MOVS     R2,#+0
   \   00000020   0x2108             MOVS     R1,#+8
   \   00000022   0x2001             MOVS     R0,#+1
   \   00000024   0x.... 0x....      BL       emberSerialInit
    127          
    128            emberAfCorePrintln("Reset info: 0x%x (%p)",
    129                               halGetResetInfo(),
    130                               halGetResetString());
    131          
    132          #if defined(EM35X_SERIES)
    133            emberAfCorePrintln("Extended Reset info: 0x%2X (%p)",
    134                               halGetExtendedResetInfo(),
    135                               halGetExtendedResetString());
    136          
    137            if (halResetWasCrash()) {
   \   00000028   0xF240 0x75A1      MOVW     R5,#+1953
   \   0000002C   0x.... 0x....      BL       halGetResetInfo
   \   00000030   0xFA25 0xF000      LSR      R0,R5,R0
   \   00000034   0x07C0             LSLS     R0,R0,#+31
   \   00000036   0xD50A             BPL.N    ??emberAfMain_1
    138              halPrintCrashSummary(serialPort);
   \   00000038   0x.... 0x....      LDR.W    R5,??DataTable9
   \   0000003C   0x7828             LDRB     R0,[R5, #+0]
   \   0000003E   0x.... 0x....      BL       halPrintCrashSummary
    139              halPrintCrashDetails(serialPort);
   \   00000042   0x7828             LDRB     R0,[R5, #+0]
   \   00000044   0x.... 0x....      BL       halPrintCrashDetails
    140              halPrintCrashData(serialPort);
   \   00000048   0x7828             LDRB     R0,[R5, #+0]
   \   0000004A   0x.... 0x....      BL       halPrintCrashData
    141            }
    142          
    143          #endif
    144          
    145          
    146            if (status != EMBER_SUCCESS) {
   \                     ??emberAfMain_1: (+1)
   \   0000004E   0xB124             CBZ.N    R4,??emberAfMain_2
    147              emberAfCorePrintln("%pemberInit 0x%x", "ERROR: ", status);
    148          
    149              // The app can choose what to do here.  If the app is running
    150              // another device then it could stay running and report the
    151              // error visually for example. This app asserts.
    152              assert(FALSE);
   \   00000050   0x.... 0x....      ADR.W    R0,`?<Constant "af-main-soc.c">`
   \   00000054   0x2198             MOVS     R1,#+152
   \   00000056   0x.... 0x....      BL       halInternalAssertFailed
    153            } else {
    154              emberAfDebugPrintln("init pass");
    155            }
    156          
    157            // This will initialize the stack of networks maintained by the framework,
    158            // including setting the default network.
    159            emAfInitializeNetworkIndexStack();
   \                     ??emberAfMain_2: (+1)
   \   0000005A   0x.... 0x....      BL       emAfInitializeNetworkIndexStack
    160          
    161            // Initialize messageSentCallbacks table
    162            emAfInitializeMessageSentCallbackArray();
   \   0000005E   0x.... 0x....      BL       emAfInitializeMessageSentCallbackArray
    163          
    164            emberAfEndpointConfigure();
   \   00000062   0x.... 0x....      BL       emberAfEndpointConfigure
    165          
    166          
    167            emberAfInit();
   \   00000066   0x.... 0x....      BL       emberAfInit
    168          
    169            // The address cache needs to be initialized and used with the source routing
    170            // code for the trust center to operate properly.
    171            securityAddressCacheInit(EMBER_AF_PLUGIN_ADDRESS_TABLE_SIZE,                     // offset
    172                                     EMBER_AF_PLUGIN_ADDRESS_TABLE_TRUST_CENTER_CACHE_SIZE); // size
   \   0000006A   0x2102             MOVS     R1,#+2
   \   0000006C   0x2005             MOVS     R0,#+5
   \   0000006E   0x.... 0x....      BL       securityAddressCacheInit
    173          
    174            EM_AF_NETWORK_INIT();
   \   00000072   0x.... 0x....      BL       emAfNetworkInit
    175          
    176            COMMAND_READER_INIT();
    177          
    178            // Set the manufacturing code. This is defined by ZigBee document 053874r10
    179            // Ember's ID is 0x1002 and is the default, but this can be overridden in App Builder.
    180            emberSetManufacturerCode(EMBER_AF_MANUFACTURER_CODE);
   \   00000076   0x.... 0x....      LDR.W    R1,??DataTable9_1
   \   0000007A   0xF241 0x0002      MOVW     R0,#+4098
   \   0000007E   0x8008             STRH     R0,[R1, #+0]
    181          
    182            emberSetMaximumIncomingTransferSize(EMBER_AF_INCOMING_BUFFER_LENGTH);
   \   00000080   0x2052             MOVS     R0,#+82
   \   00000082   0x.... 0x....      LDR.W    R1,??DataTable9_2
   \   00000086   0x8008             STRH     R0,[R1, #+0]
    183            emberSetMaximumOutgoingTransferSize(EMBER_AF_MAXIMUM_SEND_PAYLOAD_LENGTH);
   \   00000088   0x.... 0x....      LDR.W    R1,??DataTable9_3
   \   0000008C   0x8008             STRH     R0,[R1, #+0]
    184            emberSetTxPowerMode(EMBER_AF_TX_POWER_MODE);
   \   0000008E   0xF44F 0x4000      MOV      R0,#+32768
   \   00000092   0x.... 0x....      BL       emberSetTxPowerMode
    185            emberAfMainInitCallback();
   \   00000096   0x.... 0x....      BL       emberAfMainInitCallback
    186            while(TRUE) {
    187              halResetWatchdog();   // Periodically reset the watchdog.
   \                     ??emberAfMain_3: (+1)
   \   0000009A   0x.... 0x....      BL       halInternalResetWatchDog
    188              emberTick();          // Allow the stack to run.
   \   0000009E   0x.... 0x....      BL       emberTick
    189              // Allow the ZCL clusters to run. This should go immediately after emberTick
    190              emberAfTick();
   \   000000A2   0x.... 0x....      BL       emberAfTick
    191          
    192              emberSerialBufferTick();
   \   000000A6   0x.... 0x....      BL       emberSerialBufferTick
    193          
    194              emberAfRunEvents();
   \   000000AA   0x.... 0x....      BL       emberAfRunEvents
    195          
    196          #if defined(ZA_CLI_MINIMAL) || defined(ZA_CLI_FULL)
    197              if (emberProcessCommandInput(APP_SERIAL)) {
    198                emberAfGuaranteedPrint("%p>", ZA_PROMPT);
    199              }
    200          #endif
    201          
    202          #if defined(EMBER_TEST)
    203              if (1) {
    204                // Simulation only
    205                int32u timeToNextEventMax = emberMsToNextStackEvent();
    206                timeToNextEventMax = emberAfMsToNextEvent(timeToNextEventMax);
    207                simulatedTimePassesMs(timeToNextEventMax);
    208              }
    209          #endif
    210          
    211              // After each interation through the main loop, our network index stack
    212              // should be empty and we should be on the default network index again.
    213              emAfAssertNetworkIndexStackIsEmpty();
   \   000000AE   0x.... 0x....      BL       emAfAssertNetworkIndexStackIsEmpty
    214          
    215              if (0)
   \   000000B2   0xE7F2             B.N      ??emberAfMain_3
    216                break;
    217            }
    218            return 0;
    219          }
    220          

   \                                 In section .text, align 2, keep-with-next
    221          void emberAfGetMfgString(int8u* returnData)
    222          {
    223            halCommonGetMfgToken(returnData, TOKEN_MFG_STRING);
   \                     emberAfGetMfgString: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable9_4
   \   00000002   0x8809             LDRH     R1,[R1, #+0]
   \   00000004   0x2310             MOVS     R3,#+16
   \   00000006   0x227F             MOVS     R2,#+127
   \   00000008   0x.... 0x....      B.W      halInternalGetMfgTokenData
    224          }
    225          

   \                                 In section .text, align 2, keep-with-next
    226          EmberNodeId emberAfGetNodeId(void)
    227          {
    228            return emberGetNodeId();
   \                     emberAfGetNodeId: (+1)
   \   00000000   0x.... 0x....      B.W      emberGetNodeId
    229          }
    230          

   \                                 In section .text, align 2, keep-with-next
    231          EmberPanId emberAfGetPanId(void)
    232          {
    233            return emberGetPanId();
   \                     emberAfGetPanId: (+1)
   \   00000000   0x.... 0x....      B.W      emberGetPanId
    234          }
    235          

   \                                 In section .text, align 2, keep-with-next
    236          EmberNetworkStatus emberAfNetworkState(void)
    237          {
    238            return emberNetworkState();
   \                     emberAfNetworkState: (+1)
   \   00000000   0x.... 0x....      B.W      emberNetworkState
    239          }
    240          

   \                                 In section .text, align 2, keep-with-next
    241          int8u emberAfGetBindingIndex(void)
    242          {
    243            return emberGetBindingIndex();
   \                     emberAfGetBindingIndex: (+1)
   \   00000000   0x.... 0x....      B.W      emberGetBindingIndex
    244          }
    245          

   \                                 In section .text, align 2, keep-with-next
    246          int8u emberAfGetStackProfile(void)
    247          {
    248            return EMBER_STACK_PROFILE;
   \                     emberAfGetStackProfile: (+1)
   \   00000000   0x2002             MOVS     R0,#+2
   \   00000002   0x4770             BX       LR               ;; return
    249          }
    250          

   \                                 In section .text, align 2, keep-with-next
    251          int8u emberAfGetAddressIndex(void)
    252          {
   \                     emberAfGetAddressIndex: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    253            EmberNodeId nodeId = emberGetSender();
   \   00000002   0x.... 0x....      BL       emberGetSender
   \   00000006   0x4604             MOV      R4,R0
    254            int8u i;
    255            for (i = 0; i < EMBER_AF_PLUGIN_ADDRESS_TABLE_SIZE; i++) {
   \   00000008   0x2500             MOVS     R5,#+0
    256              if (emberGetAddressTableRemoteNodeId(i) == nodeId) {
   \                     ??emberAfGetAddressIndex_0: (+1)
   \   0000000A   0x4628             MOV      R0,R5
   \   0000000C   0x.... 0x....      BL       emberGetAddressTableRemoteNodeId
   \   00000010   0x42A0             CMP      R0,R4
   \   00000012   0xD101             BNE.N    ??emberAfGetAddressIndex_1
    257                return i;
   \   00000014   0x4628             MOV      R0,R5
   \   00000016   0xBD32             POP      {R1,R4,R5,PC}
    258              }
    259            }
   \                     ??emberAfGetAddressIndex_1: (+1)
   \   00000018   0x1C6D             ADDS     R5,R5,#+1
   \   0000001A   0xB2ED             UXTB     R5,R5
   \   0000001C   0x2D05             CMP      R5,#+5
   \   0000001E   0xDBF4             BLT.N    ??emberAfGetAddressIndex_0
    260            return EMBER_NULL_ADDRESS_TABLE_INDEX;
   \   00000020   0x20FF             MOVS     R0,#+255
   \   00000022   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    261          }
    262          
    263          // ******************************************************************
    264          // binding
    265          // ******************************************************************

   \                                 In section .text, align 2, keep-with-next
    266          EmberStatus emberAfSendEndDeviceBind(int8u endpoint)
    267          {
   \                     emberAfSendEndDeviceBind: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    268            EmberStatus status;
    269            EmberApsOption options = ((EMBER_AF_DEFAULT_APS_OPTIONS
    270                                       | EMBER_APS_OPTION_SOURCE_EUI64)
    271                                      & ~EMBER_APS_OPTION_RETRY);
    272          
    273            status = emberAfPushEndpointNetworkIndex(endpoint);
   \   00000004   0x.... 0x....      BL       emberAfPushEndpointNetworkIndex
   \   00000008   0x0005             MOVS     R5,R0
    274            if (status != EMBER_SUCCESS) {
   \   0000000A   0xD108             BNE.N    ??emberAfSendEndDeviceBind_0
    275              return status;
    276            }
    277          
    278            emberAfZdoPrintln("send %x %2x", endpoint, options);
    279            status = emberEndDeviceBindRequest(endpoint, options);
   \   0000000C   0xF44F 0x51A8      MOV      R1,#+5376
   \   00000010   0x4620             MOV      R0,R4
   \   00000012   0x.... 0x....      BL       emberEndDeviceBindRequest
   \   00000016   0x4605             MOV      R5,R0
    280            emberAfZdoPrintln("done: %x.", status);
    281            emberAfZdoFlush();
    282          
    283            emberAfPopNetworkIndex();
   \   00000018   0x.... 0x....      BL       emberAfPopNetworkIndex
    284            return status;
   \   0000001C   0x4628             MOV      R0,R5
   \                     ??emberAfSendEndDeviceBind_0: (+1)
   \   0000001E   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    285          }
    286          

   \                                 In section .text, align 2, keep-with-next
    287          EmberStatus emberRemoteSetBindingHandler(EmberBindingTableEntry *entry)
    288          {
   \                     emberRemoteSetBindingHandler: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
   \   00000004   0x.... 0x....      BL       ?Subroutine1
    289            EmberStatus status = EMBER_TABLE_FULL;
    290            EmberBindingTableEntry candidate;
    291            int8u i;
    292          
    293            emberAfPushCallbackNetworkIndex();
    294          
    295            // If we receive a bind request for the Key Establishment cluster and we are
    296            // not the trust center, then we are doing partner link key exchange.  We
    297            // don't actually have to create a binding.
    298            if (emberAfGetNodeId() != EMBER_TRUST_CENTER_NODE_ID
    299                && entry->clusterId == ZCL_KEY_ESTABLISHMENT_CLUSTER_ID) {
   \                     ??CrossCallReturnLabel_3: (+1)
   \   00000008   0x.... 0x....      BL       emberGetNodeId
   \   0000000C   0xB138             CBZ.N    R0,??emberRemoteSetBindingHandler_0
   \   0000000E   0x8860             LDRH     R0,[R4, #+2]
   \   00000010   0xF5B0 0x6F00      CMP      R0,#+2048
   \   00000014   0xD103             BNE.N    ??emberRemoteSetBindingHandler_0
    300              status = emberAfPartnerLinkKeyExchangeRequestCallback(entry->identifier);
   \   00000016   0x1D60             ADDS     R0,R4,#+5
   \   00000018   0x.... 0x....      BL       emberAfPartnerLinkKeyExchangeRequestCallback
   \   0000001C   0xE013             B.N      ??emberRemoteSetBindingHandler_1
    301              goto kickout;
    302            }
    303          
    304          
    305            // ask the application if current binding request is allowed or not
    306            status = emberAfRemoteSetBindingPermissionCallback(entry);
   \                     ??emberRemoteSetBindingHandler_0: (+1)
   \   0000001E   0x4620             MOV      R0,R4
   \   00000020   0x.... 0x....      BL       emberAfRemoteSetBindingPermissionCallback
   \   00000024   0x0005             MOVS     R5,R0
    307            if (status == EMBER_SUCCESS){
   \   00000026   0xD115             BNE.N    ??emberRemoteSetBindingHandler_2
    308              // For all other requests, we search the binding table for an unused entry
    309              // and store the new entry there if we find one.
    310              for (i = 0; i < EMBER_BINDING_TABLE_SIZE; i++) {
   \   00000028   0x2500             MOVS     R5,#+0
    311                if (emberGetBinding(i, &candidate) == EMBER_SUCCESS
    312                    && candidate.type == EMBER_UNUSED_BINDING) {
   \                     ??emberRemoteSetBindingHandler_3: (+1)
   \   0000002A   0xA900             ADD      R1,SP,#+0
   \   0000002C   0x4628             MOV      R0,R5
   \   0000002E   0x.... 0x....      BL       emberGetBinding
   \   00000032   0x2800             CMP      R0,#+0
   \   00000034   0xBF04             ITT      EQ 
   \   00000036   0xF89D 0x0000      LDRBEQ   R0,[SP, #+0]
   \   0000003A   0x2800             CMPEQ    R0,#+0
   \   0000003C   0xD105             BNE.N    ??emberRemoteSetBindingHandler_4
    313                  status = emberSetBinding(i, entry);
   \   0000003E   0x4621             MOV      R1,R4
   \   00000040   0x4628             MOV      R0,R5
   \   00000042   0x.... 0x....      BL       emberSetBinding
   \                     ??emberRemoteSetBindingHandler_1: (+1)
   \   00000046   0x4605             MOV      R5,R0
    314                  goto kickout;
   \   00000048   0xE004             B.N      ??emberRemoteSetBindingHandler_2
    315                }
    316              }
   \                     ??emberRemoteSetBindingHandler_4: (+1)
   \   0000004A   0x1C6D             ADDS     R5,R5,#+1
   \   0000004C   0xB2ED             UXTB     R5,R5
   \   0000004E   0x2D0A             CMP      R5,#+10
   \   00000050   0xDBEB             BLT.N    ??emberRemoteSetBindingHandler_3
    317              // If we get here, we didn't find an empty table slot, so table is full.
    318              status = EMBER_TABLE_FULL;
   \   00000052   0x25B4             MOVS     R5,#+180
    319            }
    320          
    321          
    322          kickout:
    323            emberAfPopNetworkIndex();
   \                     ??emberRemoteSetBindingHandler_2: (+1)
   \   00000054   0x.... 0x....      BL       emberAfPopNetworkIndex
    324            return status;
   \   00000058   0x4628             MOV      R0,R5
   \   0000005A   0xB005             ADD      SP,SP,#+20
   \   0000005C   0xBD30             POP      {R4,R5,PC}       ;; return
    325          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \   00000000   0x4604             MOV      R4,R0
   \   00000002   0x.... 0x....      B.W      emberAfPushCallbackNetworkIndex
    326          

   \                                 In section .text, align 2, keep-with-next
    327          EmberStatus emberRemoteDeleteBindingHandler(int8u index)
    328          {
   \                     emberRemoteDeleteBindingHandler: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x.... 0x....      BL       ?Subroutine1
    329            EmberStatus status;
    330            emberAfPushCallbackNetworkIndex();
    331          
    332            // ask the application if current binding request is allowed or not
    333            status = emberAfRemoteDeleteBindingPermissionCallback(index);
   \                     ??CrossCallReturnLabel_2: (+1)
   \   00000006   0x4620             MOV      R0,R4
   \   00000008   0x.... 0x....      BL       emberAfRemoteDeleteBindingPermissionCallback
   \   0000000C   0x0005             MOVS     R5,R0
    334            if (status == EMBER_SUCCESS){
   \   0000000E   0xD103             BNE.N    ??emberRemoteDeleteBindingHandler_0
    335              status = emberDeleteBinding(index);
   \   00000010   0x4620             MOV      R0,R4
   \   00000012   0x.... 0x....      BL       emberDeleteBinding
   \   00000016   0x4605             MOV      R5,R0
    336              emberAfZdoPrintln("delete binding: %x %x", index, status);
    337            }
    338          
    339            emberAfPopNetworkIndex();
   \                     ??emberRemoteDeleteBindingHandler_0: (+1)
   \   00000018   0x.... 0x....      BL       emberAfPopNetworkIndex
    340            return status;
   \   0000001C   0x4628             MOV      R0,R5
   \   0000001E   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    341          }
    342          
    343          // ******************************************************************
    344          // setup endpoints and clusters for responding to ZDO requests
    345          // ******************************************************************

   \                                 In section .text, align 2, keep-with-next
    346          int8u emberGetEndpoint(int8u index)
    347          {
   \                     emberGetEndpoint: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    348            int8u endpoint = EMBER_AF_INVALID_ENDPOINT;
   \   00000002   0x25FF             MOVS     R5,#+255
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0xF88D 0x5000      STRB     R5,[SP, #+0]
    349            if (emberAfGetEndpointByIndexCallback(index, &endpoint)) {
   \   0000000A   0xA900             ADD      R1,SP,#+0
   \   0000000C   0x.... 0x....      BL       emberAfGetEndpointByIndexCallback
   \   00000010   0xB110             CBZ.N    R0,??emberGetEndpoint_0
    350              return endpoint;
   \   00000012   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000016   0xBD32             POP      {R1,R4,R5,PC}
    351            }
    352            return (((emberAfNetworkIndexFromEndpointIndex(index)
    353                     == emberGetCallbackNetwork())
    354                     && emberAfEndpointIndexIsEnabled(index))
    355                    ? emberAfEndpointFromIndex(index)
    356                    : 0xFF);
   \                     ??emberGetEndpoint_0: (+1)
   \   00000018   0x.... 0x....      BL       emberGetCallbackNetwork
   \   0000001C   0x....             LDR.N    R1,??DataTable9_5
   \   0000001E   0xEB01 0x1104      ADD      R1,R1,R4, LSL #+4
   \   00000022   0x7B09             LDRB     R1,[R1, #+12]
   \   00000024   0x4281             CMP      R1,R0
   \   00000026   0xD107             BNE.N    ??emberGetEndpoint_1
   \   00000028   0x4620             MOV      R0,R4
   \   0000002A   0x.... 0x....      BL       emberAfEndpointIndexIsEnabled
   \   0000002E   0xB118             CBZ.N    R0,??emberGetEndpoint_1
   \   00000030   0x4620             MOV      R0,R4
   \   00000032   0x.... 0x....      BL       emberAfEndpointFromIndex
   \   00000036   0x4605             MOV      R5,R0
   \                     ??emberGetEndpoint_1: (+1)
   \   00000038   0x4628             MOV      R0,R5
   \   0000003A   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    357          }
    358          
    359          // must return the endpoint desc of the endpoint specified

   \                                 In section .text, align 2, keep-with-next
    360          boolean emberGetEndpointDescription(int8u endpoint,
    361                                              EmberEndpointDescription *result)
    362          {
   \                     emberGetEndpointDescription: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    363            if (emberAfGetEndpointDescriptionCallback(endpoint, result)) {
   \   00000006   0x.... 0x....      BL       emberAfGetEndpointDescriptionCallback
   \   0000000A   0xB9F8             CBNZ.N   R0,??emberGetEndpointDescription_0
    364              return TRUE;
    365            }
    366            int8u endpointIndex = emberAfIndexFromEndpoint(endpoint);
   \   0000000C   0x4620             MOV      R0,R4
   \   0000000E   0x.... 0x....      BL       emberAfIndexFromEndpoint
   \   00000012   0x4606             MOV      R6,R0
    367            if (endpointIndex == 0xFF
    368                || (emberAfNetworkIndexFromEndpointIndex(endpointIndex)
    369                    != emberGetCallbackNetwork())) {
   \   00000014   0x2EFF             CMP      R6,#+255
   \   00000016   0xD007             BEQ.N    ??emberGetEndpointDescription_1
   \   00000018   0x.... 0x....      BL       emberGetCallbackNetwork
   \   0000001C   0x....             LDR.N    R1,??DataTable9_5
   \   0000001E   0xEB01 0x1106      ADD      R1,R1,R6, LSL #+4
   \   00000022   0x7B0A             LDRB     R2,[R1, #+12]
   \   00000024   0x4282             CMP      R2,R0
   \   00000026   0xD001             BEQ.N    ??emberGetEndpointDescription_2
    370              return FALSE;
   \                     ??emberGetEndpointDescription_1: (+1)
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0xBD70             POP      {R4-R6,PC}
    371            }
    372            result->profileId          = emberAfProfileIdFromIndex(endpointIndex);
   \                     ??emberGetEndpointDescription_2: (+1)
   \   0000002C   0x8848             LDRH     R0,[R1, #+2]
   \   0000002E   0x8028             STRH     R0,[R5, #+0]
    373            result->deviceId           = emberAfDeviceIdFromIndex(endpointIndex);
   \   00000030   0x8888             LDRH     R0,[R1, #+4]
   \   00000032   0x8068             STRH     R0,[R5, #+2]
    374            result->deviceVersion      = emberAfDeviceVersionFromIndex(endpointIndex);
   \   00000034   0x7988             LDRB     R0,[R1, #+6]
   \   00000036   0x7128             STRB     R0,[R5, #+4]
    375            result->inputClusterCount  = emberAfClusterCount(endpoint, TRUE);
   \   00000038   0x2101             MOVS     R1,#+1
   \   0000003A   0x4620             MOV      R0,R4
   \   0000003C   0x.... 0x....      BL       emberAfClusterCount
   \   00000040   0x7168             STRB     R0,[R5, #+5]
    376            result->outputClusterCount = emberAfClusterCount(endpoint, FALSE);
   \   00000042   0x2100             MOVS     R1,#+0
   \   00000044   0x4620             MOV      R0,R4
   \   00000046   0x.... 0x....      BL       emberAfClusterCount
   \   0000004A   0x71A8             STRB     R0,[R5, #+6]
    377            return TRUE;
   \                     ??emberGetEndpointDescription_0: (+1)
   \   0000004C   0x2001             MOVS     R0,#+1
   \   0000004E   0xBD70             POP      {R4-R6,PC}       ;; return
    378          }
    379          
    380          // must return the clusterId at listIndex in the list specified for the
    381          // endpoint specified

   \                                 In section .text, align 2, keep-with-next
    382          int16u emberGetEndpointCluster(int8u endpoint,
    383                                         EmberClusterListId listId,
    384                                         int8u listIndex)
    385          {
   \                     emberGetEndpointCluster: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x4605             MOV      R5,R0
   \   00000006   0x460E             MOV      R6,R1
   \   00000008   0x4690             MOV      R8,R2
    386            EmberAfCluster *cluster = NULL;
    387            int8u endpointIndex = emberAfIndexFromEndpoint(endpoint);
   \   0000000A   0x.... 0x....      BL       emberAfIndexFromEndpoint
   \   0000000E   0x4607             MOV      R7,R0
    388            if (endpointIndex == 0xFF
    389                || (emberAfNetworkIndexFromEndpointIndex(endpointIndex)
    390                    != emberGetCallbackNetwork())) {
   \   00000010   0xF64F 0x74FF      MOVW     R4,#+65535
   \   00000014   0x2FFF             CMP      R7,#+255
   \   00000016   0xD013             BEQ.N    ??emberGetEndpointCluster_0
   \   00000018   0x.... 0x....      BL       emberGetCallbackNetwork
   \   0000001C   0x....             LDR.N    R1,??DataTable9_5
   \   0000001E   0xEB01 0x1107      ADD      R1,R1,R7, LSL #+4
   \   00000022   0x7B09             LDRB     R1,[R1, #+12]
   \   00000024   0x4281             CMP      R1,R0
   \   00000026   0xD10B             BNE.N    ??emberGetEndpointCluster_0
    391              return 0xFFFF;
    392            } else if (listId == EMBER_INPUT_CLUSTER_LIST) {
   \   00000028   0xB90E             CBNZ.N   R6,??emberGetEndpointCluster_1
    393              cluster = emberAfGetNthCluster(endpoint, listIndex, TRUE);
   \   0000002A   0x2201             MOVS     R2,#+1
   \   0000002C   0xE002             B.N      ??emberGetEndpointCluster_2
    394            } else if (listId == EMBER_OUTPUT_CLUSTER_LIST) {
   \                     ??emberGetEndpointCluster_1: (+1)
   \   0000002E   0x2E01             CMP      R6,#+1
   \   00000030   0xD106             BNE.N    ??emberGetEndpointCluster_0
    395              cluster = emberAfGetNthCluster(endpoint, listIndex, FALSE);
   \   00000032   0x2200             MOVS     R2,#+0
   \                     ??emberGetEndpointCluster_2: (+1)
   \   00000034   0x4641             MOV      R1,R8
   \   00000036   0x4628             MOV      R0,R5
   \   00000038   0x.... 0x....      BL       emberAfGetNthCluster
    396            }
    397            return (cluster == NULL ? 0xFFFF : cluster->clusterId);
   \   0000003C   0xB100             CBZ.N    R0,??emberGetEndpointCluster_0
   \   0000003E   0x8804             LDRH     R4,[R0, #+0]
   \                     ??emberGetEndpointCluster_0: (+1)
   \   00000040   0x4620             MOV      R0,R4
   \   00000042   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    398          }
    399          
    400          
    401          // *******************************************************************
    402          // Handlers required to use the Ember Stack.
    403          
    404          // Called when the stack status changes, usually as a result of an
    405          // attempt to form, join, or leave a network.

   \                                 In section .text, align 2, keep-with-next
    406          void emberStackStatusHandler(EmberStatus status)
    407          {
   \                     emberStackStatusHandler: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x.... 0x....      BL       ?Subroutine1
    408            emberAfPushCallbackNetworkIndex();
    409            emAfStackStatusHandler(status);
   \                     ??CrossCallReturnLabel_1: (+1)
   \   00000006   0x4620             MOV      R0,R4
   \   00000008   0x.... 0x....      BL       emAfStackStatusHandler
    410            emberAfPopNetworkIndex();
   \   0000000C   0xE8BD 0x4010      POP      {R4,LR}
   \   00000010   0x.... 0x....      B.W      emberAfPopNetworkIndex
    411          }
    412          
    413          // Copy the message buffer into a RAM buffer.
    414          //   If message is too large, 0 is returned and no copying is done.
    415          //   Otherwise data is copied, and length of copied data is returned.

   \                                 In section .text, align 2, keep-with-next
    416          int8u emAfCopyMessageIntoRamBuffer(EmberMessageBuffer message,
    417                                             int8u *buffer,
    418                                             int16u bufLen)
    419          {
   \                     emAfCopyMessageIntoRamBuffer: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x460C             MOV      R4,R1
    420            int8u length = emberMessageBufferLength(message);
   \   00000004   0x....             LDR.N    R1,??DataTable9_6
   \   00000006   0x6809             LDR      R1,[R1, #+0]
   \   00000008   0x5C45             LDRB     R5,[R0, R1]
    421            if (bufLen < length) {
   \   0000000A   0x42AA             CMP      R2,R5
   \   0000000C   0xD201             BCS.N    ??emAfCopyMessageIntoRamBuffer_0
    422              emberAfAppPrintln("%pmsg too big (%d > %d)",
    423                                "ERROR: ",
    424                                length,
    425                                bufLen);
    426              return 0;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0xBD32             POP      {R1,R4,R5,PC}
    427            }
    428            emberCopyFromLinkedBuffers(message, 0, buffer, length); // no offset
   \                     ??emAfCopyMessageIntoRamBuffer_0: (+1)
   \   00000012   0x2100             MOVS     R1,#+0
   \   00000014   0x9100             STR      R1,[SP, #+0]
   \   00000016   0x462B             MOV      R3,R5
   \   00000018   0x4601             MOV      R1,R0
   \   0000001A   0x2200             MOVS     R2,#+0
   \   0000001C   0x4620             MOV      R0,R4
   \   0000001E   0x.... 0x....      BL       emReallyCopyToLinkedBuffers
    429            return length;
   \   00000022   0x4628             MOV      R0,R5
   \   00000024   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    430          }
    431          

   \                                 In section .text, align 2, keep-with-next
    432          void emberIncomingMessageHandler(EmberIncomingMessageType type,
    433                                           EmberApsFrame *apsFrame,
    434                                           EmberMessageBuffer message)
    435          {
   \                     emberIncomingMessageHandler: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB098             SUB      SP,SP,#+96
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
   \   00000008   0x4616             MOV      R6,R2
    436            int8u lastHopLqi;
    437            int8s lastHopRssi;
    438            int16u messageLength;
    439            int8u messageContents[EMBER_AF_MAXIMUM_APS_PAYLOAD_LENGTH];
    440          
    441            emberAfPushCallbackNetworkIndex();
   \   0000000A   0x.... 0x....      BL       emberAfPushCallbackNetworkIndex
    442          
    443            messageLength = emAfCopyMessageIntoRamBuffer(message,
    444                                                         messageContents,
    445                                                         EMBER_AF_MAXIMUM_APS_PAYLOAD_LENGTH);
   \   0000000E   0x2252             MOVS     R2,#+82
   \   00000010   0xA903             ADD      R1,SP,#+12
   \   00000012   0x4630             MOV      R0,R6
   \   00000014   0x.... 0x....      BL       emAfCopyMessageIntoRamBuffer
   \   00000018   0x0006             MOVS     R6,R0
    446            if (messageLength == 0) {
   \   0000001A   0xD011             BEQ.N    ??emberIncomingMessageHandler_0
    447              goto kickout;
    448            }
    449          
    450            emberGetLastHopLqi(&lastHopLqi);
   \   0000001C   0xF10D 0x0009      ADD      R0,SP,#+9
   \   00000020   0x.... 0x....      BL       emberGetLastHopLqi
    451            emberGetLastHopRssi(&lastHopRssi);
   \   00000024   0xA802             ADD      R0,SP,#+8
   \   00000026   0x.... 0x....      BL       emberGetLastHopRssi
    452          
    453            emAfIncomingMessageHandler(type,
    454                                       apsFrame,
    455                                       lastHopLqi,
    456                                       lastHopRssi,
    457                                       messageLength,
    458                                       messageContents);
   \   0000002A   0xA803             ADD      R0,SP,#+12
   \   0000002C   0x9001             STR      R0,[SP, #+4]
   \   0000002E   0xF99D 0x3008      LDRSB    R3,[SP, #+8]
   \   00000032   0xF89D 0x2009      LDRB     R2,[SP, #+9]
   \   00000036   0x9600             STR      R6,[SP, #+0]
   \   00000038   0x4629             MOV      R1,R5
   \   0000003A   0x4620             MOV      R0,R4
   \   0000003C   0x.... 0x....      BL       emAfIncomingMessageHandler
    459          
    460          kickout:
    461            emberAfPopNetworkIndex();
   \                     ??emberIncomingMessageHandler_0: (+1)
   \   00000040   0x.... 0x....      BL       emberAfPopNetworkIndex
    462          }
   \   00000044   0xB018             ADD      SP,SP,#+96
   \   00000046   0xBD70             POP      {R4-R6,PC}       ;; return
    463          
    464          
    465          // Called when a message we sent is acked by the destination or when an
    466          // ack fails to arrive after several retransmissions.

   \                                 In section .text, align 2, keep-with-next
    467          void emberMessageSentHandler(EmberOutgoingMessageType type,
    468                                       int16u indexOrDestination,
    469                                       EmberApsFrame *apsFrame,
    470                                       EmberMessageBuffer message,
    471                                       EmberStatus status)
    472          {
   \                     emberMessageSentHandler: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB099             SUB      SP,SP,#+100
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
   \   00000008   0x4616             MOV      R6,R2
   \   0000000A   0x461F             MOV      R7,R3
    473            int8u messageContents[EMBER_AF_MAXIMUM_APS_PAYLOAD_LENGTH];
    474            int8u messageLength;
    475            emberAfPushCallbackNetworkIndex();
   \   0000000C   0x.... 0x....      BL       emberAfPushCallbackNetworkIndex
    476          
    477          
    478          #ifdef EMBER_AF_PLUGIN_FRAGMENTATION
    479            if (emAfFragmentationMessageSent(apsFrame, status)) {
    480              goto kickout;
    481            }
    482          #endif //EMBER_AF_PLUGIN_FRAGMENTATION
    483          
    484            messageLength = emAfCopyMessageIntoRamBuffer(message,
    485                                                         messageContents,
    486                                                         EMBER_AF_MAXIMUM_APS_PAYLOAD_LENGTH);
   \   00000010   0x2252             MOVS     R2,#+82
   \   00000012   0xA903             ADD      R1,SP,#+12
   \   00000014   0x4638             MOV      R0,R7
   \   00000016   0x.... 0x....      BL       emAfCopyMessageIntoRamBuffer
    487            if (messageLength == 0) {
   \   0000001A   0xB148             CBZ.N    R0,??emberMessageSentHandler_0
    488              // Message too long.  Error printed by above function.
    489              goto kickout;
    490            }
    491          
    492            emAfMessageSentHandler(type,
    493                                   indexOrDestination,
    494                                   apsFrame,
    495                                   status,
    496                                   messageLength,
    497                                   messageContents,
    498                                   message);
   \   0000001C   0xA903             ADD      R1,SP,#+12
   \   0000001E   0x9101             STR      R1,[SP, #+4]
   \   00000020   0x9000             STR      R0,[SP, #+0]
   \   00000022   0x9702             STR      R7,[SP, #+8]
   \   00000024   0x4632             MOV      R2,R6
   \   00000026   0x9B1E             LDR      R3,[SP, #+120]
   \   00000028   0x4629             MOV      R1,R5
   \   0000002A   0x4620             MOV      R0,R4
   \   0000002C   0x.... 0x....      BL       emAfMessageSentHandler
    499          
    500          kickout:
    501            emberAfPopNetworkIndex();
   \                     ??emberMessageSentHandler_0: (+1)
   \   00000030   0x.... 0x....      BL       emberAfPopNetworkIndex
    502          }
   \   00000034   0xB019             ADD      SP,SP,#+100
   \   00000036   0xBDF0             POP      {R4-R7,PC}       ;; return
    503          

   \                                 In section .text, align 2, keep-with-next
    504          EmberStatus emAfSend(EmberOutgoingMessageType type,
    505                               int16u indexOrDestination,
    506                               EmberApsFrame *apsFrame,
    507                               int8u messageLength,
    508                               int8u *message,
    509                               int8u *messageTag)
    510          {
   \                     emAfSend: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    511            EmberMessageBuffer payload = emberFillLinkedBuffers(message, messageLength);
   \   00000006   0x9806             LDR      R0,[SP, #+24]
   \   00000008   0x4616             MOV      R6,R2
   \   0000000A   0x4619             MOV      R1,R3
   \   0000000C   0x.... 0x....      BL       emberFillLinkedBuffers
   \   00000010   0x4607             MOV      R7,R0
    512            if (payload == EMBER_NULL_MESSAGE_BUFFER) {
   \   00000012   0x2FFF             CMP      R7,#+255
   \   00000014   0xD101             BNE.N    ??emAfSend_0
    513              return EMBER_NO_BUFFERS;
   \   00000016   0x2018             MOVS     R0,#+24
   \   00000018   0xBDF2             POP      {R1,R4-R7,PC}
    514            } else {
    515              EmberStatus status;
    516          
    517              *messageTag = payload;
   \                     ??emAfSend_0: (+1)
   \   0000001A   0x9807             LDR      R0,[SP, #+28]
   \   0000001C   0x7007             STRB     R7,[R0, #+0]
    518          
    519              switch (type) {
   \   0000001E   0x4620             MOV      R0,R4
   \   00000020   0x2802             CMP      R0,#+2
   \   00000022   0xD904             BLS.N    ??emAfSend_1
   \   00000024   0x1EC0             SUBS     R0,R0,#+3
   \   00000026   0xD008             BEQ.N    ??emAfSend_2
   \   00000028   0x1E40             SUBS     R0,R0,#+1
   \   0000002A   0xD00D             BEQ.N    ??emAfSend_3
   \   0000002C   0xE014             B.N      ??emAfSend_4
    520              case EMBER_OUTGOING_DIRECT:
    521              case EMBER_OUTGOING_VIA_ADDRESS_TABLE:
    522              case EMBER_OUTGOING_VIA_BINDING:
    523                status = emberSendUnicast(type, indexOrDestination, apsFrame, payload);
   \                     ??emAfSend_1: (+1)
   \   0000002E   0x463B             MOV      R3,R7
   \   00000030   0x4632             MOV      R2,R6
   \   00000032   0x4629             MOV      R1,R5
   \   00000034   0x.... 0x....      BL       emberSendUnicast
   \   00000038   0xE00C             B.N      ??emAfSend_5
    524                break;
    525              case EMBER_OUTGOING_MULTICAST:
    526                status = emberSendMulticast(apsFrame,
    527                                            ZA_MAX_HOPS, // radius
    528                                            ZA_MAX_HOPS, // nonmember radius
    529                                            payload);
   \                     ??emAfSend_2: (+1)
   \   0000003A   0x463B             MOV      R3,R7
   \   0000003C   0x220C             MOVS     R2,#+12
   \   0000003E   0x210C             MOVS     R1,#+12
   \   00000040   0x4630             MOV      R0,R6
   \   00000042   0x.... 0x....      BL       emberSendMulticast
   \   00000046   0xE005             B.N      ??emAfSend_5
    530                break;
    531              case EMBER_OUTGOING_BROADCAST:
    532                status = emberSendBroadcast(indexOrDestination,
    533                                            apsFrame,
    534                                            ZA_MAX_HOPS, // radius
    535                                            payload);
   \                     ??emAfSend_3: (+1)
   \   00000048   0x463B             MOV      R3,R7
   \   0000004A   0x220C             MOVS     R2,#+12
   \   0000004C   0x4631             MOV      R1,R6
   \   0000004E   0x4628             MOV      R0,R5
   \   00000050   0x.... 0x....      BL       emberSendBroadcast
   \                     ??emAfSend_5: (+1)
   \   00000054   0x4604             MOV      R4,R0
    536                break;
   \   00000056   0xE000             B.N      ??emAfSend_6
    537              default:
    538                status = EMBER_BAD_ARGUMENT;
   \                     ??emAfSend_4: (+1)
   \   00000058   0x2402             MOVS     R4,#+2
    539                break;
    540              }
    541          
    542              emberReleaseMessageBuffer(payload);
   \                     ??emAfSend_6: (+1)
   \   0000005A   0x4638             MOV      R0,R7
   \   0000005C   0x.... 0x....      BL       emReleaseMessageBuffer
    543          
    544              return status;
   \   00000060   0x4620             MOV      R0,R4
   \   00000062   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    545            }
    546          }
    547          

   \                                 In section .text, align 2, keep-with-next
    548          void emberAfGetEui64(EmberEUI64 returnEui64)
    549          {
    550            MEMMOVE(returnEui64, emberGetEui64(), EUI64_SIZE);
   \                     emberAfGetEui64: (+1)
   \   00000000   0x2208             MOVS     R2,#+8
   \   00000002   0x....             LDR.N    R1,??DataTable9_7
   \   00000004   0x.... 0x....      B.W      halCommonMemMove
    551          }
    552          

   \                                 In section .text, align 2, keep-with-next
    553          EmberStatus emberAfGetNetworkParameters(EmberNodeType* nodeType,
    554                                                  EmberNetworkParameters* parameters)
    555          {
   \                     emberAfGetNetworkParameters: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x4608             MOV      R0,R1
    556            emberGetNetworkParameters(parameters);
   \   00000006   0x.... 0x....      BL       emberGetNetworkParameters
    557            return emberGetNodeType(nodeType);
   \   0000000A   0x4620             MOV      R0,R4
   \   0000000C   0xE8BD 0x4010      POP      {R4,LR}
   \   00000010   0x.... 0x....      B.W      emberGetNodeType
    558          }
    559          

   \                                 In section .text, align 2, keep-with-next
    560          EmberStatus emberAfGetNodeType(EmberNodeType *nodeType)
    561          {
    562            return emberGetNodeType(nodeType);
   \                     emberAfGetNodeType: (+1)
   \   00000000   0x.... 0x....      B.W      emberGetNodeType
    563          }
    564          

   \                                 In section .text, align 2, keep-with-next
    565          int8u emberAfGetSecurityLevel(void)
    566          {
    567            return EMBER_SECURITY_LEVEL;
   \                     emberAfGetSecurityLevel: (+1)
   \   00000000   0x2005             MOVS     R0,#+5
   \   00000002   0x4770             BX       LR               ;; return
    568          }
    569          

   \                                 In section .text, align 2, keep-with-next
    570          int8u emberAfGetKeyTableSize(void)
    571          {
    572            return EMBER_KEY_TABLE_SIZE;
   \                     emberAfGetKeyTableSize: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    573          }
    574          

   \                                 In section .text, align 2, keep-with-next
    575          int8u emberAfGetBindingTableSize(void)
    576          {
    577            return EMBER_BINDING_TABLE_SIZE;
   \                     emberAfGetBindingTableSize: (+1)
   \   00000000   0x200A             MOVS     R0,#+10
   \   00000002   0x4770             BX       LR               ;; return
    578          }
    579          

   \                                 In section .text, align 2, keep-with-next
    580          int8u emberAfGetAddressTableSize(void)
    581          {
    582            return EMBER_ADDRESS_TABLE_SIZE;
   \                     emberAfGetAddressTableSize: (+1)
   \   00000000   0x2007             MOVS     R0,#+7
   \   00000002   0x4770             BX       LR               ;; return
    583          }
    584          

   \                                 In section .text, align 2, keep-with-next
    585          int8u emberAfGetChildTableSize(void)
    586          {
    587            return EMBER_CHILD_TABLE_SIZE;
   \                     emberAfGetChildTableSize: (+1)
   \   00000000   0x2006             MOVS     R0,#+6
   \   00000002   0x4770             BX       LR               ;; return
    588          }
    589          

   \                                 In section .text, align 2, keep-with-next
    590          int8u emberAfGetNeighborTableSize(void)
    591          {
    592            return EMBER_NEIGHBOR_TABLE_SIZE;
   \                     emberAfGetNeighborTableSize: (+1)
   \   00000000   0x2010             MOVS     R0,#+16
   \   00000002   0x4770             BX       LR               ;; return
    593          }
    594          

   \                                 In section .text, align 2, keep-with-next
    595          int8u emberAfGetRouteTableSize(void)
    596          {
    597            return EMBER_ROUTE_TABLE_SIZE;
   \                     emberAfGetRouteTableSize: (+1)
   \   00000000   0x200A             MOVS     R0,#+10
   \   00000002   0x4770             BX       LR               ;; return
    598          }
    599          

   \                                 In section .text, align 2, keep-with-next
    600          int8u emberAfGetSleepyMulticastConfig(void)
    601          {
    602            return EMBER_SEND_MULTICASTS_TO_SLEEPY_ADDRESS;
   \                     emberAfGetSleepyMulticastConfig: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    603          }
    604          

   \                                 In section .text, align 2, keep-with-next
    605          EmberStatus emberAfGetChildData(int8u index,
    606                                          EmberNodeId *childId,
    607                                          EmberEUI64 childEui64,
    608                                          EmberNodeType *childType)
    609          {
   \                     emberAfGetChildData: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
   \   00000006   0x4616             MOV      R6,R2
   \   00000008   0x461F             MOV      R7,R3
    610            *childId = emberChildId(index);
   \   0000000A   0x.... 0x....      BL       emberChildId
   \   0000000E   0x8028             STRH     R0,[R5, #+0]
    611            return emberGetChildData(index,
    612                                     childEui64,
    613                                     childType);
   \   00000010   0x463A             MOV      R2,R7
   \   00000012   0x4631             MOV      R1,R6
   \   00000014   0x4620             MOV      R0,R4
   \   00000016   0xE8BD 0x40F8      POP      {R3-R7,LR}
   \   0000001A   0x.... 0x....      B.W      emberGetChildData
    614          }
    615          

   \                                 In section .text, align 2, keep-with-next
    616          int8u emAfGetPacketBufferFreeCount(void)
    617          {
    618            return emberPacketBufferFreeCount();
   \                     emAfGetPacketBufferFreeCount: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable9_8
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0x4770             BX       LR               ;; return
    619          }
    620          

   \                                 In section .text, align 2, keep-with-next
    621          int8u emAfGetPacketBufferTotalCount(void)
    622          {
    623            return EMBER_PACKET_BUFFER_COUNT;
   \                     emAfGetPacketBufferTotalCount: (+1)
   \   00000000   0x204B             MOVS     R0,#+75
   \   00000002   0x4770             BX       LR               ;; return
    624          }
    625          

   \                                 In section .text, align 2, keep-with-next
    626          void emAfCliVersionCommand(void)
    627          {
   \                     emAfCliVersionCommand: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   \   00000004   0xA800             ADD      R0,SP,#+0
   \   00000006   0x....             LDR.N    R1,??DataTable9_9
   \   00000008   0x2208             MOVS     R2,#+8
   \   0000000A   0x.... 0x....      BL       __aeabi_memcpy
    628            emAfParseAndPrintVersion(emberVersion);
   \   0000000E   0xE9DD 0x0100      LDRD     R0,R1,[SP, #+0]
   \   00000012   0x.... 0x....      BL       emAfParseAndPrintVersion
    629          }
   \   00000016   0xBD07             POP      {R0-R2,PC}       ;; return
    630          

   \                                 In section .text, align 2, keep-with-next
    631          void emberNetworkFoundHandler(EmberZigbeeNetwork *networkFound)
    632          {
   \                     emberNetworkFoundHandler: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x.... 0x....      BL       ?Subroutine1
    633            int8u lqi;
    634            int8s rssi;
    635            emberAfPushCallbackNetworkIndex();
    636            emberAfAppPrintln(", nwkID: %d", emberGetSender());
    637            emberGetLastHopLqi(&lqi);
   \                     ??CrossCallReturnLabel_0: (+1)
   \   00000008   0xF10D 0x0001      ADD      R0,SP,#+1
   \   0000000C   0x.... 0x....      BL       emberGetLastHopLqi
    638            emberGetLastHopRssi(&rssi);
   \   00000010   0xA800             ADD      R0,SP,#+0
   \   00000012   0x.... 0x....      BL       emberGetLastHopRssi
    639            emberAfNetworkFoundCallback(networkFound, lqi, rssi);
   \   00000016   0xF99D 0x2000      LDRSB    R2,[SP, #+0]
   \   0000001A   0xF89D 0x1001      LDRB     R1,[SP, #+1]
   \   0000001E   0x4620             MOV      R0,R4
   \   00000020   0x.... 0x....      BL       emberAfNetworkFoundCallback
    640            emberAfPopNetworkIndex();
   \   00000024   0x.... 0x....      BL       emberAfPopNetworkIndex
    641          }
   \   00000028   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    642          

   \                                 In section .text, align 2, keep-with-next
    643          void emberScanCompleteHandler(int8u channel, EmberStatus status)
    644          {
   \                     emberScanCompleteHandler: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    645            emberAfPushCallbackNetworkIndex();
   \   00000006   0x.... 0x....      BL       emberAfPushCallbackNetworkIndex
    646            emberAfScanCompleteCallback(channel, status);
   \   0000000A   0x4629             MOV      R1,R5
   \   0000000C   0x4620             MOV      R0,R4
   \   0000000E   0x.... 0x....      BL       emberAfScanCompleteCallback
    647            emberAfPopNetworkIndex();
   \   00000012   0x....             B.N      ?Subroutine0
    648          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0xE8BD 0x4031      POP      {R0,R4,R5,LR}
   \   00000004   0x.... 0x....      B.W      emberAfPopNetworkIndex
    649          

   \                                 In section .text, align 2, keep-with-next
    650          void emberEnergyScanResultHandler(int8u channel, int8s rssi)
    651          {
   \                     emberEnergyScanResultHandler: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    652            emberAfPushCallbackNetworkIndex();
   \   00000006   0x.... 0x....      BL       emberAfPushCallbackNetworkIndex
    653            emberAfEnergyScanResultCallback(channel, rssi);
   \   0000000A   0x4629             MOV      R1,R5
   \   0000000C   0x4620             MOV      R0,R4
   \   0000000E   0x.... 0x....      BL       emberAfEnergyScanResultCallback
    654            emberAfPopNetworkIndex();
   \   00000012                      REQUIRE ?Subroutine0
   \   00000012                      ;; // Fall through to label ?Subroutine0
    655          }
    656          

   \                                 In section .text, align 2, keep-with-next
    657          void emAfPrintEzspEndpointFlags(int8u endpoint)
    658          {
    659            // Not applicable for SOC
    660          }
   \                     emAfPrintEzspEndpointFlags: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   0x........         DC32     serialPort

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_1:
   \   00000000   0x........         DC32     emManufacturerCode

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_2:
   \   00000000   0x........         DC32     emMaximumIncomingTransferSize

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_3:
   \   00000000   0x........         DC32     emMaximumOutgoingTransferSize

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_4:
   \   00000000   0x........         DC32     TOKEN_MFG_STRING

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_5:
   \   00000000   0x........         DC32     emAfEndpoints

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_6:
   \   00000000   0x........         DC32     emMessageBufferLengths

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_7:
   \   00000000   0x........         DC32     emLocalEui64

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_8:
   \   00000000   0x........         DC32     emPacketBufferFreeCount

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_9:
   \   00000000   0x........         DC32     emberVersion

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "af-main-soc.c">`:
   \   00000000   0x61 0x66          DC8 "af-main-soc.c"
   \              0x2D 0x6D    
   \              0x61 0x69    
   \              0x6E 0x2D    
   \              0x73 0x6F    
   \              0x63 0x2E    
   \              0x63 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0
    661          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   emAfCliVersionCommand
        16   -> __aeabi_memcpy
        16   -> emAfParseAndPrintVersion
      16   emAfCopyMessageIntoRamBuffer
        16   -> emReallyCopyToLinkedBuffers
       0   emAfGetPacketBufferFreeCount
       0   emAfGetPacketBufferTotalCount
       0   emAfPrintEzspEndpointFlags
      24   emAfSend
        24   -> emReleaseMessageBuffer
        24   -> emberFillLinkedBuffers
        24   -> emberSendBroadcast
        24   -> emberSendMulticast
        24   -> emberSendUnicast
      16   emberAfGetAddressIndex
        16   -> emberGetAddressTableRemoteNodeId
        16   -> emberGetSender
       0   emberAfGetAddressTableSize
       0   emberAfGetBindingIndex
         0   -> emberGetBindingIndex
       0   emberAfGetBindingTableSize
      24   emberAfGetChildData
        24   -> emberChildId
         0   -> emberGetChildData
       0   emberAfGetChildTableSize
       0   emberAfGetEui64
         0   -> halCommonMemMove
       0   emberAfGetKeyTableSize
       0   emberAfGetMfgString
         0   -> halInternalGetMfgTokenData
       0   emberAfGetNeighborTableSize
       8   emberAfGetNetworkParameters
         8   -> emberGetNetworkParameters
         0   -> emberGetNodeType
       0   emberAfGetNodeId
         0   -> emberGetNodeId
       0   emberAfGetNodeType
         0   -> emberGetNodeType
       0   emberAfGetPanId
         0   -> emberGetPanId
       0   emberAfGetRouteTableSize
       0   emberAfGetSecurityLevel
       0   emberAfGetSleepyMulticastConfig
       0   emberAfGetStackProfile
      16   emberAfMain
        16   -> _enableBasePri
        16   -> emAfAssertNetworkIndexStackIsEmpty
        16   -> emAfInitializeMessageSentCallbackArray
        16   -> emAfInitializeNetworkIndexStack
        16   -> emAfNetworkInit
        16   -> emberAfEndpointConfigure
        16   -> emberAfInit
        16   -> emberAfMainInitCallback
        16   -> emberAfMainStartCallback
        16   -> emberAfRunEvents
        16   -> emberAfTick
        16   -> emberInit
        16   -> emberSerialBufferTick
        16   -> emberSerialInit
        16   -> emberSetTxPowerMode
        16   -> emberTick
        16   -> halGetResetInfo
        16   -> halInternalAssertFailed
        16   -> halInternalResetWatchDog
        16   -> halPrintCrashData
        16   -> halPrintCrashDetails
        16   -> halPrintCrashSummary
        16   -> securityAddressCacheInit
       0   emberAfNetworkState
         0   -> emberNetworkState
      16   emberAfSendEndDeviceBind
        16   -> emberAfPopNetworkIndex
        16   -> emberAfPushEndpointNetworkIndex
        16   -> emberEndDeviceBindRequest
      16   emberEnergyScanResultHandler
        16   -> emberAfEnergyScanResultCallback
         0   -> emberAfPopNetworkIndex
        16   -> emberAfPushCallbackNetworkIndex
      16   emberGetEndpoint
        16   -> emberAfEndpointFromIndex
        16   -> emberAfEndpointIndexIsEnabled
        16   -> emberAfGetEndpointByIndexCallback
        16   -> emberGetCallbackNetwork
      24   emberGetEndpointCluster
        24   -> emberAfGetNthCluster
        24   -> emberAfIndexFromEndpoint
        24   -> emberGetCallbackNetwork
      16   emberGetEndpointDescription
        16   -> emberAfClusterCount
        16   -> emberAfGetEndpointDescriptionCallback
        16   -> emberAfIndexFromEndpoint
        16   -> emberGetCallbackNetwork
     112   emberIncomingMessageHandler
       112   -> emAfCopyMessageIntoRamBuffer
       112   -> emAfIncomingMessageHandler
       112   -> emberAfPopNetworkIndex
       112   -> emberAfPushCallbackNetworkIndex
       112   -> emberGetLastHopLqi
       112   -> emberGetLastHopRssi
     120   emberMessageSentHandler
       120   -> emAfCopyMessageIntoRamBuffer
       120   -> emAfMessageSentHandler
       120   -> emberAfPopNetworkIndex
       120   -> emberAfPushCallbackNetworkIndex
      16   emberNetworkFoundHandler
        16   -> emberAfNetworkFoundCallback
        16   -> emberAfPopNetworkIndex
        16   -> emberAfPushCallbackNetworkIndex
        16   -> emberGetLastHopLqi
        16   -> emberGetLastHopRssi
      16   emberRemoteDeleteBindingHandler
        16   -> emberAfPopNetworkIndex
        16   -> emberAfPushCallbackNetworkIndex
        16   -> emberAfRemoteDeleteBindingPermissionCallback
        16   -> emberDeleteBinding
      32   emberRemoteSetBindingHandler
        32   -> emberAfPartnerLinkKeyExchangeRequestCallback
        32   -> emberAfPopNetworkIndex
        32   -> emberAfPushCallbackNetworkIndex
        32   -> emberAfRemoteSetBindingPermissionCallback
        32   -> emberGetBinding
        32   -> emberGetNodeId
        32   -> emberSetBinding
      16   emberScanCompleteHandler
         0   -> emberAfPopNetworkIndex
        16   -> emberAfPushCallbackNetworkIndex
        16   -> emberAfScanCompleteCallback
       8   emberStackStatusHandler
         8   -> emAfStackStatusHandler
         0   -> emberAfPopNetworkIndex
         8   -> emberAfPushCallbackNetworkIndex


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      16  ?<Constant "af-main-soc.c">
       4  ??DataTable9
       4  ??DataTable9_1
       4  ??DataTable9_2
       4  ??DataTable9_3
       4  ??DataTable9_4
       4  ??DataTable9_5
       4  ??DataTable9_6
       4  ??DataTable9_7
       4  ??DataTable9_8
       4  ??DataTable9_9
       8  ?Subroutine0
       6  ?Subroutine1
      24  emAfCliVersionCommand
      38  emAfCopyMessageIntoRamBuffer
       6  emAfGetPacketBufferFreeCount
       4  emAfGetPacketBufferTotalCount
       2  emAfPrintEzspEndpointFlags
     100  emAfSend
      36  emberAfGetAddressIndex
       4  emberAfGetAddressTableSize
       4  emberAfGetBindingIndex
       4  emberAfGetBindingTableSize
      30  emberAfGetChildData
       4  emberAfGetChildTableSize
       8  emberAfGetEui64
       4  emberAfGetKeyTableSize
      12  emberAfGetMfgString
       4  emberAfGetNeighborTableSize
      20  emberAfGetNetworkParameters
       4  emberAfGetNodeId
       4  emberAfGetNodeType
       4  emberAfGetPanId
       4  emberAfGetRouteTableSize
       4  emberAfGetSecurityLevel
       4  emberAfGetSleepyMulticastConfig
       4  emberAfGetStackProfile
     180  emberAfMain
       4  emberAfNetworkState
      32  emberAfSendEndDeviceBind
      18  emberEnergyScanResultHandler
      60  emberGetEndpoint
      70  emberGetEndpointCluster
      80  emberGetEndpointDescription
      72  emberIncomingMessageHandler
      56  emberMessageSentHandler
      42  emberNetworkFoundHandler
      32  emberRemoteDeleteBindingHandler
      94  emberRemoteSetBindingHandler
      20  emberScanCompleteHandler
      20  emberStackStatusHandler
       1  serialPort

 
     1 byte  in section .data
 1 182 bytes in section .text
 
 1 182 bytes of CODE memory
     1 byte  of DATA memory

Errors: none
Warnings: none
