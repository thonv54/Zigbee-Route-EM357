###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        18/Apr/2016  12:59:33
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\Work
#        Space\Silabs\Zigbee\EmberZNet5.6.0-GA\hal\micro\generic\mem-util.c
#    Command line =  
#        "D:\Work
#        Space\Silabs\Zigbee\EmberZNet5.6.0-GA\hal\micro\generic\mem-util.c" -D
#        SWITCH_4_BUTTON -D NULL_BTL -D CORTEXM3 -D CORTEXM3_EMBER_MICRO -D
#        CORTEXM3_EM357 -D PHY_EM3XX -D
#        "APPLICATION_TOKEN_HEADER=\"app/framework/util/tokens.h\"" -D
#        "ATTRIBUTE_STORAGE_CONFIGURATION=\"app/builder/ZigbeeRoute/ZigbeeRoute_endpoint_config.h\""
#        -D "BOARD_HEADER=\"app\builder\ZigbeeRoute\ZigbeeRoute_board.h\"" -D
#        "CONFIGURATION_HEADER=\"app/framework/util/config.h\"" -D
#        "GENERATED_TOKEN_HEADER=\"app/builder/ZigbeeRoute/ZigbeeRoute_tokens.h\""
#        -D "PLATFORM_HEADER=\"hal/micro/cortexm3/compiler/iar.h\"" -D
#        "ZA_GENERATED_HEADER=\"app/builder/ZigbeeRoute/ZigbeeRoute.h\"" -D
#        "__SOURCEFILE__=\"mem-util.c\"" -lC "D:\Work
#        Space\Silabs\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\4
#        nut\List\" --diag_suppress Pa050 -o "D:\Work
#        Space\Silabs\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\4
#        nut\Obj\" --debug --endian=little --cpu=Cortex-M3
#        --no_path_in_file_macros --separate_cluster_for_initialized_variables
#        -e --fpu=None --dlib_config "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        "D:\Work Space\Silabs\Zigbee\EmberZNet5.6.0-GA\hal\micro\generic\" -I
#        "D:\Work
#        Space\Silabs\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\" -I
#        "D:\Work
#        Space\Silabs\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\"
#        -I "D:\Work
#        Space\Silabs\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\app\framework\include\"
#        -I "D:\Work
#        Space\Silabs\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\app\util\"
#        -I "D:\Work
#        Space\Silabs\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\stack\"
#        -I "D:\Work
#        Space\Silabs\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\hal\"
#        -I "D:\Work
#        Space\Silabs\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\hal\..\"
#        -Ohz --use_c++_inline
#    List file    =  
#        D:\Work
#        Space\Silabs\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\4
#        nut\List\mem-util.lst
#    Object file  =  
#        D:\Work
#        Space\Silabs\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\4
#        nut\Obj\mem-util.o
#
###############################################################################

D:\Work Space\Silabs\Zigbee\EmberZNet5.6.0-GA\hal\micro\generic\mem-util.c
      1          /*
      2           * File: hal/micro/generic/mem-util.c
      3           * Description: generic memory manipulation routines.
      4           *
      5           * Author(s): Lee Taylor, lee@ember.com,
      6           *            Jeff Mathews, jm@ember.com
      7           *
      8           * Copyright 2004 by Ember Corporation. All rights reserved.                *80*
      9           */
     10          
     11          #include PLATFORM_HEADER
     12          #include "stack/include/ember-types.h"
     13          #include "include/error.h"
     14          
     15          #include "hal/hal.h"
     16          
     17          #if !defined(XAP2B) && !defined(UNIX)
     18          // A version of memmove. This can handle overlapping source and
     19          // destination regions.
     20          
     21          #ifndef EMBER_STACK_COBRA

   \                                 In section .text, align 2, keep-with-next
     22          void halCommonMemMove(void *dest, const void *src, int16u bytes)
     23          {
     24            int8u *d = (int8u *)dest;
     25            int8u *s = (int8u *)src;
     26          
     27            if (d > s) {
   \                     halCommonMemMove: (+1)
   \   00000000   0x4281             CMP      R1,R0
   \   00000002   0xD233             BCS.N    ??halCommonMemMove_0
     28              d += bytes - 1;
   \   00000004   0x1810             ADDS     R0,R2,R0
     29              s += bytes - 1;
   \   00000006   0x1851             ADDS     R1,R2,R1
   \   00000008   0x1E40             SUBS     R0,R0,#+1
   \   0000000A   0x1E49             SUBS     R1,R1,#+1
   \   0000000C   0xE010             B.N      ??halCommonMemMove_1
     30              #ifndef _HAL_SMALL_MEMUTILS_
     31                while(bytes >= 4) {
     32                  bytes -= 4;
     33                  *d-- = *s--;
   \                     ??halCommonMemMove_2: (+1)
   \   0000000E   0xF811 0x3901      LDRB     R3,[R1], #-1
   \   00000012   0xF800 0x3901      STRB     R3,[R0], #-1
   \   00000016   0x1F12             SUBS     R2,R2,#+4
     34                  *d-- = *s--;
   \   00000018   0xF811 0x3901      LDRB     R3,[R1], #-1
   \   0000001C   0xF800 0x3901      STRB     R3,[R0], #-1
     35                  *d-- = *s--;
   \   00000020   0xF811 0x3901      LDRB     R3,[R1], #-1
   \   00000024   0xF800 0x3901      STRB     R3,[R0], #-1
     36                  *d-- = *s--;
   \   00000028   0xF811 0x3901      LDRB     R3,[R1], #-1
   \   0000002C   0xF800 0x3901      STRB     R3,[R0], #-1
     37                }
   \                     ??halCommonMemMove_1: (+1)
   \   00000030   0xB292             UXTH     R2,R2
   \   00000032   0x2A04             CMP      R2,#+4
   \   00000034   0xDAEB             BGE.N    ??halCommonMemMove_2
     38              #endif // _HAL_SMALL_MEMUTILS_
     39              for(; bytes; bytes--) {
   \                     ??halCommonMemMove_3: (+1)
   \   00000036   0xB292             UXTH     R2,R2
   \   00000038   0x2A00             CMP      R2,#+0
   \   0000003A   0xBF1E             ITTT     NE 
     40                *d-- = *s--;
   \   0000003C   0xF811 0x3901      LDRBNE   R3,[R1], #-1
   \   00000040   0xF800 0x3901      STRBNE   R3,[R0], #-1
     41              }
   \   00000044   0x1E52             SUBNE    R2,R2,#+1
   \   00000046   0xD1F6             BNE.N    ??halCommonMemMove_3
   \   00000048   0x4770             BX       LR
     42            } else {
     43              #ifndef _HAL_SMALL_MEMUTILS_
     44                while(bytes >= 4) {
     45                  bytes -= 4;
     46                  *d++ = *s++;
   \                     ??halCommonMemMove_4: (+1)
   \   0000004A   0xF811 0x3B01      LDRB     R3,[R1], #+1
   \   0000004E   0xF800 0x3B01      STRB     R3,[R0], #+1
   \   00000052   0x1F12             SUBS     R2,R2,#+4
     47                  *d++ = *s++;
   \   00000054   0xF811 0x3B01      LDRB     R3,[R1], #+1
   \   00000058   0xF800 0x3B01      STRB     R3,[R0], #+1
     48                  *d++ = *s++;
   \   0000005C   0xF811 0x3B01      LDRB     R3,[R1], #+1
   \   00000060   0xF800 0x3B01      STRB     R3,[R0], #+1
     49                  *d++ = *s++;
   \   00000064   0xF811 0x3B01      LDRB     R3,[R1], #+1
   \   00000068   0xF800 0x3B01      STRB     R3,[R0], #+1
     50                }
   \                     ??halCommonMemMove_0: (+1)
   \   0000006C   0xB292             UXTH     R2,R2
   \   0000006E   0x2A04             CMP      R2,#+4
   \   00000070   0xDAEB             BGE.N    ??halCommonMemMove_4
     51              #endif // _HAL_SMALL_MEMUTILS_
     52              for(; bytes; bytes--) {
   \                     ??halCommonMemMove_5: (+1)
   \   00000072   0xB292             UXTH     R2,R2
   \   00000074   0x2A00             CMP      R2,#+0
   \   00000076   0xBF1E             ITTT     NE 
     53                *d++ = *s++;
   \   00000078   0xF811 0x3B01      LDRBNE   R3,[R1], #+1
   \   0000007C   0xF800 0x3B01      STRBNE   R3,[R0], #+1
     54              }
   \   00000080   0x1E52             SUBNE    R2,R2,#+1
   \   00000082   0xD1F6             BNE.N    ??halCommonMemMove_5
     55            }
     56          }
   \   00000084   0x4770             BX       LR               ;; return
     57          #endif //#ifndef EMBER_STACK_COBRA
     58          
     59          // Same as above except copies from Program space to RAM.
     60          // This routine never has to worry about overlapping source and dest

   \                                 In section .text, align 2, keep-with-next
     61          void halCommonMemPGMCopy(void* dest, const void PGM_NO_CONST *source, int16u bytes)
     62          {
     63            int8u *d = (int8u *)dest;
     64            PGM_PU s = (PGM_PU)source;
   \                     halCommonMemPGMCopy: (+1)
   \   00000000   0xE010             B.N      ??halCommonMemPGMCopy_0
     65          
     66            #ifndef _HAL_SMALL_MEMUTILS_
     67              while(bytes >= 4) {
     68                bytes -= 4;
     69                *d++ = *s++;
   \                     ??halCommonMemPGMCopy_1: (+1)
   \   00000002   0xF811 0x3B01      LDRB     R3,[R1], #+1
   \   00000006   0xF800 0x3B01      STRB     R3,[R0], #+1
   \   0000000A   0x1F12             SUBS     R2,R2,#+4
     70                *d++ = *s++;
   \   0000000C   0xF811 0x3B01      LDRB     R3,[R1], #+1
   \   00000010   0xF800 0x3B01      STRB     R3,[R0], #+1
     71                *d++ = *s++;
   \   00000014   0xF811 0x3B01      LDRB     R3,[R1], #+1
   \   00000018   0xF800 0x3B01      STRB     R3,[R0], #+1
     72                *d++ = *s++;
   \   0000001C   0xF811 0x3B01      LDRB     R3,[R1], #+1
   \   00000020   0xF800 0x3B01      STRB     R3,[R0], #+1
     73              }
   \                     ??halCommonMemPGMCopy_0: (+1)
   \   00000024   0xB292             UXTH     R2,R2
   \   00000026   0x2A04             CMP      R2,#+4
   \   00000028   0xDAEB             BGE.N    ??halCommonMemPGMCopy_1
     74            #endif // _HAL_SMALL_MEMUTILS_
     75            for(; bytes; bytes--) {
   \                     ??halCommonMemPGMCopy_2: (+1)
   \   0000002A   0xB292             UXTH     R2,R2
   \   0000002C   0x2A00             CMP      R2,#+0
   \   0000002E   0xBF1E             ITTT     NE 
     76              *d++ = *s++;
   \   00000030   0xF811 0x3B01      LDRBNE   R3,[R1], #+1
   \   00000034   0xF800 0x3B01      STRBNE   R3,[R0], #+1
     77            }
   \   00000038   0x1E52             SUBNE    R2,R2,#+1
   \   0000003A   0xD1F6             BNE.N    ??halCommonMemPGMCopy_2
     78          }
   \   0000003C   0x4770             BX       LR               ;; return
     79          

   \                                 In section .text, align 2, keep-with-next
     80          void halCommonMemSet(void *dest, int8u val, int16u bytes)
     81          {
   \                     halCommonMemSet: (+1)
   \   00000000   0x0013             MOVS     R3,R2
     82            int8u *d=(int8u *)dest;
     83          
     84            for(;bytes;bytes--) {
   \   00000002   0xD003             BEQ.N    ??halCommonMemSet_0
     85              *d++ = val;
   \   00000004   0x460A             MOV      R2,R1
   \   00000006   0x4619             MOV      R1,R3
   \   00000008   0x.... 0x....      B.W      __aeabi_memset
     86            }
     87          }
   \                     ??halCommonMemSet_0: (+1)
   \   0000000C   0x4770             BX       LR               ;; return
     88          

   \                                 In section .text, align 2, keep-with-next
     89          int16s halCommonMemCompare(const void *source0, const void *source1, int16u bytes)
     90          {
   \                     halCommonMemCompare: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
     91            int8u *s0 = (int8u *)source0;
     92            int8u *s1 = (int8u *)source1;
   \   00000002   0xE000             B.N      ??halCommonMemCompare_0
     93          
     94            for(; 0 < bytes; bytes--, s0++, s1++) {
   \                     ??halCommonMemCompare_1: (+1)
   \   00000004   0x1E52             SUBS     R2,R2,#+1
   \                     ??halCommonMemCompare_0: (+1)
   \   00000006   0xB292             UXTH     R2,R2
   \   00000008   0xB13A             CBZ.N    R2,??halCommonMemCompare_2
     95              int8u b0 = *s0;
   \   0000000A   0xF810 0x3B01      LDRB     R3,[R0], #+1
     96              int8u b1 = *s1;
   \   0000000E   0xF811 0x4B01      LDRB     R4,[R1], #+1
     97              if (b0 != b1)
   \   00000012   0x42A3             CMP      R3,R4
   \   00000014   0xD0F6             BEQ.N    ??halCommonMemCompare_1
     98                return b0 - b1;
   \   00000016   0x1B18             SUBS     R0,R3,R4
   \   00000018   0xBD10             POP      {R4,PC}
     99            }
    100            return 0;
   \                     ??halCommonMemCompare_2: (+1)
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0xBD10             POP      {R4,PC}          ;; return
    101          }
    102          
    103          // Test code for halCommonMemCompare().  There is no good place for unit tests
    104          // for this file.  If you change the function you should probably rerun the
    105          // test.
    106          //  {
    107          //    int8u s0[3] = { 0, 0, 0};
    108          //    int8u s1[3] = { 0, 0, 0};
    109          //    int8u i;
    110          //    assert(halCommonMemCompare(s0, s1, 0) == 0);
    111          //    assert(halCommonMemCompare(s0, s1, 3) == 0);
    112          //    for (i = 0; i < 3; i++) {
    113          //      s0[i] = 1;
    114          //      assert(halCommonMemCompare(s0, s1, 3) > 0);
    115          //      s1[i] = 2;
    116          //      assert(halCommonMemCompare(s0, s1, 3) < 0);
    117          //      s0[i] = 2;
    118          //    }
    119          //  }
    120          
    121          // Same again, except that the second source is in program space.
    122          

   \                                 In section .text, align 2, keep-with-next
    123          int8s halCommonMemPGMCompare(const void *source0, const void PGM_NO_CONST *source1, int16u bytes)
    124          {
   \                     halCommonMemPGMCompare: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    125            int8u *s0 = (int8u *)source0;
    126            int8u PGM *s1 = (int8u PGM *)source1;
   \   00000002   0xE000             B.N      ??halCommonMemPGMCompare_0
    127          
    128            for(; 0 < bytes; bytes--, s0++, s1++) {
   \                     ??halCommonMemPGMCompare_1: (+1)
   \   00000004   0x1E52             SUBS     R2,R2,#+1
   \                     ??halCommonMemPGMCompare_0: (+1)
   \   00000006   0xB292             UXTH     R2,R2
   \   00000008   0xB142             CBZ.N    R2,??halCommonMemPGMCompare_2
    129              int8u b0 = *s0;
   \   0000000A   0xF810 0x3B01      LDRB     R3,[R0], #+1
    130              int8u b1 = *s1;
   \   0000000E   0xF811 0x4B01      LDRB     R4,[R1], #+1
    131              if (b0 != b1)
   \   00000012   0x42A3             CMP      R3,R4
   \   00000014   0xD0F6             BEQ.N    ??halCommonMemPGMCompare_1
    132                return b0 - b1;
   \   00000016   0x1B18             SUBS     R0,R3,R4
   \   00000018   0xB240             SXTB     R0,R0
   \   0000001A   0xBD10             POP      {R4,PC}
    133            }
    134            return 0;
   \                     ??halCommonMemPGMCompare_2: (+1)
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0xBD10             POP      {R4,PC}          ;; return
    135          }
    136          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   halCommonMemCompare
       0   halCommonMemMove
       8   halCommonMemPGMCompare
       0   halCommonMemPGMCopy
       0   halCommonMemSet
         0   -> __aeabi_memset


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      30  halCommonMemCompare
     134  halCommonMemMove
      32  halCommonMemPGMCompare
      62  halCommonMemPGMCopy
      14  halCommonMemSet

 
 272 bytes in section .text
 
 272 bytes of CODE memory

Errors: none
Warnings: none
