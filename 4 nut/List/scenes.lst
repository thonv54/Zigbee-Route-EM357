###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        18/Apr/2016  12:59:44
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\Work
#        Space\Silabs\Zigbee\EmberZNet5.6.0-GA\app\framework\plugin\scenes\scenes.c
#    Command line =  
#        "D:\Work
#        Space\Silabs\Zigbee\EmberZNet5.6.0-GA\app\framework\plugin\scenes\scenes.c"
#        -D SWITCH_4_BUTTON -D NULL_BTL -D CORTEXM3 -D CORTEXM3_EMBER_MICRO -D
#        CORTEXM3_EM357 -D PHY_EM3XX -D
#        "APPLICATION_TOKEN_HEADER=\"app/framework/util/tokens.h\"" -D
#        "ATTRIBUTE_STORAGE_CONFIGURATION=\"app/builder/ZigbeeRoute/ZigbeeRoute_endpoint_config.h\""
#        -D "BOARD_HEADER=\"app\builder\ZigbeeRoute\ZigbeeRoute_board.h\"" -D
#        "CONFIGURATION_HEADER=\"app/framework/util/config.h\"" -D
#        "GENERATED_TOKEN_HEADER=\"app/builder/ZigbeeRoute/ZigbeeRoute_tokens.h\""
#        -D "PLATFORM_HEADER=\"hal/micro/cortexm3/compiler/iar.h\"" -D
#        "ZA_GENERATED_HEADER=\"app/builder/ZigbeeRoute/ZigbeeRoute.h\"" -D
#        "__SOURCEFILE__=\"scenes.c\"" -lC "D:\Work
#        Space\Silabs\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\4
#        nut\List\" --diag_suppress Pa050 -o "D:\Work
#        Space\Silabs\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\4
#        nut\Obj\" --debug --endian=little --cpu=Cortex-M3
#        --no_path_in_file_macros --separate_cluster_for_initialized_variables
#        -e --fpu=None --dlib_config "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        "D:\Work
#        Space\Silabs\Zigbee\EmberZNet5.6.0-GA\app\framework\plugin\scenes\" -I
#        "D:\Work
#        Space\Silabs\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\" -I
#        "D:\Work
#        Space\Silabs\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\"
#        -I "D:\Work
#        Space\Silabs\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\app\framework\include\"
#        -I "D:\Work
#        Space\Silabs\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\app\util\"
#        -I "D:\Work
#        Space\Silabs\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\stack\"
#        -I "D:\Work
#        Space\Silabs\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\hal\"
#        -I "D:\Work
#        Space\Silabs\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\hal\..\"
#        -Ohz --use_c++_inline
#    List file    =  
#        D:\Work
#        Space\Silabs\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\4
#        nut\List\scenes.lst
#    Object file  =  
#        D:\Work
#        Space\Silabs\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\4
#        nut\Obj\scenes.o
#
###############################################################################

D:\Work Space\Silabs\Zigbee\EmberZNet5.6.0-GA\app\framework\plugin\scenes\scenes.c
      1          // *******************************************************************
      2          // * scenes.c
      3          // *
      4          // *
      5          // * Copyright 2007 by Ember Corporation. All rights reserved.              *80*
      6          // *******************************************************************
      7          
      8          #include "../../include/af.h"
      9          #include "../../util/common.h"
     10          #include "scenes.h"
     11          
     12          #ifdef EMBER_AF_PLUGIN_ZLL_SCENES_SERVER
     13            #include "../zll-scenes-server/zll-scenes-server.h"
     14          #endif
     15          

   \                                 In section .bss, align 1
     16          int8u emberAfPluginScenesServerEntriesInUse = 0;
   \                     emberAfPluginScenesServerEntriesInUse:
   \   00000000                      DS8 1
     17          #if !defined(EMBER_AF_PLUGIN_SCENES_USE_TOKENS) || defined(EZSP_HOST)
     18            EmberAfSceneTableEntry emberAfPluginScenesServerSceneTable[EMBER_AF_PLUGIN_SCENES_TABLE_SIZE];
     19          #endif
     20          
     21          static boolean readServerAttribute(int8u endpoint,
     22                                             EmberAfClusterId clusterId,
     23                                             EmberAfAttributeId attributeId,
     24                                             PGM_P name,
     25                                             int8u *data,
     26                                             int8u size)
     27          {
     28            boolean success = FALSE;
     29            if (emberAfContainsServer(endpoint, clusterId)) {
     30              EmberAfStatus status = emberAfReadServerAttribute(endpoint,
     31                                                                clusterId,
     32                                                                attributeId,
     33                                                                data,
     34                                                                size);
     35              if (status == EMBER_ZCL_STATUS_SUCCESS) {
     36                success = TRUE;
     37              } else {
     38                emberAfScenesClusterPrintln("ERR: %ping %p 0x%x", "read", name, status);
     39              }
     40            }
     41            return success;
     42          }
     43          

   \                                 In section .text, align 2, keep-with-next
     44          static EmberAfStatus writeServerAttribute(int8u endpoint,
     45                                                    EmberAfClusterId clusterId,
     46                                                    EmberAfAttributeId attributeId,
     47                                                    PGM_P name,
     48                                                    int8u *data,
     49                                                    EmberAfAttributeType type)
     50          {
   \                     writeServerAttribute: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     51            EmberAfStatus status = emberAfWriteServerAttribute(endpoint,
     52                                                               clusterId,
     53                                                               attributeId,
     54                                                               data,
     55                                                               type);
     56            if (status != EMBER_ZCL_STATUS_SUCCESS) {
     57              emberAfScenesClusterPrintln("ERR: %ping %p 0x%x", "writ", name, status);
     58            }
     59            return status;
   \   00000002   0x9B03             LDR      R3,[SP, #+12]
   \   00000004   0x9300             STR      R3,[SP, #+0]
   \   00000006   0x9B02             LDR      R3,[SP, #+8]
   \   00000008   0x.... 0x....      BL       emberAfWriteServerAttribute
   \   0000000C   0xBD02             POP      {R1,PC}          ;; return
     60          }
     61          

   \                                 In section .text, align 2, keep-with-next
     62          void emberAfScenesClusterServerInitCallback(int8u endpoint)
     63          {
   \                     emberAfScenesClusterServerInitCallback: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
     64          #ifdef EMBER_AF_PLUGIN_SCENES_NAME_SUPPORT
     65            {
     66              // The high bit of Name Support indicates whether scene names are supported.
     67              int8u nameSupport = BIT(7);
     68              writeServerAttribute(endpoint,
     69                                   ZCL_SCENES_CLUSTER_ID,
     70                                   ZCL_SCENE_NAME_SUPPORT_ATTRIBUTE_ID,
     71                                   "name support",
     72                                   (int8u *)&nameSupport,
     73                                   ZCL_BITMAP8_ATTRIBUTE_TYPE);
     74            }
     75          #endif
     76          #if !defined(EMBER_AF_PLUGIN_SCENES_USE_TOKENS) || defined(EZSP_HOST)
     77            {
     78              int8u i;
     79              for (i = 0; i < EMBER_AF_PLUGIN_SCENES_TABLE_SIZE; i++) {
     80                EmberAfSceneTableEntry entry;
     81                emberAfPluginScenesServerRetrieveSceneEntry(entry, i);
     82                entry.endpoint = EMBER_AF_SCENE_TABLE_UNUSED_ENDPOINT_ID;
     83                emberAfPluginScenesServerSaveSceneEntry(entry, i);
     84              }
     85              emberAfPluginScenesServerSetNumSceneEntriesInUse(0);
     86            }
     87          #endif
     88            emberAfScenesSetSceneCountAttribute(endpoint,
     89                                                emberAfPluginScenesServerNumSceneEntriesInUse());
   \   00000004   0x.... 0x....      LDR.W    R5,??DataTable18_1
   \   00000008   0x.... 0x....      BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_7: (+1)
   \   0000000C   0x7829             LDRB     R1,[R5, #+0]
   \   0000000E   0x4620             MOV      R0,R4
   \   00000010   0xE8BD 0x4034      POP      {R2,R4,R5,LR}
   \   00000014                      REQUIRE emberAfScenesSetSceneCountAttribute
   \   00000014                      ;; // Fall through to label emberAfScenesSetSceneCountAttribute
     90          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3: (+1)
   \   00000000   0x2301             MOVS     R3,#+1
   \   00000002   0x227F             MOVS     R2,#+127
   \   00000004   0x2127             MOVS     R1,#+39
   \   00000006   0x4628             MOV      R0,R5
   \   00000008   0x.... 0x....      B.W      halInternalGetTokenData
     91          

   \                                 In section .text, align 2, keep-with-next
     92          EmberAfStatus emberAfScenesSetSceneCountAttribute(int8u endpoint,
     93                                                            int8u newCount)
     94          {
   \                     emberAfScenesSetSceneCountAttribute: (+1)
   \   00000000   0xB502             PUSH     {R1,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
     95            return writeServerAttribute(endpoint,
     96                                        ZCL_SCENES_CLUSTER_ID,
     97                                        ZCL_SCENE_COUNT_ATTRIBUTE_ID,
     98                                        "scene count",
     99                                        (int8u *)&newCount,
    100                                        ZCL_INT8U_ATTRIBUTE_TYPE);
   \   00000004   0x2120             MOVS     R1,#+32
   \   00000006   0x9101             STR      R1,[SP, #+4]
   \   00000008   0xA902             ADD      R1,SP,#+8
   \   0000000A   0x9100             STR      R1,[SP, #+0]
   \   0000000C   0x2200             MOVS     R2,#+0
   \   0000000E   0x.... 0x....      ADR.W    R3,`?<Constant "scene count">`
   \   00000012   0x....             B.N      ?Subroutine0
    101          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0x2105             MOVS     R1,#+5
   \   00000002   0x.... 0x....      BL       writeServerAttribute
   \   00000006   0xBD0E             POP      {R1-R3,PC}       ;; return
    102          

   \                                 In section .text, align 2, keep-with-next
    103          EmberAfStatus emberAfScenesMakeValid(int8u endpoint,
    104                                               int8u sceneId,
    105                                               int16u groupId)
    106          {
   \                     emberAfScenesMakeValid: (+1)
   \   00000000   0xB516             PUSH     {R1,R2,R4,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
   \   00000004   0x4604             MOV      R4,R0
    107            EmberAfStatus status;
    108            boolean valid = TRUE;
   \   00000006   0x2001             MOVS     R0,#+1
   \   00000008   0xF88D 0x0008      STRB     R0,[SP, #+8]
    109          
    110            // scene ID
    111            status = writeServerAttribute(endpoint,
    112                                          ZCL_SCENES_CLUSTER_ID,
    113                                          ZCL_CURRENT_SCENE_ATTRIBUTE_ID,
    114                                          "current scene",
    115                                          (int8u *)&sceneId,
    116                                          ZCL_INT8U_ATTRIBUTE_TYPE);
   \   0000000C   0x2020             MOVS     R0,#+32
   \   0000000E   0x9001             STR      R0,[SP, #+4]
   \   00000010   0xA804             ADD      R0,SP,#+16
   \   00000012   0x9000             STR      R0,[SP, #+0]
   \   00000014   0x2201             MOVS     R2,#+1
   \   00000016   0x.... 0x....      ADR.W    R3,`?<Constant "current scene">`
   \   0000001A   0x.... 0x....      BL       ?Subroutine6
    117            if (status != EMBER_ZCL_STATUS_SUCCESS) {
   \                     ??CrossCallReturnLabel_16: (+1)
   \   0000001E   0xB990             CBNZ.N   R0,??CrossCallReturnLabel_14
    118              return status;
    119            }
    120          
    121            // group ID
    122            status = writeServerAttribute(endpoint,
    123                                          ZCL_SCENES_CLUSTER_ID,
    124                                          ZCL_CURRENT_GROUP_ATTRIBUTE_ID,
    125                                          "current group",
    126                                          (int8u *)&groupId,
    127                                          ZCL_INT16U_ATTRIBUTE_TYPE);
   \   00000020   0x2021             MOVS     R0,#+33
   \   00000022   0x9001             STR      R0,[SP, #+4]
   \   00000024   0xA805             ADD      R0,SP,#+20
   \   00000026   0x9000             STR      R0,[SP, #+0]
   \   00000028   0x2202             MOVS     R2,#+2
   \   0000002A   0x.... 0x....      ADR.W    R3,`?<Constant "current group">`
   \   0000002E   0x.... 0x....      BL       ?Subroutine6
    128            if (status != EMBER_ZCL_STATUS_SUCCESS) {
   \                     ??CrossCallReturnLabel_15: (+1)
   \   00000032   0xB940             CBNZ.N   R0,??CrossCallReturnLabel_14
    129              return status;
    130            }
    131          
    132            status = writeServerAttribute(endpoint,
    133                                          ZCL_SCENES_CLUSTER_ID,
    134                                          ZCL_SCENE_VALID_ATTRIBUTE_ID,
    135                                          "scene valid",
    136                                          (int8u *)&valid,
    137                                          ZCL_BOOLEAN_ATTRIBUTE_TYPE);
    138            return status;
   \   00000034   0x2010             MOVS     R0,#+16
   \   00000036   0x9001             STR      R0,[SP, #+4]
   \   00000038   0xA802             ADD      R0,SP,#+8
   \   0000003A   0x9000             STR      R0,[SP, #+0]
   \   0000003C   0x2203             MOVS     R2,#+3
   \   0000003E   0x.... 0x....      ADR.W    R3,`?<Constant "scene valid">`
   \   00000042   0x.... 0x....      BL       ?Subroutine6
   \                     ??CrossCallReturnLabel_14: (+1)
   \   00000046   0xB006             ADD      SP,SP,#+24
   \   00000048   0xBD10             POP      {R4,PC}          ;; return
    139          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine6: (+1)
   \   00000000   0x2105             MOVS     R1,#+5
   \                     ??Subroutine6_0: (+1)
   \   00000002   0x4620             MOV      R0,R4
   \   00000004   0x....             B.N      writeServerAttribute
    140          

   \                                 In section .text, align 2, keep-with-next
    141          EmberAfStatus emberAfScenesClusterMakeInvalidCallback(int8u endpoint)
    142          {
   \                     emberAfScenesClusterMakeInvalidCallback: (+1)
   \   00000000   0xB5E0             PUSH     {R5-R7,LR}
    143            boolean valid = FALSE;
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0xF88D 0x1008      STRB     R1,[SP, #+8]
    144            return writeServerAttribute(endpoint,
    145                                        ZCL_SCENES_CLUSTER_ID,
    146                                        ZCL_SCENE_VALID_ATTRIBUTE_ID,
    147                                        "scene valid",
    148                                        (int8u *)&valid,
    149                                        ZCL_BOOLEAN_ATTRIBUTE_TYPE);
   \   00000008   0x2110             MOVS     R1,#+16
   \   0000000A   0x9101             STR      R1,[SP, #+4]
   \   0000000C   0xA902             ADD      R1,SP,#+8
   \   0000000E   0x9100             STR      R1,[SP, #+0]
   \   00000010   0x2203             MOVS     R2,#+3
   \   00000012   0x.... 0x....      ADR.W    R3,`?<Constant "scene valid">`
   \   00000016                      REQUIRE ?Subroutine0
   \   00000016                      ;; // Fall through to label ?Subroutine0
    150          }
    151          

   \                                 In section .text, align 2, keep-with-next
    152          void emAfPluginScenesServerPrintInfo(void)
    153          {
   \                     emAfPluginScenesServerPrintInfo: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
    154            int8u i;
    155            EmberAfSceneTableEntry entry;
    156            emberAfCorePrintln("using 0x%x out of 0x%x table slots",
    157                               emberAfPluginScenesServerNumSceneEntriesInUse(),
    158                               EMBER_AF_PLUGIN_SCENES_TABLE_SIZE);
    159            for (i = 0; i < EMBER_AF_PLUGIN_SCENES_TABLE_SIZE; i++) {
   \   00000004   0x2400             MOVS     R4,#+0
    160              emberAfPluginScenesServerRetrieveSceneEntry(entry, i);
   \                     ??emAfPluginScenesServerPrintInfo_0: (+1)
   \   00000006   0x230C             MOVS     R3,#+12
   \   00000008   0x4622             MOV      R2,R4
   \   0000000A   0x.... 0x....      BL       ??Subroutine7_0
    161              emberAfCorePrint("%x: ", i);
    162              if (entry.endpoint != EMBER_AF_SCENE_TABLE_UNUSED_ENDPOINT_ID) {
   \                     ??CrossCallReturnLabel_20: (+1)
   \   0000000E   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000012   0xB108             CBZ.N    R0,??emAfPluginScenesServerPrintInfo_1
    163                emberAfCorePrint("ep %x grp %2x scene %x tt %d",
    164                                 entry.endpoint,
    165                                 entry.groupId,
    166                                 entry.sceneId,
    167                                 entry.transitionTime);
    168                if (emberIsZllNetwork()) {
   \   00000014   0x.... 0x....      BL       emberIsZllNetwork
    169                  emberAfCorePrint(".%d", entry.transitionTime100ms);
    170                }
    171          #ifdef EMBER_AF_PLUGIN_SCENES_NAME_SUPPORT
    172                emberAfCorePrint(" name(%x)\"", emberAfStringLength(entry.name));
    173                emberAfCorePrintString(entry.name);
    174                emberAfCorePrint("\"");
    175          #endif
    176          #ifdef ZCL_USING_ON_OFF_CLUSTER_SERVER
    177                emberAfCorePrint(" on/off %x", entry.onOffValue);
    178          #endif
    179          #ifdef ZCL_USING_LEVEL_CONTROL_CLUSTER_SERVER
    180                emberAfCorePrint(" lvl %x", entry.currentLevelValue);
    181          #endif
    182          #ifdef ZCL_USING_THERMOSTAT_CLUSTER_SERVER
    183                emberAfCorePrint(" therm %2x %2x %x",
    184                                 entry.occupiedCoolingSetpointValue,
    185                                 entry.occupiedHeatingSetpointValue,
    186                                 entry.systemModeValue);
    187          #endif
    188          #ifdef ZCL_USING_COLOR_CONTROL_CLUSTER_SERVER
    189                emberAfCorePrint(" color %2x %2x",
    190                                 entry.currentXValue,
    191                                 entry.currentYValue);
    192                if (emberIsZllNetwork()) {
    193                  emberAfCorePrint(" %2x %x %x %x %2x",
    194                                   entry.enhancedCurrentHueValue,
    195                                   entry.currentSaturationValue,
    196                                   entry.colorLoopActiveValue,
    197                                   entry.colorLoopDirectionValue,
    198                                   entry.colorLoopTimeValue);
    199                }
    200                emberAfCoreFlush();
    201          #endif //ZCL_USING_COLOR_CONTROL_CLUSTER_SERVER
    202          #ifdef ZCL_USING_DOOR_LOCK_CLUSTER_SERVER
    203                emberAfCorePrint(" door %x", entry.lockStateValue);
    204          #endif
    205          #ifdef ZCL_USING_WINDOW_COVERING_CLUSTER_SERVER
    206                emberAfCorePrint(" window %x %x",
    207                                 entry.currentPositionLiftPercentageValue,
    208                                 entry.currentPositionTiltPercentageValue);
    209          #endif
    210              }
    211              emberAfCorePrintln("");
    212            }
   \                     ??emAfPluginScenesServerPrintInfo_1: (+1)
   \   00000018   0x1C64             ADDS     R4,R4,#+1
   \   0000001A   0x2C05             CMP      R4,#+5
   \   0000001C   0xDBF3             BLT.N    ??emAfPluginScenesServerPrintInfo_0
    213          }
   \   0000001E   0xBD1F             POP      {R0-R4,PC}       ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine7: (+1)
   \   00000000   0x230C             MOVS     R3,#+12
   \   00000002   0x462A             MOV      R2,R5
   \                     ??Subroutine7_0: (+1)
   \   00000004   0x2128             MOVS     R1,#+40
   \   00000006   0xA800             ADD      R0,SP,#+0
   \   00000008   0x.... 0x....      B.W      halInternalGetTokenData
    214          

   \                                 In section .text, align 2, keep-with-next
    215          boolean emberAfScenesClusterAddSceneCallback(int16u groupId,
    216                                                       int8u sceneId,
    217                                                       int16u transitionTime,
    218                                                       int8u *sceneName,
    219                                                       int8u *extensionFieldSets)
    220          {
   \                     emberAfScenesClusterAddSceneCallback: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
    221            return emberAfPluginScenesServerParseAddScene(emberAfCurrentCommand(),
    222                                                          groupId,
    223                                                          sceneId,
    224                                                          transitionTime,
    225                                                          sceneName,
    226                                                          extensionFieldSets);
   \   00000002   0x9300             STR      R3,[SP, #+0]
   \   00000004   0x4613             MOV      R3,R2
   \   00000006   0x460A             MOV      R2,R1
   \   00000008   0x4601             MOV      R1,R0
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable18_2
   \   0000000E   0x9C04             LDR      R4,[SP, #+16]
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0x9401             STR      R4,[SP, #+4]
   \   00000014   0x.... 0x....      BL       emberAfPluginScenesServerParseAddScene
   \   00000018   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    227          }
    228          

   \                                 In section .text, align 2, keep-with-next
    229          boolean emberAfScenesClusterViewSceneCallback(int16u groupId, int8u sceneId)
    230          {
    231            return emberAfPluginScenesServerParseViewScene(emberAfCurrentCommand(),
    232                                                           groupId,
    233                                                           sceneId);
   \                     emberAfScenesClusterViewSceneCallback: (+1)
   \   00000000   0x460A             MOV      R2,R1
   \   00000002   0x4601             MOV      R1,R0
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable18_2
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0x....             B.N      emberAfPluginScenesServerParseViewScene
    234          }
    235          

   \                                 In section .text, align 2, keep-with-next
    236          boolean emberAfScenesClusterRemoveSceneCallback(int16u groupId, int8u sceneId)
    237          {
   \                     emberAfScenesClusterRemoveSceneCallback: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB084             SUB      SP,SP,#+16
   \   00000006   0x4604             MOV      R4,R0
   \   00000008   0x4688             MOV      R8,R1
    238            EmberAfStatus status = EMBER_ZCL_STATUS_NOT_FOUND;
   \   0000000A   0x278B             MOVS     R7,#+139
    239          
    240            emberAfScenesClusterPrintln("RX: RemoveScene 0x%2x, 0x%x", groupId, sceneId);
    241          
    242            // If a group id is specified but this endpoint isn't in it, take no action.
    243            if (groupId != ZCL_SCENES_GLOBAL_SCENE_GROUP_ID
    244                && !emberAfGroupsClusterEndpointInGroupCallback(emberAfCurrentEndpoint(),
    245                                                                groupId)) {
   \   0000000C   0x.... 0x....      LDR.W    R6,??DataTable18_2
   \   00000010   0xB124             CBZ.N    R4,??emberAfScenesClusterRemoveSceneCallback_0
   \   00000012   0x.... 0x....      BL       ?Subroutine12
   \                     ??CrossCallReturnLabel_36: (+1)
   \   00000016   0xB908             CBNZ.N   R0,??emberAfScenesClusterRemoveSceneCallback_0
    246              status = EMBER_ZCL_STATUS_INVALID_FIELD;
   \   00000018   0x2785             MOVS     R7,#+133
   \   0000001A   0xE022             B.N      ??emberAfScenesClusterRemoveSceneCallback_1
    247            } else {
    248              int8u i;
    249              for (i = 0; i < EMBER_AF_PLUGIN_SCENES_TABLE_SIZE; i++) {
   \                     ??emberAfScenesClusterRemoveSceneCallback_0: (+1)
   \   0000001C   0x2500             MOVS     R5,#+0
    250                EmberAfSceneTableEntry entry;
    251                emberAfPluginScenesServerRetrieveSceneEntry(entry, i);
   \                     ??emberAfScenesClusterRemoveSceneCallback_2: (+1)
   \   0000001E   0x.... 0x....      BL       ?Subroutine7
    252                if (entry.endpoint == emberAfCurrentEndpoint()
    253                    && entry.groupId == groupId
    254                    && entry.sceneId == sceneId) {
   \                     ??CrossCallReturnLabel_22: (+1)
   \   00000022   0x6831             LDR      R1,[R6, #+0]
   \   00000024   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000028   0x6809             LDR      R1,[R1, #+0]
   \   0000002A   0x7949             LDRB     R1,[R1, #+5]
   \   0000002C   0x4288             CMP      R0,R1
   \   0000002E   0xBF01             ITTTT    EQ 
   \   00000030   0xF8BD 0x0002      LDRHEQ   R0,[SP, #+2]
   \   00000034   0x42A0             CMPEQ    R0,R4
   \   00000036   0xF89D 0x0004      LDRBEQ   R0,[SP, #+4]
   \   0000003A   0x4540             CMPEQ    R0,R8
   \   0000003C   0xD10D             BNE.N    ??emberAfScenesClusterRemoveSceneCallback_3
    255                  entry.endpoint = EMBER_AF_SCENE_TABLE_UNUSED_ENDPOINT_ID;
   \   0000003E   0x.... 0x....      BL       ?Subroutine9
    256                  emberAfPluginScenesServerSaveSceneEntry(entry, i);
    257                  emberAfPluginScenesServerDecrNumSceneEntriesInUse();
   \                     ??CrossCallReturnLabel_29: (+1)
   \   00000042   0x.... 0x....      LDR.W    R7,??DataTable18_1
   \   00000046   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_4: (+1)
   \   0000004A   0x.... 0x....      BL       ?Subroutine4
    258                  emberAfScenesSetSceneCountAttribute(emberAfCurrentEndpoint(),
    259                                                      emberAfPluginScenesServerNumSceneEntriesInUse());
   \                     ??CrossCallReturnLabel_10: (+1)
   \   0000004E   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_3: (+1)
   \   00000052   0x.... 0x....      BL       ?Subroutine11
    260                  status = EMBER_ZCL_STATUS_SUCCESS;
   \                     ??CrossCallReturnLabel_34: (+1)
   \   00000056   0x2700             MOVS     R7,#+0
    261                  break;
   \   00000058   0xE003             B.N      ??emberAfScenesClusterRemoveSceneCallback_1
    262                }
    263              }
   \                     ??emberAfScenesClusterRemoveSceneCallback_3: (+1)
   \   0000005A   0x1C68             ADDS     R0,R5,#+1
   \   0000005C   0xB2C5             UXTB     R5,R0
   \   0000005E   0x2D05             CMP      R5,#+5
   \   00000060   0xDBDD             BLT.N    ??emberAfScenesClusterRemoveSceneCallback_2
   \                     ??emberAfScenesClusterRemoveSceneCallback_1: (+1)
   \   00000062   0x6830             LDR      R0,[R6, #+0]
   \   00000064   0x7900             LDRB     R0,[R0, #+4]
   \   00000066   0x2800             CMP      R0,#+0
   \   00000068   0xBF18             IT       NE 
   \   0000006A   0x2801             CMPNE    R0,#+1
   \   0000006C   0xD109             BNE.N    ??emberAfScenesClusterRemoveSceneCallback_4
    264            }
    265          
    266            // Remove Scene commands are only responded to when they are addressed to a
    267            // single device.
    268            if (emberAfCurrentCommand()->type == EMBER_INCOMING_UNICAST
    269                || emberAfCurrentCommand()->type == EMBER_INCOMING_UNICAST_REPLY) {
    270              emberAfFillCommandScenesClusterRemoveSceneResponse(status,
    271                                                                 groupId,
    272                                                                 sceneId);
   \   0000006E   0xF8CD 0x8008      STR      R8,[SP, #+8]
   \   00000072   0x9401             STR      R4,[SP, #+4]
   \   00000074   0x9700             STR      R7,[SP, #+0]
   \   00000076   0x....             ADR.N    R3,??DataTable14  ;; "uvu"
   \   00000078   0x2202             MOVS     R2,#+2
   \   0000007A   0x.... 0x....      BL       ?Subroutine8
    273              emberAfSendResponse();
   \                     ??CrossCallReturnLabel_27: (+1)
   \   0000007E   0x.... 0x....      BL       emberAfSendResponse
    274            }
    275            return TRUE;
   \                     ??emberAfScenesClusterRemoveSceneCallback_4: (+1)
   \   00000082   0x....             B.N      ?Subroutine1
    276          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine11: (+1)
   \   00000000   0x6830             LDR      R0,[R6, #+0]
   \   00000002   0x7839             LDRB     R1,[R7, #+0]
   \                     ??Subroutine11_0: (+1)
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x7940             LDRB     R0,[R0, #+5]
   \   00000008   0x....             B.N      emberAfScenesSetSceneCountAttribute

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine4: (+1)
   \   00000000   0x7838             LDRB     R0,[R7, #+0]
   \   00000002   0x1E40             SUBS     R0,R0,#+1
   \                     ??Subroutine4_0: (+1)
   \   00000004   0x7038             STRB     R0,[R7, #+0]
   \   00000006   0x2301             MOVS     R3,#+1
   \   00000008   0x463A             MOV      R2,R7
   \   0000000A   0x217F             MOVS     R1,#+127
   \   0000000C   0x2027             MOVS     R0,#+39
   \   0000000E   0x.... 0x....      B.W      halInternalSetTokenData

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0xB004             ADD      SP,SP,#+16
   \   00000004   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine12: (+1)
   \   00000000   0x6830             LDR      R0,[R6, #+0]
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x7940             LDRB     R0,[R0, #+5]
   \   00000006   0x4621             MOV      R1,R4
   \   00000008   0x.... 0x....      B.W      emberAfGroupsClusterEndpointInGroupCallback

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2: (+1)
   \   00000000   0x2301             MOVS     R3,#+1
   \   00000002   0x227F             MOVS     R2,#+127
   \   00000004   0x2127             MOVS     R1,#+39
   \   00000006   0x4638             MOV      R0,R7
   \   00000008   0x.... 0x....      B.W      halInternalGetTokenData

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine8: (+1)
   \   00000000   0x2105             MOVS     R1,#+5
   \   00000002   0x2019             MOVS     R0,#+25
   \   00000004   0x.... 0x....      B.W      emberAfFillExternalBuffer

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine9: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   00000006   0x230C             MOVS     R3,#+12
   \   00000008   0xAA00             ADD      R2,SP,#+0
   \   0000000A   0x4629             MOV      R1,R5
   \   0000000C   0x2028             MOVS     R0,#+40
   \   0000000E   0x.... 0x....      B.W      halInternalSetTokenData
    277          

   \                                 In section .text, align 2, keep-with-next
    278          boolean emberAfScenesClusterRemoveAllScenesCallback(int16u groupId)
    279          {
   \                     emberAfScenesClusterRemoveAllScenesCallback: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB084             SUB      SP,SP,#+16
   \   00000006   0x4604             MOV      R4,R0
    280            EmberAfStatus status = EMBER_ZCL_STATUS_INVALID_FIELD;
   \   00000008   0x2585             MOVS     R5,#+133
    281          
    282            emberAfScenesClusterPrintln("RX: RemoveAllScenes 0x%2x", groupId);
    283          
    284            if (groupId == ZCL_SCENES_GLOBAL_SCENE_GROUP_ID
    285                || emberAfGroupsClusterEndpointInGroupCallback(emberAfCurrentEndpoint(),
    286                                                               groupId)) {
   \   0000000A   0x.... 0x....      LDR.W    R6,??DataTable18_2
   \   0000000E   0xB11C             CBZ.N    R4,??emberAfScenesClusterRemoveAllScenesCallback_0
   \   00000010   0x.... 0x....      BL       ?Subroutine12
   \                     ??CrossCallReturnLabel_35: (+1)
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD023             BEQ.N    ??CrossCallReturnLabel_33
    287              int8u i;
    288              status = EMBER_ZCL_STATUS_SUCCESS;
   \                     ??emberAfScenesClusterRemoveAllScenesCallback_0: (+1)
   \   00000018   0x2500             MOVS     R5,#+0
    289              for (i = 0; i < EMBER_AF_PLUGIN_SCENES_TABLE_SIZE; i++) {
   \   0000001A   0x46A8             MOV      R8,R5
   \   0000001C   0x.... 0x....      LDR.W    R7,??DataTable18_1
    290                EmberAfSceneTableEntry entry;
    291                emberAfPluginScenesServerRetrieveSceneEntry(entry, i);
   \                     ??emberAfScenesClusterRemoveAllScenesCallback_1: (+1)
   \   00000020   0x230C             MOVS     R3,#+12
   \   00000022   0x4642             MOV      R2,R8
   \   00000024   0x.... 0x....      BL       ??Subroutine7_0
    292                if (entry.endpoint == emberAfCurrentEndpoint()
    293                    && entry.groupId == groupId) {
   \                     ??CrossCallReturnLabel_19: (+1)
   \   00000028   0x6831             LDR      R1,[R6, #+0]
   \   0000002A   0x.... 0x....      BL       ?Subroutine15
   \                     ??CrossCallReturnLabel_44: (+1)
   \   0000002E   0xBF04             ITT      EQ 
   \   00000030   0xF8BD 0x0002      LDRHEQ   R0,[SP, #+2]
   \   00000034   0x42A0             CMPEQ    R0,R4
   \   00000036   0xD10A             BNE.N    ??CrossCallReturnLabel_9
    294                  entry.endpoint = EMBER_AF_SCENE_TABLE_UNUSED_ENDPOINT_ID;
   \   00000038   0xF88D 0x5000      STRB     R5,[SP, #+0]
    295                  emberAfPluginScenesServerSaveSceneEntry(entry, i);
   \   0000003C   0x230C             MOVS     R3,#+12
   \   0000003E   0xAA00             ADD      R2,SP,#+0
   \   00000040   0x4641             MOV      R1,R8
   \   00000042   0x.... 0x....      BL       ?Subroutine13
    296                  emberAfPluginScenesServerDecrNumSceneEntriesInUse();
   \                     ??CrossCallReturnLabel_40: (+1)
   \   00000046   0x.... 0x....      BL       ?Subroutine2
    297                }
    298              }
   \                     ??CrossCallReturnLabel_2: (+1)
   \   0000004A   0x.... 0x....      BL       ?Subroutine4
   \                     ??CrossCallReturnLabel_9: (+1)
   \   0000004E   0xF108 0x0801      ADD      R8,R8,#+1
   \   00000052   0xF1B8 0x0F05      CMP      R8,#+5
   \   00000056   0xDBE3             BLT.N    ??emberAfScenesClusterRemoveAllScenesCallback_1
    299              emberAfScenesSetSceneCountAttribute(emberAfCurrentEndpoint(),
    300                                                  emberAfPluginScenesServerNumSceneEntriesInUse());
   \   00000058   0x.... 0x....      BL       ?Subroutine2
    301            }
   \                     ??CrossCallReturnLabel_1: (+1)
   \   0000005C   0x.... 0x....      BL       ?Subroutine11
   \                     ??CrossCallReturnLabel_33: (+1)
   \   00000060   0x6830             LDR      R0,[R6, #+0]
   \   00000062   0x7900             LDRB     R0,[R0, #+4]
   \   00000064   0x2800             CMP      R0,#+0
   \   00000066   0xBF18             IT       NE 
   \   00000068   0x2801             CMPNE    R0,#+1
   \   0000006A   0xD107             BNE.N    ??emberAfScenesClusterRemoveAllScenesCallback_2
    302          
    303            // Remove All Scenes commands are only responded to when they are addressed
    304            // to a single device.
    305            if (emberAfCurrentCommand()->type == EMBER_INCOMING_UNICAST
    306                || emberAfCurrentCommand()->type == EMBER_INCOMING_UNICAST_REPLY) {
    307              emberAfFillCommandScenesClusterRemoveAllScenesResponse(status, groupId);
   \   0000006C   0x9401             STR      R4,[SP, #+4]
   \   0000006E   0x9500             STR      R5,[SP, #+0]
   \   00000070   0x....             ADR.N    R3,??DataTable14_1  ;; 0x75, 0x76, 0x00, 0x00
   \   00000072   0x2203             MOVS     R2,#+3
   \   00000074   0x.... 0x....      BL       ?Subroutine8
    308              emberAfSendResponse();
   \                     ??CrossCallReturnLabel_26: (+1)
   \   00000078   0x.... 0x....      BL       emberAfSendResponse
    309            }
    310            return TRUE;
   \                     ??emberAfScenesClusterRemoveAllScenesCallback_2: (+1)
   \   0000007C                      REQUIRE ?Subroutine1
   \   0000007C                      ;; // Fall through to label ?Subroutine1
    311          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine15: (+1)
   \   00000000   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000004   0x6809             LDR      R1,[R1, #+0]
   \   00000006   0x7949             LDRB     R1,[R1, #+5]
   \   00000008   0x4288             CMP      R0,R1
   \   0000000A   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine13: (+1)
   \   00000000   0x2028             MOVS     R0,#+40
   \   00000002   0x.... 0x....      B.W      halInternalSetTokenData
    312          

   \                                 In section .text, align 2, keep-with-next
    313          boolean emberAfScenesClusterStoreSceneCallback(int16u groupId, int8u sceneId)
    314          {
   \                     emberAfScenesClusterStoreSceneCallback: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    315            EmberAfStatus status;
    316            emberAfScenesClusterPrintln("RX: StoreScene 0x%2x, 0x%x", groupId, sceneId);
    317            status = emberAfScenesClusterStoreCurrentSceneCallback(emberAfCurrentEndpoint(),
    318                                                                   groupId,
    319                                                                   sceneId);
   \   00000002   0x.... 0x....      LDR.W    R6,??DataTable18_2
   \   00000006   0x4604             MOV      R4,R0
   \   00000008   0x6830             LDR      R0,[R6, #+0]
   \   0000000A   0xB084             SUB      SP,SP,#+16
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0x7940             LDRB     R0,[R0, #+5]
   \   00000010   0x460D             MOV      R5,R1
   \   00000012   0x462A             MOV      R2,R5
   \   00000014   0x4621             MOV      R1,R4
   \   00000016   0x.... 0x....      BL       emberAfScenesClusterStoreCurrentSceneCallback
   \   0000001A   0x6831             LDR      R1,[R6, #+0]
   \   0000001C   0x7909             LDRB     R1,[R1, #+4]
   \   0000001E   0x2900             CMP      R1,#+0
   \   00000020   0xBF18             IT       NE 
   \   00000022   0x2901             CMPNE    R1,#+1
   \   00000024   0xD108             BNE.N    ??emberAfScenesClusterStoreSceneCallback_0
    320          
    321            // Store Scene commands are only responded to when they are addressed to a
    322            // single device.
    323            if (emberAfCurrentCommand()->type == EMBER_INCOMING_UNICAST
    324                || emberAfCurrentCommand()->type == EMBER_INCOMING_UNICAST_REPLY) {
    325              emberAfFillCommandScenesClusterStoreSceneResponse(status, groupId, sceneId);
   \   00000026   0x9000             STR      R0,[SP, #+0]
   \   00000028   0x9502             STR      R5,[SP, #+8]
   \   0000002A   0x9401             STR      R4,[SP, #+4]
   \   0000002C   0x....             ADR.N    R3,??DataTable14  ;; "uvu"
   \   0000002E   0x2204             MOVS     R2,#+4
   \   00000030   0x.... 0x....      BL       ?Subroutine8
    326              emberAfSendResponse();
   \                     ??CrossCallReturnLabel_25: (+1)
   \   00000034   0x.... 0x....      BL       emberAfSendResponse
    327            }
    328            return TRUE;
   \                     ??emberAfScenesClusterStoreSceneCallback_0: (+1)
   \   00000038   0x2001             MOVS     R0,#+1
   \   0000003A   0xB004             ADD      SP,SP,#+16
   \   0000003C   0xBD70             POP      {R4-R6,PC}       ;; return
    329          }
    330          

   \                                 In section .text, align 2, keep-with-next
    331          boolean emberAfScenesClusterRecallSceneCallback(int16u groupId, int8u sceneId)
    332          {
    333            EmberAfStatus status;
    334            emberAfScenesClusterPrintln("RX: RecallScene 0x%2x, 0x%x", groupId, sceneId);
    335            status = emberAfScenesClusterRecallSavedSceneCallback(emberAfCurrentEndpoint(),
    336                                                                  groupId,
    337                                                                  sceneId);
   \                     emberAfScenesClusterRecallSceneCallback: (+1)
   \   00000000   0x460A             MOV      R2,R1
   \   00000002   0xB580             PUSH     {R7,LR}
   \   00000004   0x4601             MOV      R1,R0
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable18_2
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0x7940             LDRB     R0,[R0, #+5]
   \   00000010   0x.... 0x....      BL       emberAfScenesClusterRecallSavedSceneCallback
    338          #ifdef EMBER_AF_PLUGIN_ZLL_SCENES_SERVER
    339            if (status == EMBER_ZCL_STATUS_SUCCESS) {
    340              emberAfPluginZllScenesServerRecallSceneZllExtensions(emberAfCurrentEndpoint());
    341            }
    342          #endif
    343            emberAfSendImmediateDefaultResponse(status);
   \   00000014   0x.... 0x....      BL       emberAfSendImmediateDefaultResponse
    344            return TRUE;
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0xBD02             POP      {R1,PC}          ;; return
    345          }
    346          

   \                                 In section .text, align 2, keep-with-next
    347          boolean emberAfScenesClusterGetSceneMembershipCallback(int16u groupId)
    348          {
   \                     emberAfScenesClusterGetSceneMembershipCallback: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB086             SUB      SP,SP,#+24
   \   00000006   0x4606             MOV      R6,R0
    349            EmberAfStatus status = EMBER_ZCL_STATUS_SUCCESS;
   \   00000008   0x2700             MOVS     R7,#+0
    350            int8u sceneCount = 0;
   \   0000000A   0x2500             MOVS     R5,#+0
    351          
    352            emberAfScenesClusterPrintln("RX: GetSceneMembership 0x%2x", groupId);
    353          
    354          
    355            // If this is a ZLL device, Get Scene Membership commands can only be
    356            // addressed to a single device.
    357            if (emberIsZllNetwork()) {
   \   0000000C   0x.... 0x....      LDR.W    R4,??DataTable18_2
   \   00000010   0x.... 0x....      BL       emberIsZllNetwork
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xBF1F             ITTTT    NE 
   \   00000018   0x6820             LDRNE    R0,[R4, #+0]
   \   0000001A   0x7900             LDRBNE   R0,[R0, #+4]
   \   0000001C   0x2800             CMPNE    R0,#+0
   \   0000001E   0x2801             CMPNE    R0,#+1
   \   00000020   0xD14A             BNE.N    ??emberAfScenesClusterGetSceneMembershipCallbac_0
    358              if (emberAfCurrentCommand()->type != EMBER_INCOMING_UNICAST
    359                  && emberAfCurrentCommand()->type != EMBER_INCOMING_UNICAST_REPLY) {
    360                return TRUE;
    361              }
    362            }
    363          
    364            if (!groupId == ZCL_SCENES_GLOBAL_SCENE_GROUP_ID
    365                && !emberAfGroupsClusterEndpointInGroupCallback(emberAfCurrentEndpoint(),
    366                                                                groupId)) {
   \   00000022   0xB13E             CBZ.N    R6,??emberAfScenesClusterGetSceneMembershipCallbac_1
   \   00000024   0x6820             LDR      R0,[R4, #+0]
   \   00000026   0x6800             LDR      R0,[R0, #+0]
   \   00000028   0x7940             LDRB     R0,[R0, #+5]
   \   0000002A   0x4631             MOV      R1,R6
   \   0000002C   0x.... 0x....      BL       emberAfGroupsClusterEndpointInGroupCallback
   \   00000030   0xB900             CBNZ.N   R0,??emberAfScenesClusterGetSceneMembershipCallbac_1
    367              status = EMBER_ZCL_STATUS_INVALID_FIELD;
   \   00000032   0x2785             MOVS     R7,#+133
    368            }
    369          
    370            // The status, capacity, and group id are always included in the response, but
    371            // the scene count and scene list are only included if the group id matched.
    372            emberAfFillExternalBuffer((ZCL_CLUSTER_SPECIFIC_COMMAND
    373                                       | ZCL_FRAME_CONTROL_SERVER_TO_CLIENT
    374                                       | EMBER_AF_DEFAULT_RESPONSE_POLICY_RESPONSES),
    375                                      ZCL_SCENES_CLUSTER_ID,
    376                                      ZCL_GET_SCENE_MEMBERSHIP_RESPONSE_COMMAND_ID,
    377                                      "uuv",
    378                                      status,
    379                                      (EMBER_AF_PLUGIN_SCENES_TABLE_SIZE
    380                                       - emberAfPluginScenesServerNumSceneEntriesInUse()), // capacity
    381                                      groupId);
   \                     ??emberAfScenesClusterGetSceneMembershipCallbac_1: (+1)
   \   00000034   0x.... 0x....      LDR.W    R8,??DataTable18_1
   \   00000038   0x2301             MOVS     R3,#+1
   \   0000003A   0x227F             MOVS     R2,#+127
   \   0000003C   0x2127             MOVS     R1,#+39
   \   0000003E   0x4640             MOV      R0,R8
   \   00000040   0x.... 0x....      BL       halInternalGetTokenData
   \   00000044   0xF898 0x0000      LDRB     R0,[R8, #+0]
   \   00000048   0x9602             STR      R6,[SP, #+8]
   \   0000004A   0xF1C0 0x0005      RSB      R0,R0,#+5
   \   0000004E   0x9001             STR      R0,[SP, #+4]
   \   00000050   0x9700             STR      R7,[SP, #+0]
   \   00000052   0x....             ADR.N    R3,??DataTable15  ;; "uuv"
   \   00000054   0x2206             MOVS     R2,#+6
   \   00000056   0x.... 0x....      BL       ?Subroutine8
    382            if (status == EMBER_ZCL_STATUS_SUCCESS) {
   \                     ??CrossCallReturnLabel_24: (+1)
   \   0000005A   0xBB27             CBNZ.N   R7,??emberAfScenesClusterGetSceneMembershipCallbac_2
    383              int8u i, sceneList[EMBER_AF_PLUGIN_SCENES_TABLE_SIZE];
    384              for (i = 0; i < EMBER_AF_PLUGIN_SCENES_TABLE_SIZE; i++) {
   \   0000005C   0x46A8             MOV      R8,R5
   \   0000005E   0xAF03             ADD      R7,SP,#+12
    385                EmberAfSceneTableEntry entry;
    386                emberAfPluginScenesServerRetrieveSceneEntry(entry, i);
   \                     ??emberAfScenesClusterGetSceneMembershipCallbac_3: (+1)
   \   00000060   0x230C             MOVS     R3,#+12
   \   00000062   0x4642             MOV      R2,R8
   \   00000064   0x.... 0x....      BL       ??Subroutine7_0
    387                if (entry.endpoint == emberAfCurrentEndpoint()
    388                    && entry.groupId == groupId) {
   \                     ??CrossCallReturnLabel_18: (+1)
   \   00000068   0x6821             LDR      R1,[R4, #+0]
   \   0000006A   0x.... 0x....      BL       ?Subroutine15
   \                     ??CrossCallReturnLabel_45: (+1)
   \   0000006E   0xBF04             ITT      EQ 
   \   00000070   0xF8BD 0x0002      LDRHEQ   R0,[SP, #+2]
   \   00000074   0x42B0             CMPEQ    R0,R6
   \   00000076   0xD104             BNE.N    ??emberAfScenesClusterGetSceneMembershipCallbac_4
    389                  sceneList[sceneCount] = entry.sceneId;
   \   00000078   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   0000007C   0xB2ED             UXTB     R5,R5
   \   0000007E   0x55E8             STRB     R0,[R5, R7]
    390                  sceneCount++;
   \   00000080   0x1C6D             ADDS     R5,R5,#+1
    391                }
    392              }
   \                     ??emberAfScenesClusterGetSceneMembershipCallbac_4: (+1)
   \   00000082   0xF108 0x0801      ADD      R8,R8,#+1
   \   00000086   0xF1B8 0x0F05      CMP      R8,#+5
   \   0000008A   0xDBE9             BLT.N    ??emberAfScenesClusterGetSceneMembershipCallbac_3
    393              emberAfPutInt8uInResp(sceneCount);
   \   0000008C   0xB2E8             UXTB     R0,R5
   \   0000008E   0x.... 0x....      BL       emberAfPutInt8uInResp
    394              for (i = 0; i < sceneCount; i++) {
   \   00000092   0x2600             MOVS     R6,#+0
   \   00000094   0xE003             B.N      ??emberAfScenesClusterGetSceneMembershipCallbac_5
    395                emberAfPutInt8uInResp(sceneList[i]);
   \                     ??emberAfScenesClusterGetSceneMembershipCallbac_6: (+1)
   \   00000096   0x5DF0             LDRB     R0,[R6, R7]
   \   00000098   0x.... 0x....      BL       emberAfPutInt8uInResp
    396              }
   \   0000009C   0x1C76             ADDS     R6,R6,#+1
   \                     ??emberAfScenesClusterGetSceneMembershipCallbac_5: (+1)
   \   0000009E   0xB2F6             UXTB     R6,R6
   \   000000A0   0xB2ED             UXTB     R5,R5
   \   000000A2   0x42AE             CMP      R6,R5
   \   000000A4   0xD3F7             BCC.N    ??emberAfScenesClusterGetSceneMembershipCallbac_6
   \                     ??emberAfScenesClusterGetSceneMembershipCallbac_2: (+1)
   \   000000A6   0x6820             LDR      R0,[R4, #+0]
   \   000000A8   0x7900             LDRB     R0,[R0, #+4]
   \   000000AA   0x2800             CMP      R0,#+0
   \   000000AC   0xBF18             IT       NE 
   \   000000AE   0x2801             CMPNE    R0,#+1
   \   000000B0   0xD000             BEQ.N    ??emberAfScenesClusterGetSceneMembershipCallbac_7
   \   000000B2   0xB10D             CBZ.N    R5,??emberAfScenesClusterGetSceneMembershipCallbac_0
    397            }
    398          
    399            // Get Scene Membership commands are only responded to when they are
    400            // addressed to a single device or when an entry in the table matches.
    401            if (emberAfCurrentCommand()->type == EMBER_INCOMING_UNICAST
    402                || emberAfCurrentCommand()->type == EMBER_INCOMING_UNICAST_REPLY
    403                || sceneCount != 0) {
    404              emberAfSendResponse();
   \                     ??emberAfScenesClusterGetSceneMembershipCallbac_7: (+1)
   \   000000B4   0x.... 0x....      BL       emberAfSendResponse
    405            }
    406            return TRUE;
   \                     ??emberAfScenesClusterGetSceneMembershipCallbac_0: (+1)
   \   000000B8   0x2001             MOVS     R0,#+1
   \   000000BA   0xB006             ADD      SP,SP,#+24
   \   000000BC   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    407          }
    408          

   \                                 In section .text, align 2, keep-with-next
    409          EmberAfStatus emberAfScenesClusterStoreCurrentSceneCallback(int8u endpoint,
    410                                                                      int16u groupId,
    411                                                                      int8u sceneId)
    412          {
   \                     emberAfScenesClusterStoreCurrentSceneCallback: (+1)
   \   00000000   0xE92D 0x43F0      PUSH     {R4-R9,LR}
   \   00000004   0xB085             SUB      SP,SP,#+20
   \   00000006   0x4680             MOV      R8,R0
   \   00000008   0x460D             MOV      R5,R1
   \   0000000A   0x4691             MOV      R9,R2
    413            EmberAfSceneTableEntry entry;
    414            int8u i, index = EMBER_AF_SCENE_TABLE_NULL_INDEX;
   \   0000000C   0x27FF             MOVS     R7,#+255
    415          
    416            // If a group id is specified but this endpoint isn't in it, take no action.
    417            if (groupId != ZCL_SCENES_GLOBAL_SCENE_GROUP_ID
    418                && !emberAfGroupsClusterEndpointInGroupCallback(endpoint, groupId)) {
   \   0000000E   0xB125             CBZ.N    R5,??emberAfScenesClusterStoreCurrentSceneCallback_0
   \   00000010   0x.... 0x....      BL       emberAfGroupsClusterEndpointInGroupCallback
   \   00000014   0xB908             CBNZ.N   R0,??emberAfScenesClusterStoreCurrentSceneCallback_0
    419              return EMBER_ZCL_STATUS_INVALID_FIELD;
   \   00000016   0x2085             MOVS     R0,#+133
   \   00000018   0xE069             B.N      ??emberAfScenesClusterStoreCurrentSceneCallback_1
    420            }
    421          
    422            for (i = 0; i < EMBER_AF_PLUGIN_SCENES_TABLE_SIZE; i++) {
   \                     ??emberAfScenesClusterStoreCurrentSceneCallback_0: (+1)
   \   0000001A   0x2400             MOVS     R4,#+0
    423              emberAfPluginScenesServerRetrieveSceneEntry(entry, i);
   \                     ??emberAfScenesClusterStoreCurrentSceneCallback_2: (+1)
   \   0000001C   0x230C             MOVS     R3,#+12
   \   0000001E   0x4622             MOV      R2,R4
   \   00000020   0x2128             MOVS     R1,#+40
   \   00000022   0xA801             ADD      R0,SP,#+4
   \   00000024   0x.... 0x....      BL       halInternalGetTokenData
    424              if (entry.endpoint == endpoint
    425                  && entry.groupId == groupId
    426                  && entry.sceneId == sceneId) {
   \   00000028   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   0000002C   0x4540             CMP      R0,R8
   \   0000002E   0xBF01             ITTTT    EQ 
   \   00000030   0xF8BD 0x0006      LDRHEQ   R0,[SP, #+6]
   \   00000034   0x42A8             CMPEQ    R0,R5
   \   00000036   0xF89D 0x0008      LDRBEQ   R0,[SP, #+8]
   \   0000003A   0x4548             CMPEQ    R0,R9
   \   0000003C   0xD101             BNE.N    ??emberAfScenesClusterStoreCurrentSceneCallback_3
    427                index = i;
   \   0000003E   0x4627             MOV      R7,R4
    428                break;
   \   00000040   0xE009             B.N      ??emberAfScenesClusterStoreCurrentSceneCallback_4
    429              } else if (index == EMBER_AF_SCENE_TABLE_NULL_INDEX
    430                         && entry.endpoint == EMBER_AF_SCENE_TABLE_UNUSED_ENDPOINT_ID) {
   \                     ??emberAfScenesClusterStoreCurrentSceneCallback_3: (+1)
   \   00000042   0x2FFF             CMP      R7,#+255
   \   00000044   0xBF02             ITTT     EQ 
   \   00000046   0xF89D 0x0004      LDRBEQ   R0,[SP, #+4]
   \   0000004A   0x2800             CMPEQ    R0,#+0
    431                index = i;
   \   0000004C   0x4627             MOVEQ    R7,R4
    432              }
    433            }
   \   0000004E   0x1C60             ADDS     R0,R4,#+1
   \   00000050   0xB2C4             UXTB     R4,R0
   \   00000052   0x2C05             CMP      R4,#+5
   \   00000054   0xDBE2             BLT.N    ??emberAfScenesClusterStoreCurrentSceneCallback_2
    434          
    435            // If the target index is still zero, the table is full.
    436            if (index == EMBER_AF_SCENE_TABLE_NULL_INDEX) {
   \                     ??emberAfScenesClusterStoreCurrentSceneCallback_4: (+1)
   \   00000056   0x2FFF             CMP      R7,#+255
   \   00000058   0xBF08             IT       EQ 
    437              return EMBER_ZCL_STATUS_INSUFFICIENT_SPACE;
   \   0000005A   0x2089             MOVEQ    R0,#+137
   \   0000005C   0xD047             BEQ.N    ??emberAfScenesClusterStoreCurrentSceneCallback_1
    438            }
    439          
    440            emberAfPluginScenesServerRetrieveSceneEntry(entry, index);
   \   0000005E   0x230C             MOVS     R3,#+12
   \   00000060   0x463A             MOV      R2,R7
   \   00000062   0x2128             MOVS     R1,#+40
   \   00000064   0xA801             ADD      R0,SP,#+4
   \   00000066   0x.... 0x....      BL       halInternalGetTokenData
    441          
    442            // When creating a new entry or refreshing an existing one, the extension
    443            // fields are updated with the current state of other clusters on the device.
    444          #ifdef ZCL_USING_ON_OFF_CLUSTER_SERVER
    445            entry.hasOnOffValue = readServerAttribute(endpoint,
    446                                                      ZCL_ON_OFF_CLUSTER_ID,
    447                                                      ZCL_ON_OFF_ATTRIBUTE_ID,
    448                                                      "on/off",
    449                                                      (int8u *)&entry.onOffValue,
    450                                                      sizeof(entry.onOffValue));
   \   0000006A   0x2600             MOVS     R6,#+0
   \   0000006C   0x2106             MOVS     R1,#+6
   \   0000006E   0x4640             MOV      R0,R8
   \   00000070   0x.... 0x....      BL       emberAfContainsServer
   \   00000074   0xB150             CBZ.N    R0,??emberAfScenesClusterStoreCurrentSceneCallback_5
   \   00000076   0x2001             MOVS     R0,#+1
   \   00000078   0x9000             STR      R0,[SP, #+0]
   \   0000007A   0xF10D 0x030E      ADD      R3,SP,#+14
   \   0000007E   0x2200             MOVS     R2,#+0
   \   00000080   0x2106             MOVS     R1,#+6
   \   00000082   0x4640             MOV      R0,R8
   \   00000084   0x.... 0x....      BL       emberAfReadServerAttribute
   \   00000088   0xB900             CBNZ.N   R0,??emberAfScenesClusterStoreCurrentSceneCallback_5
   \   0000008A   0x2601             MOVS     R6,#+1
   \                     ??emberAfScenesClusterStoreCurrentSceneCallback_5: (+1)
   \   0000008C   0xF88D 0x600D      STRB     R6,[SP, #+13]
    451          #endif
    452          #ifdef ZCL_USING_LEVEL_CONTROL_CLUSTER_SERVER
    453            entry.hasCurrentLevelValue = readServerAttribute(endpoint,
    454                                                             ZCL_LEVEL_CONTROL_CLUSTER_ID,
    455                                                             ZCL_CURRENT_LEVEL_ATTRIBUTE_ID,
    456                                                             "current level",
    457                                                             (int8u *)&entry.currentLevelValue,
    458                                                             sizeof(entry.currentLevelValue));
    459          #endif
    460          #ifdef ZCL_USING_THERMOSTAT_CLUSTER_SERVER
    461            entry.hasOccupiedCoolingSetpointValue = readServerAttribute(endpoint,
    462                                                                        ZCL_THERMOSTAT_CLUSTER_ID,
    463                                                                        ZCL_OCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID,
    464                                                                        "occupied cooling setpoint",
    465                                                                        (int8u *)&entry.occupiedCoolingSetpointValue,
    466                                                                        sizeof(entry.occupiedCoolingSetpointValue));
    467            entry.hasOccupiedHeatingSetpointValue = readServerAttribute(endpoint,
    468                                                                        ZCL_THERMOSTAT_CLUSTER_ID,
    469                                                                        ZCL_OCCUPIED_HEATING_SETPOINT_ATTRIBUTE_ID,
    470                                                                        "occupied heating setpoint",
    471                                                                        (int8u *)&entry.occupiedHeatingSetpointValue,
    472                                                                        sizeof(entry.occupiedHeatingSetpointValue));
    473            entry.hasSystemModeValue = readServerAttribute(endpoint,
    474                                                           ZCL_THERMOSTAT_CLUSTER_ID,
    475                                                           ZCL_SYSTEM_MODE_ATTRIBUTE_ID,
    476                                                           "system mode",
    477                                                           (int8u *)&entry.systemModeValue,
    478                                                           sizeof(entry.systemModeValue));
    479          #endif
    480          #ifdef ZCL_USING_COLOR_CONTROL_CLUSTER_SERVER
    481            entry.hasCurrentXValue = readServerAttribute(endpoint,
    482                                                         ZCL_COLOR_CONTROL_CLUSTER_ID,
    483                                                         ZCL_COLOR_CONTROL_CURRENT_X_ATTRIBUTE_ID,
    484                                                         "current x",
    485                                                         (int8u *)&entry.currentXValue,
    486                                                         sizeof(entry.currentXValue));
    487            entry.hasCurrentYValue = readServerAttribute(endpoint,
    488                                                         ZCL_COLOR_CONTROL_CLUSTER_ID,
    489                                                         ZCL_COLOR_CONTROL_CURRENT_Y_ATTRIBUTE_ID,
    490                                                         "current y",
    491                                                         (int8u *)&entry.currentYValue,
    492                                                         sizeof(entry.currentYValue));
    493            if (emberIsZllNetwork()) {
    494              entry.hasEnhancedCurrentHueValue = readServerAttribute(endpoint,
    495                                                                     ZCL_COLOR_CONTROL_CLUSTER_ID,
    496                                                                     ZCL_COLOR_CONTROL_ENHANCED_CURRENT_HUE_ATTRIBUTE_ID,
    497                                                                     "enhanced current hue",
    498                                                                     (int8u *)&entry.enhancedCurrentHueValue,
    499                                                                     sizeof(entry.enhancedCurrentHueValue));
    500              entry.hasCurrentSaturationValue = readServerAttribute(endpoint,
    501                                                                    ZCL_COLOR_CONTROL_CLUSTER_ID,
    502                                                                    ZCL_COLOR_CONTROL_CURRENT_SATURATION_ATTRIBUTE_ID,
    503                                                                    "current saturation",
    504                                                                    (int8u *)&entry.currentSaturationValue,
    505                                                                    sizeof(entry.currentSaturationValue));
    506              entry.hasColorLoopActiveValue = readServerAttribute(endpoint,
    507                                                                  ZCL_COLOR_CONTROL_CLUSTER_ID,
    508                                                                  ZCL_COLOR_CONTROL_COLOR_LOOP_ACTIVE_ATTRIBUTE_ID,
    509                                                                  "color loop active",
    510                                                                  (int8u *)&entry.colorLoopActiveValue,
    511                                                                  sizeof(entry.colorLoopActiveValue));
    512              entry.hasColorLoopDirectionValue = readServerAttribute(endpoint,
    513                                                                     ZCL_COLOR_CONTROL_CLUSTER_ID,
    514                                                                     ZCL_COLOR_CONTROL_COLOR_LOOP_DIRECTION_ATTRIBUTE_ID,
    515                                                                     "color loop direction",
    516                                                                     (int8u *)&entry.colorLoopDirectionValue,
    517                                                                     sizeof(entry.colorLoopDirectionValue));
    518              entry.hasColorLoopTimeValue = readServerAttribute(endpoint,
    519                                                                ZCL_COLOR_CONTROL_CLUSTER_ID,
    520                                                                ZCL_COLOR_CONTROL_COLOR_LOOP_TIME_ATTRIBUTE_ID,
    521                                                                "color loop time",
    522                                                                (int8u *)&entry.colorLoopTimeValue,
    523                                                                sizeof(entry.colorLoopTimeValue));
    524          
    525            }
    526          #endif //ZCL_USING_COLOR_CONTROL_CLUSTER_SERVER
    527          #ifdef ZCL_USING_DOOR_LOCK_CLUSTER_SERVER
    528            entry.hasLockStateValue = readServerAttribute(endpoint,
    529                                                          ZCL_DOOR_LOCK_CLUSTER_ID,
    530                                                          ZCL_LOCK_STATE_ATTRIBUTE_ID,
    531                                                          "lock state",
    532                                                          (int8u *)&entry.lockStateValue,
    533                                                          sizeof(entry.lockStateValue));
    534          #endif
    535          #ifdef ZCL_USING_WINDOW_COVERING_CLUSTER_SERVER
    536            entry.hasCurrentPositionLiftPercentageValue = readServerAttribute(endpoint,
    537                                                                              ZCL_WINDOW_COVERING_CLUSTER_ID,
    538                                                                              ZCL_CURRENT_LIFT_PERCENTAGE_ATTRIBUTE_ID,
    539                                                                              "current position lift percentage",
    540                                                                              (int8u *)&entry.currentPositionLiftPercentageValue,
    541                                                                              sizeof(entry.currentPositionLiftPercentageValue));
    542            entry.hasCurrentPositionTiltPercentageValue = readServerAttribute(endpoint,
    543                                                                              ZCL_WINDOW_COVERING_CLUSTER_ID,
    544                                                                              ZCL_CURRENT_TILT_PERCENTAGE_ATTRIBUTE_ID,
    545                                                                              "current position tilt percentage",
    546                                                                              (int8u *)&entry.currentPositionTiltPercentageValue,
    547                                                                              sizeof(entry.currentPositionTiltPercentageValue));
    548          #endif
    549          
    550            // When creating a new entry, the name is set to the null string (i.e., the
    551            // length is set to zero) and the transition time is set to zero.  The scene
    552            // count must be increased and written to the attribute table when adding a
    553            // new scene.  Otherwise, these fields and the count are left alone.
    554            if (i != index) {
   \   00000090   0x42BC             CMP      R4,R7
   \   00000092   0xD021             BEQ.N    ??emberAfScenesClusterStoreCurrentSceneCallback_6
    555              entry.endpoint = endpoint;
    556              entry.groupId = groupId;
    557              entry.sceneId = sceneId;
    558          #ifdef EMBER_AF_PLUGIN_SCENES_NAME_SUPPORT
    559              entry.name[0] = 0;
    560          #endif
    561              entry.transitionTime = 0;
   \   00000094   0x2000             MOVS     R0,#+0
   \   00000096   0xF88D 0x8004      STRB     R8,[SP, #+4]
   \   0000009A   0xF8AD 0x5006      STRH     R5,[SP, #+6]
   \   0000009E   0xF88D 0x9008      STRB     R9,[SP, #+8]
   \   000000A2   0xF8AD 0x000A      STRH     R0,[SP, #+10]
    562              if (emberIsZllNetwork()) {
   \   000000A6   0x.... 0x....      BL       emberIsZllNetwork
   \   000000AA   0xB110             CBZ.N    R0,??emberAfScenesClusterStoreCurrentSceneCallback_7
    563                entry.transitionTime100ms = 0;
   \   000000AC   0x2000             MOVS     R0,#+0
   \   000000AE   0xF88D 0x000C      STRB     R0,[SP, #+12]
    564              }
    565              emberAfPluginScenesServerIncrNumSceneEntriesInUse();
   \                     ??emberAfScenesClusterStoreCurrentSceneCallback_7: (+1)
   \   000000B2   0x2301             MOVS     R3,#+1
   \   000000B4   0x.... 0x....      LDR.W    R4,??DataTable18_1
   \   000000B8   0x.... 0x....      BL       ?Subroutine5
   \                     ??CrossCallReturnLabel_12: (+1)
   \   000000BC   0x7820             LDRB     R0,[R4, #+0]
   \   000000BE   0x1C40             ADDS     R0,R0,#+1
   \   000000C0   0x7020             STRB     R0,[R4, #+0]
   \   000000C2   0x2301             MOVS     R3,#+1
   \   000000C4   0x4622             MOV      R2,R4
   \   000000C6   0x.... 0x....      BL       ?Subroutine14
    566              emberAfScenesSetSceneCountAttribute(endpoint,
    567                                                  emberAfPluginScenesServerNumSceneEntriesInUse());
   \                     ??CrossCallReturnLabel_43: (+1)
   \   000000CA   0x2301             MOVS     R3,#+1
   \   000000CC   0x.... 0x....      BL       ?Subroutine5
    568            }
   \                     ??CrossCallReturnLabel_11: (+1)
   \   000000D0   0x7821             LDRB     R1,[R4, #+0]
   \   000000D2   0x4640             MOV      R0,R8
   \   000000D4   0x.... 0x....      BL       emberAfScenesSetSceneCountAttribute
    569          
    570            // Save the scene entry and mark is as valid by storing its scene and group
    571            // ids in the attribute table and setting valid to true.
    572            emberAfPluginScenesServerSaveSceneEntry(entry, index);
   \                     ??emberAfScenesClusterStoreCurrentSceneCallback_6: (+1)
   \   000000D8   0x230C             MOVS     R3,#+12
   \   000000DA   0xAA01             ADD      R2,SP,#+4
   \   000000DC   0x4639             MOV      R1,R7
   \   000000DE   0x.... 0x....      BL       ?Subroutine13
    573            emberAfScenesMakeValid(endpoint, sceneId, groupId);
   \                     ??CrossCallReturnLabel_39: (+1)
   \   000000E2   0x462A             MOV      R2,R5
   \   000000E4   0x4649             MOV      R1,R9
   \   000000E6   0x4640             MOV      R0,R8
   \   000000E8   0x.... 0x....      BL       emberAfScenesMakeValid
    574            return EMBER_ZCL_STATUS_SUCCESS;
   \   000000EC   0x2000             MOVS     R0,#+0
   \                     ??emberAfScenesClusterStoreCurrentSceneCallback_1: (+1)
   \   000000EE   0xB005             ADD      SP,SP,#+20
   \   000000F0   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return
    575          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine5: (+1)
   \   00000000   0x227F             MOVS     R2,#+127
   \   00000002   0x2127             MOVS     R1,#+39
   \   00000004   0x4620             MOV      R0,R4
   \   00000006   0x.... 0x....      B.W      halInternalGetTokenData

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine14: (+1)
   \   00000000   0x217F             MOVS     R1,#+127
   \   00000002   0x2027             MOVS     R0,#+39
   \   00000004   0x.... 0x....      B.W      halInternalSetTokenData
    576          

   \                                 In section .text, align 2, keep-with-next
    577          EmberAfStatus emberAfScenesClusterRecallSavedSceneCallback(int8u endpoint,
    578                                                                     int16u groupId,
    579                                                                     int8u sceneId)
    580          {
   \                     emberAfScenesClusterRecallSavedSceneCallback: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x4616             MOV      R6,R2
    581            if (groupId != ZCL_SCENES_GLOBAL_SCENE_GROUP_ID
    582                && !emberAfGroupsClusterEndpointInGroupCallback(endpoint, groupId)) {
   \   0000000A   0xD004             BEQ.N    ??emberAfScenesClusterRecallSavedSceneCallback_0
   \   0000000C   0x.... 0x....      BL       emberAfGroupsClusterEndpointInGroupCallback
   \   00000010   0xB908             CBNZ.N   R0,??emberAfScenesClusterRecallSavedSceneCallback_0
    583              return EMBER_ZCL_STATUS_INVALID_FIELD;
   \   00000012   0x2085             MOVS     R0,#+133
   \   00000014   0xE02B             B.N      ??emberAfScenesClusterRecallSavedSceneCallback_1
    584            } else {
    585              int8u i;
    586              for (i = 0; i < EMBER_AF_PLUGIN_SCENES_TABLE_SIZE; i++) {
   \                     ??emberAfScenesClusterRecallSavedSceneCallback_0: (+1)
   \   00000016   0x2700             MOVS     R7,#+0
    587                EmberAfSceneTableEntry entry;
    588                emberAfPluginScenesServerRetrieveSceneEntry(entry, i);
   \                     ??emberAfScenesClusterRecallSavedSceneCallback_2: (+1)
   \   00000018   0x230C             MOVS     R3,#+12
   \   0000001A   0x463A             MOV      R2,R7
   \   0000001C   0x2128             MOVS     R1,#+40
   \   0000001E   0xA802             ADD      R0,SP,#+8
   \   00000020   0x.... 0x....      BL       halInternalGetTokenData
    589                if (entry.endpoint == endpoint
    590                    && entry.groupId == groupId
    591                    && entry.sceneId == sceneId) {
   \   00000024   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \   00000028   0x42A0             CMP      R0,R4
   \   0000002A   0xBF01             ITTTT    EQ 
   \   0000002C   0xF8BD 0x000A      LDRHEQ   R0,[SP, #+10]
   \   00000030   0x42A8             CMPEQ    R0,R5
   \   00000032   0xF89D 0x000C      LDRBEQ   R0,[SP, #+12]
   \   00000036   0x42B0             CMPEQ    R0,R6
   \   00000038   0xD114             BNE.N    ??emberAfScenesClusterRecallSavedSceneCallback_3
    592          #ifdef ZCL_USING_ON_OFF_CLUSTER_SERVER
    593                  if (entry.hasOnOffValue) {
   \   0000003A   0xF89D 0x0011      LDRB     R0,[SP, #+17]
   \   0000003E   0xB150             CBZ.N    R0,??CrossCallReturnLabel_13
    594                    writeServerAttribute(endpoint,
    595                                         ZCL_ON_OFF_CLUSTER_ID,
    596                                         ZCL_ON_OFF_ATTRIBUTE_ID,
    597                                         "on/off",
    598                                         (int8u *)&entry.onOffValue,
    599                                         ZCL_BOOLEAN_ATTRIBUTE_TYPE);
   \   00000040   0x2010             MOVS     R0,#+16
   \   00000042   0x9001             STR      R0,[SP, #+4]
   \   00000044   0xF10D 0x0012      ADD      R0,SP,#+18
   \   00000048   0x9000             STR      R0,[SP, #+0]
   \   0000004A   0x2200             MOVS     R2,#+0
   \   0000004C   0x.... 0x....      ADR.W    R3,`?<Constant "on/off">`
   \   00000050   0x2106             MOVS     R1,#+6
   \   00000052   0x.... 0x....      BL       ??Subroutine6_0
    600                  }
    601          #endif
    602          #ifdef ZCL_USING_LEVEL_CONTROL_CLUSTER_SERVER
    603                  if (entry.hasCurrentLevelValue) {
    604                    writeServerAttribute(endpoint,
    605                                         ZCL_LEVEL_CONTROL_CLUSTER_ID,
    606                                         ZCL_CURRENT_LEVEL_ATTRIBUTE_ID,
    607                                         "current level",
    608                                         (int8u *)&entry.currentLevelValue,
    609                                         ZCL_INT8U_ATTRIBUTE_TYPE);
    610                  }
    611          #endif
    612          #ifdef ZCL_USING_THERMOSTAT_CLUSTER_SERVER
    613                  if (entry.hasOccupiedCoolingSetpointValue) {
    614                    writeServerAttribute(endpoint,
    615                                         ZCL_THERMOSTAT_CLUSTER_ID,
    616                                         ZCL_OCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID,
    617                                         "occupied cooling setpoint",
    618                                         (int8u *)&entry.occupiedCoolingSetpointValue,
    619                                         ZCL_INT16S_ATTRIBUTE_TYPE);
    620                  }
    621                  if (entry.hasOccupiedHeatingSetpointValue) {
    622                    writeServerAttribute(endpoint,
    623                                         ZCL_THERMOSTAT_CLUSTER_ID,
    624                                         ZCL_OCCUPIED_HEATING_SETPOINT_ATTRIBUTE_ID,
    625                                         "occupied heating setpoint",
    626                                         (int8u *)&entry.occupiedHeatingSetpointValue,
    627                                         ZCL_INT16S_ATTRIBUTE_TYPE);
    628                  }
    629                  if (entry.hasSystemModeValue) {
    630                    writeServerAttribute(endpoint,
    631                                         ZCL_THERMOSTAT_CLUSTER_ID,
    632                                         ZCL_SYSTEM_MODE_ATTRIBUTE_ID,
    633                                         "system mode",
    634                                         (int8u *)&entry.systemModeValue,
    635                                         ZCL_INT8U_ATTRIBUTE_TYPE);
    636                  }
    637          #endif
    638          #ifdef ZCL_USING_COLOR_CONTROL_CLUSTER_SERVER
    639                  if (entry.hasCurrentXValue) {
    640                    writeServerAttribute(endpoint,
    641                        ZCL_COLOR_CONTROL_CLUSTER_ID,
    642                        ZCL_COLOR_CONTROL_CURRENT_X_ATTRIBUTE_ID,
    643                        "current x",
    644                        (int8u *)&entry.currentXValue,
    645                        ZCL_INT16U_ATTRIBUTE_TYPE);
    646                  }
    647                  if (entry.hasCurrentYValue) {
    648                    writeServerAttribute(endpoint,
    649                        ZCL_COLOR_CONTROL_CLUSTER_ID,
    650                        ZCL_COLOR_CONTROL_CURRENT_Y_ATTRIBUTE_ID,
    651                        "current y",
    652                        (int8u *)&entry.currentYValue,
    653                        ZCL_INT16U_ATTRIBUTE_TYPE);
    654                  }
    655                  
    656                  // Per ZLL CCB, value of 0 for X and Y means enhanced scene attributes
    657                  // will be used
    658                  if (emberIsZllNetwork()
    659                      && entry.hasCurrentXValue
    660                      && entry.hasCurrentYValue
    661                      && (entry.currentXValue == 0)
    662                      && (entry.currentYValue == 0)){
    663                      if (entry.hasEnhancedCurrentHueValue) {
    664                        writeServerAttribute(endpoint,
    665                            ZCL_COLOR_CONTROL_CLUSTER_ID,
    666                            ZCL_COLOR_CONTROL_ENHANCED_CURRENT_HUE_ATTRIBUTE_ID,
    667                            "enhanced current hue",
    668                            (int8u *)&entry.enhancedCurrentHueValue,
    669                            ZCL_INT16U_ATTRIBUTE_TYPE);
    670                      }
    671                      if (entry.hasCurrentSaturationValue) {
    672                        writeServerAttribute(endpoint,
    673                            ZCL_COLOR_CONTROL_CLUSTER_ID,
    674                            ZCL_COLOR_CONTROL_CURRENT_SATURATION_ATTRIBUTE_ID,
    675                            "current saturation",
    676                            (int8u *)&entry.currentSaturationValue,
    677                            ZCL_INT8U_ATTRIBUTE_TYPE);
    678                      }
    679                      if (entry.hasColorLoopActiveValue) {
    680                        writeServerAttribute(endpoint,
    681                            ZCL_COLOR_CONTROL_CLUSTER_ID,
    682                            ZCL_COLOR_CONTROL_COLOR_LOOP_ACTIVE_ATTRIBUTE_ID,
    683                            "color loop active",
    684                            (int8u *)&entry.colorLoopActiveValue,
    685                            ZCL_INT8U_ATTRIBUTE_TYPE);
    686                      }
    687                      if (entry.hasColorLoopDirectionValue) {
    688                        writeServerAttribute(endpoint,
    689                            ZCL_COLOR_CONTROL_CLUSTER_ID,
    690                            ZCL_COLOR_CONTROL_COLOR_LOOP_DIRECTION_ATTRIBUTE_ID,
    691                            "color loop direction",
    692                            (int8u *)&entry.colorLoopDirectionValue,
    693                            ZCL_INT8U_ATTRIBUTE_TYPE);
    694                      }
    695                      if (entry.hasColorLoopTimeValue) {
    696                        writeServerAttribute(endpoint,
    697                            ZCL_COLOR_CONTROL_CLUSTER_ID,
    698                            ZCL_COLOR_CONTROL_COLOR_LOOP_TIME_ATTRIBUTE_ID,
    699                            "color loop time",
    700                            (int8u *)&entry.colorLoopTimeValue,
    701                            ZCL_INT16U_ATTRIBUTE_TYPE);
    702                      }
    703                    }
    704          #endif //ZCL_USING_COLOR_CONTROL_CLUSTER_SERVER
    705          #ifdef ZCL_USING_DOOR_LOCK_CLUSTER_SERVER
    706                  if (entry.hasLockStateValue) {
    707                    writeServerAttribute(endpoint,
    708                                         ZCL_DOOR_LOCK_CLUSTER_ID,
    709                                         ZCL_LOCK_STATE_ATTRIBUTE_ID,
    710                                         "lock state",
    711                                         (int8u *)&entry.lockStateValue,
    712                                         ZCL_INT8U_ATTRIBUTE_TYPE);
    713                  }
    714          #endif
    715          #ifdef ZCL_USING_WINDOW_COVERING_CLUSTER_SERVER
    716                  if (entry.hasCurrentPositionLiftPercentageValue) {
    717                    writeServerAttribute(endpoint,
    718                                         ZCL_WINDOW_COVERING_CLUSTER_ID,
    719                                         ZCL_CURRENT_LIFT_PERCENTAGE_ATTRIBUTE_ID,
    720                                         "current position lift percentage",
    721                                         (int8u *)&entry.currentPositionLiftPercentageValue,
    722                                         ZCL_INT8U_ATTRIBUTE_TYPE);
    723                  }
    724                  if (entry.hasCurrentPositionTiltPercentageValue) {
    725                    writeServerAttribute(endpoint,
    726                                         ZCL_WINDOW_COVERING_CLUSTER_ID,
    727                                         ZCL_CURRENT_TILT_PERCENTAGE_ATTRIBUTE_ID,
    728                                         "current position tilt percentage",
    729                                         (int8u *)&entry.currentPositionTiltPercentageValue,
    730                                         ZCL_INT8U_ATTRIBUTE_TYPE);
    731                  }
    732          #endif
    733                  emberAfScenesMakeValid(endpoint, sceneId, groupId);
   \                     ??CrossCallReturnLabel_13: (+1)
   \   00000056   0x462A             MOV      R2,R5
   \   00000058   0x4631             MOV      R1,R6
   \   0000005A   0x4620             MOV      R0,R4
   \   0000005C   0x.... 0x....      BL       emberAfScenesMakeValid
    734                  return EMBER_ZCL_STATUS_SUCCESS;
   \   00000060   0x2000             MOVS     R0,#+0
   \   00000062   0xE004             B.N      ??emberAfScenesClusterRecallSavedSceneCallback_1
    735                }
    736              }
   \                     ??emberAfScenesClusterRecallSavedSceneCallback_3: (+1)
   \   00000064   0x1C7F             ADDS     R7,R7,#+1
   \   00000066   0xB2FF             UXTB     R7,R7
   \   00000068   0x2F05             CMP      R7,#+5
   \   0000006A   0xDBD5             BLT.N    ??emberAfScenesClusterRecallSavedSceneCallback_2
    737            }
    738          
    739            return EMBER_ZCL_STATUS_NOT_FOUND;
   \   0000006C   0x208B             MOVS     R0,#+139
   \                     ??emberAfScenesClusterRecallSavedSceneCallback_1: (+1)
   \   0000006E   0xB005             ADD      SP,SP,#+20
   \   00000070   0xBDF0             POP      {R4-R7,PC}       ;; return
    740          }
    741          

   \                                 In section .text, align 2, keep-with-next
    742          void emberAfScenesClusterClearSceneTableCallback(int8u endpoint)
    743          {
   \                     emberAfScenesClusterClearSceneTableCallback: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
   \   00000004   0x4606             MOV      R6,R0
    744            int8u i, networkIndex = emberGetCurrentNetwork();
   \   00000006   0x.... 0x....      BL       emberGetCurrentNetwork
   \   0000000A   0x4604             MOV      R4,R0
    745            for (i = 0; i < EMBER_AF_PLUGIN_SCENES_TABLE_SIZE; i++) {
   \   0000000C   0x2500             MOVS     R5,#+0
    746              EmberAfSceneTableEntry entry;
    747              emberAfPluginScenesServerRetrieveSceneEntry(entry, i);
   \                     ??emberAfScenesClusterClearSceneTableCallback_0: (+1)
   \   0000000E   0x.... 0x....      BL       ?Subroutine7
    748              if (entry.endpoint != EMBER_AF_SCENE_TABLE_UNUSED_ENDPOINT_ID
    749                  && (endpoint == entry.endpoint
    750                      || (endpoint == EMBER_BROADCAST_ENDPOINT
    751                          && (networkIndex
    752                              == emberAfNetworkIndexFromEndpoint(entry.endpoint))))) {
   \                     ??CrossCallReturnLabel_21: (+1)
   \   00000012   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000016   0xB148             CBZ.N    R0,??CrossCallReturnLabel_28
   \   00000018   0x4286             CMP      R6,R0
   \   0000001A   0xD005             BEQ.N    ??emberAfScenesClusterClearSceneTableCallback_1
   \   0000001C   0x2EFF             CMP      R6,#+255
   \   0000001E   0xD105             BNE.N    ??CrossCallReturnLabel_28
   \   00000020   0x.... 0x....      BL       emberAfNetworkIndexFromEndpoint
   \   00000024   0x4284             CMP      R4,R0
   \   00000026   0xD101             BNE.N    ??CrossCallReturnLabel_28
    753                entry.endpoint = EMBER_AF_SCENE_TABLE_UNUSED_ENDPOINT_ID;
   \                     ??emberAfScenesClusterClearSceneTableCallback_1: (+1)
   \   00000028   0x.... 0x....      BL       ?Subroutine9
    754                emberAfPluginScenesServerSaveSceneEntry(entry, i);
    755              }
    756            }
   \                     ??CrossCallReturnLabel_28: (+1)
   \   0000002C   0x1C6D             ADDS     R5,R5,#+1
   \   0000002E   0x2D05             CMP      R5,#+5
   \   00000030   0xDBED             BLT.N    ??emberAfScenesClusterClearSceneTableCallback_0
    757            emberAfPluginScenesServerSetNumSceneEntriesInUse(0);
   \   00000032   0x....             LDR.N    R2,??DataTable18_1
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0x7010             STRB     R0,[R2, #+0]
   \   00000038   0x2301             MOVS     R3,#+1
   \   0000003A   0x.... 0x....      BL       ?Subroutine14
    758            if (endpoint == EMBER_BROADCAST_ENDPOINT) {
   \                     ??CrossCallReturnLabel_42: (+1)
   \   0000003E   0x2EFF             CMP      R6,#+255
   \   00000040   0xD113             BNE.N    ??emberAfScenesClusterClearSceneTableCallback_2
    759              for (i = 0; i < emberAfEndpointCount(); i++) {
   \   00000042   0x2500             MOVS     R5,#+0
   \   00000044   0x....             LDR.N    R6,??DataTable18_3
   \                     ??emberAfScenesClusterClearSceneTableCallback_3: (+1)
   \   00000046   0x.... 0x....      BL       emberAfEndpointCount
   \   0000004A   0xB2ED             UXTB     R5,R5
   \   0000004C   0x4285             CMP      R5,R0
   \   0000004E   0xD210             BCS.N    ??emberAfScenesClusterClearSceneTableCallback_4
    760                if (emberAfNetworkIndexFromEndpointIndex(i) == networkIndex) {
   \   00000050   0xEB06 0x1005      ADD      R0,R6,R5, LSL #+4
   \   00000054   0x7B00             LDRB     R0,[R0, #+12]
   \   00000056   0x42A0             CMP      R0,R4
   \   00000058   0xD105             BNE.N    ??emberAfScenesClusterClearSceneTableCallback_5
    761                  emberAfScenesSetSceneCountAttribute(emberAfEndpointFromIndex(i), 0);
   \   0000005A   0x4628             MOV      R0,R5
   \   0000005C   0x.... 0x....      BL       emberAfEndpointFromIndex
   \   00000060   0x2100             MOVS     R1,#+0
   \   00000062   0x.... 0x....      BL       emberAfScenesSetSceneCountAttribute
    762                }
    763              }
   \                     ??emberAfScenesClusterClearSceneTableCallback_5: (+1)
   \   00000066   0x1C6D             ADDS     R5,R5,#+1
   \   00000068   0xE7ED             B.N      ??emberAfScenesClusterClearSceneTableCallback_3
    764            } else {
    765              emberAfScenesSetSceneCountAttribute(endpoint, 0);
   \                     ??emberAfScenesClusterClearSceneTableCallback_2: (+1)
   \   0000006A   0x2100             MOVS     R1,#+0
   \   0000006C   0x4630             MOV      R0,R6
   \   0000006E   0x.... 0x....      BL       emberAfScenesSetSceneCountAttribute
    766            }
    767          }
   \                     ??emberAfScenesClusterClearSceneTableCallback_4: (+1)
   \   00000072   0xBD7F             POP      {R0-R6,PC}       ;; return
    768          

   \                                 In section .text, align 2, keep-with-next
    769          boolean emberAfPluginScenesServerParseAddScene(const EmberAfClusterCommand *cmd,
    770                                                         int16u groupId,
    771                                                         int8u sceneId,
    772                                                         int16u transitionTime,
    773                                                         int8u *sceneName,
    774                                                         int8u *extensionFieldSets)
    775          {
   \                     emberAfPluginScenesServerParseAddScene: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0x4605             MOV      R5,R0
   \   00000006   0xB087             SUB      SP,SP,#+28
    776            EmberAfSceneTableEntry entry;
    777            EmberAfStatus status;
    778            boolean enhanced = (cmd->commandId == ZCL_ENHANCED_ADD_SCENE_COMMAND_ID);
   \   00000008   0x7CE8             LDRB     R0,[R5, #+19]
   \   0000000A   0x4688             MOV      R8,R1
   \   0000000C   0x4692             MOV      R10,R2
   \   0000000E   0x469B             MOV      R11,R3
   \   00000010   0x2840             CMP      R0,#+64
   \   00000012   0xBF0C             ITE      EQ 
   \   00000014   0x2601             MOVEQ    R6,#+1
   \   00000016   0x2600             MOVNE    R6,#+0
    779            int16u extensionFieldSetsLen = (cmd->bufLen
    780                                            - (cmd->payloadStartIndex
    781                                               + sizeof(groupId)
    782                                               + sizeof(sceneId)
    783                                               + sizeof(transitionTime)
    784                                               + emberAfStringLength(sceneName) + 1));
   \   00000018   0x9810             LDR      R0,[SP, #+64]
   \   0000001A   0x.... 0x....      BL       emberAfStringLength
   \   0000001E   0x89A9             LDRH     R1,[R5, #+12]
   \   00000020   0x7D2A             LDRB     R2,[R5, #+20]
   \   00000022   0x1A89             SUBS     R1,R1,R2
   \   00000024   0x1A08             SUBS     R0,R1,R0
   \   00000026   0x1F87             SUBS     R7,R0,#+6
    785            int16u extensionFieldSetsIndex = 0;
    786            int8u endpoint = cmd->apsFrame->destinationEndpoint;
   \   00000028   0x6828             LDR      R0,[R5, #+0]
   \   0000002A   0x7940             LDRB     R0,[R0, #+5]
   \   0000002C   0x9000             STR      R0,[SP, #+0]
   \   0000002E   0xB2BF             UXTH     R7,R7
   \   00000030   0x2400             MOVS     R4,#+0
    787            int8u i, index = EMBER_AF_SCENE_TABLE_NULL_INDEX;
   \   00000032   0xF04F 0x09FF      MOV      R9,#+255
    788          
    789            emberAfScenesClusterPrint("RX: %pAddScene 0x%2x, 0x%x, 0x%2x, \"",
    790                                      (enhanced ? "Enhanced" : ""),
    791                                      groupId,
    792                                      sceneId,
    793                                      transitionTime);
    794            emberAfScenesClusterPrintString(sceneName);
    795            emberAfScenesClusterPrint("\", ");
    796            emberAfScenesClusterPrintBuffer(extensionFieldSets, extensionFieldSetsLen, FALSE);
    797            emberAfScenesClusterPrintln("");
    798          
    799            // Unless this is a ZLL device, Add Scene commands can only be addressed to a
    800            // single device.
    801            if (emberIsZllNetwork()) {
   \   00000036   0x.... 0x....      BL       emberIsZllNetwork
   \   0000003A   0x2800             CMP      R0,#+0
   \   0000003C   0xBF1E             ITTT     NE 
    802              if (cmd->type != EMBER_INCOMING_UNICAST
    803                  && cmd->type != EMBER_INCOMING_UNICAST_REPLY) {
   \   0000003E   0x7928             LDRBNE   R0,[R5, #+4]
   \   00000040   0x2800             CMPNE    R0,#+0
   \   00000042   0x2801             CMPNE    R0,#+1
   \   00000044   0xF040 0x809F      BNE.W    ??emberAfPluginScenesServerParseAddScene_0
    804                return TRUE;
    805              }
    806            }
    807          
    808            // Add Scene commands can only reference groups to which we belong.
    809            if (groupId != ZCL_SCENES_GLOBAL_SCENE_GROUP_ID
    810                && !emberAfGroupsClusterEndpointInGroupCallback(endpoint, groupId)) {
   \   00000048   0xF1B8 0x0F00      CMP      R8,#+0
   \   0000004C   0xD007             BEQ.N    ??emberAfPluginScenesServerParseAddScene_1
   \   0000004E   0x9800             LDR      R0,[SP, #+0]
   \   00000050   0x4641             MOV      R1,R8
   \   00000052   0xB2C0             UXTB     R0,R0
   \   00000054   0x.... 0x....      BL       emberAfGroupsClusterEndpointInGroupCallback
   \   00000058   0xB908             CBNZ.N   R0,??emberAfPluginScenesServerParseAddScene_1
    811              status = EMBER_ZCL_STATUS_INVALID_FIELD;
   \   0000005A   0x2785             MOVS     R7,#+133
    812              goto kickout;
   \   0000005C   0xE088             B.N      ??emberAfPluginScenesServerParseAddScene_2
    813            }
    814          
    815            for (i = 0; i < EMBER_AF_PLUGIN_SCENES_TABLE_SIZE; i++) {
   \                     ??emberAfPluginScenesServerParseAddScene_1: (+1)
   \   0000005E   0x2500             MOVS     R5,#+0
    816              emberAfPluginScenesServerRetrieveSceneEntry(entry, i);
   \                     ??emberAfPluginScenesServerParseAddScene_3: (+1)
   \   00000060   0x.... 0x....      BL       ?Subroutine10
    817              if (entry.endpoint == endpoint
    818                  && entry.groupId == groupId
    819                  && entry.sceneId == sceneId) {
   \                     ??CrossCallReturnLabel_31: (+1)
   \   00000064   0xF89D 0x000C      LDRB     R0,[SP, #+12]
   \   00000068   0x9900             LDR      R1,[SP, #+0]
   \   0000006A   0x4288             CMP      R0,R1
   \   0000006C   0xBF01             ITTTT    EQ 
   \   0000006E   0xF8BD 0x000E      LDRHEQ   R0,[SP, #+14]
   \   00000072   0x4540             CMPEQ    R0,R8
   \   00000074   0xF89D 0x0010      LDRBEQ   R0,[SP, #+16]
   \   00000078   0x4550             CMPEQ    R0,R10
   \   0000007A   0xD101             BNE.N    ??emberAfPluginScenesServerParseAddScene_4
    820                index = i;
   \   0000007C   0x46A9             MOV      R9,R5
    821                break;
   \   0000007E   0xE00A             B.N      ??emberAfPluginScenesServerParseAddScene_5
    822              } else if (index == EMBER_AF_SCENE_TABLE_NULL_INDEX
    823                         && entry.endpoint == EMBER_AF_SCENE_TABLE_UNUSED_ENDPOINT_ID) {
   \                     ??emberAfPluginScenesServerParseAddScene_4: (+1)
   \   00000080   0xF1B9 0x0FFF      CMP      R9,#+255
   \   00000084   0xBF02             ITTT     EQ 
   \   00000086   0xF89D 0x000C      LDRBEQ   R0,[SP, #+12]
   \   0000008A   0x2800             CMPEQ    R0,#+0
    824                index = i;
   \   0000008C   0x46A9             MOVEQ    R9,R5
    825              }
    826            }
   \   0000008E   0x1C68             ADDS     R0,R5,#+1
   \   00000090   0xB2C5             UXTB     R5,R0
   \   00000092   0x2D05             CMP      R5,#+5
   \   00000094   0xDBE4             BLT.N    ??emberAfPluginScenesServerParseAddScene_3
    827          
    828            // If the target index is still zero, the table is full.
    829            if (index == EMBER_AF_SCENE_TABLE_NULL_INDEX) {
   \                     ??emberAfPluginScenesServerParseAddScene_5: (+1)
   \   00000096   0xF1B9 0x0FFF      CMP      R9,#+255
   \   0000009A   0xBF08             IT       EQ 
    830              status = EMBER_ZCL_STATUS_INSUFFICIENT_SPACE;
   \   0000009C   0x2789             MOVEQ    R7,#+137
    831              goto kickout;
   \   0000009E   0xD067             BEQ.N    ??emberAfPluginScenesServerParseAddScene_2
    832            }
    833          
    834            emberAfPluginScenesServerRetrieveSceneEntry(entry, index);
   \   000000A0   0x230C             MOVS     R3,#+12
   \   000000A2   0x464A             MOV      R2,R9
   \   000000A4   0x2128             MOVS     R1,#+40
   \   000000A6   0xA803             ADD      R0,SP,#+12
   \   000000A8   0x.... 0x....      BL       halInternalGetTokenData
    835          
    836            if (emberIsZllNetwork()) {
   \   000000AC   0x.... 0x....      BL       emberIsZllNetwork
   \   000000B0   0xB190             CBZ.N    R0,??emberAfPluginScenesServerParseAddScene_6
    837              // The transition time is specified in seconds in the regular version of the
    838              // command and tenths of a second in the enhanced version.
    839              if (enhanced) {
   \   000000B2   0xB166             CBZ.N    R6,??emberAfPluginScenesServerParseAddScene_7
    840                entry.transitionTime = transitionTime / 10;
   \   000000B4   0x200A             MOVS     R0,#+10
   \   000000B6   0xFB9B 0xF0F0      SDIV     R0,R11,R0
   \   000000BA   0xF8AD 0x0012      STRH     R0,[SP, #+18]
    841                entry.transitionTime100ms = (int8u)(transitionTime - entry.transitionTime * 10);
   \   000000BE   0x210A             MOVS     R1,#+10
   \   000000C0   0xF8BD 0x0012      LDRH     R0,[SP, #+18]
   \   000000C4   0xFB01 0xB010      MLS      R0,R1,R0,R11
   \   000000C8   0xF88D 0x0014      STRB     R0,[SP, #+20]
   \   000000CC   0xE006             B.N      ??emberAfPluginScenesServerParseAddScene_8
    842              } else {
    843                entry.transitionTime = transitionTime;
   \                     ??emberAfPluginScenesServerParseAddScene_7: (+1)
   \   000000CE   0xF8AD 0xB012      STRH     R11,[SP, #+18]
    844                entry.transitionTime100ms = 0;
   \   000000D2   0xF88D 0x4014      STRB     R4,[SP, #+20]
   \   000000D6   0xE001             B.N      ??emberAfPluginScenesServerParseAddScene_8
    845              }
    846            } else {
    847              entry.transitionTime = transitionTime;
   \                     ??emberAfPluginScenesServerParseAddScene_6: (+1)
   \   000000D8   0xF8AD 0xB012      STRH     R11,[SP, #+18]
    848            }
    849          
    850          #ifdef EMBER_AF_PLUGIN_SCENES_NAME_SUPPORT
    851            emberAfCopyString(entry.name, sceneName, ZCL_SCENES_CLUSTER_MAXIMUM_NAME_LENGTH);
    852          #endif
    853          
    854            // When adding a new scene, wipe out all of the extensions before parsing the
    855            // extension field sets data.
    856            if (i != index) {
   \                     ??emberAfPluginScenesServerParseAddScene_8: (+1)
   \   000000DC   0x454D             CMP      R5,R9
   \   000000DE   0xBF18             IT       NE 
    857          #ifdef ZCL_USING_ON_OFF_CLUSTER_SERVER
    858              entry.hasOnOffValue = FALSE;
   \   000000E0   0xF88D 0x4015      STRBNE   R4,[SP, #+21]
   \   000000E4   0xF8DD 0xB044      LDR      R11,[SP, #+68]
   \   000000E8   0xE00A             B.N      ??emberAfPluginScenesServerParseAddScene_9
    859          #endif
    860          #ifdef ZCL_USING_LEVEL_CONTROL_CLUSTER_SERVER
    861              entry.hasCurrentLevelValue = FALSE;
    862          #endif
    863          #ifdef ZCL_USING_THERMOSTAT_CLUSTER_SERVER
    864              entry.hasOccupiedCoolingSetpointValue = FALSE;
    865              entry.hasOccupiedHeatingSetpointValue = FALSE;
    866              entry.hasSystemModeValue = FALSE;
    867          #endif
    868          #ifdef ZCL_USING_COLOR_CONTROL_CLUSTER_SERVER
    869              entry.hasCurrentXValue = FALSE;
    870              entry.hasCurrentYValue = FALSE;
    871              if (emberIsZllNetwork()) {
    872                entry.hasEnhancedCurrentHueValue = FALSE;
    873                entry.hasCurrentSaturationValue = FALSE;
    874                entry.hasColorLoopActiveValue = FALSE;
    875                entry.hasColorLoopDirectionValue = FALSE;
    876                entry.hasColorLoopTimeValue = FALSE;
    877              }
    878          #endif //ZCL_USING_COLOR_CONTROL_CLUSTER_SERVER
    879          #ifdef ZCL_USING_DOOR_LOCK_CLUSTER_SERVER
    880              entry.hasLockStateValue = FALSE;
    881          #endif
    882          #ifdef ZCL_USING_WINDOW_COVERING_CLUSTER_SERVER
    883              entry.hasCurrentPositionLiftPercentageValue = FALSE;
    884              entry.hasCurrentPositionTiltPercentageValue = FALSE;
    885          #endif
    886            }
    887          
    888            while (extensionFieldSetsIndex < extensionFieldSetsLen) {
    889              EmberAfClusterId clusterId;
    890              int8u length;
    891          
    892              // Each extension field set must contain a two-byte cluster id and a one-
    893              // byte length.  Otherwise, the command is malformed.
    894              if (extensionFieldSetsLen < extensionFieldSetsIndex + 3) {
    895                status = EMBER_ZCL_STATUS_MALFORMED_COMMAND;
    896                goto kickout;
    897              }
    898          
    899              clusterId = emberAfGetInt16u(extensionFieldSets, extensionFieldSetsIndex, extensionFieldSetsLen);
    900              extensionFieldSetsIndex += 2;
    901              length = emberAfGetInt8u(extensionFieldSets, extensionFieldSetsIndex, extensionFieldSetsLen);
    902              extensionFieldSetsIndex++;
    903          
    904              // If the length is off, the command is also malformed.
    905              if (length == 0) {
    906                continue;
    907              } else if (extensionFieldSetsLen < extensionFieldSetsIndex + length) {
    908                status = EMBER_ZCL_STATUS_MALFORMED_COMMAND;
    909                goto kickout;
    910              }
    911          
    912              switch (clusterId) {
   \                     ??emberAfPluginScenesServerParseAddScene_10: (+1)
   \   000000EA   0x2806             CMP      R0,#+6
   \   000000EC   0xD106             BNE.N    ??emberAfPluginScenesServerParseAddScene_11
    913          #ifdef ZCL_USING_ON_OFF_CLUSTER_SERVER
    914              case ZCL_ON_OFF_CLUSTER_ID:
    915                // We only know of one extension for the On/Off cluster and it is just one
    916                // byte, which means we can skip some logic for this cluster.  If other
    917                // extensions are added in this cluster, more logic will be needed here.
    918                entry.hasOnOffValue = TRUE;
   \   000000EE   0x2001             MOVS     R0,#+1
   \   000000F0   0xF88D 0x0015      STRB     R0,[SP, #+21]
    919                entry.onOffValue = emberAfGetInt8u(extensionFieldSets, extensionFieldSetsIndex, extensionFieldSetsLen);
   \   000000F4   0xF814 0x000B      LDRB     R0,[R4, R11]
   \   000000F8   0xF88D 0x0016      STRB     R0,[SP, #+22]
    920                break;
    921          #endif
    922          #ifdef ZCL_USING_LEVEL_CONTROL_CLUSTER_SERVER
    923              case ZCL_LEVEL_CONTROL_CLUSTER_ID:
    924                // We only know of one extension for the Color Control cluster and it is
    925                // just one byte, which means we can skip some logic for this cluster.  If
    926                // other extensions are added in this cluster, more logic will be needed
    927                // here.
    928                entry.hasCurrentLevelValue = TRUE;
    929                entry.currentLevelValue = emberAfGetInt8u(extensionFieldSets, extensionFieldSetsIndex, extensionFieldSetsLen);
    930                break;
    931          #endif
    932          #ifdef ZCL_USING_THERMOSTAT_CLUSTER_SERVER
    933              case ZCL_THERMOSTAT_CLUSTER_ID:
    934                if (length < 2) {
    935                  break;
    936                }
    937                entry.hasOccupiedCoolingSetpointValue = TRUE;
    938                entry.occupiedCoolingSetpointValue = (int16s)emberAfGetInt16u(extensionFieldSets, extensionFieldSetsIndex, extensionFieldSetsLen);
    939                extensionFieldSetsIndex += 2;
    940                length -= 2;
    941                if (length < 2) {
    942                  break;
    943                }
    944                entry.hasOccupiedHeatingSetpointValue = TRUE;
    945                entry.occupiedHeatingSetpointValue = (int16s)emberAfGetInt16u(extensionFieldSets, extensionFieldSetsIndex, extensionFieldSetsLen);
    946                extensionFieldSetsIndex += 2;
    947                length -= 2;
    948                if (length < 1) {
    949                  break;
    950                }
    951                entry.hasSystemModeValue = TRUE;
    952                entry.systemModeValue = emberAfGetInt8u(extensionFieldSets, extensionFieldSetsIndex, extensionFieldSetsLen);
    953                // If additional Thermostat extensions are added, adjust the index and
    954                // length variables here.
    955                break;
    956          #endif
    957          #ifdef ZCL_USING_COLOR_CONTROL_CLUSTER_SERVER
    958              case ZCL_COLOR_CONTROL_CLUSTER_ID:
    959                if (length < 2) {
    960                  break;
    961                }
    962                entry.hasCurrentXValue = TRUE;
    963                entry.currentXValue = emberAfGetInt16u(extensionFieldSets, extensionFieldSetsIndex, extensionFieldSetsLen);
    964                extensionFieldSetsIndex += 2;
    965                length -= 2;
    966                if (length < 2) {
    967                  break;
    968                }
    969                entry.hasCurrentYValue = TRUE;
    970                entry.currentYValue = emberAfGetInt16u(extensionFieldSets, extensionFieldSetsIndex, extensionFieldSetsLen);
    971                if (emberIsZllNetwork() && enhanced) {
    972                  extensionFieldSetsIndex += 2;
    973                  length -= 2;
    974                  if (length < 2) {
    975                    break;
    976                  }
    977                  entry.hasEnhancedCurrentHueValue = TRUE;
    978                  entry.enhancedCurrentHueValue = emberAfGetInt16u(extensionFieldSets, extensionFieldSetsIndex, extensionFieldSetsLen);
    979                  extensionFieldSetsIndex += 2;
    980                  length -= 2;
    981                  if (length < 1) {
    982                    break;
    983                  }
    984                  entry.hasCurrentSaturationValue = TRUE;
    985                  entry.currentSaturationValue = emberAfGetInt8u(extensionFieldSets, extensionFieldSetsIndex, extensionFieldSetsLen);
    986                  extensionFieldSetsIndex++;
    987                  length--;
    988                  if (length < 1) {
    989                    break;
    990                  }
    991                  entry.hasColorLoopActiveValue = TRUE;
    992                  entry.colorLoopActiveValue = emberAfGetInt8u(extensionFieldSets, extensionFieldSetsIndex, extensionFieldSetsLen);
    993                  extensionFieldSetsIndex++;
    994                  length--;
    995                  if (length < 1) {
    996                    break;
    997                  }
    998                  entry.hasColorLoopDirectionValue = TRUE;
    999                  entry.colorLoopDirectionValue = emberAfGetInt8u(extensionFieldSets, extensionFieldSetsIndex, extensionFieldSetsLen);
   1000                  extensionFieldSetsIndex++;
   1001                  length--;
   1002                  if (length < 2) {
   1003                    break;
   1004                  }
   1005                  entry.hasColorLoopTimeValue = TRUE;
   1006                  entry.colorLoopTimeValue = emberAfGetInt16u(extensionFieldSets, extensionFieldSetsIndex, extensionFieldSetsLen);
   1007                }
   1008                // If additional Color Control extensions are added, adjust the index and
   1009                // length variables here.
   1010                break;
   1011          #endif //ZCL_USING_COLOR_CONTROL_CLUSTER_SERVER
   1012          #ifdef ZCL_USING_DOOR_LOCK_CLUSTER_SERVER
   1013              case ZCL_DOOR_LOCK_CLUSTER_ID:
   1014                // We only know of one extension for the Door Lock cluster and it is just
   1015                // one byte, which means we can skip some logic for this cluster.  If
   1016                // other extensions are added in this cluster, more logic will be needed
   1017                // here.
   1018                entry.hasLockStateValue = TRUE;
   1019                entry.lockStateValue = emberAfGetInt8u(extensionFieldSets, extensionFieldSetsIndex, extensionFieldSetsLen);
   1020                break;
   1021          #endif
   1022          #ifdef ZCL_USING_WINDOW_COVERING_CLUSTER_SERVER
   1023              case ZCL_WINDOW_COVERING_CLUSTER_ID:
   1024                // If we're here, we know we have at least one byte, so we can skip the
   1025                // length check for the first field.
   1026                entry.hasCurrentPositionLiftPercentageValue = TRUE;
   1027                entry.currentPositionLiftPercentageValue = emberAfGetInt8u(extensionFieldSets, extensionFieldSetsIndex, extensionFieldSetsLen);
   1028                extensionFieldSetsIndex++;
   1029                length--;
   1030                if (length < 1) {
   1031                  break;
   1032                }
   1033                entry.hasCurrentPositionTiltPercentageValue = TRUE;
   1034                entry.currentPositionTiltPercentageValue = emberAfGetInt8u(extensionFieldSets, extensionFieldSetsIndex, extensionFieldSetsLen);
   1035                // If additional Window Covering extensions are added, adjust the index
   1036                // and length variables here.
   1037                break;
   1038          #endif
   1039              default:
   1040                break;
   1041              }
   1042          
   1043              extensionFieldSetsIndex += length;
   \                     ??emberAfPluginScenesServerParseAddScene_11: (+1)
   \   000000FC   0x190C             ADDS     R4,R1,R4
   \   000000FE   0xB2A4             UXTH     R4,R4
   \                     ??emberAfPluginScenesServerParseAddScene_9: (+1)
   \   00000100   0x42BC             CMP      R4,R7
   \   00000102   0xDA14             BGE.N    ??emberAfPluginScenesServerParseAddScene_12
   \   00000104   0x1CE0             ADDS     R0,R4,#+3
   \   00000106   0x4287             CMP      R7,R0
   \   00000108   0xDB0F             BLT.N    ??emberAfPluginScenesServerParseAddScene_13
   \   0000010A   0x463A             MOV      R2,R7
   \   0000010C   0x4621             MOV      R1,R4
   \   0000010E   0x4658             MOV      R0,R11
   \   00000110   0x.... 0x....      BL       emberAfGetInt16u
   \   00000114   0x1CA2             ADDS     R2,R4,#+2
   \   00000116   0xB292             UXTH     R2,R2
   \   00000118   0xF812 0x100B      LDRB     R1,[R2, R11]
   \   0000011C   0x1C52             ADDS     R2,R2,#+1
   \   0000011E   0xB294             UXTH     R4,R2
   \   00000120   0x2900             CMP      R1,#+0
   \   00000122   0xD0ED             BEQ.N    ??emberAfPluginScenesServerParseAddScene_9
   \   00000124   0x190A             ADDS     R2,R1,R4
   \   00000126   0x4297             CMP      R7,R2
   \   00000128   0xDADF             BGE.N    ??emberAfPluginScenesServerParseAddScene_10
   \                     ??emberAfPluginScenesServerParseAddScene_13: (+1)
   \   0000012A   0x2780             MOVS     R7,#+128
   \   0000012C   0xE020             B.N      ??emberAfPluginScenesServerParseAddScene_2
   1044            }
   1045          
   1046            // If we got this far, we either added a new entry or updated an existing one.
   1047            // If we added, store the basic data and increment the scene count.  In either
   1048            // case, save the entry.
   1049            if (i != index) {
   \                     ??emberAfPluginScenesServerParseAddScene_12: (+1)
   \   0000012E   0x454D             CMP      R5,R9
   \   00000130   0xD018             BEQ.N    ??emberAfPluginScenesServerParseAddScene_14
   1050              entry.endpoint = endpoint;
   1051              entry.groupId = groupId;
   \   00000132   0xF8AD 0x800E      STRH     R8,[SP, #+14]
   1052              entry.sceneId = sceneId;
   \   00000136   0xF88D 0xA010      STRB     R10,[SP, #+16]
   1053              emberAfPluginScenesServerIncrNumSceneEntriesInUse();
   \   0000013A   0x2301             MOVS     R3,#+1
   \   0000013C   0x9800             LDR      R0,[SP, #+0]
   \   0000013E   0x....             LDR.N    R7,??DataTable18_1
   \   00000140   0xF88D 0x000C      STRB     R0,[SP, #+12]
   \   00000144   0x227F             MOVS     R2,#+127
   \   00000146   0x2127             MOVS     R1,#+39
   \   00000148   0x4638             MOV      R0,R7
   \   0000014A   0x.... 0x....      BL       halInternalGetTokenData
   \   0000014E   0x7838             LDRB     R0,[R7, #+0]
   \   00000150   0x1C40             ADDS     R0,R0,#+1
   \   00000152   0x.... 0x....      BL       ??Subroutine4_0
   1054              emberAfScenesSetSceneCountAttribute(endpoint,
   1055                                                  emberAfPluginScenesServerNumSceneEntriesInUse());
   \                     ??CrossCallReturnLabel_8: (+1)
   \   00000156   0x.... 0x....      BL       ?Subroutine2
   1056            }
   \                     ??CrossCallReturnLabel_0: (+1)
   \   0000015A   0x9800             LDR      R0,[SP, #+0]
   \   0000015C   0x7839             LDRB     R1,[R7, #+0]
   \   0000015E   0xB2C0             UXTB     R0,R0
   \   00000160   0x.... 0x....      BL       emberAfScenesSetSceneCountAttribute
   1057            emberAfPluginScenesServerSaveSceneEntry(entry, index);
   \                     ??emberAfPluginScenesServerParseAddScene_14: (+1)
   \   00000164   0x230C             MOVS     R3,#+12
   \   00000166   0xAA03             ADD      R2,SP,#+12
   \   00000168   0x4649             MOV      R1,R9
   \   0000016A   0x.... 0x....      BL       ?Subroutine13
   1058            status = EMBER_ZCL_STATUS_SUCCESS;
   \                     ??CrossCallReturnLabel_38: (+1)
   \   0000016E   0x2700             MOVS     R7,#+0
   1059          
   1060          kickout:
   1061            // Add Scene commands are only responded to when they are addressed to a
   1062            // single device.  This can only happen for ZLL devices.
   1063            if (emberIsZllNetwork()) {
   \                     ??emberAfPluginScenesServerParseAddScene_2: (+1)
   \   00000170   0x.... 0x....      BL       emberIsZllNetwork
   \   00000174   0x2800             CMP      R0,#+0
   \   00000176   0xBF1F             ITTTT    NE 
   \   00000178   0x....             LDRNE.N  R0,??DataTable18_2
   \   0000017A   0x6800             LDRNE    R0,[R0, #+0]
   \   0000017C   0x7900             LDRBNE   R0,[R0, #+4]
   \   0000017E   0x2800             CMPNE    R0,#+0
   \   00000180   0xD005             BEQ.N    ??emberAfPluginScenesServerParseAddScene_15
   \   00000182   0x2801             CMP      R0,#+1
   \   00000184   0xD003             BEQ.N    ??emberAfPluginScenesServerParseAddScene_15
   1064              if (emberAfCurrentCommand()->type != EMBER_INCOMING_UNICAST
   1065                  && emberAfCurrentCommand()->type != EMBER_INCOMING_UNICAST_REPLY) {
   1066                return TRUE;
   \                     ??emberAfPluginScenesServerParseAddScene_0: (+1)
   \   00000186   0x2001             MOVS     R0,#+1
   \   00000188   0xB007             ADD      SP,SP,#+28
   \   0000018A   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   1067              }
   1068            }
   1069            emberAfFillExternalBuffer((ZCL_CLUSTER_SPECIFIC_COMMAND
   1070                                       | ZCL_FRAME_CONTROL_SERVER_TO_CLIENT),
   1071                                      ZCL_SCENES_CLUSTER_ID,
   1072                                      (enhanced
   1073                                       ? ZCL_ENHANCED_ADD_SCENE_RESPONSE_COMMAND_ID
   1074                                       : ZCL_ADD_SCENE_RESPONSE_COMMAND_ID),
   1075                                      "uvu",
   1076                                      status,
   1077                                      groupId,
   1078                                      sceneId);
   \                     ??emberAfPluginScenesServerParseAddScene_15: (+1)
   \   0000018E   0x2E00             CMP      R6,#+0
   \   00000190   0xBF14             ITE      NE 
   \   00000192   0x2240             MOVNE    R2,#+64
   \   00000194   0x2200             MOVEQ    R2,#+0
   \   00000196   0xF8CD 0xA008      STR      R10,[SP, #+8]
   \   0000019A   0xF8CD 0x8004      STR      R8,[SP, #+4]
   \   0000019E   0x9700             STR      R7,[SP, #+0]
   \   000001A0   0x....             ADR.N    R3,??DataTable18  ;; "uvu"
   \   000001A2   0x2105             MOVS     R1,#+5
   \   000001A4   0x2009             MOVS     R0,#+9
   \   000001A6   0x.... 0x....      BL       emberAfFillExternalBuffer
   1079            emberAfSendResponse();
   \   000001AA   0x.... 0x....      BL       emberAfSendResponse
   \   000001AE   0xE7EA             B.N      ??emberAfPluginScenesServerParseAddScene_0
   1080            return TRUE;
   1081          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine10: (+1)
   \   00000000   0x230C             MOVS     R3,#+12
   \   00000002   0x462A             MOV      R2,R5
   \   00000004   0x2128             MOVS     R1,#+40
   \   00000006   0xA803             ADD      R0,SP,#+12
   \   00000008   0x.... 0x....      B.W      halInternalGetTokenData
   1082          

   \                                 In section .text, align 2, keep-with-next
   1083          boolean emberAfPluginScenesServerParseViewScene(const EmberAfClusterCommand *cmd,
   1084                                                          int16u groupId,
   1085                                                          int8u sceneId)
   1086          {
   \                     emberAfPluginScenesServerParseViewScene: (+1)
   \   00000000   0xE92D 0x43F0      PUSH     {R4-R9,LR}
   \   00000004   0xB087             SUB      SP,SP,#+28
   \   00000006   0x460C             MOV      R4,R1
   1087            EmberAfSceneTableEntry entry;
   1088            EmberAfStatus status = EMBER_ZCL_STATUS_NOT_FOUND;
   1089            boolean enhanced = (cmd->commandId == ZCL_ENHANCED_VIEW_SCENE_COMMAND_ID);
   \   00000008   0x7CC1             LDRB     R1,[R0, #+19]
   \   0000000A   0x268B             MOVS     R6,#+139
   \   0000000C   0x4691             MOV      R9,R2
   \   0000000E   0x2941             CMP      R1,#+65
   \   00000010   0xBF0C             ITE      EQ 
   \   00000012   0x2701             MOVEQ    R7,#+1
   \   00000014   0x2700             MOVNE    R7,#+0
   1090            int8u endpoint = cmd->apsFrame->destinationEndpoint;
   \   00000016   0x6801             LDR      R1,[R0, #+0]
   1091          
   1092            emberAfScenesClusterPrintln("RX: %pViewScene 0x%2x, 0x%x",
   1093                                        (enhanced ? "Enhanced" : ""),
   1094                                        groupId,
   1095                                        sceneId);
   1096          
   1097            // View Scene commands can only be addressed to a single device and only
   1098            // referencing groups to which we belong.
   1099            if (cmd->type != EMBER_INCOMING_UNICAST
   1100                && cmd->type != EMBER_INCOMING_UNICAST_REPLY) {
   \   00000018   0x7900             LDRB     R0,[R0, #+4]
   \   0000001A   0xF891 0x8005      LDRB     R8,[R1, #+5]
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xBF18             IT       NE 
   \   00000022   0x2801             CMPNE    R0,#+1
   \   00000024   0xD148             BNE.N    ??emberAfPluginScenesServerParseViewScene_0
   1101              return TRUE;
   1102            } else if (groupId != ZCL_SCENES_GLOBAL_SCENE_GROUP_ID
   1103                       && !emberAfGroupsClusterEndpointInGroupCallback(endpoint,
   1104                                                                       groupId)) {
   \   00000026   0xB134             CBZ.N    R4,??emberAfPluginScenesServerParseViewScene_1
   \   00000028   0x4621             MOV      R1,R4
   \   0000002A   0x4640             MOV      R0,R8
   \   0000002C   0x.... 0x....      BL       emberAfGroupsClusterEndpointInGroupCallback
   \   00000030   0xB908             CBNZ.N   R0,??emberAfPluginScenesServerParseViewScene_1
   1105              status = EMBER_ZCL_STATUS_INVALID_FIELD;
   \   00000032   0x2685             MOVS     R6,#+133
   \   00000034   0xE013             B.N      ??emberAfPluginScenesServerParseViewScene_2
   1106            } else {
   1107              int8u i;
   1108              for (i = 0; i < EMBER_AF_PLUGIN_SCENES_TABLE_SIZE; i++) {
   \                     ??emberAfPluginScenesServerParseViewScene_1: (+1)
   \   00000036   0x2500             MOVS     R5,#+0
   1109                emberAfPluginScenesServerRetrieveSceneEntry(entry, i);
   \                     ??emberAfPluginScenesServerParseViewScene_3: (+1)
   \   00000038   0x.... 0x....      BL       ?Subroutine10
   1110                if (entry.endpoint == endpoint
   1111                    && entry.groupId == groupId
   1112                    && entry.sceneId == sceneId) {
   \                     ??CrossCallReturnLabel_30: (+1)
   \   0000003C   0xF89D 0x000C      LDRB     R0,[SP, #+12]
   \   00000040   0x4540             CMP      R0,R8
   \   00000042   0xBF01             ITTTT    EQ 
   \   00000044   0xF8BD 0x000E      LDRHEQ   R0,[SP, #+14]
   \   00000048   0x42A0             CMPEQ    R0,R4
   \   0000004A   0xF89D 0x0010      LDRBEQ   R0,[SP, #+16]
   \   0000004E   0x4548             CMPEQ    R0,R9
   \   00000050   0xD101             BNE.N    ??emberAfPluginScenesServerParseViewScene_4
   1113                  status = EMBER_ZCL_STATUS_SUCCESS;
   \   00000052   0x2600             MOVS     R6,#+0
   1114                  break;
   \   00000054   0xE003             B.N      ??emberAfPluginScenesServerParseViewScene_2
   1115                }
   1116              }
   \                     ??emberAfPluginScenesServerParseViewScene_4: (+1)
   \   00000056   0x1C68             ADDS     R0,R5,#+1
   \   00000058   0xB2C5             UXTB     R5,R0
   \   0000005A   0x2D05             CMP      R5,#+5
   \   0000005C   0xDBEC             BLT.N    ??emberAfPluginScenesServerParseViewScene_3
   1117            }
   1118          
   1119            // The status, group id, and scene id are always included in the response, but
   1120            // the transition time, name, and extension fields are only included if the
   1121            // scene was found.
   1122            emberAfFillExternalBuffer((ZCL_CLUSTER_SPECIFIC_COMMAND
   1123                                       | ZCL_FRAME_CONTROL_SERVER_TO_CLIENT
   1124                                       | EMBER_AF_DEFAULT_RESPONSE_POLICY_RESPONSES),
   1125                                      ZCL_SCENES_CLUSTER_ID,
   1126                                      (enhanced
   1127                                       ? ZCL_ENHANCED_VIEW_SCENE_RESPONSE_COMMAND_ID
   1128                                       : ZCL_VIEW_SCENE_RESPONSE_COMMAND_ID),
   1129                                      "uvu",
   1130                                      status,
   1131                                      groupId,
   1132                                      sceneId);
   \                     ??emberAfPluginScenesServerParseViewScene_2: (+1)
   \   0000005E   0x2F00             CMP      R7,#+0
   \   00000060   0xBF14             ITE      NE 
   \   00000062   0x2241             MOVNE    R2,#+65
   \   00000064   0x2201             MOVEQ    R2,#+1
   \   00000066   0xF8CD 0x9008      STR      R9,[SP, #+8]
   \   0000006A   0x9401             STR      R4,[SP, #+4]
   \   0000006C   0x9600             STR      R6,[SP, #+0]
   \   0000006E   0x....             ADR.N    R3,??DataTable18  ;; "uvu"
   \   00000070   0x.... 0x....      BL       ?Subroutine8
   1133            if (status == EMBER_ZCL_STATUS_SUCCESS) {
   \                     ??CrossCallReturnLabel_23: (+1)
   \   00000074   0xB9F6             CBNZ.N   R6,??emberAfPluginScenesServerParseViewScene_5
   1134              if (emberIsZllNetwork()) {
   \   00000076   0x.... 0x....      BL       emberIsZllNetwork
   \   0000007A   0x2800             CMP      R0,#+0
   \   0000007C   0xF8BD 0x0012      LDRH     R0,[SP, #+18]
   \   00000080   0xD006             BEQ.N    ??emberAfPluginScenesServerParseViewScene_6
   1135                // The transition time is returned in seconds in the regular version of the
   1136                // command and tenths of a second in the enhanced version.
   1137                emberAfPutInt16uInResp(enhanced
   1138                                       ? entry.transitionTime * 10 + entry.transitionTime100ms
   1139                                       : entry.transitionTime);
   \   00000082   0xB127             CBZ.N    R7,??emberAfPluginScenesServerParseViewScene_7
   \   00000084   0xF89D 0x2014      LDRB     R2,[SP, #+20]
   \   00000088   0x210A             MOVS     R1,#+10
   \   0000008A   0xFB01 0x2000      MLA      R0,R1,R0,R2
   \                     ??emberAfPluginScenesServerParseViewScene_7: (+1)
   \   0000008E   0xB280             UXTH     R0,R0
   1140              } else {
   1141                emberAfPutInt16uInResp(entry.transitionTime);
   \                     ??emberAfPluginScenesServerParseViewScene_6: (+1)
   \   00000090   0x.... 0x....      BL       emberAfPutInt16uInResp
   1142              }
   1143          #ifdef EMBER_AF_PLUGIN_SCENES_NAME_SUPPORT
   1144              emberAfPutStringInResp(entry.name);
   1145          #else
   1146              emberAfPutInt8uInResp(0); // name length
   \   00000094   0x2000             MOVS     R0,#+0
   \   00000096   0x.... 0x....      BL       emberAfPutInt8uInResp
   1147          #endif
   1148          #ifdef ZCL_USING_ON_OFF_CLUSTER_SERVER
   1149              if (entry.hasOnOffValue) {
   \   0000009A   0xF89D 0x0015      LDRB     R0,[SP, #+21]
   \   0000009E   0xB148             CBZ.N    R0,??emberAfPluginScenesServerParseViewScene_5
   1150                emberAfPutInt16uInResp(ZCL_ON_OFF_CLUSTER_ID);
   \   000000A0   0x2006             MOVS     R0,#+6
   \   000000A2   0x.... 0x....      BL       emberAfPutInt16uInResp
   1151                emberAfPutInt8uInResp(1); // length
   \   000000A6   0x2001             MOVS     R0,#+1
   \   000000A8   0x.... 0x....      BL       emberAfPutInt8uInResp
   1152                emberAfPutInt8uInResp(entry.onOffValue);
   \   000000AC   0xF89D 0x0016      LDRB     R0,[SP, #+22]
   \   000000B0   0x.... 0x....      BL       emberAfPutInt8uInResp
   1153              }
   1154          #endif
   1155          #ifdef ZCL_USING_LEVEL_CONTROL_CLUSTER_SERVER
   1156              if (entry.hasCurrentLevelValue) {
   1157                emberAfPutInt16uInResp(ZCL_LEVEL_CONTROL_CLUSTER_ID);
   1158                emberAfPutInt8uInResp(1); // length
   1159                emberAfPutInt8uInResp(entry.currentLevelValue);
   1160              }
   1161          #endif
   1162          #ifdef ZCL_USING_THERMOSTAT_CLUSTER_SERVER
   1163              if (entry.hasOccupiedCoolingSetpointValue) {
   1164                int8u *length;
   1165                emberAfPutInt16uInResp(ZCL_THERMOSTAT_CLUSTER_ID);
   1166                length = &appResponseData[appResponseLength];
   1167                emberAfPutInt8uInResp(0); // temporary length
   1168                emberAfPutInt16uInResp(entry.occupiedCoolingSetpointValue);
   1169                *length += 2;
   1170                if (entry.hasOccupiedHeatingSetpointValue) {
   1171                  emberAfPutInt16uInResp(entry.occupiedHeatingSetpointValue);
   1172                  *length += 2;
   1173                  if (entry.hasSystemModeValue) {
   1174                    emberAfPutInt8uInResp(entry.systemModeValue);
   1175                    (*length)++;
   1176                  }
   1177                }
   1178              }
   1179          #endif
   1180          #ifdef ZCL_USING_COLOR_CONTROL_CLUSTER_SERVER
   1181              if (entry.hasCurrentXValue) {
   1182                int8u *length;
   1183                emberAfPutInt16uInResp(ZCL_COLOR_CONTROL_CLUSTER_ID);
   1184                length = &appResponseData[appResponseLength];
   1185                emberAfPutInt8uInResp(0); // temporary length
   1186                emberAfPutInt16uInResp(entry.currentXValue);
   1187                *length += 2;
   1188                if (entry.hasCurrentYValue) {
   1189                  emberAfPutInt16uInResp(entry.currentYValue);
   1190                  *length += 2;
   1191                  if (emberIsZllNetwork() && enhanced) {
   1192                    if (entry.hasEnhancedCurrentHueValue) {
   1193                      emberAfPutInt16uInResp(entry.enhancedCurrentHueValue);
   1194                      *length += 2;
   1195                      if (entry.hasCurrentSaturationValue) {
   1196                        emberAfPutInt8uInResp(entry.currentSaturationValue);
   1197                        (*length)++;
   1198                        if (entry.hasColorLoopActiveValue) {
   1199                          emberAfPutInt8uInResp(entry.colorLoopActiveValue);
   1200                          (*length)++;
   1201                          if (entry.hasColorLoopDirectionValue) {
   1202                            emberAfPutInt8uInResp(entry.colorLoopDirectionValue);
   1203                            (*length)++;
   1204                            if (entry.hasColorLoopTimeValue) {
   1205                              emberAfPutInt16uInResp(entry.colorLoopTimeValue);
   1206                              *length += 2;
   1207                            }
   1208                          }
   1209                        }
   1210                      }
   1211                    }
   1212                  }
   1213                }
   1214              }
   1215          #endif //ZCL_USING_COLOR_CONTROL_CLUSTER_SERVER
   1216          #ifdef ZCL_USING_DOOR_LOCK_CLUSTER_SERVER
   1217              if (entry.hasLockStateValue) {
   1218                emberAfPutInt16uInResp(ZCL_DOOR_LOCK_CLUSTER_ID);
   1219                emberAfPutInt8uInResp(1); // length
   1220                emberAfPutInt8uInResp(entry.lockStateValue);
   1221              }
   1222          #endif
   1223          #ifdef ZCL_USING_WINDOW_COVERING_CLUSTER_SERVER
   1224              if (entry.hasCurrentPositionLiftPercentageValue) {
   1225                int8u *length;
   1226                emberAfPutInt16uInResp(ZCL_WINDOW_COVERING_CLUSTER_ID);
   1227                length = &appResponseData[appResponseLength];
   1228                emberAfPutInt8uInResp(0); // temporary length
   1229                emberAfPutInt8uInResp(entry.currentPositionLiftPercentageValue);
   1230                (*length)++;
   1231                if (entry.hasCurrentPositionTiltPercentageValue) {
   1232                  emberAfPutInt8uInResp(entry.currentPositionTiltPercentageValue);
   1233                  (*length)++;
   1234                }
   1235              }
   1236          #endif
   1237            }
   1238          
   1239            emberAfSendResponse();
   \                     ??emberAfPluginScenesServerParseViewScene_5: (+1)
   \   000000B4   0x.... 0x....      BL       emberAfSendResponse
   1240            return TRUE;
   \                     ??emberAfPluginScenesServerParseViewScene_0: (+1)
   \   000000B8   0x2001             MOVS     R0,#+1
   \   000000BA   0xB007             ADD      SP,SP,#+28
   \   000000BC   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return
   1241          }
   1242          

   \                                 In section .text, align 2, keep-with-next
   1243          void emberAfScenesClusterRemoveScenesInGroupCallback(int8u endpoint,
   1244                                                                 int16u groupId)
   1245          {
   \                     emberAfScenesClusterRemoveScenesInGroupCallback: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB084             SUB      SP,SP,#+16
   \   00000006   0x4604             MOV      R4,R0
   \   00000008   0x4688             MOV      R8,R1
   1246            int8u i;
   1247            for (i = 0; i < EMBER_AF_PLUGIN_SCENES_TABLE_SIZE; i++) {
   \   0000000A   0x2600             MOVS     R6,#+0
   \   0000000C   0x....             LDR.N    R7,??DataTable18_2
   \   0000000E   0x....             LDR.N    R5,??DataTable18_1
   1248              EmberAfSceneTableEntry entry;
   1249              emberAfPluginScenesServerRetrieveSceneEntry(entry, i);
   \                     ??emberAfScenesClusterRemoveScenesInGroupCallba_0: (+1)
   \   00000010   0x230C             MOVS     R3,#+12
   \   00000012   0x4632             MOV      R2,R6
   \   00000014   0x.... 0x....      BL       ??Subroutine7_0
   1250              if (entry.endpoint == endpoint &&
   1251                  entry.groupId == groupId) {
   \                     ??CrossCallReturnLabel_17: (+1)
   \   00000018   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001C   0x42A0             CMP      R0,R4
   \   0000001E   0xBF04             ITT      EQ 
   \   00000020   0xF8BD 0x0002      LDRHEQ   R0,[SP, #+2]
   \   00000024   0x4540             CMPEQ    R0,R8
   \   00000026   0xD118             BNE.N    ??CrossCallReturnLabel_32
   1252                entry.groupId = ZCL_SCENES_GLOBAL_SCENE_GROUP_ID;
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0xF8AD 0x0002      STRH     R0,[SP, #+2]
   1253                entry.endpoint = EMBER_AF_SCENE_TABLE_UNUSED_ENDPOINT_ID;
   \   0000002E   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1254                emberAfPluginScenesServerSaveSceneEntry(entry, i);
   \   00000032   0x230C             MOVS     R3,#+12
   \   00000034   0xAA00             ADD      R2,SP,#+0
   \   00000036   0x4631             MOV      R1,R6
   \   00000038   0x.... 0x....      BL       ?Subroutine13
   1255                emberAfPluginScenesServerDecrNumSceneEntriesInUse();
   \                     ??CrossCallReturnLabel_37: (+1)
   \   0000003C   0x.... 0x....      BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_6: (+1)
   \   00000040   0x7828             LDRB     R0,[R5, #+0]
   \   00000042   0x1E40             SUBS     R0,R0,#+1
   \   00000044   0x7028             STRB     R0,[R5, #+0]
   \   00000046   0x2301             MOVS     R3,#+1
   \   00000048   0x462A             MOV      R2,R5
   \   0000004A   0x.... 0x....      BL       ?Subroutine14
   1256                emberAfScenesSetSceneCountAttribute(emberAfCurrentEndpoint(),
   1257                                                    emberAfPluginScenesServerNumSceneEntriesInUse());
   \                     ??CrossCallReturnLabel_41: (+1)
   \   0000004E   0x.... 0x....      BL       ?Subroutine3
   1258              }
   1259            }
   \                     ??CrossCallReturnLabel_5: (+1)
   \   00000052   0x6838             LDR      R0,[R7, #+0]
   \   00000054   0x7829             LDRB     R1,[R5, #+0]
   \   00000056   0x.... 0x....      BL       ??Subroutine11_0
   \                     ??CrossCallReturnLabel_32: (+1)
   \   0000005A   0x1C76             ADDS     R6,R6,#+1
   \   0000005C   0x2E05             CMP      R6,#+5
   \   0000005E   0xDBD7             BLT.N    ??emberAfScenesClusterRemoveScenesInGroupCallba_0
   1260          }
   \   00000060   0xE8BD 0x81FF      POP      {R0-R8,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14:
   \   00000000   0x75 0x76          DC8      "uvu"
   \              0x75 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_1:
   \   00000000   0x75 0x76          DC8      0x75, 0x76, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15:
   \   00000000   0x75 0x75          DC8      "uuv"
   \              0x76 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18:
   \   00000000   0x75 0x76          DC8      "uvu"
   \              0x75 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_1:
   \   00000000   0x........         DC32     emberAfPluginScenesServerEntriesInUse

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_2:
   \   00000000   0x........         DC32     emAfCurrentCommand

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_3:
   \   00000000   0x........         DC32     emAfEndpoints

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "scene count">`:
   \   00000000   0x73 0x63          DC8 "scene count"
   \              0x65 0x6E    
   \              0x65 0x20    
   \              0x63 0x6F    
   \              0x75 0x6E    
   \              0x74 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "current scene">`:
   \   00000000   0x63 0x75          DC8 "current scene"
   \              0x72 0x72    
   \              0x65 0x6E    
   \              0x74 0x20    
   \              0x73 0x63    
   \              0x65 0x6E    
   \              0x65 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "current group">`:
   \   00000000   0x63 0x75          DC8 "current group"
   \              0x72 0x72    
   \              0x65 0x6E    
   \              0x74 0x20    
   \              0x67 0x72    
   \              0x6F 0x75    
   \              0x70 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "scene valid">`:
   \   00000000   0x73 0x63          DC8 "scene valid"
   \              0x65 0x6E    
   \              0x65 0x20    
   \              0x76 0x61    
   \              0x6C 0x69    
   \              0x64 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "on/off">`:
   \   00000000   0x6F 0x6E          DC8 "on/off"
   \              0x2F 0x6F    
   \              0x66 0x66    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "uvu">`:
   \   00000000   0x75 0x76          DC8 "uvu"
   \              0x75 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "uv">`:
   \   00000000   0x75 0x76          DC8 "uv"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "uuv">`:
   \   00000000   0x75 0x75          DC8 "uuv"
   \              0x76 0x00    

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   emAfPluginScenesServerPrintInfo
        24   -> emberIsZllNetwork
        24   -> halInternalGetTokenData
      64   emberAfPluginScenesServerParseAddScene
        64   -> emberAfFillExternalBuffer
        64   -> emberAfGetInt16u
        64   -> emberAfGroupsClusterEndpointInGroupCallback
        64   -> emberAfScenesSetSceneCountAttribute
        64   -> emberAfSendResponse
        64   -> emberAfStringLength
        64   -> emberIsZllNetwork
        64   -> halInternalGetTokenData
        64   -> halInternalSetTokenData
      56   emberAfPluginScenesServerParseViewScene
        56   -> emberAfFillExternalBuffer
        56   -> emberAfGroupsClusterEndpointInGroupCallback
        56   -> emberAfPutInt16uInResp
        56   -> emberAfPutInt8uInResp
        56   -> emberAfSendResponse
        56   -> emberIsZllNetwork
        56   -> halInternalGetTokenData
      16   emberAfScenesClusterAddSceneCallback
        16   -> emberAfPluginScenesServerParseAddScene
      32   emberAfScenesClusterClearSceneTableCallback
        32   -> emberAfEndpointCount
        32   -> emberAfEndpointFromIndex
        32   -> emberAfNetworkIndexFromEndpoint
        32   -> emberAfScenesSetSceneCountAttribute
        32   -> emberGetCurrentNetwork
        32   -> halInternalGetTokenData
        32   -> halInternalSetTokenData
      48   emberAfScenesClusterGetSceneMembershipCallback
        48   -> emberAfFillExternalBuffer
        48   -> emberAfGroupsClusterEndpointInGroupCallback
        48   -> emberAfPutInt8uInResp
        48   -> emberAfSendResponse
        48   -> emberIsZllNetwork
        48   -> halInternalGetTokenData
      16   emberAfScenesClusterMakeInvalidCallback
        16   -> writeServerAttribute
      40   emberAfScenesClusterRecallSavedSceneCallback
        40   -> emberAfGroupsClusterEndpointInGroupCallback
        40   -> emberAfScenesMakeValid
        40   -> halInternalGetTokenData
        40   -> writeServerAttribute
       8   emberAfScenesClusterRecallSceneCallback
         8   -> emberAfScenesClusterRecallSavedSceneCallback
         8   -> emberAfSendImmediateDefaultResponse
      40   emberAfScenesClusterRemoveAllScenesCallback
        40   -> emberAfFillExternalBuffer
        40   -> emberAfGroupsClusterEndpointInGroupCallback
        40   -> emberAfScenesSetSceneCountAttribute
        40   -> emberAfSendResponse
        40   -> halInternalGetTokenData
        40   -> halInternalSetTokenData
      40   emberAfScenesClusterRemoveSceneCallback
        40   -> emberAfFillExternalBuffer
        40   -> emberAfGroupsClusterEndpointInGroupCallback
        40   -> emberAfScenesSetSceneCountAttribute
        40   -> emberAfSendResponse
        40   -> halInternalGetTokenData
        40   -> halInternalSetTokenData
      40   emberAfScenesClusterRemoveScenesInGroupCallback
        40   -> emberAfScenesSetSceneCountAttribute
        40   -> halInternalGetTokenData
        40   -> halInternalSetTokenData
      16   emberAfScenesClusterServerInitCallback
         0   -> emberAfScenesSetSceneCountAttribute
        16   -> halInternalGetTokenData
      48   emberAfScenesClusterStoreCurrentSceneCallback
        48   -> emberAfContainsServer
        48   -> emberAfGroupsClusterEndpointInGroupCallback
        48   -> emberAfReadServerAttribute
        48   -> emberAfScenesMakeValid
        48   -> emberAfScenesSetSceneCountAttribute
        48   -> emberIsZllNetwork
        48   -> halInternalGetTokenData
        48   -> halInternalSetTokenData
      32   emberAfScenesClusterStoreSceneCallback
        32   -> emberAfFillExternalBuffer
        32   -> emberAfScenesClusterStoreCurrentSceneCallback
        32   -> emberAfSendResponse
       0   emberAfScenesClusterViewSceneCallback
         0   -> emberAfPluginScenesServerParseViewScene
      32   emberAfScenesMakeValid
        32   -> writeServerAttribute
      16   emberAfScenesSetSceneCountAttribute
        16   -> writeServerAttribute
       8   writeServerAttribute
         8   -> emberAfWriteServerAttribute


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      16  ?<Constant "current group">
      16  ?<Constant "current scene">
       8  ?<Constant "on/off">
      12  ?<Constant "scene count">
      12  ?<Constant "scene valid">
       4  ?<Constant "uuv">
       4  ?<Constant "uv">
       4  ?<Constant "uvu">
       4  ??DataTable14
       4  ??DataTable14_1
       4  ??DataTable15
       4  ??DataTable18
       4  ??DataTable18_1
       4  ??DataTable18_2
       4  ??DataTable18_3
       8  ?Subroutine0
       8  ?Subroutine1
      12  ?Subroutine10
      10  ?Subroutine11
      12  ?Subroutine12
       6  ?Subroutine13
       8  ?Subroutine14
      12  ?Subroutine15
      12  ?Subroutine2
      12  ?Subroutine3
      18  ?Subroutine4
      10  ?Subroutine5
       6  ?Subroutine6
      12  ?Subroutine7
       8  ?Subroutine8
      18  ?Subroutine9
      32  emAfPluginScenesServerPrintInfo
       1  emberAfPluginScenesServerEntriesInUse
     432  emberAfPluginScenesServerParseAddScene
     192  emberAfPluginScenesServerParseViewScene
      26  emberAfScenesClusterAddSceneCallback
     116  emberAfScenesClusterClearSceneTableCallback
     192  emberAfScenesClusterGetSceneMembershipCallback
      22  emberAfScenesClusterMakeInvalidCallback
     114  emberAfScenesClusterRecallSavedSceneCallback
      28  emberAfScenesClusterRecallSceneCallback
     124  emberAfScenesClusterRemoveAllScenesCallback
     132  emberAfScenesClusterRemoveSceneCallback
     100  emberAfScenesClusterRemoveScenesInGroupCallback
      20  emberAfScenesClusterServerInitCallback
     244  emberAfScenesClusterStoreCurrentSceneCallback
      62  emberAfScenesClusterStoreSceneCallback
      12  emberAfScenesClusterViewSceneCallback
      74  emberAfScenesMakeValid
      20  emberAfScenesSetSceneCountAttribute
      14  writeServerAttribute

 
     1 byte  in section .bss
    12 bytes in section .rodata
 2 220 bytes in section .text
 
 2 220 bytes of CODE  memory
    12 bytes of CONST memory
     1 byte  of DATA  memory

Errors: none
Warnings: none
