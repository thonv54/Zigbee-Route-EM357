###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        19/Apr/2016  16:28:29
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\Work
#        Space\Silabs\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\call-command-handler.c
#    Command line =  
#        "D:\Work
#        Space\Silabs\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\call-command-handler.c"
#        -D SWITCH_4_BUTTON -D NULL_BTL -D CORTEXM3 -D CORTEXM3_EMBER_MICRO -D
#        CORTEXM3_EM357 -D PHY_EM3XX -D
#        "APPLICATION_TOKEN_HEADER=\"app/framework/util/tokens.h\"" -D
#        "ATTRIBUTE_STORAGE_CONFIGURATION=\"app/builder/ZigbeeRoute/ZigbeeRoute_endpoint_config.h\""
#        -D "BOARD_HEADER=\"app\builder\ZigbeeRoute\ZigbeeRoute_board.h\"" -D
#        "CONFIGURATION_HEADER=\"app/framework/util/config.h\"" -D
#        "GENERATED_TOKEN_HEADER=\"app/builder/ZigbeeRoute/ZigbeeRoute_tokens.h\""
#        -D "PLATFORM_HEADER=\"hal/micro/cortexm3/compiler/iar.h\"" -D
#        "ZA_GENERATED_HEADER=\"app/builder/ZigbeeRoute/ZigbeeRoute.h\"" -D
#        "__SOURCEFILE__=\"call-command-handler.c\"" -lC "D:\Work
#        Space\Silabs\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\4
#        nut\List\" --diag_suppress Pa050 -o "D:\Work
#        Space\Silabs\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\4
#        nut\Obj\" --debug --endian=little --cpu=Cortex-M3
#        --no_path_in_file_macros --separate_cluster_for_initialized_variables
#        -e --fpu=None --dlib_config "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        "D:\Work
#        Space\Silabs\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\" -I
#        "D:\Work
#        Space\Silabs\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\" -I
#        "D:\Work
#        Space\Silabs\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\"
#        -I "D:\Work
#        Space\Silabs\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\app\framework\include\"
#        -I "D:\Work
#        Space\Silabs\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\app\util\"
#        -I "D:\Work
#        Space\Silabs\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\stack\"
#        -I "D:\Work
#        Space\Silabs\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\hal\"
#        -I "D:\Work
#        Space\Silabs\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\..\..\..\hal\..\"
#        -Ohz --use_c++_inline
#    List file    =  
#        D:\Work
#        Space\Silabs\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\4
#        nut\List\call-command-handler.lst
#    Object file  =  
#        D:\Work
#        Space\Silabs\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\4
#        nut\Obj\call-command-handler.o
#
###############################################################################

D:\Work Space\Silabs\Zigbee\EmberZNet5.6.0-GA\app\builder\ZigbeeRoute\call-command-handler.c
      1          // This file is generated by Ember Desktop.  Please do not edit manually.
      2          //
      3          //
      4          
      5          // This is a set of generated functions that parse the
      6          // the incomming message, and call appropriate command handler.
      7          
      8          #include PLATFORM_HEADER
      9          #ifdef EZSP_HOST
     10          // Includes needed for ember related functions for the EZSP host
     11          #include "stack/include/error.h"
     12          #include "stack/include/ember-types.h"
     13          #include "app/util/ezsp/ezsp-protocol.h"
     14          #include "app/util/ezsp/ezsp.h"
     15          #include "app/util/ezsp/ezsp-utils.h"
     16          #include "app/util/ezsp/serial-interface.h"
     17          #else
     18          // Includes needed for ember related functions for the EM250
     19          #include "stack/include/ember.h"
     20          #endif // EZSP_HOST
     21          #include "app/framework/util/util.h"
     22          #include "af-structs.h"
     23          #include "call-command-handler.h"
     24          #include "command-id.h"
     25          #include "callback.h"
     26          #include "UART_task.h"
     27          #include "ButtonExe.h"
     28          #include "Task.h"
     29          #include "ConfigDevice.h"
     30          

   \                                 In section .text, align 2, keep-with-next
     31          static EmberAfStatus status(boolean wasHandled, boolean mfgSpecific) {
     32          	if (wasHandled) {
   \                     status: (+1)
   \   00000000   0xB108             CBZ.N    R0,??status_0
     33          		return EMBER_ZCL_STATUS_SUCCESS;
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x4770             BX       LR
     34          	} else if (mfgSpecific) {
   \                     ??status_0: (+1)
   \   00000006   0xB109             CBZ.N    R1,??status_1
     35          		return EMBER_ZCL_STATUS_UNSUP_MANUF_CLUSTER_COMMAND;
   \   00000008   0x2083             MOVS     R0,#+131
   \   0000000A   0x4770             BX       LR
     36          	} else {
     37          		return EMBER_ZCL_STATUS_UNSUP_CLUSTER_COMMAND;
   \                     ??status_1: (+1)
   \   0000000C   0x2081             MOVS     R0,#+129
   \   0000000E   0x4770             BX       LR               ;; return
     38          	}
     39          }
     40          
     41          // Main command parsing controller.

   \                                 In section .text, align 2, keep-with-next
     42          EmberAfStatus emberAfClusterSpecificCommandParse(EmberAfClusterCommand *cmd) {
   \                     emberAfClusterSpecificCommandParse: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
     43          	if (cmd->direction == ZCL_DIRECTION_SERVER_TO_CLIENT
     44          			&& emberAfContainsClient(cmd->apsFrame->destinationEndpoint,
     45          					cmd->apsFrame->clusterId)) {
   \   00000004   0x7D60             LDRB     R0,[R4, #+21]
   \   00000006   0x2801             CMP      R0,#+1
   \   00000008   0xD10D             BNE.N    ??emberAfClusterSpecificCommandParse_0
   \   0000000A   0x6820             LDR      R0,[R4, #+0]
   \   0000000C   0x8841             LDRH     R1,[R0, #+2]
   \   0000000E   0x7940             LDRB     R0,[R0, #+5]
   \   00000010   0x.... 0x....      BL       emberAfContainsClient
   \   00000014   0xB138             CBZ.N    R0,??emberAfClusterSpecificCommandParse_0
     46          		switch (cmd->apsFrame->clusterId) {
   \   00000016   0x6820             LDR      R0,[R4, #+0]
   \   00000018   0x8840             LDRH     R0,[R0, #+2]
   \   0000001A   0x2803             CMP      R0,#+3
   \   0000001C   0xD12B             BNE.N    ??emberAfClusterSpecificCommandParse_1
     47          		case ZCL_IDENTIFY_CLUSTER_ID:
     48          			return emberAfIdentifyClusterClientCommandParse(cmd);
   \   0000001E   0x4620             MOV      R0,R4
   \   00000020   0xE8BD 0x4010      POP      {R4,LR}
   \   00000024   0x....             B.N      emberAfIdentifyClusterClientCommandParse
     49          		}
     50          	} else if (cmd->direction == ZCL_DIRECTION_CLIENT_TO_SERVER
     51          			&& emberAfContainsServer(cmd->apsFrame->destinationEndpoint,
     52          					cmd->apsFrame->clusterId)) {
   \                     ??emberAfClusterSpecificCommandParse_0: (+1)
   \   00000026   0x7D60             LDRB     R0,[R4, #+21]
   \   00000028   0xBB28             CBNZ.N   R0,??emberAfClusterSpecificCommandParse_1
   \   0000002A   0x6820             LDR      R0,[R4, #+0]
   \   0000002C   0x8841             LDRH     R1,[R0, #+2]
   \   0000002E   0x7940             LDRB     R0,[R0, #+5]
   \   00000030   0x.... 0x....      BL       emberAfContainsServer
   \   00000034   0xB1F8             CBZ.N    R0,??emberAfClusterSpecificCommandParse_1
     53          		switch (cmd->apsFrame->clusterId) {
   \   00000036   0x6820             LDR      R0,[R4, #+0]
   \   00000038   0x8840             LDRH     R0,[R0, #+2]
   \   0000003A   0xB140             CBZ.N    R0,??emberAfClusterSpecificCommandParse_2
   \   0000003C   0x2803             CMP      R0,#+3
   \   0000003E   0xD00A             BEQ.N    ??emberAfClusterSpecificCommandParse_3
   \   00000040   0x2804             CMP      R0,#+4
   \   00000042   0xD00C             BEQ.N    ??emberAfClusterSpecificCommandParse_4
   \   00000044   0x2805             CMP      R0,#+5
   \   00000046   0xD00E             BEQ.N    ??emberAfClusterSpecificCommandParse_5
   \   00000048   0x2806             CMP      R0,#+6
   \   0000004A   0xD010             BEQ.N    ??emberAfClusterSpecificCommandParse_6
   \   0000004C   0xE013             B.N      ??emberAfClusterSpecificCommandParse_1
     54          		case ZCL_BASIC_CLUSTER_ID:
     55          			return emberAfBasicClusterServerCommandParse(cmd);
   \                     ??emberAfClusterSpecificCommandParse_2: (+1)
   \   0000004E   0x4620             MOV      R0,R4
   \   00000050   0xE8BD 0x4010      POP      {R4,LR}
   \   00000054   0x....             B.N      emberAfBasicClusterServerCommandParse
     56          		case ZCL_IDENTIFY_CLUSTER_ID:
     57          			return emberAfIdentifyClusterServerCommandParse(cmd);
   \                     ??emberAfClusterSpecificCommandParse_3: (+1)
   \   00000056   0x4620             MOV      R0,R4
   \   00000058   0xE8BD 0x4010      POP      {R4,LR}
   \   0000005C   0x....             B.N      emberAfIdentifyClusterServerCommandParse
     58          		case ZCL_GROUPS_CLUSTER_ID:
     59          			return emberAfGroupsClusterServerCommandParse(cmd);
   \                     ??emberAfClusterSpecificCommandParse_4: (+1)
   \   0000005E   0x4620             MOV      R0,R4
   \   00000060   0xE8BD 0x4010      POP      {R4,LR}
   \   00000064   0x....             B.N      emberAfGroupsClusterServerCommandParse
     60          		case ZCL_SCENES_CLUSTER_ID:
     61          			return emberAfScenesClusterServerCommandParse(cmd);
   \                     ??emberAfClusterSpecificCommandParse_5: (+1)
   \   00000066   0x4620             MOV      R0,R4
   \   00000068   0xE8BD 0x4010      POP      {R4,LR}
   \   0000006C   0x....             B.N      emberAfScenesClusterServerCommandParse
     62          		case ZCL_ON_OFF_CLUSTER_ID:
     63          			return emberAfOnOffClusterServerCommandParse(cmd);
   \                     ??emberAfClusterSpecificCommandParse_6: (+1)
   \   0000006E   0x4620             MOV      R0,R4
   \   00000070   0xE8BD 0x4010      POP      {R4,LR}
   \   00000074   0x....             B.N      emberAfOnOffClusterServerCommandParse
     64          #ifdef DIMMER
     65          		case ZCL_LEVEL_CONTROL_CLUSTER_ID:
     66          			return emberAfLevelControlClusterServerCommandParse(cmd);
     67          #endif
     68          		}
     69          	}
     70          	return status(FALSE, cmd->mfgSpecific);
   \                     ??emberAfClusterSpecificCommandParse_1: (+1)
   \   00000076   0x7BE1             LDRB     R1,[R4, #+15]
   \   00000078   0xE8BD 0x4010      POP      {R4,LR}
   \   0000007C   0x2000             MOVS     R0,#+0
   \   0000007E   0x....             B.N      status
     71          }
     72          
     73          // Cluster: Basic, server

   \                                 In section .text, align 2, keep-with-next
     74          EmberAfStatus emberAfBasicClusterServerCommandParse(EmberAfClusterCommand *cmd) {
   \                     emberAfBasicClusterServerCommandParse: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
     75          	boolean wasHandled = FALSE;
   \   00000004   0x2000             MOVS     R0,#+0
     76          	if (!cmd->mfgSpecific) {
   \   00000006   0x7BE1             LDRB     R1,[R4, #+15]
   \   00000008   0x2900             CMP      R1,#+0
   \   0000000A   0xBF02             ITTT     EQ 
     77          		switch (cmd->commandId) {
   \   0000000C   0x7CE1             LDRBEQ   R1,[R4, #+19]
   \   0000000E   0x2900             CMPEQ    R1,#+0
     78          		case ZCL_RESET_TO_FACTORY_DEFAULTS_COMMAND_ID: {
     79          			// Command is fixed length: 0
     80          			wasHandled = emberAfBasicClusterResetToFactoryDefaultsCallback();
   \   00000010   0x.... 0x....      BLEQ     emberAfBasicClusterResetToFactoryDefaultsCallback
     81          			break;
     82          		}
     83          		}
     84          	}
     85          	return status(wasHandled, cmd->mfgSpecific);
   \   00000014   0x....             B.N      ?Subroutine0
     86          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0x7BE1             LDRB     R1,[R4, #+15]
   \   00000002   0xE8BD 0x4010      POP      {R4,LR}
   \   00000006   0x....             B.N      status
     87          
     88          // Cluster: Identify, client

   \                                 In section .text, align 2, keep-with-next
     89          EmberAfStatus emberAfIdentifyClusterClientCommandParse(
     90          		EmberAfClusterCommand *cmd) {
   \                     emberAfIdentifyClusterClientCommandParse: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
     91          	boolean wasHandled = FALSE;
   \   00000004   0x2000             MOVS     R0,#+0
     92          	if (!cmd->mfgSpecific) {
   \   00000006   0x7BE1             LDRB     R1,[R4, #+15]
   \   00000008   0x2900             CMP      R1,#+0
   \   0000000A   0xBF04             ITT      EQ 
     93          		switch (cmd->commandId) {
   \   0000000C   0x7CE1             LDRBEQ   R1,[R4, #+19]
   \   0000000E   0x2900             CMPEQ    R1,#+0
   \   00000010   0xD10A             BNE.N    ??emberAfIdentifyClusterClientCommandParse_0
     94          		case ZCL_IDENTIFY_QUERY_RESPONSE_COMMAND_ID: {
     95          			int16u payloadOffset = cmd->payloadStartIndex;
   \   00000012   0x7D21             LDRB     R1,[R4, #+20]
     96          			int16u timeout;  // Ver.: always
     97          			// Command is fixed length: 2
     98          			if (cmd->bufLen < payloadOffset + 2)
   \   00000014   0x89A2             LDRH     R2,[R4, #+12]
   \   00000016   0x1C88             ADDS     R0,R1,#+2
   \   00000018   0x4282             CMP      R2,R0
   \   0000001A   0xDA01             BGE.N    ??emberAfIdentifyClusterClientCommandParse_1
     99          				return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
   \   0000001C   0x2080             MOVS     R0,#+128
   \   0000001E   0xBD10             POP      {R4,PC}
    100          			timeout = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \                     ??emberAfIdentifyClusterClientCommandParse_1: (+1)
   \   00000020   0x.... 0x....      BL       ?Subroutine3
    101          			wasHandled = emberAfIdentifyClusterIdentifyQueryResponseCallback(
    102          					timeout);
   \                     ??CrossCallReturnLabel_15: (+1)
   \   00000024   0x.... 0x....      BL       emberAfIdentifyClusterIdentifyQueryResponseCallback
    103          
    104          			break;
    105          		}
    106          		}
    107          	}
    108          	return status(wasHandled, cmd->mfgSpecific);
   \                     ??emberAfIdentifyClusterClientCommandParse_0: (+1)
   \   00000028                      REQUIRE ?Subroutine0
   \   00000028                      ;; // Fall through to label ?Subroutine0
    109          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3: (+1)
   \   00000000   0x68A0             LDR      R0,[R4, #+8]
   \   00000002   0x.... 0x....      B.W      emberAfGetInt16u
    110          
    111          // Cluster: Identify, server

   \                                 In section .text, align 2, keep-with-next
    112          EmberAfStatus emberAfIdentifyClusterServerCommandParse(
    113          		EmberAfClusterCommand *cmd) {
   \                     emberAfIdentifyClusterServerCommandParse: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    114          	boolean wasHandled = FALSE;
   \   00000004   0x2000             MOVS     R0,#+0
    115          	if (!cmd->mfgSpecific) {
   \   00000006   0x7BE1             LDRB     R1,[R4, #+15]
   \   00000008   0xB989             CBNZ.N   R1,??emberAfIdentifyClusterServerCommandParse_0
    116          		switch (cmd->commandId) {
   \   0000000A   0x7CE1             LDRB     R1,[R4, #+19]
   \   0000000C   0xB121             CBZ.N    R1,??emberAfIdentifyClusterServerCommandParse_1
   \   0000000E   0x2901             CMP      R1,#+1
   \   00000010   0xBF08             IT       EQ 
    117          		case ZCL_IDENTIFY_COMMAND_ID: {
    118          			int16u payloadOffset = cmd->payloadStartIndex;
    119          			int16u identifyTime;  // Ver.: always
    120          			// Command is fixed length: 2
    121          			if (cmd->bufLen < payloadOffset + 2)
    122          				return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
    123          			identifyTime = emberAfGetInt16u(cmd->buffer, payloadOffset,
    124          					cmd->bufLen);
    125          			wasHandled = emberAfIdentifyClusterIdentifyCallback(identifyTime);
    126          			break;
    127          		}
    128          		case ZCL_IDENTIFY_QUERY_COMMAND_ID: {
    129          			// Command is fixed length: 0
    130          			wasHandled = emberAfIdentifyClusterIdentifyQueryCallback();
   \   00000012   0x.... 0x....      BLEQ     emberAfIdentifyClusterIdentifyQueryCallback
   \   00000016   0xE00A             B.N      ??emberAfIdentifyClusterServerCommandParse_0
   \                     ??emberAfIdentifyClusterServerCommandParse_1: (+1)
   \   00000018   0x7D21             LDRB     R1,[R4, #+20]
   \   0000001A   0x89A2             LDRH     R2,[R4, #+12]
   \   0000001C   0x1C88             ADDS     R0,R1,#+2
   \   0000001E   0x4282             CMP      R2,R0
   \   00000020   0xDA01             BGE.N    ??emberAfIdentifyClusterServerCommandParse_2
   \   00000022   0x2080             MOVS     R0,#+128
   \   00000024   0xBD10             POP      {R4,PC}
   \                     ??emberAfIdentifyClusterServerCommandParse_2: (+1)
   \   00000026   0x.... 0x....      BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_14: (+1)
   \   0000002A   0x.... 0x....      BL       emberAfIdentifyClusterIdentifyCallback
    131          			break;
    132          		}
    133          		}
    134          	}
    135          	return status(wasHandled, cmd->mfgSpecific);
   \                     ??emberAfIdentifyClusterServerCommandParse_0: (+1)
   \   0000002E   0x....             B.N      ?Subroutine0
    136          }
    137          
    138          // Cluster: Groups, server

   \                                 In section .text, align 4, keep-with-next
    139          EmberAfStatus emberAfGroupsClusterServerCommandParse(EmberAfClusterCommand *cmd) {
   \                     emberAfGroupsClusterServerCommandParse: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
    140          	boolean wasHandled = FALSE;
   \   00000004   0x2000             MOVS     R0,#+0
    141          	if (!cmd->mfgSpecific) {
   \   00000006   0x7BE1             LDRB     R1,[R4, #+15]
   \   00000008   0x2900             CMP      R1,#+0
   \   0000000A   0xD15A             BNE.N    ??emberAfGroupsClusterServerCommandParse_1
    142          		switch (cmd->commandId) {
   \   0000000C   0x7CE1             LDRB     R1,[R4, #+19]
   \   0000000E   0x2905             CMP      R1,#+5
   \   00000010   0xD857             BHI.N    ??emberAfGroupsClusterServerCommandParse_1
   \   00000012   0xE8DF 0xF001      TBB      [PC, R1]
   \                     ??emberAfGroupsClusterServerCommandParse_0:
   \   00000016   0x03 0x1A          DC8      0x3,0x1A,0x24,0x31
   \              0x24 0x31    
   \   0000001A   0x3B 0x3E          DC8      0x3B,0x3E
    143          		case ZCL_ADD_GROUP_COMMAND_ID: {
    144          			int16u payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfGroupsClusterServerCommandParse_2: (+1)
   \   0000001C   0x7D25             LDRB     R5,[R4, #+20]
    145          			int16u groupId;  // Ver.: always
    146          			int8u* groupName;  // Ver.: always
    147          			// Command is not a fixed length
    148          			if (cmd->bufLen < payloadOffset + 2)
   \   0000001E   0x89A2             LDRH     R2,[R4, #+12]
   \   00000020   0x1CA8             ADDS     R0,R5,#+2
   \   00000022   0x4282             CMP      R2,R0
   \   00000024   0xDB43             BLT.N    ??emberAfGroupsClusterServerCommandParse_3
    149          				return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
    150          			groupId = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \   00000026   0x.... 0x....      BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_5: (+1)
   \   0000002A   0x.... 0x....      BL       ?Subroutine4
    151          			payloadOffset += 2;
    152          			if (cmd->bufLen
    153          					< payloadOffset
    154          					+ emberAfStringLength(cmd->buffer + payloadOffset)
    155          					+ 1)
   \                     ??CrossCallReturnLabel_17: (+1)
   \   0000002E   0x89A2             LDRH     R2,[R4, #+12]
   \   00000030   0x1940             ADDS     R0,R0,R5
   \   00000032   0x1C40             ADDS     R0,R0,#+1
   \   00000034   0x4282             CMP      R2,R0
   \   00000036   0xDB3A             BLT.N    ??emberAfGroupsClusterServerCommandParse_3
    156          				return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
    157          			groupName = emberAfGetString(cmd->buffer, payloadOffset,
    158          					cmd->bufLen);
   \   00000038   0x68A0             LDR      R0,[R4, #+8]
   \   0000003A   0x4629             MOV      R1,R5
   \   0000003C   0x.... 0x....      BL       emberAfGetString
   \   00000040   0x4601             MOV      R1,R0
    159          			wasHandled = emberAfGroupsClusterAddGroupCallback(groupId,
    160          					groupName);
   \   00000042   0x4630             MOV      R0,R6
   \   00000044   0x.... 0x....      BL       emberAfGroupsClusterAddGroupCallback
    161          			break;
   \   00000048   0xE03B             B.N      ??emberAfGroupsClusterServerCommandParse_1
    162          		}
    163          		case ZCL_VIEW_GROUP_COMMAND_ID: {
    164          			int16u payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfGroupsClusterServerCommandParse_4: (+1)
   \   0000004A   0x7D21             LDRB     R1,[R4, #+20]
    165          			int16u groupId;  // Ver.: always
    166          			// Command is fixed length: 2
    167          			if (cmd->bufLen < payloadOffset + 2)
   \   0000004C   0x89A2             LDRH     R2,[R4, #+12]
   \   0000004E   0x1C88             ADDS     R0,R1,#+2
   \   00000050   0x4282             CMP      R2,R0
   \   00000052   0xDB2C             BLT.N    ??emberAfGroupsClusterServerCommandParse_3
    168          				return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
    169          			groupId = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \   00000054   0x.... 0x....      BL       ?Subroutine3
    170          			wasHandled = emberAfGroupsClusterViewGroupCallback(groupId);
   \                     ??CrossCallReturnLabel_13: (+1)
   \   00000058   0x.... 0x....      BL       emberAfGroupsClusterViewGroupCallback
    171          			break;
   \   0000005C   0xE031             B.N      ??emberAfGroupsClusterServerCommandParse_1
    172          		}
    173          		case ZCL_GET_GROUP_MEMBERSHIP_COMMAND_ID: {
    174          			int16u payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfGroupsClusterServerCommandParse_5: (+1)
   \   0000005E   0x7D20             LDRB     R0,[R4, #+20]
    175          			int8u groupCount;  // Ver.: always
    176          			int8u* groupList;  // Ver.: always
    177          			// Command is fixed length: 1
    178          			if (cmd->bufLen < payloadOffset + 1)
   \   00000060   0x89A1             LDRH     R1,[R4, #+12]
   \   00000062   0x1C42             ADDS     R2,R0,#+1
   \   00000064   0x4291             CMP      R1,R2
   \   00000066   0xDB22             BLT.N    ??emberAfGroupsClusterServerCommandParse_3
    179          				return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
    180          			groupCount = emberAfGetInt8u(cmd->buffer, payloadOffset,
    181          					cmd->bufLen);
    182          			payloadOffset += 1;
    183          			groupList = cmd->buffer + payloadOffset;
    184          			wasHandled = emberAfGroupsClusterGetGroupMembershipCallback(
    185          					groupCount, groupList);
   \   00000068   0x68A2             LDR      R2,[R4, #+8]
   \   0000006A   0x1C41             ADDS     R1,R0,#+1
   \   0000006C   0xB289             UXTH     R1,R1
   \   0000006E   0x5C80             LDRB     R0,[R0, R2]
   \   00000070   0x1889             ADDS     R1,R1,R2
   \   00000072   0x.... 0x....      BL       emberAfGroupsClusterGetGroupMembershipCallback
    186          			break;
   \   00000076   0xE024             B.N      ??emberAfGroupsClusterServerCommandParse_1
    187          		}
    188          		case ZCL_REMOVE_GROUP_COMMAND_ID: {
    189          			int16u payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfGroupsClusterServerCommandParse_6: (+1)
   \   00000078   0x7D21             LDRB     R1,[R4, #+20]
    190          			int16u groupId;  // Ver.: always
    191          			// Command is fixed length: 2
    192          			if (cmd->bufLen < payloadOffset + 2)
   \   0000007A   0x89A2             LDRH     R2,[R4, #+12]
   \   0000007C   0x1C88             ADDS     R0,R1,#+2
   \   0000007E   0x4282             CMP      R2,R0
   \   00000080   0xDB15             BLT.N    ??emberAfGroupsClusterServerCommandParse_3
    193          				return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
    194          			groupId = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \   00000082   0x.... 0x....      BL       ?Subroutine3
    195          			wasHandled = emberAfGroupsClusterRemoveGroupCallback(groupId);
   \                     ??CrossCallReturnLabel_12: (+1)
   \   00000086   0x.... 0x....      BL       emberAfGroupsClusterRemoveGroupCallback
    196          			break;
   \   0000008A   0xE01A             B.N      ??emberAfGroupsClusterServerCommandParse_1
    197          		}
    198          		case ZCL_REMOVE_ALL_GROUPS_COMMAND_ID: {
    199          			// Command is fixed length: 0
    200          			wasHandled = emberAfGroupsClusterRemoveAllGroupsCallback();
   \                     ??emberAfGroupsClusterServerCommandParse_7: (+1)
   \   0000008C   0x.... 0x....      BL       emberAfGroupsClusterRemoveAllGroupsCallback
    201          			break;
   \   00000090   0xE017             B.N      ??emberAfGroupsClusterServerCommandParse_1
    202          		}
    203          		case ZCL_ADD_GROUP_IF_IDENTIFYING_COMMAND_ID: {
    204          			int16u payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfGroupsClusterServerCommandParse_8: (+1)
   \   00000092   0x7D25             LDRB     R5,[R4, #+20]
    205          			int16u groupId;  // Ver.: always
    206          			int8u* groupName;  // Ver.: always
    207          			// Command is not a fixed length
    208          			if (cmd->bufLen < payloadOffset + 2)
   \   00000094   0x89A2             LDRH     R2,[R4, #+12]
   \   00000096   0x1CA8             ADDS     R0,R5,#+2
   \   00000098   0x4282             CMP      R2,R0
   \   0000009A   0xDB08             BLT.N    ??emberAfGroupsClusterServerCommandParse_3
    209          				return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
    210          			groupId = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \   0000009C   0x.... 0x....      BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_4: (+1)
   \   000000A0   0x.... 0x....      BL       ?Subroutine4
    211          			payloadOffset += 2;
    212          			if (cmd->bufLen
    213          					< payloadOffset
    214          					+ emberAfStringLength(cmd->buffer + payloadOffset)
    215          					+ 1)
   \                     ??CrossCallReturnLabel_16: (+1)
   \   000000A4   0x89A2             LDRH     R2,[R4, #+12]
   \   000000A6   0x1940             ADDS     R0,R0,R5
   \   000000A8   0x1C40             ADDS     R0,R0,#+1
   \   000000AA   0x4282             CMP      R2,R0
   \   000000AC   0xDA01             BGE.N    ??emberAfGroupsClusterServerCommandParse_9
    216          				return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
   \                     ??emberAfGroupsClusterServerCommandParse_3: (+1)
   \   000000AE   0x2080             MOVS     R0,#+128
   \   000000B0   0xBD70             POP      {R4-R6,PC}
    217          			groupName = emberAfGetString(cmd->buffer, payloadOffset,
    218          					cmd->bufLen);
   \                     ??emberAfGroupsClusterServerCommandParse_9: (+1)
   \   000000B2   0x68A0             LDR      R0,[R4, #+8]
   \   000000B4   0x4629             MOV      R1,R5
   \   000000B6   0x.... 0x....      BL       emberAfGetString
    219          			wasHandled = emberAfGroupsClusterAddGroupIfIdentifyingCallback(
    220          					groupId, groupName);
   \   000000BA   0x4601             MOV      R1,R0
   \   000000BC   0x4630             MOV      R0,R6
   \   000000BE   0x.... 0x....      BL       emberAfGroupsClusterAddGroupIfIdentifyingCallback
    221          			break;
    222          		}
    223          		}
    224          	}
    225          	return status(wasHandled, cmd->mfgSpecific);
   \                     ??emberAfGroupsClusterServerCommandParse_1: (+1)
   \   000000C2   0x7BE1             LDRB     R1,[R4, #+15]
   \   000000C4   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   000000C8   0x....             B.N      status
    226          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine4: (+1)
   \   00000000   0x4606             MOV      R6,R0
   \   00000002   0x1CAD             ADDS     R5,R5,#+2
   \   00000004   0x68A0             LDR      R0,[R4, #+8]
   \   00000006   0xB2AD             UXTH     R5,R5
   \   00000008   0x1828             ADDS     R0,R5,R0
   \   0000000A   0x.... 0x....      B.W      emberAfStringLength

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \   00000000   0x68A0             LDR      R0,[R4, #+8]
   \   00000002   0x4629             MOV      R1,R5
   \   00000004   0x.... 0x....      B.W      emberAfGetInt16u
    227          
    228          // Cluster: Scenes, server

   \                                 In section .text, align 4, keep-with-next
    229          EmberAfStatus emberAfScenesClusterServerCommandParse(EmberAfClusterCommand *cmd) {
   \                     emberAfScenesClusterServerCommandParse: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x4604             MOV      R4,R0
    230          	boolean wasHandled = FALSE;
   \   00000006   0x2000             MOVS     R0,#+0
    231          	if (!cmd->mfgSpecific) {
   \   00000008   0x7BE1             LDRB     R1,[R4, #+15]
   \   0000000A   0x2900             CMP      R1,#+0
   \   0000000C   0xD143             BNE.N    ??emberAfScenesClusterServerCommandParse_1
    232          		switch (cmd->commandId) {
   \   0000000E   0x7CE1             LDRB     R1,[R4, #+19]
   \   00000010   0x2906             CMP      R1,#+6
   \   00000012   0xD840             BHI.N    ??emberAfScenesClusterServerCommandParse_1
   \   00000014   0xE8DF 0xF001      TBB      [PC, R1]
   \                     ??emberAfScenesClusterServerCommandParse_0:
   \   00000018   0x04 0x40          DC8      0x4,0x40,0x4C,0x58
   \              0x4C 0x58    
   \   0000001C   0x62 0x6E          DC8      0x62,0x6E,0x7A,0x0
   \              0x7A 0x00    
    233          		case ZCL_ADD_SCENE_COMMAND_ID: {
    234          			int16u payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfScenesClusterServerCommandParse_2: (+1)
   \   00000020   0x7D27             LDRB     R7,[R4, #+20]
    235          			int16u groupId;  // Ver.: always
    236          			int8u sceneId;  // Ver.: always
    237          			int16u transitionTime;  // Ver.: always
    238          			int8u* sceneName;  // Ver.: always
    239          			int8u* extensionFieldSets;  // Ver.: always
    240          			// Command is not a fixed length
    241          			if (cmd->bufLen < payloadOffset + 2)
   \   00000022   0x89A2             LDRH     R2,[R4, #+12]
   \   00000024   0x1CB8             ADDS     R0,R7,#+2
   \   00000026   0x4282             CMP      R2,R0
   \   00000028   0xDB75             BLT.N    ??emberAfScenesClusterServerCommandParse_3
    242          				return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
    243          			groupId = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \   0000002A   0x68A0             LDR      R0,[R4, #+8]
   \   0000002C   0x4639             MOV      R1,R7
   \   0000002E   0x.... 0x....      BL       emberAfGetInt16u
    244          			payloadOffset += 2;
   \   00000032   0x1CBF             ADDS     R7,R7,#+2
   \   00000034   0x4605             MOV      R5,R0
   \   00000036   0xB2BF             UXTH     R7,R7
    245          			if (cmd->bufLen < payloadOffset + 1)
   \   00000038   0x89A2             LDRH     R2,[R4, #+12]
   \   0000003A   0x1C78             ADDS     R0,R7,#+1
   \   0000003C   0x4282             CMP      R2,R0
   \   0000003E   0xDB6A             BLT.N    ??emberAfScenesClusterServerCommandParse_3
    246          				return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
    247          			sceneId = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   \   00000040   0x68A0             LDR      R0,[R4, #+8]
   \   00000042   0x5C3E             LDRB     R6,[R7, R0]
    248          			payloadOffset += 1;
   \   00000044   0x1C7F             ADDS     R7,R7,#+1
   \   00000046   0xB2BF             UXTH     R7,R7
    249          			if (cmd->bufLen < payloadOffset + 2)
   \   00000048   0x1CBB             ADDS     R3,R7,#+2
   \   0000004A   0x429A             CMP      R2,R3
   \   0000004C   0xDB63             BLT.N    ??emberAfScenesClusterServerCommandParse_3
    250          				return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
    251          			transitionTime = emberAfGetInt16u(cmd->buffer, payloadOffset,
    252          					cmd->bufLen);
   \   0000004E   0x4639             MOV      R1,R7
   \   00000050   0x.... 0x....      BL       emberAfGetInt16u
   \   00000054   0x4680             MOV      R8,R0
    253          			payloadOffset += 2;
   \   00000056   0x1CBF             ADDS     R7,R7,#+2
    254          			if (cmd->bufLen
    255          					< payloadOffset
    256          					+ emberAfStringLength(cmd->buffer + payloadOffset)
    257          					+ 1)
   \   00000058   0x68A0             LDR      R0,[R4, #+8]
   \   0000005A   0xB2BF             UXTH     R7,R7
   \   0000005C   0x1838             ADDS     R0,R7,R0
   \   0000005E   0x.... 0x....      BL       emberAfStringLength
   \   00000062   0x89A2             LDRH     R2,[R4, #+12]
   \   00000064   0x19C0             ADDS     R0,R0,R7
   \   00000066   0x1C40             ADDS     R0,R0,#+1
   \   00000068   0x4282             CMP      R2,R0
   \   0000006A   0xDB54             BLT.N    ??emberAfScenesClusterServerCommandParse_3
    258          				return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
    259          			sceneName = emberAfGetString(cmd->buffer, payloadOffset,
    260          					cmd->bufLen);
   \   0000006C   0x68A0             LDR      R0,[R4, #+8]
   \   0000006E   0x4639             MOV      R1,R7
   \   00000070   0x.... 0x....      BL       emberAfGetString
   \   00000074   0x4681             MOV      R9,R0
    261          			payloadOffset += emberAfStringLength(cmd->buffer + payloadOffset)
    262          							+ 1;
   \   00000076   0x68A0             LDR      R0,[R4, #+8]
   \   00000078   0x1838             ADDS     R0,R7,R0
   \   0000007A   0x.... 0x....      BL       emberAfStringLength
    263          			extensionFieldSets = cmd->buffer + payloadOffset;
    264          			wasHandled = emberAfScenesClusterAddSceneCallback(groupId, sceneId,
    265          					transitionTime, sceneName, extensionFieldSets);
   \   0000007E   0x19C0             ADDS     R0,R0,R7
   \   00000080   0x1C40             ADDS     R0,R0,#+1
   \   00000082   0x68A1             LDR      R1,[R4, #+8]
   \   00000084   0xB280             UXTH     R0,R0
   \   00000086   0x1840             ADDS     R0,R0,R1
   \   00000088   0x9000             STR      R0,[SP, #+0]
   \   0000008A   0x464B             MOV      R3,R9
   \   0000008C   0x4642             MOV      R2,R8
   \   0000008E   0x4631             MOV      R1,R6
   \   00000090   0x4628             MOV      R0,R5
   \   00000092   0x.... 0x....      BL       emberAfScenesClusterAddSceneCallback
    266          			break;
   \                     ??emberAfScenesClusterServerCommandParse_1: (+1)
   \   00000096   0xE044             B.N      ??emberAfScenesClusterServerCommandParse_4
    267          		}
    268          		case ZCL_VIEW_SCENE_COMMAND_ID: {
    269          			int16u payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfScenesClusterServerCommandParse_5: (+1)
   \   00000098   0x7D25             LDRB     R5,[R4, #+20]
    270          			int16u groupId;  // Ver.: always
    271          			int8u sceneId;  // Ver.: always
    272          			// Command is fixed length: 3
    273          			if (cmd->bufLen < payloadOffset + 3)
   \   0000009A   0x89A2             LDRH     R2,[R4, #+12]
   \   0000009C   0x1CE8             ADDS     R0,R5,#+3
   \   0000009E   0x4282             CMP      R2,R0
   \   000000A0   0xDB39             BLT.N    ??emberAfScenesClusterServerCommandParse_3
    274          				return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
    275          			groupId = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \   000000A2   0x.... 0x....      BL       ?Subroutine1
    276          			payloadOffset += 2;
    277          			sceneId = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
    278          			wasHandled = emberAfScenesClusterViewSceneCallback(groupId,
    279          					sceneId);
   \                     ??CrossCallReturnLabel_3: (+1)
   \   000000A6   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_6: (+1)
   \   000000AA   0x.... 0x....      BL       emberAfScenesClusterViewSceneCallback
    280          			break;
   \   000000AE   0xE038             B.N      ??emberAfScenesClusterServerCommandParse_4
    281          		}
    282          		case ZCL_REMOVE_SCENE_COMMAND_ID: {
    283          			int16u payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfScenesClusterServerCommandParse_6: (+1)
   \   000000B0   0x7D25             LDRB     R5,[R4, #+20]
    284          			int16u groupId;  // Ver.: always
    285          			int8u sceneId;  // Ver.: always
    286          			// Command is fixed length: 3
    287          			if (cmd->bufLen < payloadOffset + 3)
   \   000000B2   0x89A2             LDRH     R2,[R4, #+12]
   \   000000B4   0x1CE8             ADDS     R0,R5,#+3
   \   000000B6   0x4282             CMP      R2,R0
   \   000000B8   0xDB2D             BLT.N    ??emberAfScenesClusterServerCommandParse_3
    288          				return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
    289          			groupId = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \   000000BA   0x.... 0x....      BL       ?Subroutine1
    290          			payloadOffset += 2;
    291          			sceneId = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
    292          			wasHandled = emberAfScenesClusterRemoveSceneCallback(groupId,
    293          					sceneId);
   \                     ??CrossCallReturnLabel_2: (+1)
   \   000000BE   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_7: (+1)
   \   000000C2   0x.... 0x....      BL       emberAfScenesClusterRemoveSceneCallback
    294          			break;
   \   000000C6   0xE02C             B.N      ??emberAfScenesClusterServerCommandParse_4
    295          		}
    296          		case ZCL_REMOVE_ALL_SCENES_COMMAND_ID: {
    297          			int16u payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfScenesClusterServerCommandParse_7: (+1)
   \   000000C8   0x7D21             LDRB     R1,[R4, #+20]
    298          			int16u groupId;  // Ver.: always
    299          			// Command is fixed length: 2
    300          			if (cmd->bufLen < payloadOffset + 2)
   \   000000CA   0x89A2             LDRH     R2,[R4, #+12]
   \   000000CC   0x1C88             ADDS     R0,R1,#+2
   \   000000CE   0x4282             CMP      R2,R0
   \   000000D0   0xDB21             BLT.N    ??emberAfScenesClusterServerCommandParse_3
    301          				return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
    302          			groupId = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \   000000D2   0x.... 0x....      BL       ?Subroutine3
    303          			wasHandled = emberAfScenesClusterRemoveAllScenesCallback(groupId);
   \                     ??CrossCallReturnLabel_11: (+1)
   \   000000D6   0x.... 0x....      BL       emberAfScenesClusterRemoveAllScenesCallback
    304          			break;
   \   000000DA   0xE022             B.N      ??emberAfScenesClusterServerCommandParse_4
    305          		}
    306          		case ZCL_STORE_SCENE_COMMAND_ID: {
    307          			int16u payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfScenesClusterServerCommandParse_8: (+1)
   \   000000DC   0x7D25             LDRB     R5,[R4, #+20]
    308          			int16u groupId;  // Ver.: always
    309          			int8u sceneId;  // Ver.: always
    310          			// Command is fixed length: 3
    311          			if (cmd->bufLen < payloadOffset + 3)
   \   000000DE   0x89A2             LDRH     R2,[R4, #+12]
   \   000000E0   0x1CE8             ADDS     R0,R5,#+3
   \   000000E2   0x4282             CMP      R2,R0
   \   000000E4   0xDB17             BLT.N    ??emberAfScenesClusterServerCommandParse_3
    312          				return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
    313          			groupId = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \   000000E6   0x.... 0x....      BL       ?Subroutine1
    314          			payloadOffset += 2;
    315          			sceneId = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
    316          			wasHandled = emberAfScenesClusterStoreSceneCallback(groupId,
    317          					sceneId);
   \                     ??CrossCallReturnLabel_1: (+1)
   \   000000EA   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_8: (+1)
   \   000000EE   0x.... 0x....      BL       emberAfScenesClusterStoreSceneCallback
    318          			break;
   \   000000F2   0xE016             B.N      ??emberAfScenesClusterServerCommandParse_4
    319          		}
    320          		case ZCL_RECALL_SCENE_COMMAND_ID: {
    321          			int16u payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfScenesClusterServerCommandParse_9: (+1)
   \   000000F4   0x7D25             LDRB     R5,[R4, #+20]
    322          			int16u groupId;  // Ver.: always
    323          			int8u sceneId;  // Ver.: always
    324          			// Command is fixed length: 3
    325          			if (cmd->bufLen < payloadOffset + 3)
   \   000000F6   0x89A2             LDRH     R2,[R4, #+12]
   \   000000F8   0x1CE8             ADDS     R0,R5,#+3
   \   000000FA   0x4282             CMP      R2,R0
   \   000000FC   0xDB0B             BLT.N    ??emberAfScenesClusterServerCommandParse_3
    326          				return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
    327          			groupId = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \   000000FE   0x.... 0x....      BL       ?Subroutine1
    328          			payloadOffset += 2;
    329          			sceneId = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
    330          			wasHandled = emberAfScenesClusterRecallSceneCallback(groupId,
    331          					sceneId);
   \                     ??CrossCallReturnLabel_0: (+1)
   \   00000102   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_9: (+1)
   \   00000106   0x.... 0x....      BL       emberAfScenesClusterRecallSceneCallback
    332          			break;
   \   0000010A   0xE00A             B.N      ??emberAfScenesClusterServerCommandParse_4
    333          		}
    334          		case ZCL_GET_SCENE_MEMBERSHIP_COMMAND_ID: {
    335          			int16u payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfScenesClusterServerCommandParse_10: (+1)
   \   0000010C   0x7D21             LDRB     R1,[R4, #+20]
    336          			int16u groupId;  // Ver.: always
    337          			// Command is fixed length: 2
    338          			if (cmd->bufLen < payloadOffset + 2)
   \   0000010E   0x89A2             LDRH     R2,[R4, #+12]
   \   00000110   0x1C88             ADDS     R0,R1,#+2
   \   00000112   0x4282             CMP      R2,R0
   \   00000114   0xDA01             BGE.N    ??emberAfScenesClusterServerCommandParse_11
    339          				return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
   \                     ??emberAfScenesClusterServerCommandParse_3: (+1)
   \   00000116   0x2080             MOVS     R0,#+128
   \   00000118   0xE007             B.N      ??emberAfScenesClusterServerCommandParse_12
    340          			groupId = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \                     ??emberAfScenesClusterServerCommandParse_11: (+1)
   \   0000011A   0x.... 0x....      BL       ?Subroutine3
    341          			wasHandled = emberAfScenesClusterGetSceneMembershipCallback(
    342          					groupId);
   \                     ??CrossCallReturnLabel_10: (+1)
   \   0000011E   0x.... 0x....      BL       emberAfScenesClusterGetSceneMembershipCallback
    343          			break;
    344          		}
    345          		}
    346          	}
    347          	return status(wasHandled, cmd->mfgSpecific);
   \                     ??emberAfScenesClusterServerCommandParse_4: (+1)
   \   00000122   0x7BE1             LDRB     R1,[R4, #+15]
   \   00000124   0xE8BD 0x43F4      POP      {R2,R4-R9,LR}
   \   00000128   0x....             B.N      status
   \                     ??emberAfScenesClusterServerCommandParse_12: (+1)
   \   0000012A   0xE8BD 0x83F2      POP      {R1,R4-R9,PC}    ;; return
    348          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2: (+1)
   \   00000000   0x1CA9             ADDS     R1,R5,#+2
   \   00000002   0x68A2             LDR      R2,[R4, #+8]
   \   00000004   0xB289             UXTH     R1,R1
   \   00000006   0x5C89             LDRB     R1,[R1, R2]
   \   00000008   0x4770             BX       LR

   \                                 In section .bss, align 4
    349          int16u OnOffCmdBeforeTimer[5] = {0};
   \                     OnOffCmdBeforeTimer:
   \   00000000                      DS8 12
    350          // Cluster: On/off, server

   \                                 In section .text, align 2, keep-with-next
    351          EmberAfStatus emberAfOnOffClusterServerCommandParse(EmberAfClusterCommand *cmd) {
   \                     emberAfOnOffClusterServerCommandParse: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0xB083             SUB      SP,SP,#+12
    352          	boolean wasHandled = FALSE;
    353          	int8u OnOfffCmdBeforeNumber;
    354          	if (!cmd->mfgSpecific) {
   \   00000006   0x7BE0             LDRB     R0,[R4, #+15]
   \   00000008   0x2500             MOVS     R5,#+0
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD170             BNE.N    ??emberAfOnOffClusterServerCommandParse_0
    355          		switch (cmd->apsFrame->destinationEndpoint){
   \   0000000E   0x6820             LDR      R0,[R4, #+0]
   \   00000010   0x7940             LDRB     R0,[R0, #+5]
   \   00000012   0x2801             CMP      R0,#+1
   \   00000014   0xD009             BEQ.N    ??emberAfOnOffClusterServerCommandParse_1
   \   00000016   0x2803             CMP      R0,#+3
   \   00000018   0xD009             BEQ.N    ??emberAfOnOffClusterServerCommandParse_2
   \   0000001A   0x2805             CMP      R0,#+5
   \   0000001C   0xD009             BEQ.N    ??emberAfOnOffClusterServerCommandParse_3
   \   0000001E   0x2807             CMP      R0,#+7
   \   00000020   0xD009             BEQ.N    ??emberAfOnOffClusterServerCommandParse_4
   \   00000022   0x280F             CMP      R0,#+15
   \   00000024   0xBF08             IT       EQ 
    356          			case 1 : OnOfffCmdBeforeNumber = 1;
    357          			break;
    358          			case 3 : OnOfffCmdBeforeNumber = 2;
    359          			break;
    360          			case 5 : OnOfffCmdBeforeNumber = 3;
    361          			break;
    362          			case 7 : OnOfffCmdBeforeNumber = 4;
    363          			break;
    364          			case LedLightOptionEndpoint:
    365          					 OnOfffCmdBeforeNumber = 5;
   \   00000026   0x2605             MOVEQ    R6,#+5
   \   00000028   0xE006             B.N      ??emberAfOnOffClusterServerCommandParse_5
   \                     ??emberAfOnOffClusterServerCommandParse_1: (+1)
   \   0000002A   0x2601             MOVS     R6,#+1
   \   0000002C   0xE004             B.N      ??emberAfOnOffClusterServerCommandParse_5
   \                     ??emberAfOnOffClusterServerCommandParse_2: (+1)
   \   0000002E   0x2602             MOVS     R6,#+2
   \   00000030   0xE002             B.N      ??emberAfOnOffClusterServerCommandParse_5
   \                     ??emberAfOnOffClusterServerCommandParse_3: (+1)
   \   00000032   0x2603             MOVS     R6,#+3
   \   00000034   0xE000             B.N      ??emberAfOnOffClusterServerCommandParse_5
   \                     ??emberAfOnOffClusterServerCommandParse_4: (+1)
   \   00000036   0x2604             MOVS     R6,#+4
    366          			break;
    367          		}
    368          		if (CommonGetDurationTime(OnOffCmdBeforeTimer[OnOfffCmdBeforeNumber]) > 1000){
                 		    ^
Warning[Pe223]: function "CommonGetDurationTime" declared implicitly
   \                     ??emberAfOnOffClusterServerCommandParse_5: (+1)
   \   00000038   0x....             LDR.N    R7,??DataTable0
   \   0000003A   0xB2F6             UXTB     R6,R6
   \   0000003C   0xF837 0x0016      LDRH     R0,[R7, R6, LSL #+1]
   \   00000040   0x.... 0x....      BL       CommonGetDurationTime
   \   00000044   0xF5B0 0x7F7A      CMP      R0,#+1000
   \   00000048   0xDD52             BLE.N    ??emberAfOnOffClusterServerCommandParse_0
    369          			OnOffCmdBeforeTimer[OnOfffCmdBeforeNumber] = (int16u)halCommonGetInt32uMillisecondTick();
   \   0000004A   0x.... 0x....      BL       halCommonGetInt32uMillisecondTick
   \   0000004E   0xF827 0x0016      STRH     R0,[R7, R6, LSL #+1]
    370          			switch (cmd->commandId) {
   \   00000052   0x7CE0             LDRB     R0,[R4, #+19]
   \   00000054   0xB118             CBZ.N    R0,??emberAfOnOffClusterServerCommandParse_6
   \   00000056   0x2802             CMP      R0,#+2
   \   00000058   0xD007             BEQ.N    ??emberAfOnOffClusterServerCommandParse_7
   \   0000005A   0xD303             BCC.N    ??emberAfOnOffClusterServerCommandParse_8
   \   0000005C   0xE008             B.N      ??emberAfOnOffClusterServerCommandParse_9
    371          				case ZCL_OFF_COMMAND_ID: {
    372          					// Command is fixed length: 0
    373          					wasHandled = emberAfOnOffClusterOffCallback();
   \                     ??emberAfOnOffClusterServerCommandParse_6: (+1)
   \   0000005E   0x.... 0x....      BL       emberAfOnOffClusterOffCallback
   \   00000062   0xE004             B.N      ??emberAfOnOffClusterServerCommandParse_10
    374          					break;
    375          				}
    376          				case ZCL_ON_COMMAND_ID: {
    377          					// Command is fixed length: 0
    378          					wasHandled = emberAfOnOffClusterOnCallback();
   \                     ??emberAfOnOffClusterServerCommandParse_8: (+1)
   \   00000064   0x.... 0x....      BL       emberAfOnOffClusterOnCallback
   \   00000068   0xE001             B.N      ??emberAfOnOffClusterServerCommandParse_10
    379          					break;
    380          				}
    381          				case ZCL_TOGGLE_COMMAND_ID: {
    382          					// Command is fixed length: 0
    383          					wasHandled = emberAfOnOffClusterToggleCallback();
   \                     ??emberAfOnOffClusterServerCommandParse_7: (+1)
   \   0000006A   0x.... 0x....      BL       emberAfOnOffClusterToggleCallback
   \                     ??emberAfOnOffClusterServerCommandParse_10: (+1)
   \   0000006E   0x4605             MOV      R5,R0
    384          					break;
    385          				}
    386          			}
    387          
    388          
    389          
    390          		//	User Controller Command
    391          			int8u CurrentState;
    392          			emberAfReadServerAttribute(cmd->apsFrame->destinationEndpoint,
    393          						ZCL_ON_OFF_CLUSTER_ID, ZCL_ON_OFF_ATTRIBUTE_ID, &CurrentState,
    394          						sizeof(CurrentState));
   \                     ??emberAfOnOffClusterServerCommandParse_9: (+1)
   \   00000070   0x2001             MOVS     R0,#+1
   \   00000072   0x9000             STR      R0,[SP, #+0]
   \   00000074   0xAB01             ADD      R3,SP,#+4
   \   00000076   0x6820             LDR      R0,[R4, #+0]
   \   00000078   0x7940             LDRB     R0,[R0, #+5]
   \   0000007A   0x2200             MOVS     R2,#+0
   \   0000007C   0x2106             MOVS     R1,#+6
   \   0000007E   0x.... 0x....      BL       emberAfReadServerAttribute
    395          			if (status(wasHandled, cmd->mfgSpecific) == EMBER_ZCL_STATUS_SUCCESS) {
   \   00000082   0x7BE1             LDRB     R1,[R4, #+15]
   \   00000084   0x4628             MOV      R0,R5
   \   00000086   0x.... 0x....      BL       status
   \   0000008A   0xBB88             CBNZ.N   R0,??emberAfOnOffClusterServerCommandParse_0
   \   0000008C   0x6820             LDR      R0,[R4, #+0]
   \   0000008E   0x7940             LDRB     R0,[R0, #+5]
   \   00000090   0xF89D 0x1004      LDRB     R1,[SP, #+4]
   \   00000094   0x280F             CMP      R0,#+15
   \   00000096   0xD109             BNE.N    ??emberAfOnOffClusterServerCommandParse_11
    396          				if (cmd->apsFrame->destinationEndpoint == LedLightOptionEndpoint) {
    397          					if (CurrentState == 1) {
   \   00000098   0x2901             CMP      R1,#+1
   \   0000009A   0xD103             BNE.N    ??emberAfOnOffClusterServerCommandParse_12
    398          						halClearLed(LED_LIGHT);
   \   0000009C   0x2003             MOVS     R0,#+3
   \   0000009E   0x.... 0x....      BL       halClearLed
   \   000000A2   0xE025             B.N      ??emberAfOnOffClusterServerCommandParse_0
    399          					}
    400          					else{
    401          						halSetLed(LED_LIGHT);
   \                     ??emberAfOnOffClusterServerCommandParse_12: (+1)
   \   000000A4   0x2003             MOVS     R0,#+3
   \   000000A6   0x.... 0x....      BL       halSetLed
   \   000000AA   0xE021             B.N      ??emberAfOnOffClusterServerCommandParse_0
    402          					}
    403          				}
    404          				else {
    405          					if (CurrentState == 1) {
   \                     ??emberAfOnOffClusterServerCommandParse_11: (+1)
   \   000000AC   0x0840             LSRS     R0,R0,#+1
   \   000000AE   0x1C40             ADDS     R0,R0,#+1
   \   000000B0   0x2901             CMP      R1,#+1
   \   000000B2   0xBF0C             ITE      EQ 
    406          						UartSendSwitchControlNumber(
    407          								(((cmd->apsFrame->destinationEndpoint) >> 1) + 1),
    408          								OnRelay);
   \   000000B4   0x2102             MOVEQ    R1,#+2
    409          					} else {
    410          						UartSendSwitchControlNumber(
    411          								(((cmd->apsFrame->destinationEndpoint) >> 1) + 1),
    412          								OffRelay);
   \   000000B6   0x2101             MOVNE    R1,#+1
   \   000000B8   0xB2C0             UXTB     R0,R0
   \   000000BA   0x.... 0x....      BL       UartSendSwitchControlNumber
    413          					}
    414          
    415          					//	 	Send to Bind Device
    416          
    417          					SendViaBindingTable(cmd->apsFrame->destinationEndpoint,
    418          							CurrentState, OnOffType);
   \   000000BE   0x6820             LDR      R0,[R4, #+0]
   \   000000C0   0xF89D 0x1004      LDRB     R1,[SP, #+4]
   \   000000C4   0x7940             LDRB     R0,[R0, #+5]
   \   000000C6   0x2201             MOVS     R2,#+1
   \   000000C8   0x.... 0x....      BL       SendViaBindingTable
    419          
    420          					//		Send On-Off AttributeResponse, Zipato stupid update :D-----------------------------//
    421          					SendOnOffControlReadAttribute(cmd->apsFrame->destinationEndpoint,
    422          							CurrentState);
   \   000000CC   0x6820             LDR      R0,[R4, #+0]
   \   000000CE   0xF89D 0x1004      LDRB     R1,[SP, #+4]
   \   000000D2   0x7940             LDRB     R0,[R0, #+5]
   \   000000D4   0x.... 0x....      BL       SendOnOffControlReadAttribute
   \   000000D8   0x6820             LDR      R0,[R4, #+0]
   \   000000DA   0x7940             LDRB     R0,[R0, #+5]
   \   000000DC   0xF89D 0x1004      LDRB     R1,[SP, #+4]
   \   000000E0   0x0840             LSRS     R0,R0,#+1
   \   000000E2   0x2901             CMP      R1,#+1
   \   000000E4   0xD102             BNE.N    ??emberAfOnOffClusterServerCommandParse_13
    423          
    424          					// on-off led
    425          
    426          					if (CurrentState == 1) {
    427          						CommonSetLed(cmd->apsFrame->destinationEndpoint >> 1);
   \   000000E6   0x.... 0x....      BL       CommonSetLed
   \   000000EA   0xE001             B.N      ??emberAfOnOffClusterServerCommandParse_0
    428          					} else {
    429          						CommonClearLed(cmd->apsFrame->destinationEndpoint >> 1);
   \                     ??emberAfOnOffClusterServerCommandParse_13: (+1)
   \   000000EC   0x.... 0x....      BL       CommonClearLed
    430          					}
    431          				}
    432          			}
    433          		}
    434          	}
    435          	return status(wasHandled, cmd->mfgSpecific);
   \                     ??emberAfOnOffClusterServerCommandParse_0: (+1)
   \   000000F0   0x7BE1             LDRB     R1,[R4, #+15]
   \   000000F2   0x4628             MOV      R0,R5
   \   000000F4   0x.... 0x....      BL       status
   \   000000F8   0xBDFE             POP      {R1-R7,PC}       ;; return
    436          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   0x........         DC32     OnOffCmdBeforeTimer
    437          
    438          #ifdef DIMMER
    439          
    440          // Cluster: Level Control, server
    441          EmberAfStatus emberAfLevelControlClusterServerCommandParse(EmberAfClusterCommand *cmd)
    442          {
    443          	boolean wasHandled = FALSE;
    444          	if (!cmd->mfgSpecific) {
    445          		switch (cmd->commandId) {
    446          		case ZCL_MOVE_TO_LEVEL_COMMAND_ID:
    447          		{
    448          			int16u payloadOffset = cmd->payloadStartIndex;
    449          			int8u level;  // Ver.: always
    450          			int16u transitionTime;// Ver.: always
    451          			// Command is fixed length: 3
    452          			if (cmd->bufLen < payloadOffset + 3) return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
    453          			level = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
    454          			payloadOffset += 1;
    455          			transitionTime = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
    456          			wasHandled = emberAfLevelControlClusterMoveToLevelCallback(level,
    457          					transitionTime);
    458          			// 			user controller
    459          
    460          			//		 	Send to Bind Device
    461          			SendViaBindingTable(DimmerInClusterEndpoint,level, LevelType);
    462          			//			Send Level AttributeResponse, Zipato stupid update :D-----------------------------//
    463          			SendLevelControlReadAttribute(DimmerInClusterEndpoint,level);
    464          #ifdef CURTAIN
    465          			//			Send to Level Change to MC
    466          			int8u OnOffState;
    467          			emberAfReadServerAttribute(DimmerInClusterEndpoint,
    468          					ZCL_ON_OFF_CLUSTER_ID,
    469          					ZCL_ON_OFF_ATTRIBUTE_ID,
    470          					&OnOffState,
    471          					sizeof (OnOffState));
    472          			if(OnOffState == 1) {
    473          				UartSendDimLevel(level);
    474          			}
    475          #endif
    476          			// 			end user controller
    477          
    478          			break;
    479          		}
    480          		case ZCL_MOVE_COMMAND_ID:
    481          		{
    482          			int16u payloadOffset = cmd->payloadStartIndex;
    483          			int8u moveMode;  // Ver.: always
    484          			int8u rate;// Ver.: always
    485          			// Command is fixed length: 2
    486          			if (cmd->bufLen < payloadOffset + 2) return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
    487          			moveMode = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
    488          			payloadOffset += 1;
    489          			rate = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
    490          			wasHandled = emberAfLevelControlClusterMoveCallback(moveMode,
    491          					rate);
    492          			//			user controller
    493          			int8u level;
    494          			if(moveMode == EMBER_ZCL_MOVE_MODE_UP) {
    495          				level = 0xFF;
    496          			}
    497          			else {
    498          				level = 0x00;
    499          			}
    500          			//		 	Send to Bind Device
    501          			SendViaBindingTable(DimmerInClusterEndpoint,level,LevelType);
    502          
    503          			//			Send Level AttributeResponse, Zipato stupid update :D-----------------------------//
    504          			SendLevelControlReadAttribute(DimmerInClusterEndpoint,level);
    505          
    506          #ifdef CURTAIN
    507          			//			Send to Level Change to MC
    508          			int8u OnOffState;
    509          			emberAfReadServerAttribute(DimmerInClusterEndpoint,
    510          					ZCL_ON_OFF_CLUSTER_ID,
    511          					ZCL_ON_OFF_ATTRIBUTE_ID,
    512          					&OnOffState,
    513          					sizeof (OnOffState));
    514          			if(OnOffState == 1) {
    515          				UartSendDimLevel(level);
    516          			}
    517          #endif
    518          			// end user controller
    519          
    520          			break;
    521          		}
    522          		case ZCL_STEP_COMMAND_ID:
    523          		{
    524          			int16u payloadOffset = cmd->payloadStartIndex;
    525          			int8u stepMode;  // Ver.: always
    526          			int8u stepSize;// Ver.: always
    527          			int16u transitionTime;// Ver.: always
    528          			// Command is fixed length: 4
    529          			if (cmd->bufLen < payloadOffset + 4) return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
    530          			stepMode = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
    531          			payloadOffset += 1;
    532          			stepSize = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
    533          			payloadOffset += 1;
    534          			transitionTime = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
    535          			wasHandled = emberAfLevelControlClusterStepCallback(stepMode,
    536          					stepSize,
    537          					transitionTime);
    538          			int8u Level;
    539          			// get Current Level
    540          			int8u currentLevel;
    541          			emberAfReadServerAttribute(DimmerInClusterEndpoint,
    542          					ZCL_LEVEL_CONTROL_CLUSTER_ID,
    543          					ZCL_CURRENT_LEVEL_ATTRIBUTE_ID,
    544          					(int8u *)&currentLevel,
    545          					sizeof(currentLevel));
    546          			// Get Level
    547          			if(stepMode == EMBER_ZCL_STEP_MODE_UP) {
    548          				if(currentLevel + stepSize > EMBER_AF_PLUGIN_LEVEL_CONTROL_MAXIMUM_LEVEL) {
    549          					Level = EMBER_AF_PLUGIN_LEVEL_CONTROL_MAXIMUM_LEVEL;
    550          				}
    551          				else {
    552          					Level = currentLevel + stepSize;
    553          				}
    554          			}
    555          			else {
    556          				if(currentLevel - stepSize < EMBER_AF_PLUGIN_LEVEL_CONTROL_MINIMUM_LEVEL) {
    557          					Level = EMBER_AF_PLUGIN_LEVEL_CONTROL_MINIMUM_LEVEL;
    558          				}
    559          				else {
    560          					Level = currentLevel - stepSize;
    561          				}
    562          			}
    563          			//	 	Send to Bind Device
    564          			SendViaBindingTable(DimmerInClusterEndpoint,Level, LevelType);
    565          
    566          			//		Send Level AttributeResponse, Zipato stupid update :D-----------------------------//
    567          			SendLevelControlReadAttribute(DimmerInClusterEndpoint,Level);
    568          #ifdef CURTAIN
    569          			//			Send to Level Change to MC
    570          			int8u OnOffState;
    571          			emberAfReadServerAttribute(DimmerInClusterEndpoint,
    572          					ZCL_ON_OFF_CLUSTER_ID,
    573          					ZCL_ON_OFF_ATTRIBUTE_ID,
    574          					&OnOffState,
    575          					sizeof (OnOffState));
    576          			if(OnOffState == 1) {
    577          				UartSendDimLevel(Level);
    578          			}
    579          #endif
    580          			// end user controller
    581          			break;
    582          		}
    583          		case ZCL_STOP_COMMAND_ID:
    584          		{
    585          			// Command is fixed length: 0
    586          			wasHandled = emberAfLevelControlClusterStopCallback();
    587          			// get Current Level
    588          			int8u currentLevel;
    589          			emberAfReadServerAttribute(DimmerInClusterEndpoint,
    590          					ZCL_LEVEL_CONTROL_CLUSTER_ID,
    591          					ZCL_CURRENT_LEVEL_ATTRIBUTE_ID,
    592          					(int8u *)&currentLevel,
    593          					sizeof(currentLevel));
    594          			//	 			Send to Bind Device
    595          			SendViaBindingTable(DimmerInClusterEndpoint,currentLevel,LevelType);
    596          
    597          			//				Send Level AttributeResponse, Zipato stupid update :D-----------------------------//
    598          			SendLevelControlReadAttribute(DimmerInClusterEndpoint,currentLevel);
    599          #ifdef CURTAIN
    600          			//			Send to Level Change to MC
    601          			int8u OnOffState;
    602          			emberAfReadServerAttribute(DimmerInClusterEndpoint,
    603          					ZCL_ON_OFF_CLUSTER_ID,
    604          					ZCL_ON_OFF_ATTRIBUTE_ID,
    605          					&OnOffState,
    606          					sizeof (OnOffState));
    607          			if(OnOffState == 1) {
    608          				UartSendDimLevel(currentLevel);
    609          			}
    610          #endif
    611          			// end user controller
    612          			break;
    613          		}
    614          		case ZCL_MOVE_TO_LEVEL_WITH_ON_OFF_COMMAND_ID:
    615          		{
    616          			int16u payloadOffset = cmd->payloadStartIndex;
    617          			int8u level;  // Ver.: always
    618          			int16u transitionTime;// Ver.: always
    619          			// Command is fixed length: 3
    620          			if (cmd->bufLen < payloadOffset + 3) return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
    621          			level = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
    622          			payloadOffset += 1;
    623          			transitionTime = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
    624          			wasHandled = emberAfLevelControlClusterMoveToLevelWithOnOffCallback(level,
    625          					transitionTime);
    626          
    627          			// user controller
    628          
    629          			//	 	Send to Bind Device
    630          			SendViaBindingTable(DimmerInClusterEndpoint,level,LevelWithOnOffType);
    631          			//		Send Level AttributeResponse, Zipato stupid update :D-----------------------------//
    632          			SendLevelControlReadAttribute(DimmerInClusterEndpoint,level);
    633          			//		Send On-Off AttributeResponse, Zipato stupid update :D-----------------------------//
    634          			if(level == 0) {
    635          				SendOnOffControlReadAttribute(DimmerInClusterEndpoint,0);
    636          			}
    637          			else {
    638          				SendOnOffControlReadAttribute(DimmerInClusterEndpoint,1);
    639          			}
    640          			//		Send to Level Change to MC
    641          #ifdef CURTAIN
    642          
    643          			UartSendDimLevel(level);
    644          #endif
    645          			// end user controller
    646          			break;
    647          		}
    648          		case ZCL_MOVE_WITH_ON_OFF_COMMAND_ID:
    649          		{
    650          			int16u payloadOffset = cmd->payloadStartIndex;
    651          			int8u moveMode;  // Ver.: always
    652          			int8u rate;// Ver.: always
    653          			// Command is fixed length: 2
    654          			if (cmd->bufLen < payloadOffset + 2) return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
    655          			moveMode = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
    656          			payloadOffset += 1;
    657          			rate = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
    658          			wasHandled = emberAfLevelControlClusterMoveWithOnOffCallback(moveMode,
    659          					rate);
    660          			// user controller
    661          			int8u Level;
    662          			if(moveMode == EMBER_ZCL_MOVE_MODE_UP) {
    663          				Level = 0xFF;
    664          			}
    665          			else {
    666          				Level = 0x00;
    667          			}
    668          
    669          			//	 	Send to Bind Device
    670          			SendViaBindingTable(DimmerInClusterEndpoint,Level,LevelWithOnOffType);
    671          			//		Send Level AttributeResponse, Zipato stupid update :D-----------------------------//
    672          			SendLevelControlReadAttribute(DimmerInClusterEndpoint,Level);
    673          			//		Send On-Off AttributeResponse, Zipato stupid update :D-----------------------------//
    674          			if(Level == 0) {
    675          				SendOnOffControlReadAttribute(DimmerInClusterEndpoint,0);
    676          			}
    677          			else {
    678          				SendOnOffControlReadAttribute(DimmerInClusterEndpoint,1);
    679          			}
    680          			//		Send to Level Change to MC
    681          #ifdef CURTAIN
    682          			UartSendDimLevel(Level);
    683          #endif
    684          			// end user controller
    685          
    686          			break;
    687          		}
    688          		case ZCL_STEP_WITH_ON_OFF_COMMAND_ID:
    689          		{
    690          			int16u payloadOffset = cmd->payloadStartIndex;
    691          			int8u stepMode;  // Ver.: always
    692          			int8u stepSize;// Ver.: always
    693          			int16u transitionTime;// Ver.: always
    694          			// Command is fixed length: 4
    695          			if (cmd->bufLen < payloadOffset + 4) return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
    696          			stepMode = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
    697          			payloadOffset += 1;
    698          			stepSize = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
    699          			payloadOffset += 1;
    700          			transitionTime = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
    701          			wasHandled = emberAfLevelControlClusterStepWithOnOffCallback(stepMode,
    702          					stepSize,
    703          					transitionTime);
    704          			// 		user controller
    705          			int8u Level;
    706          			// 		get Current Level
    707          			int8u currentLevel;
    708          			emberAfReadServerAttribute(DimmerInClusterEndpoint,
    709          					ZCL_LEVEL_CONTROL_CLUSTER_ID,
    710          					ZCL_CURRENT_LEVEL_ATTRIBUTE_ID,
    711          					(int8u *)&currentLevel,
    712          					sizeof(currentLevel));
    713          			// 		Get Level
    714          			if(stepMode == EMBER_ZCL_STEP_MODE_UP) {
    715          				if(currentLevel + stepSize > EMBER_AF_PLUGIN_LEVEL_CONTROL_MAXIMUM_LEVEL) {
    716          					Level = EMBER_AF_PLUGIN_LEVEL_CONTROL_MAXIMUM_LEVEL;
    717          				}
    718          				else {
    719          					Level = currentLevel + stepSize;
    720          				}
    721          			}
    722          			else {
    723          				if(currentLevel - stepSize < EMBER_AF_PLUGIN_LEVEL_CONTROL_MINIMUM_LEVEL) {
    724          					Level = EMBER_AF_PLUGIN_LEVEL_CONTROL_MINIMUM_LEVEL;
    725          				}
    726          				else {
    727          					Level = currentLevel - stepSize;
    728          				}
    729          			}
    730          			//	 	Send to Bind Device
    731          			SendViaBindingTable(DimmerInClusterEndpoint,Level,LevelWithOnOffType);
    732          			//		Send Level AttributeResponse, Zipato stupid update :D-----------------------------//
    733          			SendLevelControlReadAttribute(DimmerInClusterEndpoint,Level);
    734          			//		Send On-Off AttributeResponse, Zipato stupid update :D-----------------------------//
    735          			if(Level == 0) {
    736          				SendOnOffControlReadAttribute(DimmerInClusterEndpoint,0);
    737          			}
    738          			else {
    739          				SendOnOffControlReadAttribute(DimmerInClusterEndpoint,1);
    740          			}
    741          			//		Send to Level Change to MC
    742          #ifdef CURTAIN
    743          			UartSendDimLevel(Level);
    744          #endif
    745          			// end user controller
    746          
    747          			break;
    748          		}
    749          		case ZCL_STOP_WITH_ON_OFF_COMMAND_ID:
    750          		{
    751          			// Command is fixed length: 0
    752          			wasHandled = emberAfLevelControlClusterStopWithOnOffCallback();
    753          
    754          			//		user control
    755          			// 		get Current Level
    756          			int8u currentLevel;
    757          			emberAfReadServerAttribute(DimmerInClusterEndpoint,
    758          					ZCL_LEVEL_CONTROL_CLUSTER_ID,
    759          					ZCL_CURRENT_LEVEL_ATTRIBUTE_ID,
    760          					(int8u *)&currentLevel,
    761          					sizeof(currentLevel));
    762          			//	 	Send to Bind Device
    763          			SendViaBindingTable(DimmerInClusterEndpoint,currentLevel,LevelWithOnOffType);
    764          			//		Send Level AttributeResponse, Zipato stupid update :D-----------------------------//
    765          			SendLevelControlReadAttribute(DimmerInClusterEndpoint,currentLevel);
    766          			//		Send On-Off AttributeResponse, Zipato stupid update :D-----------------------------//
    767          			if(currentLevel == 0) {
    768          				SendOnOffControlReadAttribute(DimmerInClusterEndpoint,0);
    769          			}
    770          			else {
    771          				SendOnOffControlReadAttribute(DimmerInClusterEndpoint,1);
    772          			}
    773          			//		Send to Level Change to MC
    774          
    775          			int16u ClosedLimit;
    776          			emberAfReadServerAttribute(DimmerInClusterEndpoint,
    777          									   ZCL_SHADE_CONFIG_CLUSTER_ID,
    778          									   ZCL_SHADE_CONFIG_CLOSED_LIMIT_ATTRIBUTE_ID,
    779          									   (int8u *)&ClosedLimit,
    780          										sizeof(ClosedLimit));
    781          #ifdef CURTAIN
    782          			UartSendDimLevel((ClosedLimit * currentLevel)/255);
    783          #endif
    784          			// end user controller
    785          
    786          			break;
    787          		}
    788          		}
    789          	}
    790          	return status(wasHandled, cmd->mfgSpecific);
    791          }
    792          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   emberAfBasicClusterServerCommandParse
         8   -> emberAfBasicClusterResetToFactoryDefaultsCallback
         0   -> status
       8   emberAfClusterSpecificCommandParse
         0   -> emberAfBasicClusterServerCommandParse
         8   -> emberAfContainsClient
         8   -> emberAfContainsServer
         0   -> emberAfGroupsClusterServerCommandParse
         0   -> emberAfIdentifyClusterClientCommandParse
         0   -> emberAfIdentifyClusterServerCommandParse
         0   -> emberAfOnOffClusterServerCommandParse
         0   -> emberAfScenesClusterServerCommandParse
         0   -> status
      16   emberAfGroupsClusterServerCommandParse
        16   -> emberAfGetInt16u
        16   -> emberAfGetString
        16   -> emberAfGroupsClusterAddGroupCallback
        16   -> emberAfGroupsClusterAddGroupIfIdentifyingCallback
        16   -> emberAfGroupsClusterGetGroupMembershipCallback
        16   -> emberAfGroupsClusterRemoveAllGroupsCallback
        16   -> emberAfGroupsClusterRemoveGroupCallback
        16   -> emberAfGroupsClusterViewGroupCallback
        16   -> emberAfStringLength
         0   -> status
       8   emberAfIdentifyClusterClientCommandParse
         8   -> emberAfGetInt16u
         8   -> emberAfIdentifyClusterIdentifyQueryResponseCallback
         0   -> status
       8   emberAfIdentifyClusterServerCommandParse
         8   -> emberAfGetInt16u
         8   -> emberAfIdentifyClusterIdentifyCallback
         8   -> emberAfIdentifyClusterIdentifyQueryCallback
         0   -> status
      32   emberAfOnOffClusterServerCommandParse
        32   -> CommonClearLed
        32   -> CommonGetDurationTime
        32   -> CommonSetLed
        32   -> SendOnOffControlReadAttribute
        32   -> SendViaBindingTable
        32   -> UartSendSwitchControlNumber
        32   -> emberAfOnOffClusterOffCallback
        32   -> emberAfOnOffClusterOnCallback
        32   -> emberAfOnOffClusterToggleCallback
        32   -> emberAfReadServerAttribute
        32   -> halClearLed
        32   -> halCommonGetInt32uMillisecondTick
        32   -> halSetLed
        32   -> status
      32   emberAfScenesClusterServerCommandParse
        32   -> emberAfGetInt16u
        32   -> emberAfGetString
        32   -> emberAfScenesClusterAddSceneCallback
        32   -> emberAfScenesClusterGetSceneMembershipCallback
        32   -> emberAfScenesClusterRecallSceneCallback
        32   -> emberAfScenesClusterRemoveAllScenesCallback
        32   -> emberAfScenesClusterRemoveSceneCallback
        32   -> emberAfScenesClusterStoreSceneCallback
        32   -> emberAfScenesClusterViewSceneCallback
        32   -> emberAfStringLength
         0   -> status
       0   status


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
       8  ?Subroutine0
       8  ?Subroutine1
      10  ?Subroutine2
       6  ?Subroutine3
      14  ?Subroutine4
      12  OnOffCmdBeforeTimer
      22  emberAfBasicClusterServerCommandParse
     128  emberAfClusterSpecificCommandParse
     202  emberAfGroupsClusterServerCommandParse
      40  emberAfIdentifyClusterClientCommandParse
      48  emberAfIdentifyClusterServerCommandParse
     250  emberAfOnOffClusterServerCommandParse
     302  emberAfScenesClusterServerCommandParse
      16  status

 
    12 bytes in section .bss
 1 058 bytes in section .text
 
 1 058 bytes of CODE memory
    12 bytes of DATA memory

Errors: none
Warnings: 1
