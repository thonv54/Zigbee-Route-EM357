// This file is generated by Ember Desktop.  Please do not edit manually.
//
//



// Enclosing macro to prevent multiple inclusion
#ifndef __AF_ENDPOINT_CONFIG__
#define __AF_ENDPOINT_CONFIG__



#include "ConfigDevice.h"

#ifdef SWITCH_4_BUTTON
	// This file is generated by Ember Desktop.  Please do not edit manually.
	//
	//

	// Enclosing macro to prevent multiple inclusion




	// Fixed number of defined endpoints
	#define FIXED_ENDPOINT_COUNT 9


		// Generated defaults
				#if BIGENDIAN_CPU
				#define GENERATED_DEFAULTS { \
				ManufacturerName/* 0,Default value: Basic,manufacturer name */, \
				ModelId /* 33,Default value: Basic,model identifier */, \
				  }
				#else // ! BIGENDIAN_CPU
				#define GENERATED_DEFAULTS { \
				ManufacturerName/* 0,Default value: Basic,manufacturer name */, \
				ModelId /* 33,Default value: Basic,model identifier */, \
				  }
				#endif // BIGENDIAN_CPU




	// Generated attributes
	#define GENERATED_ATTRIBUTES { \
	    { 0x0000, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_TOKENIZE|ATTRIBUTE_MASK_SINGLETON), { (int8u*)0x01 } }, /* 0 / Basic / ZCL version*/\
	    { 0x0001, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (int8u*)0x01 } }, /* 1 / Basic / application version*/\
	    { 0x0002, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (int8u*)0x00 } }, /* 2 / Basic / stack version*/\
	    { 0x0003, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (int8u*)0x01 } }, /* 3 / Basic / hardware version*/\
	    { 0x0004, ZCL_CHAR_STRING_ATTRIBUTE_TYPE, 33, (ATTRIBUTE_MASK_TOKENIZE|ATTRIBUTE_MASK_SINGLETON), { (int8u*)&(generatedDefaults[0]) } }, /* 4 / Basic / manufacturer name*/\
	    { 0x0005, ZCL_CHAR_STRING_ATTRIBUTE_TYPE, 33, (ATTRIBUTE_MASK_TOKENIZE|ATTRIBUTE_MASK_SINGLETON), { (int8u*)&(generatedDefaults[33]) } }, /* 5 / Basic / model identifier*/\
	    { 0x0006, ZCL_CHAR_STRING_ATTRIBUTE_TYPE, 17, (ATTRIBUTE_MASK_SINGLETON), { NULL } }, /* 6 / Basic / date code*/\
	    { 0x0007, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_TOKENIZE|ATTRIBUTE_MASK_SINGLETON), { (int8u*)0x01 } }, /* 7 / Basic / power source*/\
	    { 0x0000, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_WRITABLE), { (int8u*)0x0000 } }, /* 8 / Identify / identify time*/\
	    { 0x0001, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (0x00), { (int8u*)0x00 } }, /* 9 / Identify / commission state*/\
	    { 0x0000, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (0x00), { (int8u*)0x00 } }, /* 10 / Groups / name support*/\
	    { 0x0000, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (0x00), { (int8u*)0x00 } }, /* 11 / Scenes / scene count*/\
	    { 0x0001, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (0x00), { (int8u*)0x00 } }, /* 12 / Scenes / current scene*/\
	    { 0x0002, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (int8u*)0x0000 } }, /* 13 / Scenes / current group*/\
	    { 0x0003, ZCL_BOOLEAN_ATTRIBUTE_TYPE, 1, (0x00), { (int8u*)0x00 } }, /* 14 / Scenes / scene valid*/\
	    { 0x0004, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (0x00), { (int8u*)0x00 } }, /* 15 / Scenes / name support*/\
	    { 0x0000, ZCL_BOOLEAN_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_TOKENIZE), { (int8u*)0x00 } }, /* 16 / On/off / on/off*/\
	  }


	// Cluster function static arrays
	#define GENERATED_FUNCTION_ARRAYS \
	PGM EmberAfGenericClusterFunction emberAfFuncArrayIdentifyClusterServer[] = { (EmberAfGenericClusterFunction)emberAfIdentifyClusterServerInitCallback,(EmberAfGenericClusterFunction)emberAfIdentifyClusterServerAttributeChangedCallback}; \
	PGM EmberAfGenericClusterFunction emberAfFuncArrayGroupsClusterServer[] = { (EmberAfGenericClusterFunction)emberAfGroupsClusterServerInitCallback}; \
	PGM EmberAfGenericClusterFunction emberAfFuncArrayScenesClusterServer[] = { (EmberAfGenericClusterFunction)emberAfScenesClusterServerInitCallback}; \


	// Clusters defitions
	#define GENERATED_CLUSTERS { \
	    { 0x0000, (EmberAfAttributeMetadata*)&(generatedAttributes[0]), 8, 0, (CLUSTER_MASK_SERVER), NULL,  },    \
	    { 0x0003, (EmberAfAttributeMetadata*)&(generatedAttributes[8]), 0, 0, (CLUSTER_MASK_CLIENT), NULL,  },    \
	    { 0x0003, (EmberAfAttributeMetadata*)&(generatedAttributes[8]), 2, 3, (CLUSTER_MASK_SERVER| CLUSTER_MASK_INIT_FUNCTION| CLUSTER_MASK_ATTRIBUTE_CHANGED_FUNCTION), emberAfFuncArrayIdentifyClusterServer, },    \
	    { 0x0006, (EmberAfAttributeMetadata*)&(generatedAttributes[16]), 0, 0, (CLUSTER_MASK_CLIENT), NULL,  },    \
	    { 0x0000, (EmberAfAttributeMetadata*)&(generatedAttributes[0]), 8, 0, (CLUSTER_MASK_SERVER), NULL,  },    \
	    { 0x0003, (EmberAfAttributeMetadata*)&(generatedAttributes[8]), 0, 0, (CLUSTER_MASK_CLIENT), NULL,  },    \
	    { 0x0003, (EmberAfAttributeMetadata*)&(generatedAttributes[8]), 2, 3, (CLUSTER_MASK_SERVER| CLUSTER_MASK_INIT_FUNCTION| CLUSTER_MASK_ATTRIBUTE_CHANGED_FUNCTION), emberAfFuncArrayIdentifyClusterServer, },    \
	    { 0x0004, (EmberAfAttributeMetadata*)&(generatedAttributes[10]), 1, 1, (CLUSTER_MASK_SERVER| CLUSTER_MASK_INIT_FUNCTION), emberAfFuncArrayGroupsClusterServer, },    \
	    { 0x0005, (EmberAfAttributeMetadata*)&(generatedAttributes[11]), 5, 6, (CLUSTER_MASK_SERVER| CLUSTER_MASK_INIT_FUNCTION), emberAfFuncArrayScenesClusterServer, },    \
	    { 0x0006, (EmberAfAttributeMetadata*)&(generatedAttributes[16]), 1, 1, (CLUSTER_MASK_SERVER), NULL,  },    \
	    { 0x0000, (EmberAfAttributeMetadata*)&(generatedAttributes[0]), 8, 0, (CLUSTER_MASK_SERVER), NULL,  },    \
	    { 0x0003, (EmberAfAttributeMetadata*)&(generatedAttributes[8]), 0, 0, (CLUSTER_MASK_CLIENT), NULL,  },    \
	    { 0x0003, (EmberAfAttributeMetadata*)&(generatedAttributes[8]), 2, 3, (CLUSTER_MASK_SERVER| CLUSTER_MASK_INIT_FUNCTION| CLUSTER_MASK_ATTRIBUTE_CHANGED_FUNCTION), emberAfFuncArrayIdentifyClusterServer, },    \
	    { 0x0006, (EmberAfAttributeMetadata*)&(generatedAttributes[16]), 1, 1, (CLUSTER_MASK_SERVER), NULL,  },    \
	  }


	// Endpoint types
	#define GENERATED_ENDPOINT_TYPES {        \
	    { (EmberAfCluster*)&(generatedClusters[0]), 4, 3 }, \
	    { (EmberAfCluster*)&(generatedClusters[4]), 6, 11 }, \
	    { (EmberAfCluster*)&(generatedClusters[10]), 4, 4 }, \
	  }


	// Networks
	#define EM_AF_GENERATED_NETWORK_TYPES { \
	  EM_AF_NETWORK_TYPE_ZIGBEE_PRO, /* Primary */ \
	}
	#define EM_AF_GENERATED_ZIGBEE_PRO_NETWORKS { \
	  { \
	    /* Primary */ \
	    ZA_ROUTER, \
	    EMBER_AF_SECURITY_PROFILE_HA, \
	  }, \
	}
	#define EM_AF_GENERATED_NETWORK_STRINGS  \
	  "Primary (pro)", \


	// Cluster manufacturer codes
	#define GENERATED_CLUSTER_MANUFACTURER_CODES {      \
	{0x00, 0x00} \
	  }
	#define GENERATED_CLUSTER_MANUFACTURER_CODE_COUNT 0

	// Attribute manufacturer codes
	#define GENERATED_ATTRIBUTE_MANUFACTURER_CODES {      \
	{0x00, 0x00} \
	  }
	#define GENERATED_ATTRIBUTE_MANUFACTURER_CODE_COUNT 0


	// Largest attribute size is needed for various buffers
	#define ATTRIBUTE_LARGEST 33
	// Total size of singleton attributes
	#define ATTRIBUTE_SINGLETONS_SIZE 88

	// Total size of attribute storage
	#define ATTRIBUTE_MAX_SIZE 60

	// Array of endpoints that are supported
	#define FIXED_ENDPOINT_ARRAY { 1, 2, 3, 4, 5, 6, 7, 8, 15 }

	// Array of profile ids
	#define FIXED_PROFILE_IDS { 260, 260, 260, 260, 260, 260, 260, 260, 260 }

	// Array of profile ids
	#define FIXED_DEVICE_IDS { 256, 259, 256, 259, 256, 259, 256, 259, 256 }

	// Array of profile ids
	#define FIXED_DEVICE_VERSIONS { 1, 1, 1, 1, 1, 1, 1, 1, 1 }

	// Array of endpoint types supported on each endpoint
	#define FIXED_ENDPOINT_TYPES { 1, 0, 1, 0, 1, 0, 1, 0, 2 }

	// Array of networks supported on each endpoint
	#define FIXED_NETWORKS { 0, 0, 0, 0, 0, 0, 0, 0, 0 }


	// Code used to configure the cluster event mechanism
	#define EMBER_AF_GENERATED_EVENT_CODE \
	  EmberEventControl emberAfIdentifyClusterServerTickCallbackControl1; \
	  EmberEventControl emberAfIdentifyClusterServerTickCallbackControl2; \
	  EmberEventControl emberAfIdentifyClusterServerTickCallbackControl3; \
	  EmberEventControl emberAfIdentifyClusterServerTickCallbackControl4; \
	  EmberEventControl emberAfIdentifyClusterServerTickCallbackControl5; \
	  EmberEventControl emberAfIdentifyClusterServerTickCallbackControl6; \
	  EmberEventControl emberAfIdentifyClusterServerTickCallbackControl7; \
	  EmberEventControl emberAfIdentifyClusterServerTickCallbackControl8; \
	  EmberEventControl emberAfIdentifyClusterServerTickCallbackControl15; \
	  extern EmberEventControl emberAfPluginFormAndJoinCleanupEventControl; \
	  extern void emberAfPluginFormAndJoinCleanupEventHandler(void); \
	  extern EmberEventControl emberAfPluginIdentifyFeedbackProvideFeedbackEventControl; \
	  extern void emberAfPluginIdentifyFeedbackProvideFeedbackEventHandler(void); \
	  extern EmberEventControl emberAfPluginNetworkFindTickEventControl; \
	  extern void emberAfPluginNetworkFindTickEventHandler(void); \
	  extern EmberEventControl emberAfPluginReportingTickEventControl; \
	  extern void emberAfPluginReportingTickEventHandler(void); \
	  static void clusterTickWrapper(EmberEventControl *control, EmberAfTickFunction callback, int8u endpoint) \
	  { \
	    emberAfPushEndpointNetworkIndex(endpoint); \
	    emberEventControlSetInactive(*control); \
	    (*callback)(endpoint); \
	    emberAfPopNetworkIndex(); \
	  } \
	  void emberAfIdentifyClusterServerTickCallbackWrapperFunction1(void) { clusterTickWrapper(&emberAfIdentifyClusterServerTickCallbackControl1, emberAfIdentifyClusterServerTickCallback, 1); } \
	  void emberAfIdentifyClusterServerTickCallbackWrapperFunction2(void) { clusterTickWrapper(&emberAfIdentifyClusterServerTickCallbackControl2, emberAfIdentifyClusterServerTickCallback, 2); } \
	  void emberAfIdentifyClusterServerTickCallbackWrapperFunction3(void) { clusterTickWrapper(&emberAfIdentifyClusterServerTickCallbackControl3, emberAfIdentifyClusterServerTickCallback, 3); } \
	  void emberAfIdentifyClusterServerTickCallbackWrapperFunction4(void) { clusterTickWrapper(&emberAfIdentifyClusterServerTickCallbackControl4, emberAfIdentifyClusterServerTickCallback, 4); } \
	  void emberAfIdentifyClusterServerTickCallbackWrapperFunction5(void) { clusterTickWrapper(&emberAfIdentifyClusterServerTickCallbackControl5, emberAfIdentifyClusterServerTickCallback, 5); } \
	  void emberAfIdentifyClusterServerTickCallbackWrapperFunction6(void) { clusterTickWrapper(&emberAfIdentifyClusterServerTickCallbackControl6, emberAfIdentifyClusterServerTickCallback, 6); } \
	  void emberAfIdentifyClusterServerTickCallbackWrapperFunction7(void) { clusterTickWrapper(&emberAfIdentifyClusterServerTickCallbackControl7, emberAfIdentifyClusterServerTickCallback, 7); } \
	  void emberAfIdentifyClusterServerTickCallbackWrapperFunction8(void) { clusterTickWrapper(&emberAfIdentifyClusterServerTickCallbackControl8, emberAfIdentifyClusterServerTickCallback, 8); } \
	  void emberAfIdentifyClusterServerTickCallbackWrapperFunction15(void) { clusterTickWrapper(&emberAfIdentifyClusterServerTickCallbackControl15, emberAfIdentifyClusterServerTickCallback, 15); } \


	// EmberEventData structs used to populate the EmberEventData table
	#define EMBER_AF_GENERATED_EVENTS   \
	  { &emberAfIdentifyClusterServerTickCallbackControl1, emberAfIdentifyClusterServerTickCallbackWrapperFunction1 }, \
	  { &emberAfIdentifyClusterServerTickCallbackControl2, emberAfIdentifyClusterServerTickCallbackWrapperFunction2 }, \
	  { &emberAfIdentifyClusterServerTickCallbackControl3, emberAfIdentifyClusterServerTickCallbackWrapperFunction3 }, \
	  { &emberAfIdentifyClusterServerTickCallbackControl4, emberAfIdentifyClusterServerTickCallbackWrapperFunction4 }, \
	  { &emberAfIdentifyClusterServerTickCallbackControl5, emberAfIdentifyClusterServerTickCallbackWrapperFunction5 }, \
	  { &emberAfIdentifyClusterServerTickCallbackControl6, emberAfIdentifyClusterServerTickCallbackWrapperFunction6 }, \
	  { &emberAfIdentifyClusterServerTickCallbackControl7, emberAfIdentifyClusterServerTickCallbackWrapperFunction7 }, \
	  { &emberAfIdentifyClusterServerTickCallbackControl8, emberAfIdentifyClusterServerTickCallbackWrapperFunction8 }, \
	  { &emberAfIdentifyClusterServerTickCallbackControl15, emberAfIdentifyClusterServerTickCallbackWrapperFunction15 }, \
	  { &emberAfPluginFormAndJoinCleanupEventControl, emberAfPluginFormAndJoinCleanupEventHandler }, \
	  { &emberAfPluginIdentifyFeedbackProvideFeedbackEventControl, emberAfPluginIdentifyFeedbackProvideFeedbackEventHandler }, \
	  { &emberAfPluginNetworkFindTickEventControl, emberAfPluginNetworkFindTickEventHandler }, \
	  { &emberAfPluginReportingTickEventControl, emberAfPluginReportingTickEventHandler }, \


	#define EMBER_AF_GENERATED_EVENT_STRINGS   \
	  "Identify Cluster Server EP 1",  \
	  "Identify Cluster Server EP 2",  \
	  "Identify Cluster Server EP 3",  \
	  "Identify Cluster Server EP 4",  \
	  "Identify Cluster Server EP 5",  \
	  "Identify Cluster Server EP 6",  \
	  "Identify Cluster Server EP 7",  \
	  "Identify Cluster Server EP 8",  \
	  "Identify Cluster Server EP 15",  \
	  "Form and Join Library Plugin Cleanup",  \
	  "Identify Feedback Plugin ProvideFeedback",  \
	  "Network Find Plugin Tick",  \
	  "Reporting Plugin Tick",  \


	// The length of the event context table used to track and retrieve cluster events
	#define EMBER_AF_EVENT_CONTEXT_LENGTH 9

	// EmberAfEventContext structs used to populate the EmberAfEventContext table
	#define EMBER_AF_GENERATED_EVENT_CONTEXT { 0x1, 0x3, FALSE, EMBER_AF_LONG_POLL, EMBER_AF_OK_TO_SLEEP, &emberAfIdentifyClusterServerTickCallbackControl1}, \
	{ 0x2, 0x3, FALSE, EMBER_AF_LONG_POLL, EMBER_AF_OK_TO_SLEEP, &emberAfIdentifyClusterServerTickCallbackControl2}, \
	{ 0x3, 0x3, FALSE, EMBER_AF_LONG_POLL, EMBER_AF_OK_TO_SLEEP, &emberAfIdentifyClusterServerTickCallbackControl3}, \
	{ 0x4, 0x3, FALSE, EMBER_AF_LONG_POLL, EMBER_AF_OK_TO_SLEEP, &emberAfIdentifyClusterServerTickCallbackControl4}, \
	{ 0x5, 0x3, FALSE, EMBER_AF_LONG_POLL, EMBER_AF_OK_TO_SLEEP, &emberAfIdentifyClusterServerTickCallbackControl5}, \
	{ 0x6, 0x3, FALSE, EMBER_AF_LONG_POLL, EMBER_AF_OK_TO_SLEEP, &emberAfIdentifyClusterServerTickCallbackControl6}, \
	{ 0x7, 0x3, FALSE, EMBER_AF_LONG_POLL, EMBER_AF_OK_TO_SLEEP, &emberAfIdentifyClusterServerTickCallbackControl7}, \
	{ 0x8, 0x3, FALSE, EMBER_AF_LONG_POLL, EMBER_AF_OK_TO_SLEEP, &emberAfIdentifyClusterServerTickCallbackControl8}, \
	{ 0xf, 0x3, FALSE, EMBER_AF_LONG_POLL, EMBER_AF_OK_TO_SLEEP, &emberAfIdentifyClusterServerTickCallbackControl15}


	#define EMBER_AF_GENERATED_PLUGIN_INIT_FUNCTION_DECLARATIONS \
	  void emberAfPluginAddressTableInitCallback(void); \
	  void emberAfPluginCountersInitCallback(void); \
	  void emberAfPluginNetworkFindInitCallback(void); \
	  void emberAfPluginReportingInitCallback(void); \


	#define EMBER_AF_GENERATED_PLUGIN_INIT_FUNCTION_CALLS \
	  emberAfPluginAddressTableInitCallback(); \
	  emberAfPluginCountersInitCallback(); \
	  emberAfPluginNetworkFindInitCallback(); \
	  emberAfPluginReportingInitCallback(); \


	#define EMBER_AF_GENERATED_PLUGIN_NCP_INIT_FUNCTION_DECLARATIONS \
	  void emberAfPluginAddressTableNcpInitCallback(boolean memoryAllocation); \


	#define EMBER_AF_GENERATED_PLUGIN_NCP_INIT_FUNCTION_CALLS \
	  emberAfPluginAddressTableNcpInitCallback(memoryAllocation); \


	#define EMBER_AF_GENERATED_PLUGIN_STACK_STATUS_FUNCTION_DECLARATIONS \
	  void emberAfPluginNetworkFindStackStatusCallback(EmberStatus status); \


	#define EMBER_AF_GENERATED_PLUGIN_STACK_STATUS_FUNCTION_CALLS \
	  emberAfPluginNetworkFindStackStatusCallback(status); \


	#define EMBER_AF_GENERATED_PLUGIN_TICK_FUNCTION_DECLARATIONS \
	  void emberAfPluginIdleSleepTickCallback(void); \


	#define EMBER_AF_GENERATED_PLUGIN_TICK_FUNCTION_CALLS \
	  emberAfPluginIdleSleepTickCallback(); \

	// Generated data for the command discovery
	#define GENERATED_COMMANDS { \
	    { 0x0000, 0x00, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Basic / ResetToFactoryDefaults */ \
	    { 0x0003, 0x00, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Identify / Identify */ \
	    { 0x0003, 0x00, COMMAND_MASK_OUTGOING_SERVER | COMMAND_MASK_INCOMING_CLIENT }, /* Identify / IdentifyQueryResponse */ \
	    { 0x0003, 0x01, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Identify / IdentifyQuery */ \
	    { 0x0004, 0x00, COMMAND_MASK_OUTGOING_SERVER }, /* Groups / AddGroupResponse */ \
	    { 0x0004, 0x00, COMMAND_MASK_INCOMING_SERVER }, /* Groups / AddGroup */ \
	    { 0x0004, 0x01, COMMAND_MASK_OUTGOING_SERVER }, /* Groups / ViewGroupResponse */ \
	    { 0x0004, 0x01, COMMAND_MASK_INCOMING_SERVER }, /* Groups / ViewGroup */ \
	    { 0x0004, 0x02, COMMAND_MASK_OUTGOING_SERVER }, /* Groups / GetGroupMembershipResponse */ \
	    { 0x0004, 0x02, COMMAND_MASK_INCOMING_SERVER }, /* Groups / GetGroupMembership */ \
	    { 0x0004, 0x03, COMMAND_MASK_OUTGOING_SERVER }, /* Groups / RemoveGroupResponse */ \
	    { 0x0004, 0x03, COMMAND_MASK_INCOMING_SERVER }, /* Groups / RemoveGroup */ \
	    { 0x0004, 0x04, COMMAND_MASK_INCOMING_SERVER }, /* Groups / RemoveAllGroups */ \
	    { 0x0004, 0x05, COMMAND_MASK_INCOMING_SERVER }, /* Groups / AddGroupIfIdentifying */ \
	    { 0x0005, 0x00, COMMAND_MASK_OUTGOING_SERVER }, /* Scenes / AddSceneResponse */ \
	    { 0x0005, 0x00, COMMAND_MASK_INCOMING_SERVER }, /* Scenes / AddScene */ \
	    { 0x0005, 0x01, COMMAND_MASK_OUTGOING_SERVER }, /* Scenes / ViewSceneResponse */ \
	    { 0x0005, 0x01, COMMAND_MASK_INCOMING_SERVER }, /* Scenes / ViewScene */ \
	    { 0x0005, 0x02, COMMAND_MASK_OUTGOING_SERVER }, /* Scenes / RemoveSceneResponse */ \
	    { 0x0005, 0x02, COMMAND_MASK_INCOMING_SERVER }, /* Scenes / RemoveScene */ \
	    { 0x0005, 0x03, COMMAND_MASK_OUTGOING_SERVER }, /* Scenes / RemoveAllScenesResponse */ \
	    { 0x0005, 0x03, COMMAND_MASK_INCOMING_SERVER }, /* Scenes / RemoveAllScenes */ \
	    { 0x0005, 0x04, COMMAND_MASK_OUTGOING_SERVER }, /* Scenes / StoreSceneResponse */ \
	    { 0x0005, 0x04, COMMAND_MASK_INCOMING_SERVER }, /* Scenes / StoreScene */ \
	    { 0x0005, 0x05, COMMAND_MASK_INCOMING_SERVER }, /* Scenes / RecallScene */ \
	    { 0x0005, 0x06, COMMAND_MASK_OUTGOING_SERVER }, /* Scenes / GetSceneMembershipResponse */ \
	    { 0x0005, 0x06, COMMAND_MASK_INCOMING_SERVER }, /* Scenes / GetSceneMembership */ \
	    { 0x0006, 0x00, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* On/off / Off */ \
	    { 0x0006, 0x01, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* On/off / On */ \
	    { 0x0006, 0x02, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* On/off / Toggle */ \
	  }
	#define EMBER_AF_GENERATED_COMMAND_COUNT 30



#endif

#ifdef  SWITCH_3_BUTTON
	// Fixed number of defined endpoints
			#define FIXED_ENDPOINT_COUNT 7


		// Generated defaults
				#if BIGENDIAN_CPU
				#define GENERATED_DEFAULTS { \
				ManufacturerName/* 0,Default value: Basic,manufacturer name */, \
				ModelId /* 33,Default value: Basic,model identifier */, \
				  }
				#else // ! BIGENDIAN_CPU
				#define GENERATED_DEFAULTS { \
				ManufacturerName/* 0,Default value: Basic,manufacturer name */, \
				ModelId /* 33,Default value: Basic,model identifier */, \
				  }
				#endif // BIGENDIAN_CPU




			// Generated attributes
			#define GENERATED_ATTRIBUTES { \
			    { 0x0000, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_TOKENIZE|ATTRIBUTE_MASK_SINGLETON), { (int8u*)0x01 } }, /* 0 / Basic / ZCL version*/\
			    { 0x0001, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (int8u*)0x01 } }, /* 1 / Basic / application version*/\
			    { 0x0002, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (int8u*)0x00 } }, /* 2 / Basic / stack version*/\
			    { 0x0003, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (int8u*)0x01 } }, /* 3 / Basic / hardware version*/\
			    { 0x0004, ZCL_CHAR_STRING_ATTRIBUTE_TYPE, 33, (ATTRIBUTE_MASK_TOKENIZE|ATTRIBUTE_MASK_SINGLETON), { (int8u*)&(generatedDefaults[0]) } }, /* 4 / Basic / manufacturer name*/\
			    { 0x0005, ZCL_CHAR_STRING_ATTRIBUTE_TYPE, 33, (ATTRIBUTE_MASK_TOKENIZE|ATTRIBUTE_MASK_SINGLETON), { (int8u*)&(generatedDefaults[33]) } }, /* 5 / Basic / model identifier*/\
			    { 0x0006, ZCL_CHAR_STRING_ATTRIBUTE_TYPE, 17, (ATTRIBUTE_MASK_SINGLETON), { NULL } }, /* 6 / Basic / date code*/\
			    { 0x0007, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_TOKENIZE|ATTRIBUTE_MASK_SINGLETON), { (int8u*)0x01 } }, /* 7 / Basic / power source*/\
			    { 0x0000, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_WRITABLE), { (int8u*)0x0000 } }, /* 8 / Identify / identify time*/\
			    { 0x0001, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (0x00), { (int8u*)0x00 } }, /* 9 / Identify / commission state*/\
			    { 0x0000, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (0x00), { (int8u*)0x00 } }, /* 10 / Groups / name support*/\
			    { 0x0000, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (0x00), { (int8u*)0x00 } }, /* 11 / Scenes / scene count*/\
			    { 0x0001, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (0x00), { (int8u*)0x00 } }, /* 12 / Scenes / current scene*/\
			    { 0x0002, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (int8u*)0x0000 } }, /* 13 / Scenes / current group*/\
			    { 0x0003, ZCL_BOOLEAN_ATTRIBUTE_TYPE, 1, (0x00), { (int8u*)0x00 } }, /* 14 / Scenes / scene valid*/\
			    { 0x0004, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (0x00), { (int8u*)0x00 } }, /* 15 / Scenes / name support*/\
			    { 0x0000, ZCL_BOOLEAN_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_TOKENIZE), { (int8u*)0x00 } }, /* 16 / On/off / on/off*/\
			  }


			// Cluster function static arrays
			#define GENERATED_FUNCTION_ARRAYS \
			PGM EmberAfGenericClusterFunction emberAfFuncArrayIdentifyClusterServer[] = { (EmberAfGenericClusterFunction)emberAfIdentifyClusterServerInitCallback,(EmberAfGenericClusterFunction)emberAfIdentifyClusterServerAttributeChangedCallback}; \
			PGM EmberAfGenericClusterFunction emberAfFuncArrayGroupsClusterServer[] = { (EmberAfGenericClusterFunction)emberAfGroupsClusterServerInitCallback}; \
			PGM EmberAfGenericClusterFunction emberAfFuncArrayScenesClusterServer[] = { (EmberAfGenericClusterFunction)emberAfScenesClusterServerInitCallback}; \


			// Clusters defitions
			#define GENERATED_CLUSTERS { \
			    { 0x0000, (EmberAfAttributeMetadata*)&(generatedAttributes[0]), 8, 0, (CLUSTER_MASK_SERVER), NULL,  },    \
			    { 0x0003, (EmberAfAttributeMetadata*)&(generatedAttributes[8]), 0, 0, (CLUSTER_MASK_CLIENT), NULL,  },    \
			    { 0x0003, (EmberAfAttributeMetadata*)&(generatedAttributes[8]), 2, 3, (CLUSTER_MASK_SERVER| CLUSTER_MASK_INIT_FUNCTION| CLUSTER_MASK_ATTRIBUTE_CHANGED_FUNCTION), emberAfFuncArrayIdentifyClusterServer, },    \
			    { 0x0006, (EmberAfAttributeMetadata*)&(generatedAttributes[16]), 0, 0, (CLUSTER_MASK_CLIENT), NULL,  },    \
			    { 0x0000, (EmberAfAttributeMetadata*)&(generatedAttributes[0]), 8, 0, (CLUSTER_MASK_SERVER), NULL,  },    \
			    { 0x0003, (EmberAfAttributeMetadata*)&(generatedAttributes[8]), 0, 0, (CLUSTER_MASK_CLIENT), NULL,  },    \
			    { 0x0003, (EmberAfAttributeMetadata*)&(generatedAttributes[8]), 2, 3, (CLUSTER_MASK_SERVER| CLUSTER_MASK_INIT_FUNCTION| CLUSTER_MASK_ATTRIBUTE_CHANGED_FUNCTION), emberAfFuncArrayIdentifyClusterServer, },    \
			    { 0x0004, (EmberAfAttributeMetadata*)&(generatedAttributes[10]), 1, 1, (CLUSTER_MASK_SERVER| CLUSTER_MASK_INIT_FUNCTION), emberAfFuncArrayGroupsClusterServer, },    \
			    { 0x0005, (EmberAfAttributeMetadata*)&(generatedAttributes[11]), 5, 6, (CLUSTER_MASK_SERVER| CLUSTER_MASK_INIT_FUNCTION), emberAfFuncArrayScenesClusterServer, },    \
			    { 0x0006, (EmberAfAttributeMetadata*)&(generatedAttributes[16]), 1, 1, (CLUSTER_MASK_SERVER), NULL,  },    \
			    { 0x0000, (EmberAfAttributeMetadata*)&(generatedAttributes[0]), 8, 0, (CLUSTER_MASK_SERVER), NULL,  },    \
			    { 0x0003, (EmberAfAttributeMetadata*)&(generatedAttributes[8]), 0, 0, (CLUSTER_MASK_CLIENT), NULL,  },    \
			    { 0x0003, (EmberAfAttributeMetadata*)&(generatedAttributes[8]), 2, 3, (CLUSTER_MASK_SERVER| CLUSTER_MASK_INIT_FUNCTION| CLUSTER_MASK_ATTRIBUTE_CHANGED_FUNCTION), emberAfFuncArrayIdentifyClusterServer, },    \
			    { 0x0006, (EmberAfAttributeMetadata*)&(generatedAttributes[16]), 1, 1, (CLUSTER_MASK_SERVER), NULL,  },    \
			  }


			// Endpoint types
			#define GENERATED_ENDPOINT_TYPES {        \
			    { (EmberAfCluster*)&(generatedClusters[0]), 4, 3 }, \
			    { (EmberAfCluster*)&(generatedClusters[4]), 6, 11 }, \
			    { (EmberAfCluster*)&(generatedClusters[10]), 4, 4 }, \
			  }


			// Networks
			#define EM_AF_GENERATED_NETWORK_TYPES { \
			  EM_AF_NETWORK_TYPE_ZIGBEE_PRO, /* Primary */ \
			}
			#define EM_AF_GENERATED_ZIGBEE_PRO_NETWORKS { \
			  { \
			    /* Primary */ \
			    ZA_ROUTER, \
			    EMBER_AF_SECURITY_PROFILE_HA, \
			  }, \
			}
			#define EM_AF_GENERATED_NETWORK_STRINGS  \
			  "Primary (pro)", \


			// Cluster manufacturer codes
			#define GENERATED_CLUSTER_MANUFACTURER_CODES {      \
			{0x00, 0x00} \
			  }
			#define GENERATED_CLUSTER_MANUFACTURER_CODE_COUNT 0

			// Attribute manufacturer codes
			#define GENERATED_ATTRIBUTE_MANUFACTURER_CODES {      \
			{0x00, 0x00} \
			  }
			#define GENERATED_ATTRIBUTE_MANUFACTURER_CODE_COUNT 0


			// Largest attribute size is needed for various buffers
			#define ATTRIBUTE_LARGEST 33
			// Total size of singleton attributes
			#define ATTRIBUTE_SINGLETONS_SIZE 88

			// Total size of attribute storage
			#define ATTRIBUTE_MAX_SIZE 46

			// Array of endpoints that are supported
			#define FIXED_ENDPOINT_ARRAY { 1, 2, 3, 4, 5, 6, 15 }

			// Array of profile ids
			#define FIXED_PROFILE_IDS { 260, 260, 260, 260, 260, 260, 260 }

			// Array of profile ids
			#define FIXED_DEVICE_IDS { 256, 259, 256, 259, 256, 259, 256 }

			// Array of profile ids
			#define FIXED_DEVICE_VERSIONS { 1, 1, 1, 1, 1, 1, 1 }

			// Array of endpoint types supported on each endpoint
			#define FIXED_ENDPOINT_TYPES { 1, 0, 1, 0, 1, 0, 2 }

			// Array of networks supported on each endpoint
			#define FIXED_NETWORKS { 0, 0, 0, 0, 0, 0, 0 }


			// Code used to configure the cluster event mechanism
			#define EMBER_AF_GENERATED_EVENT_CODE \
			  EmberEventControl emberAfIdentifyClusterServerTickCallbackControl1; \
			  EmberEventControl emberAfIdentifyClusterServerTickCallbackControl2; \
			  EmberEventControl emberAfIdentifyClusterServerTickCallbackControl3; \
			  EmberEventControl emberAfIdentifyClusterServerTickCallbackControl4; \
			  EmberEventControl emberAfIdentifyClusterServerTickCallbackControl5; \
			  EmberEventControl emberAfIdentifyClusterServerTickCallbackControl6; \
			  EmberEventControl emberAfIdentifyClusterServerTickCallbackControl15; \
			  extern EmberEventControl emberAfPluginFormAndJoinCleanupEventControl; \
			  extern void emberAfPluginFormAndJoinCleanupEventHandler(void); \
			  extern EmberEventControl emberAfPluginIdentifyFeedbackProvideFeedbackEventControl; \
			  extern void emberAfPluginIdentifyFeedbackProvideFeedbackEventHandler(void); \
			  extern EmberEventControl emberAfPluginNetworkFindTickEventControl; \
			  extern void emberAfPluginNetworkFindTickEventHandler(void); \
			  extern EmberEventControl emberAfPluginReportingTickEventControl; \
			  extern void emberAfPluginReportingTickEventHandler(void); \
			  static void clusterTickWrapper(EmberEventControl *control, EmberAfTickFunction callback, int8u endpoint) \
			  { \
			    emberAfPushEndpointNetworkIndex(endpoint); \
			    emberEventControlSetInactive(*control); \
			    (*callback)(endpoint); \
			    emberAfPopNetworkIndex(); \
			  } \
			  void emberAfIdentifyClusterServerTickCallbackWrapperFunction1(void) { clusterTickWrapper(&emberAfIdentifyClusterServerTickCallbackControl1, emberAfIdentifyClusterServerTickCallback, 1); } \
			  void emberAfIdentifyClusterServerTickCallbackWrapperFunction2(void) { clusterTickWrapper(&emberAfIdentifyClusterServerTickCallbackControl2, emberAfIdentifyClusterServerTickCallback, 2); } \
			  void emberAfIdentifyClusterServerTickCallbackWrapperFunction3(void) { clusterTickWrapper(&emberAfIdentifyClusterServerTickCallbackControl3, emberAfIdentifyClusterServerTickCallback, 3); } \
			  void emberAfIdentifyClusterServerTickCallbackWrapperFunction4(void) { clusterTickWrapper(&emberAfIdentifyClusterServerTickCallbackControl4, emberAfIdentifyClusterServerTickCallback, 4); } \
			  void emberAfIdentifyClusterServerTickCallbackWrapperFunction5(void) { clusterTickWrapper(&emberAfIdentifyClusterServerTickCallbackControl5, emberAfIdentifyClusterServerTickCallback, 5); } \
			  void emberAfIdentifyClusterServerTickCallbackWrapperFunction6(void) { clusterTickWrapper(&emberAfIdentifyClusterServerTickCallbackControl6, emberAfIdentifyClusterServerTickCallback, 6); } \
			  void emberAfIdentifyClusterServerTickCallbackWrapperFunction15(void) { clusterTickWrapper(&emberAfIdentifyClusterServerTickCallbackControl15, emberAfIdentifyClusterServerTickCallback, 15); } \


			// EmberEventData structs used to populate the EmberEventData table
			#define EMBER_AF_GENERATED_EVENTS   \
			  { &emberAfIdentifyClusterServerTickCallbackControl1, emberAfIdentifyClusterServerTickCallbackWrapperFunction1 }, \
			  { &emberAfIdentifyClusterServerTickCallbackControl2, emberAfIdentifyClusterServerTickCallbackWrapperFunction2 }, \
			  { &emberAfIdentifyClusterServerTickCallbackControl3, emberAfIdentifyClusterServerTickCallbackWrapperFunction3 }, \
			  { &emberAfIdentifyClusterServerTickCallbackControl4, emberAfIdentifyClusterServerTickCallbackWrapperFunction4 }, \
			  { &emberAfIdentifyClusterServerTickCallbackControl5, emberAfIdentifyClusterServerTickCallbackWrapperFunction5 }, \
			  { &emberAfIdentifyClusterServerTickCallbackControl6, emberAfIdentifyClusterServerTickCallbackWrapperFunction6 }, \
			  { &emberAfIdentifyClusterServerTickCallbackControl15, emberAfIdentifyClusterServerTickCallbackWrapperFunction15 }, \
			  { &emberAfPluginFormAndJoinCleanupEventControl, emberAfPluginFormAndJoinCleanupEventHandler }, \
			  { &emberAfPluginIdentifyFeedbackProvideFeedbackEventControl, emberAfPluginIdentifyFeedbackProvideFeedbackEventHandler }, \
			  { &emberAfPluginNetworkFindTickEventControl, emberAfPluginNetworkFindTickEventHandler }, \
			  { &emberAfPluginReportingTickEventControl, emberAfPluginReportingTickEventHandler }, \


			#define EMBER_AF_GENERATED_EVENT_STRINGS   \
			  "Identify Cluster Server EP 1",  \
			  "Identify Cluster Server EP 2",  \
			  "Identify Cluster Server EP 3",  \
			  "Identify Cluster Server EP 4",  \
			  "Identify Cluster Server EP 5",  \
			  "Identify Cluster Server EP 6",  \
			  "Identify Cluster Server EP 15",  \
			  "Form and Join Library Plugin Cleanup",  \
			  "Identify Feedback Plugin ProvideFeedback",  \
			  "Network Find Plugin Tick",  \
			  "Reporting Plugin Tick",  \


			// The length of the event context table used to track and retrieve cluster events
			#define EMBER_AF_EVENT_CONTEXT_LENGTH 7

			// EmberAfEventContext structs used to populate the EmberAfEventContext table
			#define EMBER_AF_GENERATED_EVENT_CONTEXT { 0x1, 0x3, FALSE, EMBER_AF_LONG_POLL, EMBER_AF_OK_TO_SLEEP, &emberAfIdentifyClusterServerTickCallbackControl1}, \
			{ 0x2, 0x3, FALSE, EMBER_AF_LONG_POLL, EMBER_AF_OK_TO_SLEEP, &emberAfIdentifyClusterServerTickCallbackControl2}, \
			{ 0x3, 0x3, FALSE, EMBER_AF_LONG_POLL, EMBER_AF_OK_TO_SLEEP, &emberAfIdentifyClusterServerTickCallbackControl3}, \
			{ 0x4, 0x3, FALSE, EMBER_AF_LONG_POLL, EMBER_AF_OK_TO_SLEEP, &emberAfIdentifyClusterServerTickCallbackControl4}, \
			{ 0x5, 0x3, FALSE, EMBER_AF_LONG_POLL, EMBER_AF_OK_TO_SLEEP, &emberAfIdentifyClusterServerTickCallbackControl5}, \
			{ 0x6, 0x3, FALSE, EMBER_AF_LONG_POLL, EMBER_AF_OK_TO_SLEEP, &emberAfIdentifyClusterServerTickCallbackControl6}, \
			{ 0xf, 0x3, FALSE, EMBER_AF_LONG_POLL, EMBER_AF_OK_TO_SLEEP, &emberAfIdentifyClusterServerTickCallbackControl15}


			#define EMBER_AF_GENERATED_PLUGIN_INIT_FUNCTION_DECLARATIONS \
			  void emberAfPluginAddressTableInitCallback(void); \
			  void emberAfPluginCountersInitCallback(void); \
			  void emberAfPluginNetworkFindInitCallback(void); \
			  void emberAfPluginReportingInitCallback(void); \


			#define EMBER_AF_GENERATED_PLUGIN_INIT_FUNCTION_CALLS \
			  emberAfPluginAddressTableInitCallback(); \
			  emberAfPluginCountersInitCallback(); \
			  emberAfPluginNetworkFindInitCallback(); \
			  emberAfPluginReportingInitCallback(); \


			#define EMBER_AF_GENERATED_PLUGIN_NCP_INIT_FUNCTION_DECLARATIONS \
			  void emberAfPluginAddressTableNcpInitCallback(boolean memoryAllocation); \


			#define EMBER_AF_GENERATED_PLUGIN_NCP_INIT_FUNCTION_CALLS \
			  emberAfPluginAddressTableNcpInitCallback(memoryAllocation); \


			#define EMBER_AF_GENERATED_PLUGIN_STACK_STATUS_FUNCTION_DECLARATIONS \
			  void emberAfPluginNetworkFindStackStatusCallback(EmberStatus status); \


			#define EMBER_AF_GENERATED_PLUGIN_STACK_STATUS_FUNCTION_CALLS \
			  emberAfPluginNetworkFindStackStatusCallback(status); \


			#define EMBER_AF_GENERATED_PLUGIN_TICK_FUNCTION_DECLARATIONS \
			  void emberAfPluginIdleSleepTickCallback(void); \


			#define EMBER_AF_GENERATED_PLUGIN_TICK_FUNCTION_CALLS \
			  emberAfPluginIdleSleepTickCallback(); \

			// Generated data for the command discovery
			#define GENERATED_COMMANDS { \
			    { 0x0000, 0x00, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Basic / ResetToFactoryDefaults */ \
			    { 0x0003, 0x00, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Identify / Identify */ \
			    { 0x0003, 0x00, COMMAND_MASK_OUTGOING_SERVER | COMMAND_MASK_INCOMING_CLIENT }, /* Identify / IdentifyQueryResponse */ \
			    { 0x0003, 0x01, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Identify / IdentifyQuery */ \
			    { 0x0004, 0x00, COMMAND_MASK_OUTGOING_SERVER }, /* Groups / AddGroupResponse */ \
			    { 0x0004, 0x00, COMMAND_MASK_INCOMING_SERVER }, /* Groups / AddGroup */ \
			    { 0x0004, 0x01, COMMAND_MASK_OUTGOING_SERVER }, /* Groups / ViewGroupResponse */ \
			    { 0x0004, 0x01, COMMAND_MASK_INCOMING_SERVER }, /* Groups / ViewGroup */ \
			    { 0x0004, 0x02, COMMAND_MASK_OUTGOING_SERVER }, /* Groups / GetGroupMembershipResponse */ \
			    { 0x0004, 0x02, COMMAND_MASK_INCOMING_SERVER }, /* Groups / GetGroupMembership */ \
			    { 0x0004, 0x03, COMMAND_MASK_OUTGOING_SERVER }, /* Groups / RemoveGroupResponse */ \
			    { 0x0004, 0x03, COMMAND_MASK_INCOMING_SERVER }, /* Groups / RemoveGroup */ \
			    { 0x0004, 0x04, COMMAND_MASK_INCOMING_SERVER }, /* Groups / RemoveAllGroups */ \
			    { 0x0004, 0x05, COMMAND_MASK_INCOMING_SERVER }, /* Groups / AddGroupIfIdentifying */ \
			    { 0x0005, 0x00, COMMAND_MASK_OUTGOING_SERVER }, /* Scenes / AddSceneResponse */ \
			    { 0x0005, 0x00, COMMAND_MASK_INCOMING_SERVER }, /* Scenes / AddScene */ \
			    { 0x0005, 0x01, COMMAND_MASK_OUTGOING_SERVER }, /* Scenes / ViewSceneResponse */ \
			    { 0x0005, 0x01, COMMAND_MASK_INCOMING_SERVER }, /* Scenes / ViewScene */ \
			    { 0x0005, 0x02, COMMAND_MASK_OUTGOING_SERVER }, /* Scenes / RemoveSceneResponse */ \
			    { 0x0005, 0x02, COMMAND_MASK_INCOMING_SERVER }, /* Scenes / RemoveScene */ \
			    { 0x0005, 0x03, COMMAND_MASK_OUTGOING_SERVER }, /* Scenes / RemoveAllScenesResponse */ \
			    { 0x0005, 0x03, COMMAND_MASK_INCOMING_SERVER }, /* Scenes / RemoveAllScenes */ \
			    { 0x0005, 0x04, COMMAND_MASK_OUTGOING_SERVER }, /* Scenes / StoreSceneResponse */ \
			    { 0x0005, 0x04, COMMAND_MASK_INCOMING_SERVER }, /* Scenes / StoreScene */ \
			    { 0x0005, 0x05, COMMAND_MASK_INCOMING_SERVER }, /* Scenes / RecallScene */ \
			    { 0x0005, 0x06, COMMAND_MASK_OUTGOING_SERVER }, /* Scenes / GetSceneMembershipResponse */ \
			    { 0x0005, 0x06, COMMAND_MASK_INCOMING_SERVER }, /* Scenes / GetSceneMembership */ \
			    { 0x0006, 0x00, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* On/off / Off */ \
			    { 0x0006, 0x01, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* On/off / On */ \
			    { 0x0006, 0x02, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* On/off / Toggle */ \
			  }
			#define EMBER_AF_GENERATED_COMMAND_COUNT 30





#endif

#ifdef SWITCH_2_BUTTON
	// Fixed number of defined endpoints
	#define FIXED_ENDPOINT_COUNT 5


		// Generated defaults
				#if BIGENDIAN_CPU
				#define GENERATED_DEFAULTS { \
				ManufacturerName/* 0,Default value: Basic,manufacturer name */, \
				ModelId /* 33,Default value: Basic,model identifier */, \
				  }
				#else // ! BIGENDIAN_CPU
				#define GENERATED_DEFAULTS { \
				ManufacturerName/* 0,Default value: Basic,manufacturer name */, \
				ModelId /* 33,Default value: Basic,model identifier */, \
				  }
				#endif // BIGENDIAN_CPU




	// Generated attributes
	#define GENERATED_ATTRIBUTES { \
	    { 0x0000, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_TOKENIZE|ATTRIBUTE_MASK_SINGLETON), { (int8u*)0x01 } }, /* 0 / Basic / ZCL version*/\
	    { 0x0001, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (int8u*)0x01 } }, /* 1 / Basic / application version*/\
	    { 0x0002, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (int8u*)0x00 } }, /* 2 / Basic / stack version*/\
	    { 0x0003, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (int8u*)0x01 } }, /* 3 / Basic / hardware version*/\
	    { 0x0004, ZCL_CHAR_STRING_ATTRIBUTE_TYPE, 33, (ATTRIBUTE_MASK_TOKENIZE|ATTRIBUTE_MASK_SINGLETON), { (int8u*)&(generatedDefaults[0]) } }, /* 4 / Basic / manufacturer name*/\
	    { 0x0005, ZCL_CHAR_STRING_ATTRIBUTE_TYPE, 33, (ATTRIBUTE_MASK_TOKENIZE|ATTRIBUTE_MASK_SINGLETON), { (int8u*)&(generatedDefaults[33]) } }, /* 5 / Basic / model identifier*/\
	    { 0x0006, ZCL_CHAR_STRING_ATTRIBUTE_TYPE, 17, (ATTRIBUTE_MASK_SINGLETON), { NULL } }, /* 6 / Basic / date code*/\
	    { 0x0007, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_TOKENIZE|ATTRIBUTE_MASK_SINGLETON), { (int8u*)0x01 } }, /* 7 / Basic / power source*/\
	    { 0x0000, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_WRITABLE), { (int8u*)0x0000 } }, /* 8 / Identify / identify time*/\
	    { 0x0001, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (0x00), { (int8u*)0x00 } }, /* 9 / Identify / commission state*/\
	    { 0x0000, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (0x00), { (int8u*)0x00 } }, /* 10 / Groups / name support*/\
	    { 0x0000, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (0x00), { (int8u*)0x00 } }, /* 11 / Scenes / scene count*/\
	    { 0x0001, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (0x00), { (int8u*)0x00 } }, /* 12 / Scenes / current scene*/\
	    { 0x0002, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (int8u*)0x0000 } }, /* 13 / Scenes / current group*/\
	    { 0x0003, ZCL_BOOLEAN_ATTRIBUTE_TYPE, 1, (0x00), { (int8u*)0x00 } }, /* 14 / Scenes / scene valid*/\
	    { 0x0004, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (0x00), { (int8u*)0x00 } }, /* 15 / Scenes / name support*/\
	    { 0x0000, ZCL_BOOLEAN_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_TOKENIZE), { (int8u*)0x00 } }, /* 16 / On/off / on/off*/\
	  }


	// Cluster function static arrays
	#define GENERATED_FUNCTION_ARRAYS \
	PGM EmberAfGenericClusterFunction emberAfFuncArrayIdentifyClusterServer[] = { (EmberAfGenericClusterFunction)emberAfIdentifyClusterServerInitCallback,(EmberAfGenericClusterFunction)emberAfIdentifyClusterServerAttributeChangedCallback}; \
	PGM EmberAfGenericClusterFunction emberAfFuncArrayGroupsClusterServer[] = { (EmberAfGenericClusterFunction)emberAfGroupsClusterServerInitCallback}; \
	PGM EmberAfGenericClusterFunction emberAfFuncArrayScenesClusterServer[] = { (EmberAfGenericClusterFunction)emberAfScenesClusterServerInitCallback}; \


	// Clusters defitions
	#define GENERATED_CLUSTERS { \
	    { 0x0000, (EmberAfAttributeMetadata*)&(generatedAttributes[0]), 8, 0, (CLUSTER_MASK_SERVER), NULL,  },    \
	    { 0x0003, (EmberAfAttributeMetadata*)&(generatedAttributes[8]), 0, 0, (CLUSTER_MASK_CLIENT), NULL,  },    \
	    { 0x0003, (EmberAfAttributeMetadata*)&(generatedAttributes[8]), 2, 3, (CLUSTER_MASK_SERVER| CLUSTER_MASK_INIT_FUNCTION| CLUSTER_MASK_ATTRIBUTE_CHANGED_FUNCTION), emberAfFuncArrayIdentifyClusterServer, },    \
	    { 0x0006, (EmberAfAttributeMetadata*)&(generatedAttributes[16]), 0, 0, (CLUSTER_MASK_CLIENT), NULL,  },    \
	    { 0x0000, (EmberAfAttributeMetadata*)&(generatedAttributes[0]), 8, 0, (CLUSTER_MASK_SERVER), NULL,  },    \
	    { 0x0003, (EmberAfAttributeMetadata*)&(generatedAttributes[8]), 0, 0, (CLUSTER_MASK_CLIENT), NULL,  },    \
	    { 0x0003, (EmberAfAttributeMetadata*)&(generatedAttributes[8]), 2, 3, (CLUSTER_MASK_SERVER| CLUSTER_MASK_INIT_FUNCTION| CLUSTER_MASK_ATTRIBUTE_CHANGED_FUNCTION), emberAfFuncArrayIdentifyClusterServer, },    \
	    { 0x0004, (EmberAfAttributeMetadata*)&(generatedAttributes[10]), 1, 1, (CLUSTER_MASK_SERVER| CLUSTER_MASK_INIT_FUNCTION), emberAfFuncArrayGroupsClusterServer, },    \
	    { 0x0005, (EmberAfAttributeMetadata*)&(generatedAttributes[11]), 5, 6, (CLUSTER_MASK_SERVER| CLUSTER_MASK_INIT_FUNCTION), emberAfFuncArrayScenesClusterServer, },    \
	    { 0x0006, (EmberAfAttributeMetadata*)&(generatedAttributes[16]), 1, 1, (CLUSTER_MASK_SERVER), NULL,  },    \
	    { 0x0000, (EmberAfAttributeMetadata*)&(generatedAttributes[0]), 8, 0, (CLUSTER_MASK_SERVER), NULL,  },    \
	    { 0x0003, (EmberAfAttributeMetadata*)&(generatedAttributes[8]), 0, 0, (CLUSTER_MASK_CLIENT), NULL,  },    \
	    { 0x0003, (EmberAfAttributeMetadata*)&(generatedAttributes[8]), 2, 3, (CLUSTER_MASK_SERVER| CLUSTER_MASK_INIT_FUNCTION| CLUSTER_MASK_ATTRIBUTE_CHANGED_FUNCTION), emberAfFuncArrayIdentifyClusterServer, },    \
	    { 0x0006, (EmberAfAttributeMetadata*)&(generatedAttributes[16]), 1, 1, (CLUSTER_MASK_SERVER), NULL,  },    \
	  }


	// Endpoint types
	#define GENERATED_ENDPOINT_TYPES {        \
	    { (EmberAfCluster*)&(generatedClusters[0]), 4, 3 }, \
	    { (EmberAfCluster*)&(generatedClusters[4]), 6, 11 }, \
	    { (EmberAfCluster*)&(generatedClusters[10]), 4, 4 }, \
	  }


	// Networks
	#define EM_AF_GENERATED_NETWORK_TYPES { \
	  EM_AF_NETWORK_TYPE_ZIGBEE_PRO, /* Primary */ \
	}
	#define EM_AF_GENERATED_ZIGBEE_PRO_NETWORKS { \
	  { \
	    /* Primary */ \
	    ZA_ROUTER, \
	    EMBER_AF_SECURITY_PROFILE_HA, \
	  }, \
	}
	#define EM_AF_GENERATED_NETWORK_STRINGS  \
	  "Primary (pro)", \


	// Cluster manufacturer codes
	#define GENERATED_CLUSTER_MANUFACTURER_CODES {      \
	{0x00, 0x00} \
	  }
	#define GENERATED_CLUSTER_MANUFACTURER_CODE_COUNT 0

	// Attribute manufacturer codes
	#define GENERATED_ATTRIBUTE_MANUFACTURER_CODES {      \
	{0x00, 0x00} \
	  }
	#define GENERATED_ATTRIBUTE_MANUFACTURER_CODE_COUNT 0


	// Largest attribute size is needed for various buffers
	#define ATTRIBUTE_LARGEST 33
	// Total size of singleton attributes
	#define ATTRIBUTE_SINGLETONS_SIZE 88

	// Total size of attribute storage
	#define ATTRIBUTE_MAX_SIZE 32

	// Array of endpoints that are supported
	#define FIXED_ENDPOINT_ARRAY { 1, 2, 3, 4, 15 }

	// Array of profile ids
	#define FIXED_PROFILE_IDS { 260, 260, 260, 260, 260 }

	// Array of profile ids
	#define FIXED_DEVICE_IDS { 256, 259, 256, 259, 256 }

	// Array of profile ids
	#define FIXED_DEVICE_VERSIONS { 1, 1, 1, 1, 1 }

	// Array of endpoint types supported on each endpoint
	#define FIXED_ENDPOINT_TYPES { 1, 0, 1, 0, 2 }

	// Array of networks supported on each endpoint
	#define FIXED_NETWORKS { 0, 0, 0, 0, 0 }


	// Code used to configure the cluster event mechanism
	#define EMBER_AF_GENERATED_EVENT_CODE \
	  EmberEventControl emberAfIdentifyClusterServerTickCallbackControl1; \
	  EmberEventControl emberAfIdentifyClusterServerTickCallbackControl2; \
	  EmberEventControl emberAfIdentifyClusterServerTickCallbackControl3; \
	  EmberEventControl emberAfIdentifyClusterServerTickCallbackControl4; \
	  EmberEventControl emberAfIdentifyClusterServerTickCallbackControl15; \
	  extern EmberEventControl emberAfPluginFormAndJoinCleanupEventControl; \
	  extern void emberAfPluginFormAndJoinCleanupEventHandler(void); \
	  extern EmberEventControl emberAfPluginIdentifyFeedbackProvideFeedbackEventControl; \
	  extern void emberAfPluginIdentifyFeedbackProvideFeedbackEventHandler(void); \
	  extern EmberEventControl emberAfPluginNetworkFindTickEventControl; \
	  extern void emberAfPluginNetworkFindTickEventHandler(void); \
	  extern EmberEventControl emberAfPluginReportingTickEventControl; \
	  extern void emberAfPluginReportingTickEventHandler(void); \
	  static void clusterTickWrapper(EmberEventControl *control, EmberAfTickFunction callback, int8u endpoint) \
	  { \
	    emberAfPushEndpointNetworkIndex(endpoint); \
	    emberEventControlSetInactive(*control); \
	    (*callback)(endpoint); \
	    emberAfPopNetworkIndex(); \
	  } \
	  void emberAfIdentifyClusterServerTickCallbackWrapperFunction1(void) { clusterTickWrapper(&emberAfIdentifyClusterServerTickCallbackControl1, emberAfIdentifyClusterServerTickCallback, 1); } \
	  void emberAfIdentifyClusterServerTickCallbackWrapperFunction2(void) { clusterTickWrapper(&emberAfIdentifyClusterServerTickCallbackControl2, emberAfIdentifyClusterServerTickCallback, 2); } \
	  void emberAfIdentifyClusterServerTickCallbackWrapperFunction3(void) { clusterTickWrapper(&emberAfIdentifyClusterServerTickCallbackControl3, emberAfIdentifyClusterServerTickCallback, 3); } \
	  void emberAfIdentifyClusterServerTickCallbackWrapperFunction4(void) { clusterTickWrapper(&emberAfIdentifyClusterServerTickCallbackControl4, emberAfIdentifyClusterServerTickCallback, 4); } \
	  void emberAfIdentifyClusterServerTickCallbackWrapperFunction15(void) { clusterTickWrapper(&emberAfIdentifyClusterServerTickCallbackControl15, emberAfIdentifyClusterServerTickCallback, 15); } \


	// EmberEventData structs used to populate the EmberEventData table
	#define EMBER_AF_GENERATED_EVENTS   \
	  { &emberAfIdentifyClusterServerTickCallbackControl1, emberAfIdentifyClusterServerTickCallbackWrapperFunction1 }, \
	  { &emberAfIdentifyClusterServerTickCallbackControl2, emberAfIdentifyClusterServerTickCallbackWrapperFunction2 }, \
	  { &emberAfIdentifyClusterServerTickCallbackControl3, emberAfIdentifyClusterServerTickCallbackWrapperFunction3 }, \
	  { &emberAfIdentifyClusterServerTickCallbackControl4, emberAfIdentifyClusterServerTickCallbackWrapperFunction4 }, \
	  { &emberAfIdentifyClusterServerTickCallbackControl15, emberAfIdentifyClusterServerTickCallbackWrapperFunction15 }, \
	  { &emberAfPluginFormAndJoinCleanupEventControl, emberAfPluginFormAndJoinCleanupEventHandler }, \
	  { &emberAfPluginIdentifyFeedbackProvideFeedbackEventControl, emberAfPluginIdentifyFeedbackProvideFeedbackEventHandler }, \
	  { &emberAfPluginNetworkFindTickEventControl, emberAfPluginNetworkFindTickEventHandler }, \
	  { &emberAfPluginReportingTickEventControl, emberAfPluginReportingTickEventHandler }, \


	#define EMBER_AF_GENERATED_EVENT_STRINGS   \
	  "Identify Cluster Server EP 1",  \
	  "Identify Cluster Server EP 2",  \
	  "Identify Cluster Server EP 3",  \
	  "Identify Cluster Server EP 4",  \
	  "Identify Cluster Server EP 15",  \
	  "Form and Join Library Plugin Cleanup",  \
	  "Identify Feedback Plugin ProvideFeedback",  \
	  "Network Find Plugin Tick",  \
	  "Reporting Plugin Tick",  \


	// The length of the event context table used to track and retrieve cluster events
	#define EMBER_AF_EVENT_CONTEXT_LENGTH 5

	// EmberAfEventContext structs used to populate the EmberAfEventContext table
	#define EMBER_AF_GENERATED_EVENT_CONTEXT { 0x1, 0x3, FALSE, EMBER_AF_LONG_POLL, EMBER_AF_OK_TO_SLEEP, &emberAfIdentifyClusterServerTickCallbackControl1}, \
	{ 0x2, 0x3, FALSE, EMBER_AF_LONG_POLL, EMBER_AF_OK_TO_SLEEP, &emberAfIdentifyClusterServerTickCallbackControl2}, \
	{ 0x3, 0x3, FALSE, EMBER_AF_LONG_POLL, EMBER_AF_OK_TO_SLEEP, &emberAfIdentifyClusterServerTickCallbackControl3}, \
	{ 0x4, 0x3, FALSE, EMBER_AF_LONG_POLL, EMBER_AF_OK_TO_SLEEP, &emberAfIdentifyClusterServerTickCallbackControl4}, \
	{ 0xf, 0x3, FALSE, EMBER_AF_LONG_POLL, EMBER_AF_OK_TO_SLEEP, &emberAfIdentifyClusterServerTickCallbackControl15}


	#define EMBER_AF_GENERATED_PLUGIN_INIT_FUNCTION_DECLARATIONS \
	  void emberAfPluginAddressTableInitCallback(void); \
	  void emberAfPluginCountersInitCallback(void); \
	  void emberAfPluginNetworkFindInitCallback(void); \
	  void emberAfPluginReportingInitCallback(void); \


	#define EMBER_AF_GENERATED_PLUGIN_INIT_FUNCTION_CALLS \
	  emberAfPluginAddressTableInitCallback(); \
	  emberAfPluginCountersInitCallback(); \
	  emberAfPluginNetworkFindInitCallback(); \
	  emberAfPluginReportingInitCallback(); \


	#define EMBER_AF_GENERATED_PLUGIN_NCP_INIT_FUNCTION_DECLARATIONS \
	  void emberAfPluginAddressTableNcpInitCallback(boolean memoryAllocation); \


	#define EMBER_AF_GENERATED_PLUGIN_NCP_INIT_FUNCTION_CALLS \
	  emberAfPluginAddressTableNcpInitCallback(memoryAllocation); \


	#define EMBER_AF_GENERATED_PLUGIN_STACK_STATUS_FUNCTION_DECLARATIONS \
	  void emberAfPluginNetworkFindStackStatusCallback(EmberStatus status); \


	#define EMBER_AF_GENERATED_PLUGIN_STACK_STATUS_FUNCTION_CALLS \
	  emberAfPluginNetworkFindStackStatusCallback(status); \


	#define EMBER_AF_GENERATED_PLUGIN_TICK_FUNCTION_DECLARATIONS \
	  void emberAfPluginIdleSleepTickCallback(void); \


	#define EMBER_AF_GENERATED_PLUGIN_TICK_FUNCTION_CALLS \
	  emberAfPluginIdleSleepTickCallback(); \

	// Generated data for the command discovery
	#define GENERATED_COMMANDS { \
	    { 0x0000, 0x00, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Basic / ResetToFactoryDefaults */ \
	    { 0x0003, 0x00, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Identify / Identify */ \
	    { 0x0003, 0x00, COMMAND_MASK_OUTGOING_SERVER | COMMAND_MASK_INCOMING_CLIENT }, /* Identify / IdentifyQueryResponse */ \
	    { 0x0003, 0x01, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Identify / IdentifyQuery */ \
	    { 0x0004, 0x00, COMMAND_MASK_OUTGOING_SERVER }, /* Groups / AddGroupResponse */ \
	    { 0x0004, 0x00, COMMAND_MASK_INCOMING_SERVER }, /* Groups / AddGroup */ \
	    { 0x0004, 0x01, COMMAND_MASK_OUTGOING_SERVER }, /* Groups / ViewGroupResponse */ \
	    { 0x0004, 0x01, COMMAND_MASK_INCOMING_SERVER }, /* Groups / ViewGroup */ \
	    { 0x0004, 0x02, COMMAND_MASK_OUTGOING_SERVER }, /* Groups / GetGroupMembershipResponse */ \
	    { 0x0004, 0x02, COMMAND_MASK_INCOMING_SERVER }, /* Groups / GetGroupMembership */ \
	    { 0x0004, 0x03, COMMAND_MASK_OUTGOING_SERVER }, /* Groups / RemoveGroupResponse */ \
	    { 0x0004, 0x03, COMMAND_MASK_INCOMING_SERVER }, /* Groups / RemoveGroup */ \
	    { 0x0004, 0x04, COMMAND_MASK_INCOMING_SERVER }, /* Groups / RemoveAllGroups */ \
	    { 0x0004, 0x05, COMMAND_MASK_INCOMING_SERVER }, /* Groups / AddGroupIfIdentifying */ \
	    { 0x0005, 0x00, COMMAND_MASK_OUTGOING_SERVER }, /* Scenes / AddSceneResponse */ \
	    { 0x0005, 0x00, COMMAND_MASK_INCOMING_SERVER }, /* Scenes / AddScene */ \
	    { 0x0005, 0x01, COMMAND_MASK_OUTGOING_SERVER }, /* Scenes / ViewSceneResponse */ \
	    { 0x0005, 0x01, COMMAND_MASK_INCOMING_SERVER }, /* Scenes / ViewScene */ \
	    { 0x0005, 0x02, COMMAND_MASK_OUTGOING_SERVER }, /* Scenes / RemoveSceneResponse */ \
	    { 0x0005, 0x02, COMMAND_MASK_INCOMING_SERVER }, /* Scenes / RemoveScene */ \
	    { 0x0005, 0x03, COMMAND_MASK_OUTGOING_SERVER }, /* Scenes / RemoveAllScenesResponse */ \
	    { 0x0005, 0x03, COMMAND_MASK_INCOMING_SERVER }, /* Scenes / RemoveAllScenes */ \
	    { 0x0005, 0x04, COMMAND_MASK_OUTGOING_SERVER }, /* Scenes / StoreSceneResponse */ \
	    { 0x0005, 0x04, COMMAND_MASK_INCOMING_SERVER }, /* Scenes / StoreScene */ \
	    { 0x0005, 0x05, COMMAND_MASK_INCOMING_SERVER }, /* Scenes / RecallScene */ \
	    { 0x0005, 0x06, COMMAND_MASK_OUTGOING_SERVER }, /* Scenes / GetSceneMembershipResponse */ \
	    { 0x0005, 0x06, COMMAND_MASK_INCOMING_SERVER }, /* Scenes / GetSceneMembership */ \
	    { 0x0006, 0x00, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* On/off / Off */ \
	    { 0x0006, 0x01, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* On/off / On */ \
	    { 0x0006, 0x02, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* On/off / Toggle */ \
	  }
	#define EMBER_AF_GENERATED_COMMAND_COUNT 30




#endif
#ifdef SWITCH_1_BUTTON
	// Fixed number of defined endpoints
	#define FIXED_ENDPOINT_COUNT 3


		// Generated defaults
				#if BIGENDIAN_CPU
				#define GENERATED_DEFAULTS { \
				ManufacturerName/* 0,Default value: Basic,manufacturer name */, \
				ModelId /* 33,Default value: Basic,model identifier */, \
				  }
				#else // ! BIGENDIAN_CPU
				#define GENERATED_DEFAULTS { \
				ManufacturerName/* 0,Default value: Basic,manufacturer name */, \
				ModelId /* 33,Default value: Basic,model identifier */, \
				  }
				#endif // BIGENDIAN_CPU




	// Generated attributes
	#define GENERATED_ATTRIBUTES { \
	    { 0x0000, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_TOKENIZE|ATTRIBUTE_MASK_SINGLETON), { (int8u*)0x01 } }, /* 0 / Basic / ZCL version*/\
	    { 0x0001, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (int8u*)0x01 } }, /* 1 / Basic / application version*/\
	    { 0x0002, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (int8u*)0x00 } }, /* 2 / Basic / stack version*/\
	    { 0x0003, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (int8u*)0x01 } }, /* 3 / Basic / hardware version*/\
	    { 0x0004, ZCL_CHAR_STRING_ATTRIBUTE_TYPE, 33, (ATTRIBUTE_MASK_TOKENIZE|ATTRIBUTE_MASK_SINGLETON), { (int8u*)&(generatedDefaults[0]) } }, /* 4 / Basic / manufacturer name*/\
	    { 0x0005, ZCL_CHAR_STRING_ATTRIBUTE_TYPE, 33, (ATTRIBUTE_MASK_TOKENIZE|ATTRIBUTE_MASK_SINGLETON), { (int8u*)&(generatedDefaults[33]) } }, /* 5 / Basic / model identifier*/\
	    { 0x0006, ZCL_CHAR_STRING_ATTRIBUTE_TYPE, 17, (ATTRIBUTE_MASK_SINGLETON), { NULL } }, /* 6 / Basic / date code*/\
	    { 0x0007, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_TOKENIZE|ATTRIBUTE_MASK_SINGLETON), { (int8u*)0x01 } }, /* 7 / Basic / power source*/\
	    { 0x0000, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_WRITABLE), { (int8u*)0x0000 } }, /* 8 / Identify / identify time*/\
	    { 0x0001, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (0x00), { (int8u*)0x00 } }, /* 9 / Identify / commission state*/\
	    { 0x0000, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (0x00), { (int8u*)0x00 } }, /* 10 / Groups / name support*/\
	    { 0x0000, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (0x00), { (int8u*)0x00 } }, /* 11 / Scenes / scene count*/\
	    { 0x0001, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (0x00), { (int8u*)0x00 } }, /* 12 / Scenes / current scene*/\
	    { 0x0002, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (int8u*)0x0000 } }, /* 13 / Scenes / current group*/\
	    { 0x0003, ZCL_BOOLEAN_ATTRIBUTE_TYPE, 1, (0x00), { (int8u*)0x00 } }, /* 14 / Scenes / scene valid*/\
	    { 0x0004, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (0x00), { (int8u*)0x00 } }, /* 15 / Scenes / name support*/\
	    { 0x0000, ZCL_BOOLEAN_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_TOKENIZE), { (int8u*)0x00 } }, /* 16 / On/off / on/off*/\
	  }


	// Cluster function static arrays
	#define GENERATED_FUNCTION_ARRAYS \
	PGM EmberAfGenericClusterFunction emberAfFuncArrayIdentifyClusterServer[] = { (EmberAfGenericClusterFunction)emberAfIdentifyClusterServerInitCallback,(EmberAfGenericClusterFunction)emberAfIdentifyClusterServerAttributeChangedCallback}; \
	PGM EmberAfGenericClusterFunction emberAfFuncArrayGroupsClusterServer[] = { (EmberAfGenericClusterFunction)emberAfGroupsClusterServerInitCallback}; \
	PGM EmberAfGenericClusterFunction emberAfFuncArrayScenesClusterServer[] = { (EmberAfGenericClusterFunction)emberAfScenesClusterServerInitCallback}; \


	// Clusters defitions
	#define GENERATED_CLUSTERS { \
	    { 0x0000, (EmberAfAttributeMetadata*)&(generatedAttributes[0]), 8, 0, (CLUSTER_MASK_SERVER), NULL,  },    \
	    { 0x0003, (EmberAfAttributeMetadata*)&(generatedAttributes[8]), 0, 0, (CLUSTER_MASK_CLIENT), NULL,  },    \
	    { 0x0003, (EmberAfAttributeMetadata*)&(generatedAttributes[8]), 2, 3, (CLUSTER_MASK_SERVER| CLUSTER_MASK_INIT_FUNCTION| CLUSTER_MASK_ATTRIBUTE_CHANGED_FUNCTION), emberAfFuncArrayIdentifyClusterServer, },    \
	    { 0x0006, (EmberAfAttributeMetadata*)&(generatedAttributes[16]), 0, 0, (CLUSTER_MASK_CLIENT), NULL,  },    \
	    { 0x0000, (EmberAfAttributeMetadata*)&(generatedAttributes[0]), 8, 0, (CLUSTER_MASK_SERVER), NULL,  },    \
	    { 0x0003, (EmberAfAttributeMetadata*)&(generatedAttributes[8]), 0, 0, (CLUSTER_MASK_CLIENT), NULL,  },    \
	    { 0x0003, (EmberAfAttributeMetadata*)&(generatedAttributes[8]), 2, 3, (CLUSTER_MASK_SERVER| CLUSTER_MASK_INIT_FUNCTION| CLUSTER_MASK_ATTRIBUTE_CHANGED_FUNCTION), emberAfFuncArrayIdentifyClusterServer, },    \
	    { 0x0004, (EmberAfAttributeMetadata*)&(generatedAttributes[10]), 1, 1, (CLUSTER_MASK_SERVER| CLUSTER_MASK_INIT_FUNCTION), emberAfFuncArrayGroupsClusterServer, },    \
	    { 0x0005, (EmberAfAttributeMetadata*)&(generatedAttributes[11]), 5, 6, (CLUSTER_MASK_SERVER| CLUSTER_MASK_INIT_FUNCTION), emberAfFuncArrayScenesClusterServer, },    \
	    { 0x0006, (EmberAfAttributeMetadata*)&(generatedAttributes[16]), 1, 1, (CLUSTER_MASK_SERVER), NULL,  },    \
	    { 0x0000, (EmberAfAttributeMetadata*)&(generatedAttributes[0]), 8, 0, (CLUSTER_MASK_SERVER), NULL,  },    \
	    { 0x0003, (EmberAfAttributeMetadata*)&(generatedAttributes[8]), 0, 0, (CLUSTER_MASK_CLIENT), NULL,  },    \
	    { 0x0003, (EmberAfAttributeMetadata*)&(generatedAttributes[8]), 2, 3, (CLUSTER_MASK_SERVER| CLUSTER_MASK_INIT_FUNCTION| CLUSTER_MASK_ATTRIBUTE_CHANGED_FUNCTION), emberAfFuncArrayIdentifyClusterServer, },    \
	    { 0x0006, (EmberAfAttributeMetadata*)&(generatedAttributes[16]), 1, 1, (CLUSTER_MASK_SERVER), NULL,  },    \
	  }


	// Endpoint types
	#define GENERATED_ENDPOINT_TYPES {        \
	    { (EmberAfCluster*)&(generatedClusters[0]), 4, 3 }, \
	    { (EmberAfCluster*)&(generatedClusters[4]), 6, 11 }, \
	    { (EmberAfCluster*)&(generatedClusters[10]), 4, 4 }, \
	  }


	// Networks
	#define EM_AF_GENERATED_NETWORK_TYPES { \
	  EM_AF_NETWORK_TYPE_ZIGBEE_PRO, /* Primary */ \
	}
	#define EM_AF_GENERATED_ZIGBEE_PRO_NETWORKS { \
	  { \
	    /* Primary */ \
	    ZA_ROUTER, \
	    EMBER_AF_SECURITY_PROFILE_HA, \
	  }, \
	}
	#define EM_AF_GENERATED_NETWORK_STRINGS  \
	  "Primary (pro)", \


	// Cluster manufacturer codes
	#define GENERATED_CLUSTER_MANUFACTURER_CODES {      \
	{0x00, 0x00} \
	  }
	#define GENERATED_CLUSTER_MANUFACTURER_CODE_COUNT 0

	// Attribute manufacturer codes
	#define GENERATED_ATTRIBUTE_MANUFACTURER_CODES {      \
	{0x00, 0x00} \
	  }
	#define GENERATED_ATTRIBUTE_MANUFACTURER_CODE_COUNT 0


	// Largest attribute size is needed for various buffers
	#define ATTRIBUTE_LARGEST 33
	// Total size of singleton attributes
	#define ATTRIBUTE_SINGLETONS_SIZE 88

	// Total size of attribute storage
	#define ATTRIBUTE_MAX_SIZE 18

	// Array of endpoints that are supported
	#define FIXED_ENDPOINT_ARRAY { 1, 2, 15 }

	// Array of profile ids
	#define FIXED_PROFILE_IDS { 260, 260, 260 }

	// Array of profile ids
	#define FIXED_DEVICE_IDS { 256, 259, 256 }

	// Array of profile ids
	#define FIXED_DEVICE_VERSIONS { 1, 1, 1 }

	// Array of endpoint types supported on each endpoint
	#define FIXED_ENDPOINT_TYPES { 1, 0, 2 }

	// Array of networks supported on each endpoint
	#define FIXED_NETWORKS { 0, 0, 0 }


	// Code used to configure the cluster event mechanism
	#define EMBER_AF_GENERATED_EVENT_CODE \
	  EmberEventControl emberAfIdentifyClusterServerTickCallbackControl1; \
	  EmberEventControl emberAfIdentifyClusterServerTickCallbackControl2; \
	  EmberEventControl emberAfIdentifyClusterServerTickCallbackControl15; \
	  extern EmberEventControl emberAfPluginFormAndJoinCleanupEventControl; \
	  extern void emberAfPluginFormAndJoinCleanupEventHandler(void); \
	  extern EmberEventControl emberAfPluginIdentifyFeedbackProvideFeedbackEventControl; \
	  extern void emberAfPluginIdentifyFeedbackProvideFeedbackEventHandler(void); \
	  extern EmberEventControl emberAfPluginNetworkFindTickEventControl; \
	  extern void emberAfPluginNetworkFindTickEventHandler(void); \
	  extern EmberEventControl emberAfPluginReportingTickEventControl; \
	  extern void emberAfPluginReportingTickEventHandler(void); \
	  static void clusterTickWrapper(EmberEventControl *control, EmberAfTickFunction callback, int8u endpoint) \
	  { \
	    emberAfPushEndpointNetworkIndex(endpoint); \
	    emberEventControlSetInactive(*control); \
	    (*callback)(endpoint); \
	    emberAfPopNetworkIndex(); \
	  } \
	  void emberAfIdentifyClusterServerTickCallbackWrapperFunction1(void) { clusterTickWrapper(&emberAfIdentifyClusterServerTickCallbackControl1, emberAfIdentifyClusterServerTickCallback, 1); } \
	  void emberAfIdentifyClusterServerTickCallbackWrapperFunction2(void) { clusterTickWrapper(&emberAfIdentifyClusterServerTickCallbackControl2, emberAfIdentifyClusterServerTickCallback, 2); } \
	  void emberAfIdentifyClusterServerTickCallbackWrapperFunction15(void) { clusterTickWrapper(&emberAfIdentifyClusterServerTickCallbackControl15, emberAfIdentifyClusterServerTickCallback, 15); } \


	// EmberEventData structs used to populate the EmberEventData table
	#define EMBER_AF_GENERATED_EVENTS   \
	  { &emberAfIdentifyClusterServerTickCallbackControl1, emberAfIdentifyClusterServerTickCallbackWrapperFunction1 }, \
	  { &emberAfIdentifyClusterServerTickCallbackControl2, emberAfIdentifyClusterServerTickCallbackWrapperFunction2 }, \
	  { &emberAfIdentifyClusterServerTickCallbackControl15, emberAfIdentifyClusterServerTickCallbackWrapperFunction15 }, \
	  { &emberAfPluginFormAndJoinCleanupEventControl, emberAfPluginFormAndJoinCleanupEventHandler }, \
	  { &emberAfPluginIdentifyFeedbackProvideFeedbackEventControl, emberAfPluginIdentifyFeedbackProvideFeedbackEventHandler }, \
	  { &emberAfPluginNetworkFindTickEventControl, emberAfPluginNetworkFindTickEventHandler }, \
	  { &emberAfPluginReportingTickEventControl, emberAfPluginReportingTickEventHandler }, \


	#define EMBER_AF_GENERATED_EVENT_STRINGS   \
	  "Identify Cluster Server EP 1",  \
	  "Identify Cluster Server EP 2",  \
	  "Identify Cluster Server EP 15",  \
	  "Form and Join Library Plugin Cleanup",  \
	  "Identify Feedback Plugin ProvideFeedback",  \
	  "Network Find Plugin Tick",  \
	  "Reporting Plugin Tick",  \


	// The length of the event context table used to track and retrieve cluster events
	#define EMBER_AF_EVENT_CONTEXT_LENGTH 3

	// EmberAfEventContext structs used to populate the EmberAfEventContext table
	#define EMBER_AF_GENERATED_EVENT_CONTEXT { 0x1, 0x3, FALSE, EMBER_AF_LONG_POLL, EMBER_AF_OK_TO_SLEEP, &emberAfIdentifyClusterServerTickCallbackControl1}, \
	{ 0x2, 0x3, FALSE, EMBER_AF_LONG_POLL, EMBER_AF_OK_TO_SLEEP, &emberAfIdentifyClusterServerTickCallbackControl2}, \
	{ 0xf, 0x3, FALSE, EMBER_AF_LONG_POLL, EMBER_AF_OK_TO_SLEEP, &emberAfIdentifyClusterServerTickCallbackControl15}


	#define EMBER_AF_GENERATED_PLUGIN_INIT_FUNCTION_DECLARATIONS \
	  void emberAfPluginAddressTableInitCallback(void); \
	  void emberAfPluginCountersInitCallback(void); \
	  void emberAfPluginNetworkFindInitCallback(void); \
	  void emberAfPluginReportingInitCallback(void); \


	#define EMBER_AF_GENERATED_PLUGIN_INIT_FUNCTION_CALLS \
	  emberAfPluginAddressTableInitCallback(); \
	  emberAfPluginCountersInitCallback(); \
	  emberAfPluginNetworkFindInitCallback(); \
	  emberAfPluginReportingInitCallback(); \


	#define EMBER_AF_GENERATED_PLUGIN_NCP_INIT_FUNCTION_DECLARATIONS \
	  void emberAfPluginAddressTableNcpInitCallback(boolean memoryAllocation); \


	#define EMBER_AF_GENERATED_PLUGIN_NCP_INIT_FUNCTION_CALLS \
	  emberAfPluginAddressTableNcpInitCallback(memoryAllocation); \


	#define EMBER_AF_GENERATED_PLUGIN_STACK_STATUS_FUNCTION_DECLARATIONS \
	  void emberAfPluginNetworkFindStackStatusCallback(EmberStatus status); \


	#define EMBER_AF_GENERATED_PLUGIN_STACK_STATUS_FUNCTION_CALLS \
	  emberAfPluginNetworkFindStackStatusCallback(status); \


	#define EMBER_AF_GENERATED_PLUGIN_TICK_FUNCTION_DECLARATIONS \
	  void emberAfPluginIdleSleepTickCallback(void); \


	#define EMBER_AF_GENERATED_PLUGIN_TICK_FUNCTION_CALLS \
	  emberAfPluginIdleSleepTickCallback(); \

	// Generated data for the command discovery
	#define GENERATED_COMMANDS { \
	    { 0x0000, 0x00, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Basic / ResetToFactoryDefaults */ \
	    { 0x0003, 0x00, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Identify / Identify */ \
	    { 0x0003, 0x00, COMMAND_MASK_OUTGOING_SERVER | COMMAND_MASK_INCOMING_CLIENT }, /* Identify / IdentifyQueryResponse */ \
	    { 0x0003, 0x01, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Identify / IdentifyQuery */ \
	    { 0x0004, 0x00, COMMAND_MASK_OUTGOING_SERVER }, /* Groups / AddGroupResponse */ \
	    { 0x0004, 0x00, COMMAND_MASK_INCOMING_SERVER }, /* Groups / AddGroup */ \
	    { 0x0004, 0x01, COMMAND_MASK_OUTGOING_SERVER }, /* Groups / ViewGroupResponse */ \
	    { 0x0004, 0x01, COMMAND_MASK_INCOMING_SERVER }, /* Groups / ViewGroup */ \
	    { 0x0004, 0x02, COMMAND_MASK_OUTGOING_SERVER }, /* Groups / GetGroupMembershipResponse */ \
	    { 0x0004, 0x02, COMMAND_MASK_INCOMING_SERVER }, /* Groups / GetGroupMembership */ \
	    { 0x0004, 0x03, COMMAND_MASK_OUTGOING_SERVER }, /* Groups / RemoveGroupResponse */ \
	    { 0x0004, 0x03, COMMAND_MASK_INCOMING_SERVER }, /* Groups / RemoveGroup */ \
	    { 0x0004, 0x04, COMMAND_MASK_INCOMING_SERVER }, /* Groups / RemoveAllGroups */ \
	    { 0x0004, 0x05, COMMAND_MASK_INCOMING_SERVER }, /* Groups / AddGroupIfIdentifying */ \
	    { 0x0005, 0x00, COMMAND_MASK_OUTGOING_SERVER }, /* Scenes / AddSceneResponse */ \
	    { 0x0005, 0x00, COMMAND_MASK_INCOMING_SERVER }, /* Scenes / AddScene */ \
	    { 0x0005, 0x01, COMMAND_MASK_OUTGOING_SERVER }, /* Scenes / ViewSceneResponse */ \
	    { 0x0005, 0x01, COMMAND_MASK_INCOMING_SERVER }, /* Scenes / ViewScene */ \
	    { 0x0005, 0x02, COMMAND_MASK_OUTGOING_SERVER }, /* Scenes / RemoveSceneResponse */ \
	    { 0x0005, 0x02, COMMAND_MASK_INCOMING_SERVER }, /* Scenes / RemoveScene */ \
	    { 0x0005, 0x03, COMMAND_MASK_OUTGOING_SERVER }, /* Scenes / RemoveAllScenesResponse */ \
	    { 0x0005, 0x03, COMMAND_MASK_INCOMING_SERVER }, /* Scenes / RemoveAllScenes */ \
	    { 0x0005, 0x04, COMMAND_MASK_OUTGOING_SERVER }, /* Scenes / StoreSceneResponse */ \
	    { 0x0005, 0x04, COMMAND_MASK_INCOMING_SERVER }, /* Scenes / StoreScene */ \
	    { 0x0005, 0x05, COMMAND_MASK_INCOMING_SERVER }, /* Scenes / RecallScene */ \
	    { 0x0005, 0x06, COMMAND_MASK_OUTGOING_SERVER }, /* Scenes / GetSceneMembershipResponse */ \
	    { 0x0005, 0x06, COMMAND_MASK_INCOMING_SERVER }, /* Scenes / GetSceneMembership */ \
	    { 0x0006, 0x00, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* On/off / Off */ \
	    { 0x0006, 0x01, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* On/off / On */ \
	    { 0x0006, 0x02, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* On/off / Toggle */ \
	  }
	#define EMBER_AF_GENERATED_COMMAND_COUNT 30





#endif

#ifdef DIMMER_TYPE

	#ifdef CURTAIN


			// Fixed number of defined endpoints
			#define FIXED_ENDPOINT_COUNT 2


			// Generated defaults
			#if BIGENDIAN_CPU
			#define GENERATED_DEFAULTS { \
							ManufacturerName/* 0,Default value: Basic,manufacturer name */, \
				ModelId /* 33,Default value: Basic,model identifier */, \
			  }
			#else // ! BIGENDIAN_CPU
			#define GENERATED_DEFAULTS { \
							ManufacturerName/* 0,Default value: Basic,manufacturer name */, \
				ModelId /* 33,Default value: Basic,model identifier */, \
			  }
			#endif // BIGENDIAN_CPU




			// Generated attributes
			#define GENERATED_ATTRIBUTES { \
			    { 0x0000, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_TOKENIZE|ATTRIBUTE_MASK_SINGLETON), { (int8u*)0x01 } }, /* 0 / Basic / ZCL version*/\
			    { 0x0001, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (int8u*)0x01 } }, /* 1 / Basic / application version*/\
			    { 0x0004, ZCL_CHAR_STRING_ATTRIBUTE_TYPE, 33, (ATTRIBUTE_MASK_TOKENIZE|ATTRIBUTE_MASK_SINGLETON), { (int8u*)&(generatedDefaults[0]) } }, /* 2 / Basic / manufacturer name*/\
			    { 0x0005, ZCL_CHAR_STRING_ATTRIBUTE_TYPE, 33, (ATTRIBUTE_MASK_TOKENIZE|ATTRIBUTE_MASK_SINGLETON), { (int8u*)&(generatedDefaults[33]) } }, /* 3 / Basic / model identifier*/\
			    { 0x0006, ZCL_CHAR_STRING_ATTRIBUTE_TYPE, 17, (0x00), { NULL } }, /* 4 / Basic / date code*/\
			    { 0x0007, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_TOKENIZE|ATTRIBUTE_MASK_SINGLETON), { (int8u*)0x01 } }, /* 5 / Basic / power source*/\
			    { 0x0000, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_WRITABLE), { (int8u*)0x0000 } }, /* 6 / Identify / identify time*/\
			    { 0x0001, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (0x00), { (int8u*)0x00 } }, /* 7 / Identify / commission state*/\
			    { 0x0000, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (0x00), { (int8u*)0x00 } }, /* 8 / Groups / name support*/\
			    { 0x0000, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (0x00), { (int8u*)0x00 } }, /* 9 / Scenes / scene count*/\
			    { 0x0001, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (0x00), { (int8u*)0x00 } }, /* 10 / Scenes / current scene*/\
			    { 0x0002, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (int8u*)0x0000 } }, /* 11 / Scenes / current group*/\
			    { 0x0003, ZCL_BOOLEAN_ATTRIBUTE_TYPE, 1, (0x00), { (int8u*)0x00 } }, /* 12 / Scenes / scene valid*/\
			    { 0x0004, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (0x00), { (int8u*)0x00 } }, /* 13 / Scenes / name support*/\
			    { 0x0000, ZCL_BOOLEAN_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_TOKENIZE), { (int8u*)0x00 } }, /* 14 / On/off / on/off*/\
			    { 0x0000, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (0x00), { (int8u*)0x00 } }, /* 15 / Level Control / current level*/\
			    { 0x0002, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE), { (int8u*)0x00 } }, /* 16 / Shade Configuration / status*/\
			    { 0x0010, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_WRITABLE), { (int8u*)0x00FF } }, /* 17 / Shade Configuration / closed limit*/\
			    { 0x0011, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE), { (int8u*)0x00 } }, /* 18 / Shade Configuration / mode*/\
			  }


			// Cluster function static arrays
			#define GENERATED_FUNCTION_ARRAYS \
			PGM EmberAfGenericClusterFunction emberAfFuncArrayIdentifyClusterServer[] = { (EmberAfGenericClusterFunction)emberAfIdentifyClusterServerInitCallback,(EmberAfGenericClusterFunction)emberAfIdentifyClusterServerAttributeChangedCallback}; \
			PGM EmberAfGenericClusterFunction emberAfFuncArrayGroupsClusterServer[] = { (EmberAfGenericClusterFunction)emberAfGroupsClusterServerInitCallback}; \
			PGM EmberAfGenericClusterFunction emberAfFuncArrayScenesClusterServer[] = { (EmberAfGenericClusterFunction)emberAfScenesClusterServerInitCallback}; \
			PGM EmberAfGenericClusterFunction emberAfFuncArrayLevelControlClusterServer[] = { (EmberAfGenericClusterFunction)emberAfLevelControlClusterServerInitCallback}; \


			// Clusters defitions
			#define GENERATED_CLUSTERS { \
			    { 0x0000, (EmberAfAttributeMetadata*)&(generatedAttributes[0]), 6, 17, (CLUSTER_MASK_SERVER), NULL,  },    \
			    { 0x0003, (EmberAfAttributeMetadata*)&(generatedAttributes[6]), 0, 0, (CLUSTER_MASK_CLIENT), NULL,  },    \
			    { 0x0003, (EmberAfAttributeMetadata*)&(generatedAttributes[6]), 2, 3, (CLUSTER_MASK_SERVER| CLUSTER_MASK_INIT_FUNCTION| CLUSTER_MASK_ATTRIBUTE_CHANGED_FUNCTION), emberAfFuncArrayIdentifyClusterServer, },    \
			    { 0x0004, (EmberAfAttributeMetadata*)&(generatedAttributes[8]), 1, 1, (CLUSTER_MASK_SERVER| CLUSTER_MASK_INIT_FUNCTION), emberAfFuncArrayGroupsClusterServer, },    \
			    { 0x0005, (EmberAfAttributeMetadata*)&(generatedAttributes[9]), 5, 6, (CLUSTER_MASK_SERVER| CLUSTER_MASK_INIT_FUNCTION), emberAfFuncArrayScenesClusterServer, },    \
			    { 0x0006, (EmberAfAttributeMetadata*)&(generatedAttributes[14]), 1, 1, (CLUSTER_MASK_SERVER), NULL,  },    \
			    { 0x0008, (EmberAfAttributeMetadata*)&(generatedAttributes[15]), 1, 1, (CLUSTER_MASK_SERVER| CLUSTER_MASK_INIT_FUNCTION), emberAfFuncArrayLevelControlClusterServer, },    \
			    { 0x0100, (EmberAfAttributeMetadata*)&(generatedAttributes[16]), 3, 4, (CLUSTER_MASK_SERVER), NULL,  },    \
			    { 0x0000, (EmberAfAttributeMetadata*)&(generatedAttributes[0]), 6, 17, (CLUSTER_MASK_SERVER), NULL,  },    \
			    { 0x0003, (EmberAfAttributeMetadata*)&(generatedAttributes[6]), 0, 0, (CLUSTER_MASK_CLIENT), NULL,  },    \
			    { 0x0003, (EmberAfAttributeMetadata*)&(generatedAttributes[6]), 2, 3, (CLUSTER_MASK_SERVER| CLUSTER_MASK_INIT_FUNCTION| CLUSTER_MASK_ATTRIBUTE_CHANGED_FUNCTION), emberAfFuncArrayIdentifyClusterServer, },    \
			    { 0x0006, (EmberAfAttributeMetadata*)&(generatedAttributes[14]), 0, 0, (CLUSTER_MASK_CLIENT), NULL,  },    \
			    { 0x0008, (EmberAfAttributeMetadata*)&(generatedAttributes[15]), 0, 0, (CLUSTER_MASK_CLIENT), NULL,  },    \
			  }


			// Endpoint types
			#define GENERATED_ENDPOINT_TYPES {        \
			    { (EmberAfCluster*)&(generatedClusters[0]), 8, 33 }, \
			    { (EmberAfCluster*)&(generatedClusters[8]), 5, 20 }, \
			  }


			// Networks
			#define EM_AF_GENERATED_NETWORK_TYPES { \
			  EM_AF_NETWORK_TYPE_ZIGBEE_PRO, /* Primary */ \
			}
			#define EM_AF_GENERATED_ZIGBEE_PRO_NETWORKS { \
			  { \
			    /* Primary */ \
			    ZA_ROUTER, \
			    EMBER_AF_SECURITY_PROFILE_HA, \
			  }, \
			}
			#define EM_AF_GENERATED_NETWORK_STRINGS  \
			  "Primary (pro)", \


			// Cluster manufacturer codes
			#define GENERATED_CLUSTER_MANUFACTURER_CODES {      \
			{0x00, 0x00} \
			  }
			#define GENERATED_CLUSTER_MANUFACTURER_CODE_COUNT 0

			// Attribute manufacturer codes
			#define GENERATED_ATTRIBUTE_MANUFACTURER_CODES {      \
			{0x00, 0x00} \
			  }
			#define GENERATED_ATTRIBUTE_MANUFACTURER_CODE_COUNT 0


			// Largest attribute size is needed for various buffers
			#define ATTRIBUTE_LARGEST 33
			// Total size of singleton attributes
			#define ATTRIBUTE_SINGLETONS_SIZE 69

			// Total size of attribute storage
			#define ATTRIBUTE_MAX_SIZE 53

			// Array of endpoints that are supported
			#define FIXED_ENDPOINT_ARRAY { 1, 2 }

			// Array of profile ids
			#define FIXED_PROFILE_IDS { 260, 260 }

			// Array of profile ids
			#define FIXED_DEVICE_IDS { 512, 513 }

			// Array of profile ids
			#define FIXED_DEVICE_VERSIONS { 1, 1 }

			// Array of endpoint types supported on each endpoint
			#define FIXED_ENDPOINT_TYPES { 0, 1 }

			// Array of networks supported on each endpoint
			#define FIXED_NETWORKS { 0, 0 }


			// Code used to configure the cluster event mechanism
			#define EMBER_AF_GENERATED_EVENT_CODE \
			  EmberEventControl emberAfIdentifyClusterServerTickCallbackControl1; \
			  EmberEventControl emberAfLevelControlClusterServerTickCallbackControl1; \
			  EmberEventControl emberAfIdentifyClusterServerTickCallbackControl2; \
			  extern EmberEventControl emberAfPluginFormAndJoinCleanupEventControl; \
			  extern void emberAfPluginFormAndJoinCleanupEventHandler(void); \
			  extern EmberEventControl emberAfPluginIdentifyFeedbackProvideFeedbackEventControl; \
			  extern void emberAfPluginIdentifyFeedbackProvideFeedbackEventHandler(void); \
			  extern EmberEventControl emberAfPluginNetworkFindTickEventControl; \
			  extern void emberAfPluginNetworkFindTickEventHandler(void); \
			  extern EmberEventControl emberAfPluginReportingTickEventControl; \
			  extern void emberAfPluginReportingTickEventHandler(void); \
			  static void clusterTickWrapper(EmberEventControl *control, EmberAfTickFunction callback, int8u endpoint) \
			  { \
			    emberAfPushEndpointNetworkIndex(endpoint); \
			    emberEventControlSetInactive(*control); \
			    (*callback)(endpoint); \
			    emberAfPopNetworkIndex(); \
			  } \
			  void emberAfIdentifyClusterServerTickCallbackWrapperFunction1(void) { clusterTickWrapper(&emberAfIdentifyClusterServerTickCallbackControl1, emberAfIdentifyClusterServerTickCallback, 1); } \
			  void emberAfLevelControlClusterServerTickCallbackWrapperFunction1(void) { clusterTickWrapper(&emberAfLevelControlClusterServerTickCallbackControl1, emberAfLevelControlClusterServerTickCallback, 1); } \
			  void emberAfIdentifyClusterServerTickCallbackWrapperFunction2(void) { clusterTickWrapper(&emberAfIdentifyClusterServerTickCallbackControl2, emberAfIdentifyClusterServerTickCallback, 2); } \


			// EmberEventData structs used to populate the EmberEventData table
			#define EMBER_AF_GENERATED_EVENTS   \
			  { &emberAfIdentifyClusterServerTickCallbackControl1, emberAfIdentifyClusterServerTickCallbackWrapperFunction1 }, \
			  { &emberAfLevelControlClusterServerTickCallbackControl1, emberAfLevelControlClusterServerTickCallbackWrapperFunction1 }, \
			  { &emberAfIdentifyClusterServerTickCallbackControl2, emberAfIdentifyClusterServerTickCallbackWrapperFunction2 }, \
			  { &emberAfPluginFormAndJoinCleanupEventControl, emberAfPluginFormAndJoinCleanupEventHandler }, \
			  { &emberAfPluginIdentifyFeedbackProvideFeedbackEventControl, emberAfPluginIdentifyFeedbackProvideFeedbackEventHandler }, \
			  { &emberAfPluginNetworkFindTickEventControl, emberAfPluginNetworkFindTickEventHandler }, \
			  { &emberAfPluginReportingTickEventControl, emberAfPluginReportingTickEventHandler }, \


			#define EMBER_AF_GENERATED_EVENT_STRINGS   \
			  "Identify Cluster Server EP 1",  \
			  "Level Control Cluster Server EP 1",  \
			  "Identify Cluster Server EP 2",  \
			  "Form and Join Library Plugin Cleanup",  \
			  "Identify Feedback Plugin ProvideFeedback",  \
			  "Network Find Plugin Tick",  \
			  "Reporting Plugin Tick",  \


			// The length of the event context table used to track and retrieve cluster events
			#define EMBER_AF_EVENT_CONTEXT_LENGTH 3

			// EmberAfEventContext structs used to populate the EmberAfEventContext table
			#define EMBER_AF_GENERATED_EVENT_CONTEXT { 0x1, 0x3, FALSE, EMBER_AF_LONG_POLL, EMBER_AF_OK_TO_SLEEP, &emberAfIdentifyClusterServerTickCallbackControl1}, \
			{ 0x1, 0x8, FALSE, EMBER_AF_LONG_POLL, EMBER_AF_OK_TO_SLEEP, &emberAfLevelControlClusterServerTickCallbackControl1}, \
			{ 0x2, 0x3, FALSE, EMBER_AF_LONG_POLL, EMBER_AF_OK_TO_SLEEP, &emberAfIdentifyClusterServerTickCallbackControl2}


			#define EMBER_AF_GENERATED_PLUGIN_INIT_FUNCTION_DECLARATIONS \
			  void emberAfPluginAddressTableInitCallback(void); \
			  void emberAfPluginCountersInitCallback(void); \
			  void emberAfPluginNetworkFindInitCallback(void); \
			  void emberAfPluginReportingInitCallback(void); \


			#define EMBER_AF_GENERATED_PLUGIN_INIT_FUNCTION_CALLS \
			  emberAfPluginAddressTableInitCallback(); \
			  emberAfPluginCountersInitCallback(); \
			  emberAfPluginNetworkFindInitCallback(); \
			  emberAfPluginReportingInitCallback(); \


			#define EMBER_AF_GENERATED_PLUGIN_NCP_INIT_FUNCTION_DECLARATIONS \
			  void emberAfPluginAddressTableNcpInitCallback(boolean memoryAllocation); \


			#define EMBER_AF_GENERATED_PLUGIN_NCP_INIT_FUNCTION_CALLS \
			  emberAfPluginAddressTableNcpInitCallback(memoryAllocation); \


			#define EMBER_AF_GENERATED_PLUGIN_STACK_STATUS_FUNCTION_DECLARATIONS \
			  void emberAfPluginNetworkFindStackStatusCallback(EmberStatus status); \


			#define EMBER_AF_GENERATED_PLUGIN_STACK_STATUS_FUNCTION_CALLS \
			  emberAfPluginNetworkFindStackStatusCallback(status); \


			#define EMBER_AF_GENERATED_PLUGIN_TICK_FUNCTION_DECLARATIONS \
			  void emberAfPluginIdleSleepTickCallback(void); \


			#define EMBER_AF_GENERATED_PLUGIN_TICK_FUNCTION_CALLS \
			  emberAfPluginIdleSleepTickCallback(); \

			// Generated data for the command discovery
			#define GENERATED_COMMANDS { \
			    { 0x0000, 0x00, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Basic / ResetToFactoryDefaults */ \
			    { 0x0003, 0x00, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Identify / Identify */ \
			    { 0x0003, 0x00, COMMAND_MASK_OUTGOING_SERVER | COMMAND_MASK_INCOMING_CLIENT }, /* Identify / IdentifyQueryResponse */ \
			    { 0x0003, 0x01, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Identify / IdentifyQuery */ \
			    { 0x0004, 0x00, COMMAND_MASK_OUTGOING_SERVER }, /* Groups / AddGroupResponse */ \
			    { 0x0004, 0x00, COMMAND_MASK_INCOMING_SERVER }, /* Groups / AddGroup */ \
			    { 0x0004, 0x01, COMMAND_MASK_OUTGOING_SERVER }, /* Groups / ViewGroupResponse */ \
			    { 0x0004, 0x01, COMMAND_MASK_INCOMING_SERVER }, /* Groups / ViewGroup */ \
			    { 0x0004, 0x02, COMMAND_MASK_OUTGOING_SERVER }, /* Groups / GetGroupMembershipResponse */ \
			    { 0x0004, 0x02, COMMAND_MASK_INCOMING_SERVER }, /* Groups / GetGroupMembership */ \
			    { 0x0004, 0x03, COMMAND_MASK_OUTGOING_SERVER }, /* Groups / RemoveGroupResponse */ \
			    { 0x0004, 0x03, COMMAND_MASK_INCOMING_SERVER }, /* Groups / RemoveGroup */ \
			    { 0x0004, 0x04, COMMAND_MASK_INCOMING_SERVER }, /* Groups / RemoveAllGroups */ \
			    { 0x0004, 0x05, COMMAND_MASK_INCOMING_SERVER }, /* Groups / AddGroupIfIdentifying */ \
			    { 0x0005, 0x00, COMMAND_MASK_OUTGOING_SERVER }, /* Scenes / AddSceneResponse */ \
			    { 0x0005, 0x00, COMMAND_MASK_INCOMING_SERVER }, /* Scenes / AddScene */ \
			    { 0x0005, 0x01, COMMAND_MASK_OUTGOING_SERVER }, /* Scenes / ViewSceneResponse */ \
			    { 0x0005, 0x01, COMMAND_MASK_INCOMING_SERVER }, /* Scenes / ViewScene */ \
			    { 0x0005, 0x02, COMMAND_MASK_OUTGOING_SERVER }, /* Scenes / RemoveSceneResponse */ \
			    { 0x0005, 0x02, COMMAND_MASK_INCOMING_SERVER }, /* Scenes / RemoveScene */ \
			    { 0x0005, 0x03, COMMAND_MASK_OUTGOING_SERVER }, /* Scenes / RemoveAllScenesResponse */ \
			    { 0x0005, 0x03, COMMAND_MASK_INCOMING_SERVER }, /* Scenes / RemoveAllScenes */ \
			    { 0x0005, 0x04, COMMAND_MASK_OUTGOING_SERVER }, /* Scenes / StoreSceneResponse */ \
			    { 0x0005, 0x04, COMMAND_MASK_INCOMING_SERVER }, /* Scenes / StoreScene */ \
			    { 0x0005, 0x05, COMMAND_MASK_INCOMING_SERVER }, /* Scenes / RecallScene */ \
			    { 0x0005, 0x06, COMMAND_MASK_OUTGOING_SERVER }, /* Scenes / GetSceneMembershipResponse */ \
			    { 0x0005, 0x06, COMMAND_MASK_INCOMING_SERVER }, /* Scenes / GetSceneMembership */ \
			    { 0x0006, 0x00, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* On/off / Off */ \
			    { 0x0006, 0x01, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* On/off / On */ \
			    { 0x0006, 0x02, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* On/off / Toggle */ \
			    { 0x0008, 0x00, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Level Control / MoveToLevel */ \
			    { 0x0008, 0x01, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Level Control / Move */ \
			    { 0x0008, 0x02, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Level Control / Step */ \
			    { 0x0008, 0x03, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Level Control / Stop */ \
			    { 0x0008, 0x04, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Level Control / MoveToLevelWithOnOff */ \
			    { 0x0008, 0x05, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Level Control / MoveWithOnOff */ \
			    { 0x0008, 0x06, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Level Control / StepWithOnOff */ \
			    { 0x0008, 0x07, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Level Control / StopWithOnOff */ \
			  }
			#define EMBER_AF_GENERATED_COMMAND_COUNT 38


	#else


	// Fixed number of defined endpoints
	#define FIXED_ENDPOINT_COUNT 2


	// Generated defaults
			#if BIGENDIAN_CPU
			#define GENERATED_DEFAULTS { \
			ManufacturerName/* 0,Default value: Basic,manufacturer name */, \
			ModelId /* 33,Default value: Basic,model identifier */, \
			  }
			#else // ! BIGENDIAN_CPU
			#define GENERATED_DEFAULTS { \
			ManufacturerName/* 0,Default value: Basic,manufacturer name */, \
			ModelId /* 33,Default value: Basic,model identifier */, \
			  }
			#endif // BIGENDIAN_CPU




	// Generated attributes
	#define GENERATED_ATTRIBUTES { \
	    { 0x0000, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_TOKENIZE|ATTRIBUTE_MASK_SINGLETON), { (int8u*)0x01 } }, /* 0 / Basic / ZCL version*/\
	    { 0x0001, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (int8u*)0x01 } }, /* 1 / Basic / application version*/\
	    { 0x0002, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (int8u*)0x00 } }, /* 2 / Basic / stack version*/\
	    { 0x0003, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (0x00), { (int8u*)0x01 } }, /* 3 / Basic / hardware version*/\
	    { 0x0004, ZCL_CHAR_STRING_ATTRIBUTE_TYPE, 33, (ATTRIBUTE_MASK_TOKENIZE|ATTRIBUTE_MASK_SINGLETON), { (int8u*)&(generatedDefaults[0]) } }, /* 4 / Basic / manufacturer name*/\
	    { 0x0005, ZCL_CHAR_STRING_ATTRIBUTE_TYPE, 33, (ATTRIBUTE_MASK_TOKENIZE|ATTRIBUTE_MASK_SINGLETON), { (int8u*)&(generatedDefaults[33]) } }, /* 5 / Basic / model identifier*/\
	    { 0x0006, ZCL_CHAR_STRING_ATTRIBUTE_TYPE, 17, (0x00), { NULL } }, /* 6 / Basic / date code*/\
	    { 0x0007, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_TOKENIZE|ATTRIBUTE_MASK_SINGLETON), { (int8u*)0x01 } }, /* 7 / Basic / power source*/\
	    { 0x0000, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_WRITABLE), { (int8u*)0x0000 } }, /* 8 / Identify / identify time*/\
	    { 0x0001, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (0x00), { (int8u*)0x00 } }, /* 9 / Identify / commission state*/\
	    { 0x0000, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (0x00), { (int8u*)0x00 } }, /* 10 / Groups / name support*/\
	    { 0x0000, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (0x00), { (int8u*)0x00 } }, /* 11 / Scenes / scene count*/\
	    { 0x0001, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (0x00), { (int8u*)0x00 } }, /* 12 / Scenes / current scene*/\
	    { 0x0002, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (int8u*)0x0000 } }, /* 13 / Scenes / current group*/\
	    { 0x0003, ZCL_BOOLEAN_ATTRIBUTE_TYPE, 1, (0x00), { (int8u*)0x00 } }, /* 14 / Scenes / scene valid*/\
	    { 0x0004, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (0x00), { (int8u*)0x00 } }, /* 15 / Scenes / name support*/\
	    { 0x0000, ZCL_BOOLEAN_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_TOKENIZE), { (int8u*)0x00 } }, /* 16 / On/off / on/off*/\
	    { 0x0000, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (0x00), { (int8u*)0x00 } }, /* 17 / Level Control / current level*/\
	  }


	// Cluster function static arrays
	#define GENERATED_FUNCTION_ARRAYS \
	PGM EmberAfGenericClusterFunction emberAfFuncArrayIdentifyClusterServer[] = { (EmberAfGenericClusterFunction)emberAfIdentifyClusterServerInitCallback,(EmberAfGenericClusterFunction)emberAfIdentifyClusterServerAttributeChangedCallback}; \
	PGM EmberAfGenericClusterFunction emberAfFuncArrayGroupsClusterServer[] = { (EmberAfGenericClusterFunction)emberAfGroupsClusterServerInitCallback}; \
	PGM EmberAfGenericClusterFunction emberAfFuncArrayScenesClusterServer[] = { (EmberAfGenericClusterFunction)emberAfScenesClusterServerInitCallback}; \
	PGM EmberAfGenericClusterFunction emberAfFuncArrayLevelControlClusterServer[] = { (EmberAfGenericClusterFunction)emberAfLevelControlClusterServerInitCallback}; \


	// Clusters defitions
	#define GENERATED_CLUSTERS { \
	    { 0x0000, (EmberAfAttributeMetadata*)&(generatedAttributes[0]), 8, 18, (CLUSTER_MASK_SERVER), NULL,  },    \
	    { 0x0003, (EmberAfAttributeMetadata*)&(generatedAttributes[8]), 0, 0, (CLUSTER_MASK_CLIENT), NULL,  },    \
	    { 0x0003, (EmberAfAttributeMetadata*)&(generatedAttributes[8]), 2, 3, (CLUSTER_MASK_SERVER| CLUSTER_MASK_INIT_FUNCTION| CLUSTER_MASK_ATTRIBUTE_CHANGED_FUNCTION), emberAfFuncArrayIdentifyClusterServer, },    \
	    { 0x0004, (EmberAfAttributeMetadata*)&(generatedAttributes[10]), 1, 1, (CLUSTER_MASK_SERVER| CLUSTER_MASK_INIT_FUNCTION), emberAfFuncArrayGroupsClusterServer, },    \
	    { 0x0005, (EmberAfAttributeMetadata*)&(generatedAttributes[11]), 5, 6, (CLUSTER_MASK_SERVER| CLUSTER_MASK_INIT_FUNCTION), emberAfFuncArrayScenesClusterServer, },    \
	    { 0x0006, (EmberAfAttributeMetadata*)&(generatedAttributes[16]), 1, 1, (CLUSTER_MASK_SERVER), NULL,  },    \
	    { 0x0008, (EmberAfAttributeMetadata*)&(generatedAttributes[17]), 1, 1, (CLUSTER_MASK_SERVER| CLUSTER_MASK_INIT_FUNCTION), emberAfFuncArrayLevelControlClusterServer, },    \
	    { 0x0000, (EmberAfAttributeMetadata*)&(generatedAttributes[0]), 8, 18, (CLUSTER_MASK_SERVER), NULL,  },    \
	    { 0x0003, (EmberAfAttributeMetadata*)&(generatedAttributes[8]), 0, 0, (CLUSTER_MASK_CLIENT), NULL,  },    \
	    { 0x0003, (EmberAfAttributeMetadata*)&(generatedAttributes[8]), 2, 3, (CLUSTER_MASK_SERVER| CLUSTER_MASK_INIT_FUNCTION| CLUSTER_MASK_ATTRIBUTE_CHANGED_FUNCTION), emberAfFuncArrayIdentifyClusterServer, },    \
	    { 0x0006, (EmberAfAttributeMetadata*)&(generatedAttributes[16]), 0, 0, (CLUSTER_MASK_CLIENT), NULL,  },    \
	    { 0x0008, (EmberAfAttributeMetadata*)&(generatedAttributes[17]), 0, 0, (CLUSTER_MASK_CLIENT), NULL,  },    \
	  }


	// Endpoint types
	#define GENERATED_ENDPOINT_TYPES {        \
	    { (EmberAfCluster*)&(generatedClusters[0]), 7, 30 }, \
	    { (EmberAfCluster*)&(generatedClusters[7]), 5, 21 }, \
	  }


	// Networks
	#define EM_AF_GENERATED_NETWORK_TYPES { \
	  EM_AF_NETWORK_TYPE_ZIGBEE_PRO, /* Primary */ \
	}
	#define EM_AF_GENERATED_ZIGBEE_PRO_NETWORKS { \
	  { \
	    /* Primary */ \
	    ZA_ROUTER, \
	    EMBER_AF_SECURITY_PROFILE_HA, \
	  }, \
	}
	#define EM_AF_GENERATED_NETWORK_STRINGS  \
	  "Primary (pro)", \


	// Cluster manufacturer codes
	#define GENERATED_CLUSTER_MANUFACTURER_CODES {      \
	{0x00, 0x00} \
	  }
	#define GENERATED_CLUSTER_MANUFACTURER_CODE_COUNT 0

	// Attribute manufacturer codes
	#define GENERATED_ATTRIBUTE_MANUFACTURER_CODES {      \
	{0x00, 0x00} \
	  }
	#define GENERATED_ATTRIBUTE_MANUFACTURER_CODE_COUNT 0


	// Largest attribute size is needed for various buffers
	#define ATTRIBUTE_LARGEST 33
	// Total size of singleton attributes
	#define ATTRIBUTE_SINGLETONS_SIZE 70

	// Total size of attribute storage
	#define ATTRIBUTE_MAX_SIZE 51

	// Array of endpoints that are supported
	#define FIXED_ENDPOINT_ARRAY { 1, 2 }

	// Array of profile ids
	#define FIXED_PROFILE_IDS { 260, 260 }

	// Array of profile ids
	#define FIXED_DEVICE_IDS { 257, 260 }

	// Array of profile ids
	#define FIXED_DEVICE_VERSIONS { 1, 1 }

	// Array of endpoint types supported on each endpoint
	#define FIXED_ENDPOINT_TYPES { 0, 1 }

	// Array of networks supported on each endpoint
	#define FIXED_NETWORKS { 0, 0 }


	// Code used to configure the cluster event mechanism
	#define EMBER_AF_GENERATED_EVENT_CODE \
	  EmberEventControl emberAfIdentifyClusterServerTickCallbackControl1; \
	  EmberEventControl emberAfLevelControlClusterServerTickCallbackControl1; \
	  EmberEventControl emberAfIdentifyClusterServerTickCallbackControl2; \
	  extern EmberEventControl emberAfPluginFormAndJoinCleanupEventControl; \
	  extern void emberAfPluginFormAndJoinCleanupEventHandler(void); \
	  extern EmberEventControl emberAfPluginIdentifyFeedbackProvideFeedbackEventControl; \
	  extern void emberAfPluginIdentifyFeedbackProvideFeedbackEventHandler(void); \
	  extern EmberEventControl emberAfPluginNetworkFindTickEventControl; \
	  extern void emberAfPluginNetworkFindTickEventHandler(void); \
	  extern EmberEventControl emberAfPluginReportingTickEventControl; \
	  extern void emberAfPluginReportingTickEventHandler(void); \
	  static void clusterTickWrapper(EmberEventControl *control, EmberAfTickFunction callback, int8u endpoint) \
	  { \
	    emberAfPushEndpointNetworkIndex(endpoint); \
	    emberEventControlSetInactive(*control); \
	    (*callback)(endpoint); \
	    emberAfPopNetworkIndex(); \
	  } \
	  void emberAfIdentifyClusterServerTickCallbackWrapperFunction1(void) { clusterTickWrapper(&emberAfIdentifyClusterServerTickCallbackControl1, emberAfIdentifyClusterServerTickCallback, 1); } \
	  void emberAfLevelControlClusterServerTickCallbackWrapperFunction1(void) { clusterTickWrapper(&emberAfLevelControlClusterServerTickCallbackControl1, emberAfLevelControlClusterServerTickCallback, 1); } \
	  void emberAfIdentifyClusterServerTickCallbackWrapperFunction2(void) { clusterTickWrapper(&emberAfIdentifyClusterServerTickCallbackControl2, emberAfIdentifyClusterServerTickCallback, 2); } \


	// EmberEventData structs used to populate the EmberEventData table
	#define EMBER_AF_GENERATED_EVENTS   \
	  { &emberAfIdentifyClusterServerTickCallbackControl1, emberAfIdentifyClusterServerTickCallbackWrapperFunction1 }, \
	  { &emberAfLevelControlClusterServerTickCallbackControl1, emberAfLevelControlClusterServerTickCallbackWrapperFunction1 }, \
	  { &emberAfIdentifyClusterServerTickCallbackControl2, emberAfIdentifyClusterServerTickCallbackWrapperFunction2 }, \
	  { &emberAfPluginFormAndJoinCleanupEventControl, emberAfPluginFormAndJoinCleanupEventHandler }, \
	  { &emberAfPluginIdentifyFeedbackProvideFeedbackEventControl, emberAfPluginIdentifyFeedbackProvideFeedbackEventHandler }, \
	  { &emberAfPluginNetworkFindTickEventControl, emberAfPluginNetworkFindTickEventHandler }, \
	  { &emberAfPluginReportingTickEventControl, emberAfPluginReportingTickEventHandler }, \


	#define EMBER_AF_GENERATED_EVENT_STRINGS   \
	  "Identify Cluster Server EP 1",  \
	  "Level Control Cluster Server EP 1",  \
	  "Identify Cluster Server EP 2",  \
	  "Form and Join Library Plugin Cleanup",  \
	  "Identify Feedback Plugin ProvideFeedback",  \
	  "Network Find Plugin Tick",  \
	  "Reporting Plugin Tick",  \


	// The length of the event context table used to track and retrieve cluster events
	#define EMBER_AF_EVENT_CONTEXT_LENGTH 3

	// EmberAfEventContext structs used to populate the EmberAfEventContext table
	#define EMBER_AF_GENERATED_EVENT_CONTEXT { 0x1, 0x3, FALSE, EMBER_AF_LONG_POLL, EMBER_AF_OK_TO_SLEEP, &emberAfIdentifyClusterServerTickCallbackControl1}, \
	{ 0x1, 0x8, FALSE, EMBER_AF_LONG_POLL, EMBER_AF_OK_TO_SLEEP, &emberAfLevelControlClusterServerTickCallbackControl1}, \
	{ 0x2, 0x3, FALSE, EMBER_AF_LONG_POLL, EMBER_AF_OK_TO_SLEEP, &emberAfIdentifyClusterServerTickCallbackControl2}


	#define EMBER_AF_GENERATED_PLUGIN_INIT_FUNCTION_DECLARATIONS \
	  void emberAfPluginAddressTableInitCallback(void); \
	  void emberAfPluginCountersInitCallback(void); \
	  void emberAfPluginNetworkFindInitCallback(void); \
	  void emberAfPluginReportingInitCallback(void); \


	#define EMBER_AF_GENERATED_PLUGIN_INIT_FUNCTION_CALLS \
	  emberAfPluginAddressTableInitCallback(); \
	  emberAfPluginCountersInitCallback(); \
	  emberAfPluginNetworkFindInitCallback(); \
	  emberAfPluginReportingInitCallback(); \


	#define EMBER_AF_GENERATED_PLUGIN_NCP_INIT_FUNCTION_DECLARATIONS \
	  void emberAfPluginAddressTableNcpInitCallback(boolean memoryAllocation); \


	#define EMBER_AF_GENERATED_PLUGIN_NCP_INIT_FUNCTION_CALLS \
	  emberAfPluginAddressTableNcpInitCallback(memoryAllocation); \


	#define EMBER_AF_GENERATED_PLUGIN_STACK_STATUS_FUNCTION_DECLARATIONS \
	  void emberAfPluginNetworkFindStackStatusCallback(EmberStatus status); \


	#define EMBER_AF_GENERATED_PLUGIN_STACK_STATUS_FUNCTION_CALLS \
	  emberAfPluginNetworkFindStackStatusCallback(status); \


	#define EMBER_AF_GENERATED_PLUGIN_TICK_FUNCTION_DECLARATIONS \
	  void emberAfPluginIdleSleepTickCallback(void); \


	#define EMBER_AF_GENERATED_PLUGIN_TICK_FUNCTION_CALLS \
	  emberAfPluginIdleSleepTickCallback(); \

	// Generated data for the command discovery
	#define GENERATED_COMMANDS { \
	    { 0x0000, 0x00, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Basic / ResetToFactoryDefaults */ \
	    { 0x0003, 0x00, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Identify / Identify */ \
	    { 0x0003, 0x00, COMMAND_MASK_OUTGOING_SERVER | COMMAND_MASK_INCOMING_CLIENT }, /* Identify / IdentifyQueryResponse */ \
	    { 0x0003, 0x01, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Identify / IdentifyQuery */ \
	    { 0x0004, 0x00, COMMAND_MASK_OUTGOING_SERVER }, /* Groups / AddGroupResponse */ \
	    { 0x0004, 0x00, COMMAND_MASK_INCOMING_SERVER }, /* Groups / AddGroup */ \
	    { 0x0004, 0x01, COMMAND_MASK_OUTGOING_SERVER }, /* Groups / ViewGroupResponse */ \
	    { 0x0004, 0x01, COMMAND_MASK_INCOMING_SERVER }, /* Groups / ViewGroup */ \
	    { 0x0004, 0x02, COMMAND_MASK_OUTGOING_SERVER }, /* Groups / GetGroupMembershipResponse */ \
	    { 0x0004, 0x02, COMMAND_MASK_INCOMING_SERVER }, /* Groups / GetGroupMembership */ \
	    { 0x0004, 0x03, COMMAND_MASK_OUTGOING_SERVER }, /* Groups / RemoveGroupResponse */ \
	    { 0x0004, 0x03, COMMAND_MASK_INCOMING_SERVER }, /* Groups / RemoveGroup */ \
	    { 0x0004, 0x04, COMMAND_MASK_INCOMING_SERVER }, /* Groups / RemoveAllGroups */ \
	    { 0x0004, 0x05, COMMAND_MASK_INCOMING_SERVER }, /* Groups / AddGroupIfIdentifying */ \
	    { 0x0005, 0x00, COMMAND_MASK_OUTGOING_SERVER }, /* Scenes / AddSceneResponse */ \
	    { 0x0005, 0x00, COMMAND_MASK_INCOMING_SERVER }, /* Scenes / AddScene */ \
	    { 0x0005, 0x01, COMMAND_MASK_OUTGOING_SERVER }, /* Scenes / ViewSceneResponse */ \
	    { 0x0005, 0x01, COMMAND_MASK_INCOMING_SERVER }, /* Scenes / ViewScene */ \
	    { 0x0005, 0x02, COMMAND_MASK_OUTGOING_SERVER }, /* Scenes / RemoveSceneResponse */ \
	    { 0x0005, 0x02, COMMAND_MASK_INCOMING_SERVER }, /* Scenes / RemoveScene */ \
	    { 0x0005, 0x03, COMMAND_MASK_OUTGOING_SERVER }, /* Scenes / RemoveAllScenesResponse */ \
	    { 0x0005, 0x03, COMMAND_MASK_INCOMING_SERVER }, /* Scenes / RemoveAllScenes */ \
	    { 0x0005, 0x04, COMMAND_MASK_OUTGOING_SERVER }, /* Scenes / StoreSceneResponse */ \
	    { 0x0005, 0x04, COMMAND_MASK_INCOMING_SERVER }, /* Scenes / StoreScene */ \
	    { 0x0005, 0x05, COMMAND_MASK_INCOMING_SERVER }, /* Scenes / RecallScene */ \
	    { 0x0005, 0x06, COMMAND_MASK_OUTGOING_SERVER }, /* Scenes / GetSceneMembershipResponse */ \
	    { 0x0005, 0x06, COMMAND_MASK_INCOMING_SERVER }, /* Scenes / GetSceneMembership */ \
	    { 0x0006, 0x00, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* On/off / Off */ \
	    { 0x0006, 0x01, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* On/off / On */ \
	    { 0x0006, 0x02, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* On/off / Toggle */ \
	    { 0x0008, 0x00, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Level Control / MoveToLevel */ \
	    { 0x0008, 0x01, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Level Control / Move */ \
	    { 0x0008, 0x02, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Level Control / Step */ \
	    { 0x0008, 0x03, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Level Control / Stop */ \
	    { 0x0008, 0x04, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Level Control / MoveToLevelWithOnOff */ \
	    { 0x0008, 0x05, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Level Control / MoveWithOnOff */ \
	    { 0x0008, 0x06, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Level Control / StepWithOnOff */ \
	    { 0x0008, 0x07, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Level Control / StopWithOnOff */ \
	  }
	#define EMBER_AF_GENERATED_COMMAND_COUNT 38

	#endif

	#endif // __AF_ENDPOINT_CONFIG__
#endif